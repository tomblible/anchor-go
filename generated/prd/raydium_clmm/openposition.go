// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// #[deprecated(note = "Use `open_position_with_token22_nft` instead.")]
// Creates a new position wrapped in a NFT
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `tick_lower_index` - The low boundary of market
// * `tick_upper_index` - The upper boundary of market
// * `tick_array_lower_start_index` - The start index of tick array which include tick low
// * `tick_array_upper_start_index` - The start index of tick array which include tick upper
// * `liquidity` - The liquidity to be added
// * `amount_0_max` - The max amount of token_0 to spend, which serves as a slippage check
// * `amount_1_max` - The max amount of token_1 to spend, which serves as a slippage check
//
type OpenPosition struct {
	TickLowerIndex           *int32
	TickUpperIndex           *int32
	TickArrayLowerStartIndex *int32
	TickArrayUpperStartIndex *int32
	Liquidity                *ag_binary.Uint128
	Amount0Max               *uint64
	Amount1Max               *uint64

	// [0] = [WRITE, SIGNER] payer
	// ··········· Pays to mint the position
	//
	// [1] = [] position_nft_owner
	//
	// [2] = [WRITE, SIGNER] position_nft_mint
	// ··········· Unique token mint address
	//
	// [3] = [WRITE] position_nft_account
	// ··········· Token account where position NFT will be minted
	// ··········· This account created in the contract by cpi to avoid large stack variables
	//
	// [4] = [WRITE] metadata_account
	// ··········· To store metaplex metadata
	//
	// [5] = [WRITE] pool_state
	// ··········· Add liquidity for this pool
	//
	// [6] = [WRITE] protocol_position
	// ··········· Store the information of market marking in range
	//
	// [7] = [WRITE] tick_array_lower
	//
	// [8] = [WRITE] tick_array_upper
	//
	// [9] = [WRITE] personal_position
	// ··········· personal position state
	//
	// [10] = [WRITE] token_account0
	// ··········· The token_0 account deposit token to the pool
	//
	// [11] = [WRITE] token_account1
	// ··········· The token_1 account deposit token to the pool
	//
	// [12] = [WRITE] token_vault0
	// ··········· The address that holds pool tokens for token_0
	//
	// [13] = [WRITE] token_vault1
	// ··········· The address that holds pool tokens for token_1
	//
	// [14] = [] rent
	// ··········· Sysvar for token mint and ATA creation
	//
	// [15] = [] system_program
	// ··········· Program to create the position manager state account
	//
	// [16] = [] token_program
	// ··········· Program to create mint account and mint tokens
	//
	// [17] = [] associated_token_program
	// ··········· Program to create an ATA for receiving position NFT
	//
	// [18] = [] metadata_program
	// ··········· Program to create NFT metadata
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOpenPositionInstructionBuilder creates a new `OpenPosition` instruction builder.
func NewOpenPositionInstructionBuilder() *OpenPosition {
	nd := &OpenPosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 19),
	}
	return nd
}

// SetTickLowerIndex sets the "tick_lower_index" parameter.
func (inst *OpenPosition) SetTickLowerIndex(tick_lower_index int32) *OpenPosition {
	inst.TickLowerIndex = &tick_lower_index
	return inst
}

// SetTickUpperIndex sets the "tick_upper_index" parameter.
func (inst *OpenPosition) SetTickUpperIndex(tick_upper_index int32) *OpenPosition {
	inst.TickUpperIndex = &tick_upper_index
	return inst
}

// SetTickArrayLowerStartIndex sets the "tick_array_lower_start_index" parameter.
func (inst *OpenPosition) SetTickArrayLowerStartIndex(tick_array_lower_start_index int32) *OpenPosition {
	inst.TickArrayLowerStartIndex = &tick_array_lower_start_index
	return inst
}

// SetTickArrayUpperStartIndex sets the "tick_array_upper_start_index" parameter.
func (inst *OpenPosition) SetTickArrayUpperStartIndex(tick_array_upper_start_index int32) *OpenPosition {
	inst.TickArrayUpperStartIndex = &tick_array_upper_start_index
	return inst
}

// SetLiquidity sets the "liquidity" parameter.
func (inst *OpenPosition) SetLiquidity(liquidity ag_binary.Uint128) *OpenPosition {
	inst.Liquidity = &liquidity
	return inst
}

// SetAmount0Max sets the "amount0_max" parameter.
func (inst *OpenPosition) SetAmount0Max(amount0_max uint64) *OpenPosition {
	inst.Amount0Max = &amount0_max
	return inst
}

// SetAmount1Max sets the "amount1_max" parameter.
func (inst *OpenPosition) SetAmount1Max(amount1_max uint64) *OpenPosition {
	inst.Amount1Max = &amount1_max
	return inst
}

// SetPayerAccount sets the "payer" account.
// Pays to mint the position
func (inst *OpenPosition) SetPayerAccount(payer ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Pays to mint the position
func (inst *OpenPosition) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionNftOwnerAccount sets the "position_nft_owner" account.
func (inst *OpenPosition) SetPositionNftOwnerAccount(positionNftOwner ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionNftOwner)
	return inst
}

// GetPositionNftOwnerAccount gets the "position_nft_owner" account.
func (inst *OpenPosition) GetPositionNftOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionNftMintAccount sets the "position_nft_mint" account.
// Unique token mint address
func (inst *OpenPosition) SetPositionNftMintAccount(positionNftMint ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(positionNftMint).WRITE().SIGNER()
	return inst
}

// GetPositionNftMintAccount gets the "position_nft_mint" account.
// Unique token mint address
func (inst *OpenPosition) GetPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionNftAccountAccount sets the "position_nft_account" account.
// Token account where position NFT will be minted
// This account created in the contract by cpi to avoid large stack variables
func (inst *OpenPosition) SetPositionNftAccountAccount(positionNftAccount ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionNftAccount).WRITE()
	return inst
}

// GetPositionNftAccountAccount gets the "position_nft_account" account.
// Token account where position NFT will be minted
// This account created in the contract by cpi to avoid large stack variables
func (inst *OpenPosition) GetPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMetadataAccountAccount sets the "metadata_account" account.
// To store metaplex metadata
func (inst *OpenPosition) SetMetadataAccountAccount(metadataAccount ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(metadataAccount).WRITE()
	return inst
}

// GetMetadataAccountAccount gets the "metadata_account" account.
// To store metaplex metadata
func (inst *OpenPosition) GetMetadataAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolStateAccount sets the "pool_state" account.
// Add liquidity for this pool
func (inst *OpenPosition) SetPoolStateAccount(poolState ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
// Add liquidity for this pool
func (inst *OpenPosition) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetProtocolPositionAccount sets the "protocol_position" account.
// Store the information of market marking in range
func (inst *OpenPosition) SetProtocolPositionAccount(protocolPosition ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(protocolPosition).WRITE()
	return inst
}

// GetProtocolPositionAccount gets the "protocol_position" account.
// Store the information of market marking in range
func (inst *OpenPosition) GetProtocolPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTickArrayLowerAccount sets the "tick_array_lower" account.
func (inst *OpenPosition) SetTickArrayLowerAccount(tickArrayLower ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tickArrayLower).WRITE()
	return inst
}

// GetTickArrayLowerAccount gets the "tick_array_lower" account.
func (inst *OpenPosition) GetTickArrayLowerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTickArrayUpperAccount sets the "tick_array_upper" account.
func (inst *OpenPosition) SetTickArrayUpperAccount(tickArrayUpper ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tickArrayUpper).WRITE()
	return inst
}

// GetTickArrayUpperAccount gets the "tick_array_upper" account.
func (inst *OpenPosition) GetTickArrayUpperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPersonalPositionAccount sets the "personal_position" account.
// personal position state
func (inst *OpenPosition) SetPersonalPositionAccount(personalPosition ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(personalPosition).WRITE()
	return inst
}

// GetPersonalPositionAccount gets the "personal_position" account.
// personal position state
func (inst *OpenPosition) GetPersonalPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenAccount0Account sets the "token_account0" account.
// The token_0 account deposit token to the pool
func (inst *OpenPosition) SetTokenAccount0Account(tokenAccount0 ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenAccount0).WRITE()
	return inst
}

// GetTokenAccount0Account gets the "token_account0" account.
// The token_0 account deposit token to the pool
func (inst *OpenPosition) GetTokenAccount0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenAccount1Account sets the "token_account1" account.
// The token_1 account deposit token to the pool
func (inst *OpenPosition) SetTokenAccount1Account(tokenAccount1 ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenAccount1).WRITE()
	return inst
}

// GetTokenAccount1Account gets the "token_account1" account.
// The token_1 account deposit token to the pool
func (inst *OpenPosition) GetTokenAccount1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenVault0Account sets the "token_vault0" account.
// The address that holds pool tokens for token_0
func (inst *OpenPosition) SetTokenVault0Account(tokenVault0 ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenVault0).WRITE()
	return inst
}

// GetTokenVault0Account gets the "token_vault0" account.
// The address that holds pool tokens for token_0
func (inst *OpenPosition) GetTokenVault0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenVault1Account sets the "token_vault1" account.
// The address that holds pool tokens for token_1
func (inst *OpenPosition) SetTokenVault1Account(tokenVault1 ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenVault1).WRITE()
	return inst
}

// GetTokenVault1Account gets the "token_vault1" account.
// The address that holds pool tokens for token_1
func (inst *OpenPosition) GetTokenVault1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetRentAccount sets the "rent" account.
// Sysvar for token mint and ATA creation
func (inst *OpenPosition) SetRentAccount(rent ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Sysvar for token mint and ATA creation
func (inst *OpenPosition) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSystemProgramAccount sets the "system_program" account.
// Program to create the position manager state account
func (inst *OpenPosition) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// Program to create the position manager state account
func (inst *OpenPosition) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTokenProgramAccount sets the "token_program" account.
// Program to create mint account and mint tokens
func (inst *OpenPosition) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// Program to create mint account and mint tokens
func (inst *OpenPosition) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
// Program to create an ATA for receiving position NFT
func (inst *OpenPosition) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
// Program to create an ATA for receiving position NFT
func (inst *OpenPosition) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetMetadataProgramAccount sets the "metadata_program" account.
// Program to create NFT metadata
func (inst *OpenPosition) SetMetadataProgramAccount(metadataProgram ag_solanago.PublicKey) *OpenPosition {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(metadataProgram)
	return inst
}

// GetMetadataProgramAccount gets the "metadata_program" account.
// Program to create NFT metadata
func (inst *OpenPosition) GetMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

func (inst *OpenPosition) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *OpenPosition) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *OpenPosition {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:19], metas...)
	return inst
}

func (inst *OpenPosition) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[19:]
}

func (inst OpenPosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OpenPosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OpenPosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OpenPosition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TickLowerIndex == nil {
			return errors.New("tickLowerIndex parameter is not set")
		}
		if inst.TickUpperIndex == nil {
			return errors.New("tickUpperIndex parameter is not set")
		}
		if inst.TickArrayLowerStartIndex == nil {
			return errors.New("tickArrayLowerStartIndex parameter is not set")
		}
		if inst.TickArrayUpperStartIndex == nil {
			return errors.New("tickArrayUpperStartIndex parameter is not set")
		}
		if inst.Liquidity == nil {
			return errors.New("liquidity parameter is not set")
		}
		if inst.Amount0Max == nil {
			return errors.New("amount0Max parameter is not set")
		}
		if inst.Amount1Max == nil {
			return errors.New("amount1Max parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 19 {
		return errors.New("accounts slice has wrong length: expected 19 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionNftOwner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PositionNftMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MetadataAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ProtocolPosition is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TickArrayLower is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TickArrayUpper is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PersonalPosition is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenAccount0 is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenAccount1 is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenVault0 is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenVault1 is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.MetadataProgram is not set")
		}
	}
	return nil
}

func (inst *OpenPosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OpenPosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=7]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              TickLowerIndex", *inst.TickLowerIndex))
						paramsBranch.Child(ag_format.Param("              TickUpperIndex", *inst.TickUpperIndex))
						paramsBranch.Child(ag_format.Param("    TickArrayLowerStartIndex", *inst.TickArrayLowerStartIndex))
						paramsBranch.Child(ag_format.Param("    TickArrayUpperStartIndex", *inst.TickArrayUpperStartIndex))
						paramsBranch.Child(ag_format.Param("                   Liquidity", *inst.Liquidity))
						paramsBranch.Child(ag_format.Param("                  Amount0Max", *inst.Amount0Max))
						paramsBranch.Child(ag_format.Param("                  Amount1Max", *inst.Amount1Max))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=19]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      position_nft_owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       position_nft_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           position_nft_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               metadata_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              pool_state", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       protocol_position", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        tick_array_lower", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        tick_array_upper", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       personal_position", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          token_account0", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("          token_account1", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("            token_vault0", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("            token_vault1", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                    rent", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("        metadata_program", inst.AccountMetaSlice.Get(18)))
					})
				})
		})
}

func (obj OpenPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `TickArrayLowerStartIndex` param:
	err = encoder.Encode(obj.TickArrayLowerStartIndex)
	if err != nil {
		return err
	}
	// Serialize `TickArrayUpperStartIndex` param:
	err = encoder.Encode(obj.TickArrayUpperStartIndex)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `Amount0Max` param:
	err = encoder.Encode(obj.Amount0Max)
	if err != nil {
		return err
	}
	// Serialize `Amount1Max` param:
	err = encoder.Encode(obj.Amount1Max)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OpenPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickArrayLowerStartIndex`:
	err = decoder.Decode(&obj.TickArrayLowerStartIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickArrayUpperStartIndex`:
	err = decoder.Decode(&obj.TickArrayUpperStartIndex)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `Amount0Max`:
	err = decoder.Decode(&obj.Amount0Max)
	if err != nil {
		return err
	}
	// Deserialize `Amount1Max`:
	err = decoder.Decode(&obj.Amount1Max)
	if err != nil {
		return err
	}
	return nil
}

// NewOpenPositionInstruction declares a new OpenPosition instruction with the provided parameters and accounts.
func NewOpenPositionInstruction(
	// Parameters:
	tick_lower_index int32,
	tick_upper_index int32,
	tick_array_lower_start_index int32,
	tick_array_upper_start_index int32,
	liquidity ag_binary.Uint128,
	amount0_max uint64,
	amount1_max uint64,
	// Accounts:
	payer ag_solanago.PublicKey,
	positionNftOwner ag_solanago.PublicKey,
	positionNftMint ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	protocolPosition ag_solanago.PublicKey,
	tickArrayLower ag_solanago.PublicKey,
	tickArrayUpper ag_solanago.PublicKey,
	personalPosition ag_solanago.PublicKey,
	tokenAccount0 ag_solanago.PublicKey,
	tokenAccount1 ag_solanago.PublicKey,
	tokenVault0 ag_solanago.PublicKey,
	tokenVault1 ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey) *OpenPosition {
	return NewOpenPositionInstructionBuilder().
		SetTickLowerIndex(tick_lower_index).
		SetTickUpperIndex(tick_upper_index).
		SetTickArrayLowerStartIndex(tick_array_lower_start_index).
		SetTickArrayUpperStartIndex(tick_array_upper_start_index).
		SetLiquidity(liquidity).
		SetAmount0Max(amount0_max).
		SetAmount1Max(amount1_max).
		SetPayerAccount(payer).
		SetPositionNftOwnerAccount(positionNftOwner).
		SetPositionNftMintAccount(positionNftMint).
		SetPositionNftAccountAccount(positionNftAccount).
		SetMetadataAccountAccount(metadataAccount).
		SetPoolStateAccount(poolState).
		SetProtocolPositionAccount(protocolPosition).
		SetTickArrayLowerAccount(tickArrayLower).
		SetTickArrayUpperAccount(tickArrayUpper).
		SetPersonalPositionAccount(personalPosition).
		SetTokenAccount0Account(tokenAccount0).
		SetTokenAccount1Account(tokenAccount1).
		SetTokenVault0Account(tokenVault0).
		SetTokenVault1Account(tokenVault1).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetMetadataProgramAccount(metadataProgram)
}

// NewSimpleOpenPositionInstruction declares a new OpenPosition instruction with the provided parameters and accounts.
func NewSimpleOpenPositionInstruction(
	// Parameters:
	tick_lower_index int32,
	tick_upper_index int32,
	tick_array_lower_start_index int32,
	tick_array_upper_start_index int32,
	liquidity ag_binary.Uint128,
	amount0_max uint64,
	amount1_max uint64,
	// Accounts:
	payer ag_solanago.PublicKey,
	positionNftOwner ag_solanago.PublicKey,
	positionNftMint ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	protocolPosition ag_solanago.PublicKey,
	tickArrayLower ag_solanago.PublicKey,
	tickArrayUpper ag_solanago.PublicKey,
	personalPosition ag_solanago.PublicKey,
	tokenAccount0 ag_solanago.PublicKey,
	tokenAccount1 ag_solanago.PublicKey,
	tokenVault0 ag_solanago.PublicKey,
	tokenVault1 ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey) *OpenPosition {
	return NewOpenPositionInstructionBuilder().
		SetTickLowerIndex(tick_lower_index).
		SetTickUpperIndex(tick_upper_index).
		SetTickArrayLowerStartIndex(tick_array_lower_start_index).
		SetTickArrayUpperStartIndex(tick_array_upper_start_index).
		SetLiquidity(liquidity).
		SetAmount0Max(amount0_max).
		SetAmount1Max(amount1_max).
		SetPayerAccount(payer).
		SetPositionNftOwnerAccount(positionNftOwner).
		SetPositionNftMintAccount(positionNftMint).
		SetPositionNftAccountAccount(positionNftAccount).
		SetMetadataAccountAccount(metadataAccount).
		SetPoolStateAccount(poolState).
		SetProtocolPositionAccount(protocolPosition).
		SetTickArrayLowerAccount(tickArrayLower).
		SetTickArrayUpperAccount(tickArrayUpper).
		SetPersonalPositionAccount(personalPosition).
		SetTokenAccount0Account(tokenAccount0).
		SetTokenAccount1Account(tokenAccount1).
		SetTokenVault0Account(tokenVault0).
		SetTokenVault1Account(tokenVault1).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetMetadataProgramAccount(metadataProgram)
}
