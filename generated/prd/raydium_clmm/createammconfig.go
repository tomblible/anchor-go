// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// # Arguments
//
// * `ctx`- The accounts needed by instruction.
// * `index` - The index of amm config, there may be multiple config.
// * `tick_spacing` - The tickspacing binding with config, cannot be changed.
// * `trade_fee_rate` - Trade fee rate, can be changed.
// * `protocol_fee_rate` - The rate of protocol fee within tarde fee.
// * `fund_fee_rate` - The rate of fund fee within tarde fee.
//
type CreateAmmConfig struct {
	Index           *uint16
	TickSpacing     *uint16
	TradeFeeRate    *uint32
	ProtocolFeeRate *uint32
	FundFeeRate     *uint32

	// [0] = [WRITE, SIGNER] owner
	// ··········· Address to be set as protocol owner.
	//
	// [1] = [WRITE] amm_config
	// ··········· Initialize config state account to store protocol owner address and fee rates.
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateAmmConfigInstructionBuilder creates a new `CreateAmmConfig` instruction builder.
func NewCreateAmmConfigInstructionBuilder() *CreateAmmConfig {
	nd := &CreateAmmConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetIndex sets the "index" parameter.
func (inst *CreateAmmConfig) SetIndex(index uint16) *CreateAmmConfig {
	inst.Index = &index
	return inst
}

// SetTickSpacing sets the "tick_spacing" parameter.
func (inst *CreateAmmConfig) SetTickSpacing(tick_spacing uint16) *CreateAmmConfig {
	inst.TickSpacing = &tick_spacing
	return inst
}

// SetTradeFeeRate sets the "trade_fee_rate" parameter.
func (inst *CreateAmmConfig) SetTradeFeeRate(trade_fee_rate uint32) *CreateAmmConfig {
	inst.TradeFeeRate = &trade_fee_rate
	return inst
}

// SetProtocolFeeRate sets the "protocol_fee_rate" parameter.
func (inst *CreateAmmConfig) SetProtocolFeeRate(protocol_fee_rate uint32) *CreateAmmConfig {
	inst.ProtocolFeeRate = &protocol_fee_rate
	return inst
}

// SetFundFeeRate sets the "fund_fee_rate" parameter.
func (inst *CreateAmmConfig) SetFundFeeRate(fund_fee_rate uint32) *CreateAmmConfig {
	inst.FundFeeRate = &fund_fee_rate
	return inst
}

// SetOwnerAccount sets the "owner" account.
// Address to be set as protocol owner.
func (inst *CreateAmmConfig) SetOwnerAccount(owner ag_solanago.PublicKey) *CreateAmmConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// Address to be set as protocol owner.
func (inst *CreateAmmConfig) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmConfigAccount sets the "amm_config" account.
// Initialize config state account to store protocol owner address and fee rates.
func (inst *CreateAmmConfig) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *CreateAmmConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(ammConfig).WRITE()
	return inst
}

// GetAmmConfigAccount gets the "amm_config" account.
// Initialize config state account to store protocol owner address and fee rates.
func (inst *CreateAmmConfig) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateAmmConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateAmmConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateAmmConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *CreateAmmConfig) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateAmmConfig) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateAmmConfig {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *CreateAmmConfig) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst CreateAmmConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateAmmConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateAmmConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateAmmConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Index == nil {
			return errors.New("index parameter is not set")
		}
		if inst.TickSpacing == nil {
			return errors.New("tickSpacing parameter is not set")
		}
		if inst.TradeFeeRate == nil {
			return errors.New("tradeFeeRate parameter is not set")
		}
		if inst.ProtocolFeeRate == nil {
			return errors.New("protocolFeeRate parameter is not set")
		}
		if inst.FundFeeRate == nil {
			return errors.New("fundFeeRate parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateAmmConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateAmmConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("            Index", *inst.Index))
						paramsBranch.Child(ag_format.Param("      TickSpacing", *inst.TickSpacing))
						paramsBranch.Child(ag_format.Param("     TradeFeeRate", *inst.TradeFeeRate))
						paramsBranch.Child(ag_format.Param("  ProtocolFeeRate", *inst.ProtocolFeeRate))
						paramsBranch.Child(ag_format.Param("      FundFeeRate", *inst.FundFeeRate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    amm_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj CreateAmmConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeRate` param:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `FundFeeRate` param:
	err = encoder.Encode(obj.FundFeeRate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateAmmConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `FundFeeRate`:
	err = decoder.Decode(&obj.FundFeeRate)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateAmmConfigInstruction declares a new CreateAmmConfig instruction with the provided parameters and accounts.
func NewCreateAmmConfigInstruction(
	// Parameters:
	index uint16,
	tick_spacing uint16,
	trade_fee_rate uint32,
	protocol_fee_rate uint32,
	fund_fee_rate uint32,
	// Accounts:
	owner ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateAmmConfig {
	return NewCreateAmmConfigInstructionBuilder().
		SetIndex(index).
		SetTickSpacing(tick_spacing).
		SetTradeFeeRate(trade_fee_rate).
		SetProtocolFeeRate(protocol_fee_rate).
		SetFundFeeRate(fund_fee_rate).
		SetOwnerAccount(owner).
		SetAmmConfigAccount(ammConfig).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleCreateAmmConfigInstruction declares a new CreateAmmConfig instruction with the provided parameters and accounts.
func NewSimpleCreateAmmConfigInstruction(
	// Parameters:
	index uint16,
	tick_spacing uint16,
	trade_fee_rate uint32,
	protocol_fee_rate uint32,
	fund_fee_rate uint32,
	// Accounts:
	owner ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateAmmConfig {
	return NewCreateAmmConfigInstructionBuilder().
		SetIndex(index).
		SetTickSpacing(tick_spacing).
		SetTradeFeeRate(trade_fee_rate).
		SetProtocolFeeRate(protocol_fee_rate).
		SetFundFeeRate(fund_fee_rate).
		SetOwnerAccount(owner).
		SetAmmConfigAccount(ammConfig).
		SetSystemProgramAccount(systemProgram)
}
