// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Restset reward param, start a new reward cycle or extend the current cycle.
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `reward_index` - The index of reward token in the pool.
// * `emissions_per_second_x64` - The per second emission reward, when extend the current cycle,
// new value can't be less than old value
// * `open_time` - reward open timestamp, must be set when state a new cycle
// * `end_time` - reward end timestamp
//
type SetRewardParams struct {
	RewardIndex           *uint8
	EmissionsPerSecondX64 *ag_binary.Uint128
	OpenTime              *uint64
	EndTime               *uint64

	// [0] = [SIGNER] authority
	// ··········· Address to be set as protocol owner. It pays to create factory state account.
	//
	// [1] = [] amm_config
	//
	// [2] = [WRITE] pool_state
	//
	// [3] = [] operation_state
	// ··········· load info from the account to judge reward permission
	//
	// [4] = [] token_program
	// ··········· Token program
	//
	// [5] = [] token_program2022
	// ··········· Token program 2022
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetRewardParamsInstructionBuilder creates a new `SetRewardParams` instruction builder.
func NewSetRewardParamsInstructionBuilder() *SetRewardParams {
	nd := &SetRewardParams{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetRewardIndex sets the "reward_index" parameter.
func (inst *SetRewardParams) SetRewardIndex(reward_index uint8) *SetRewardParams {
	inst.RewardIndex = &reward_index
	return inst
}

// SetEmissionsPerSecondX64 sets the "emissions_per_second_x64" parameter.
func (inst *SetRewardParams) SetEmissionsPerSecondX64(emissions_per_second_x64 ag_binary.Uint128) *SetRewardParams {
	inst.EmissionsPerSecondX64 = &emissions_per_second_x64
	return inst
}

// SetOpenTime sets the "open_time" parameter.
func (inst *SetRewardParams) SetOpenTime(open_time uint64) *SetRewardParams {
	inst.OpenTime = &open_time
	return inst
}

// SetEndTime sets the "end_time" parameter.
func (inst *SetRewardParams) SetEndTime(end_time uint64) *SetRewardParams {
	inst.EndTime = &end_time
	return inst
}

// SetAuthorityAccount sets the "authority" account.
// Address to be set as protocol owner. It pays to create factory state account.
func (inst *SetRewardParams) SetAuthorityAccount(authority ag_solanago.PublicKey) *SetRewardParams {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
// Address to be set as protocol owner. It pays to create factory state account.
func (inst *SetRewardParams) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmConfigAccount sets the "amm_config" account.
func (inst *SetRewardParams) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *SetRewardParams {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "amm_config" account.
func (inst *SetRewardParams) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolStateAccount sets the "pool_state" account.
func (inst *SetRewardParams) SetPoolStateAccount(poolState ag_solanago.PublicKey) *SetRewardParams {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
func (inst *SetRewardParams) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOperationStateAccount sets the "operation_state" account.
// load info from the account to judge reward permission
func (inst *SetRewardParams) SetOperationStateAccount(operationState ag_solanago.PublicKey) *SetRewardParams {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(operationState)
	return inst
}

// GetOperationStateAccount gets the "operation_state" account.
// load info from the account to judge reward permission
func (inst *SetRewardParams) GetOperationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "token_program" account.
// Token program
func (inst *SetRewardParams) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SetRewardParams {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// Token program
func (inst *SetRewardParams) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgram2022Account sets the "token_program2022" account.
// Token program 2022
func (inst *SetRewardParams) SetTokenProgram2022Account(tokenProgram2022 ag_solanago.PublicKey) *SetRewardParams {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram2022)
	return inst
}

// GetTokenProgram2022Account gets the "token_program2022" account.
// Token program 2022
func (inst *SetRewardParams) GetTokenProgram2022Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst *SetRewardParams) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetRewardParams) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetRewardParams {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:6], metas...)
	return inst
}

func (inst *SetRewardParams) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6:]
}

func (inst SetRewardParams) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetRewardParams,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetRewardParams) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetRewardParams) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("rewardIndex parameter is not set")
		}
		if inst.EmissionsPerSecondX64 == nil {
			return errors.New("emissionsPerSecondX64 parameter is not set")
		}
		if inst.OpenTime == nil {
			return errors.New("openTime parameter is not set")
		}
		if inst.EndTime == nil {
			return errors.New("endTime parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 6 {
		return errors.New("accounts slice has wrong length: expected 6 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OperationState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram2022 is not set")
		}
	}
	return nil
}

func (inst *SetRewardParams) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetRewardParams")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("             RewardIndex", *inst.RewardIndex))
						paramsBranch.Child(ag_format.Param("   EmissionsPerSecondX64", *inst.EmissionsPerSecondX64))
						paramsBranch.Child(ag_format.Param("                OpenTime", *inst.OpenTime))
						paramsBranch.Child(ag_format.Param("                 EndTime", *inst.EndTime))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       amm_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       pool_state", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  operation_state", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    token_program", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("token_program2022", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj SetRewardParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `EmissionsPerSecondX64` param:
	err = encoder.Encode(obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetRewardParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `EmissionsPerSecondX64`:
	err = decoder.Decode(&obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	return nil
}

// NewSetRewardParamsInstruction declares a new SetRewardParams instruction with the provided parameters and accounts.
func NewSetRewardParamsInstruction(
	// Parameters:
	reward_index uint8,
	emissions_per_second_x64 ag_binary.Uint128,
	open_time uint64,
	end_time uint64,
	// Accounts:
	authority ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	operationState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenProgram2022 ag_solanago.PublicKey) *SetRewardParams {
	return NewSetRewardParamsInstructionBuilder().
		SetRewardIndex(reward_index).
		SetEmissionsPerSecondX64(emissions_per_second_x64).
		SetOpenTime(open_time).
		SetEndTime(end_time).
		SetAuthorityAccount(authority).
		SetAmmConfigAccount(ammConfig).
		SetPoolStateAccount(poolState).
		SetOperationStateAccount(operationState).
		SetTokenProgramAccount(tokenProgram).
		SetTokenProgram2022Account(tokenProgram2022)
}

// NewSimpleSetRewardParamsInstruction declares a new SetRewardParams instruction with the provided parameters and accounts.
func NewSimpleSetRewardParamsInstruction(
	// Parameters:
	reward_index uint8,
	emissions_per_second_x64 ag_binary.Uint128,
	open_time uint64,
	end_time uint64,
	// Accounts:
	authority ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	operationState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenProgram2022 ag_solanago.PublicKey) *SetRewardParams {
	return NewSetRewardParamsInstructionBuilder().
		SetRewardIndex(reward_index).
		SetEmissionsPerSecondX64(emissions_per_second_x64).
		SetOpenTime(open_time).
		SetEndTime(end_time).
		SetAuthorityAccount(authority).
		SetAmmConfigAccount(ammConfig).
		SetPoolStateAccount(poolState).
		SetOperationStateAccount(operationState).
		SetTokenProgramAccount(tokenProgram).
		SetTokenProgram2022Account(tokenProgram2022)
}
