// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_clmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// #[deprecated(note = "Use `swap_v2` instead.")]
// Swaps one token for as much as possible of another token across a single pool
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount` - Arranged in pairs with other_amount_threshold. (amount_in, amount_out_minimum) or (amount_out, amount_in_maximum)
// * `other_amount_threshold` - For slippage check
// * `sqrt_price_limit` - The Q64.64 sqrt price √P limit. If zero for one, the price cannot
// * `is_base_input` - swap base input or swap base output
//
type Swap struct {
	Amount               *uint64
	OtherAmountThreshold *uint64
	SqrtPriceLimitX64    *ag_binary.Uint128
	IsBaseInput          *bool

	// [0] = [SIGNER] payer
	// ··········· The user performing the swap
	//
	// [1] = [] amm_config
	// ··········· The factory state to read protocol fees
	//
	// [2] = [WRITE] pool_state
	// ··········· The program account of the pool in which the swap will be performed
	//
	// [3] = [WRITE] input_token_account
	// ··········· The user token account for input token
	//
	// [4] = [WRITE] output_token_account
	// ··········· The user token account for output token
	//
	// [5] = [WRITE] input_vault
	// ··········· The vault token account for input token
	//
	// [6] = [WRITE] output_vault
	// ··········· The vault token account for output token
	//
	// [7] = [WRITE] observation_state
	// ··········· The program account for the most recent oracle observation
	//
	// [8] = [] token_program
	// ··········· SPL program for token transfers
	//
	// [9] = [WRITE] tick_array
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapInstructionBuilder creates a new `Swap` instruction builder.
func NewSwapInstructionBuilder() *Swap {
	nd := &Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *Swap) SetAmount(amount uint64) *Swap {
	inst.Amount = &amount
	return inst
}

// SetOtherAmountThreshold sets the "other_amount_threshold" parameter.
func (inst *Swap) SetOtherAmountThreshold(other_amount_threshold uint64) *Swap {
	inst.OtherAmountThreshold = &other_amount_threshold
	return inst
}

// SetSqrtPriceLimitX64 sets the "sqrt_price_limit_x64" parameter.
func (inst *Swap) SetSqrtPriceLimitX64(sqrt_price_limit_x64 ag_binary.Uint128) *Swap {
	inst.SqrtPriceLimitX64 = &sqrt_price_limit_x64
	return inst
}

// SetIsBaseInput sets the "is_base_input" parameter.
func (inst *Swap) SetIsBaseInput(is_base_input bool) *Swap {
	inst.IsBaseInput = &is_base_input
	return inst
}

// SetPayerAccount sets the "payer" account.
// The user performing the swap
func (inst *Swap) SetPayerAccount(payer ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// The user performing the swap
func (inst *Swap) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmConfigAccount sets the "amm_config" account.
// The factory state to read protocol fees
func (inst *Swap) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "amm_config" account.
// The factory state to read protocol fees
func (inst *Swap) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolStateAccount sets the "pool_state" account.
// The program account of the pool in which the swap will be performed
func (inst *Swap) SetPoolStateAccount(poolState ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
// The program account of the pool in which the swap will be performed
func (inst *Swap) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetInputTokenAccountAccount sets the "input_token_account" account.
// The user token account for input token
func (inst *Swap) SetInputTokenAccountAccount(inputTokenAccount ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(inputTokenAccount).WRITE()
	return inst
}

// GetInputTokenAccountAccount gets the "input_token_account" account.
// The user token account for input token
func (inst *Swap) GetInputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOutputTokenAccountAccount sets the "output_token_account" account.
// The user token account for output token
func (inst *Swap) SetOutputTokenAccountAccount(outputTokenAccount ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(outputTokenAccount).WRITE()
	return inst
}

// GetOutputTokenAccountAccount gets the "output_token_account" account.
// The user token account for output token
func (inst *Swap) GetOutputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetInputVaultAccount sets the "input_vault" account.
// The vault token account for input token
func (inst *Swap) SetInputVaultAccount(inputVault ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(inputVault).WRITE()
	return inst
}

// GetInputVaultAccount gets the "input_vault" account.
// The vault token account for input token
func (inst *Swap) GetInputVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOutputVaultAccount sets the "output_vault" account.
// The vault token account for output token
func (inst *Swap) SetOutputVaultAccount(outputVault ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(outputVault).WRITE()
	return inst
}

// GetOutputVaultAccount gets the "output_vault" account.
// The vault token account for output token
func (inst *Swap) GetOutputVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetObservationStateAccount sets the "observation_state" account.
// The program account for the most recent oracle observation
func (inst *Swap) SetObservationStateAccount(observationState ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(observationState).WRITE()
	return inst
}

// GetObservationStateAccount gets the "observation_state" account.
// The program account for the most recent oracle observation
func (inst *Swap) GetObservationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "token_program" account.
// SPL program for token transfers
func (inst *Swap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// SPL program for token transfers
func (inst *Swap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTickArrayAccount sets the "tick_array" account.
func (inst *Swap) SetTickArrayAccount(tickArray ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tickArray).WRITE()
	return inst
}

// GetTickArrayAccount gets the "tick_array" account.
func (inst *Swap) GetTickArrayAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *Swap) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Swap) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Swap {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *Swap) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Swap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Swap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("amount parameter is not set")
		}
		if inst.OtherAmountThreshold == nil {
			return errors.New("otherAmountThreshold parameter is not set")
		}
		if inst.SqrtPriceLimitX64 == nil {
			return errors.New("sqrtPriceLimitX64 parameter is not set")
		}
		if inst.IsBaseInput == nil {
			return errors.New("isBaseInput parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.InputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OutputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.InputVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OutputVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ObservationState is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TickArray is not set")
		}
	}
	return nil
}

func (inst *Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  OtherAmountThreshold", *inst.OtherAmountThreshold))
						paramsBranch.Child(ag_format.Param("     SqrtPriceLimitX64", *inst.SqrtPriceLimitX64))
						paramsBranch.Child(ag_format.Param("           IsBaseInput", *inst.IsBaseInput))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       amm_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       pool_state", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     input_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    output_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      input_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     output_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("observation_state", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       tick_array", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `OtherAmountThreshold` param:
	err = encoder.Encode(obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceLimitX64` param:
	err = encoder.Encode(obj.SqrtPriceLimitX64)
	if err != nil {
		return err
	}
	// Serialize `IsBaseInput` param:
	err = encoder.Encode(obj.IsBaseInput)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `OtherAmountThreshold`:
	err = decoder.Decode(&obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceLimitX64`:
	err = decoder.Decode(&obj.SqrtPriceLimitX64)
	if err != nil {
		return err
	}
	// Deserialize `IsBaseInput`:
	err = decoder.Decode(&obj.IsBaseInput)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSwapInstruction(
	// Parameters:
	amount uint64,
	other_amount_threshold uint64,
	sqrt_price_limit_x64 ag_binary.Uint128,
	is_base_input bool,
	// Accounts:
	payer ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	inputVault ag_solanago.PublicKey,
	outputVault ag_solanago.PublicKey,
	observationState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tickArray ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(other_amount_threshold).
		SetSqrtPriceLimitX64(sqrt_price_limit_x64).
		SetIsBaseInput(is_base_input).
		SetPayerAccount(payer).
		SetAmmConfigAccount(ammConfig).
		SetPoolStateAccount(poolState).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetInputVaultAccount(inputVault).
		SetOutputVaultAccount(outputVault).
		SetObservationStateAccount(observationState).
		SetTokenProgramAccount(tokenProgram).
		SetTickArrayAccount(tickArray)
}

// NewSimpleSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSimpleSwapInstruction(
	// Parameters:
	amount uint64,
	other_amount_threshold uint64,
	sqrt_price_limit_x64 ag_binary.Uint128,
	is_base_input bool,
	// Accounts:
	payer ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	inputVault ag_solanago.PublicKey,
	outputVault ag_solanago.PublicKey,
	observationState ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tickArray ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(other_amount_threshold).
		SetSqrtPriceLimitX64(sqrt_price_limit_x64).
		SetIsBaseInput(is_base_input).
		SetPayerAccount(payer).
		SetAmmConfigAccount(ammConfig).
		SetPoolStateAccount(poolState).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetInputVaultAccount(inputVault).
		SetOutputVaultAccount(outputVault).
		SetObservationStateAccount(observationState).
		SetTokenProgramAccount(tokenProgram).
		SetTickArrayAccount(tickArray)
}
