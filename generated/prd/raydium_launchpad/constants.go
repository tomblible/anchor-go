// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"encoding/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

func FindPlatformConfigAddress(platformAdmin ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706c6174666f726d5f636f6e666967
	seeds = append(seeds, []byte{byte(0x70), byte(0x6c), byte(0x61), byte(0x74), byte(0x66), byte(0x6f), byte(0x72), byte(0x6d), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67)})
	// path: platformAdmin
	seeds = append(seeds, platformAdmin.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPlatformConfigAddress(platformAdmin ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindPlatformConfigAddress(platformAdmin)
	return
}

func FindPoolStateAddress(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c)})
	// path: baseMint
	seeds = append(seeds, baseMint.Bytes())
	// path: quoteMint
	seeds = append(seeds, quoteMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPoolStateAddress(baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindPoolStateAddress(baseMint, quoteMint)
	return
}

func FindBaseVaultAddress(poolState ag_solanago.PublicKey, baseMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c5f7661756c74
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: baseMint
	seeds = append(seeds, baseMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBaseVaultAddress(poolState ag_solanago.PublicKey, baseMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindBaseVaultAddress(poolState, baseMint)
	return
}

func FindQuoteVaultAddress(poolState ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c5f7661756c74
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: quoteMint
	seeds = append(seeds, quoteMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindQuoteVaultAddress(poolState ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindQuoteVaultAddress(poolState, quoteMint)
	return
}

func FindVestingRecordAddress(poolState ag_solanago.PublicKey, beneficiary ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c5f76657374696e67
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x65), byte(0x73), byte(0x74), byte(0x69), byte(0x6e), byte(0x67)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: beneficiary
	seeds = append(seeds, beneficiary.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindVestingRecordAddress(poolState ag_solanago.PublicKey, beneficiary ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindVestingRecordAddress(poolState, beneficiary)
	return
}

func FindGlobalConfigAddress(quoteTokenMint ag_solanago.PublicKey, curveType uint8, index uint16) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x676c6f62616c5f636f6e666967
	seeds = append(seeds, []byte{byte(0x67), byte(0x6c), byte(0x6f), byte(0x62), byte(0x61), byte(0x6c), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67)})
	// path: quoteTokenMint
	seeds = append(seeds, quoteTokenMint.Bytes())
	// path: curveType
	argBytes2 := []byte{byte(curveType)}
	seeds = append(seeds, argBytes2)
	// path: index
	argBytes3 := make([]byte, 2)
	binary.LittleEndian.PutUint16(argBytes3, uint16(index))
	seeds = append(seeds, argBytes3)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindGlobalConfigAddress(quoteTokenMint ag_solanago.PublicKey, curveType uint8, index uint16) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindGlobalConfigAddress(quoteTokenMint, curveType, index)
	return
}
