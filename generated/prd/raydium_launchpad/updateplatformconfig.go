// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_launchpad

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Update platform config
// # Arguments
//
// * `ctx` - The context of accounts
// * `param` - Parameter to update
//
type UpdatePlatformConfig struct {
	Param PlatformConfigParam

	// [0] = [SIGNER] platform_admin
	// ··········· The account paying for the initialization costs
	//
	// [1] = [WRITE] platform_config
	// ··········· Platform config account to be changed
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdatePlatformConfigInstructionBuilder creates a new `UpdatePlatformConfig` instruction builder.
func NewUpdatePlatformConfigInstructionBuilder() *UpdatePlatformConfig {
	nd := &UpdatePlatformConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetParam sets the "param" parameter.
func (inst *UpdatePlatformConfig) SetParam(param PlatformConfigParam) *UpdatePlatformConfig {
	inst.Param = param
	return inst
}

// SetPlatformAdminAccount sets the "platform_admin" account.
// The account paying for the initialization costs
func (inst *UpdatePlatformConfig) SetPlatformAdminAccount(platformAdmin ag_solanago.PublicKey) *UpdatePlatformConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(platformAdmin).SIGNER()
	return inst
}

// GetPlatformAdminAccount gets the "platform_admin" account.
// The account paying for the initialization costs
func (inst *UpdatePlatformConfig) GetPlatformAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPlatformConfigAccount sets the "platform_config" account.
// Platform config account to be changed
func (inst *UpdatePlatformConfig) SetPlatformConfigAccount(platformConfig ag_solanago.PublicKey) *UpdatePlatformConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(platformConfig).WRITE()
	return inst
}

// GetPlatformConfigAccount gets the "platform_config" account.
// Platform config account to be changed
func (inst *UpdatePlatformConfig) GetPlatformConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst *UpdatePlatformConfig) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *UpdatePlatformConfig) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *UpdatePlatformConfig {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:2], metas...)
	return inst
}

func (inst *UpdatePlatformConfig) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2:]
}

func (inst UpdatePlatformConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdatePlatformConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdatePlatformConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdatePlatformConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Param == nil {
			return errors.New("param parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 2 {
		return errors.New("accounts slice has wrong length: expected 2 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PlatformAdmin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PlatformConfig is not set")
		}
	}
	return nil
}

func (inst *UpdatePlatformConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdatePlatformConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Param", inst.Param))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" platform_admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("platform_config", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdatePlatformConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Param` param:
	{
		tmp := platformConfigParamContainer{}
		switch realvalue := obj.Param.(type) {
		case *PlatformConfigParamFeeWalletTuple:
			tmp.Enum = 0
			tmp.FeeWallet = *realvalue
		case *PlatformConfigParamNFTWalletTuple:
			tmp.Enum = 1
			tmp.NFTWallet = *realvalue
		case *PlatformConfigParamMigrateNftInfoTuple:
			tmp.Enum = 2
			tmp.MigrateNftInfo = *realvalue
		case *PlatformConfigParamFeeRateTuple:
			tmp.Enum = 3
			tmp.FeeRate = *realvalue
		case *PlatformConfigParamNameTuple:
			tmp.Enum = 4
			tmp.Name = *realvalue
		case *PlatformConfigParamWebTuple:
			tmp.Enum = 5
			tmp.Web = *realvalue
		case *PlatformConfigParamImgTuple:
			tmp.Enum = 6
			tmp.Img = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *UpdatePlatformConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Param`:
	{
		tmp := new(platformConfigParamContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Param = &tmp.FeeWallet
		case 1:
			obj.Param = &tmp.NFTWallet
		case 2:
			obj.Param = &tmp.MigrateNftInfo
		case 3:
			obj.Param = &tmp.FeeRate
		case 4:
			obj.Param = &tmp.Name
		case 5:
			obj.Param = &tmp.Web
		case 6:
			obj.Param = &tmp.Img
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewUpdatePlatformConfigInstruction declares a new UpdatePlatformConfig instruction with the provided parameters and accounts.
func NewUpdatePlatformConfigInstruction(
	// Parameters:
	param PlatformConfigParam,
	// Accounts:
	platformAdmin ag_solanago.PublicKey,
	platformConfig ag_solanago.PublicKey) *UpdatePlatformConfig {
	return NewUpdatePlatformConfigInstructionBuilder().
		SetParam(param).
		SetPlatformAdminAccount(platformAdmin).
		SetPlatformConfigAccount(platformConfig)
}

// NewSimpleUpdatePlatformConfigInstruction declares a new UpdatePlatformConfig instruction with the provided parameters and accounts.
func NewSimpleUpdatePlatformConfigInstruction(
	// Parameters:
	param PlatformConfigParam,
	// Accounts:
	platformAdmin ag_solanago.PublicKey) *UpdatePlatformConfig {
	platformConfig := MustFindPlatformConfigAddress(platformAdmin)
	return NewUpdatePlatformConfigInstructionBuilder().
		SetParam(param).
		SetPlatformAdminAccount(platformAdmin).
		SetPlatformConfigAccount(platformConfig)
}
