// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hpnf

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Creates a permissionless farm switch account for the program
//
// # Arguments
//
// * `ctx`- The context of accounts
//
type CreatePermissionlessFarmSwitch struct {

	// [0] = [WRITE, SIGNER] owner
	//
	// [1] = [WRITE] permissionless_farm_switch
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreatePermissionlessFarmSwitchInstructionBuilder creates a new `CreatePermissionlessFarmSwitch` instruction builder.
func NewCreatePermissionlessFarmSwitchInstructionBuilder() *CreatePermissionlessFarmSwitch {
	nd := &CreatePermissionlessFarmSwitch{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Owner).WRITE().SIGNER()
	nd.AccountMetaSlice[1] = ag_solanago.Meta(PermissionlessFarmSwitchPDA).WRITE()
	nd.AccountMetaSlice[2] = ag_solanago.Meta(SystemProgram)
	return nd
}

// SetOwnerAccount sets the "owner" account.
func (inst *CreatePermissionlessFarmSwitch) SetOwnerAccount(owner ag_solanago.PublicKey) *CreatePermissionlessFarmSwitch {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CreatePermissionlessFarmSwitch) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPermissionlessFarmSwitchAccount sets the "permissionless_farm_switch" account.
func (inst *CreatePermissionlessFarmSwitch) SetPermissionlessFarmSwitchAccount(permissionlessFarmSwitch ag_solanago.PublicKey) *CreatePermissionlessFarmSwitch {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(permissionlessFarmSwitch).WRITE()
	return inst
}

// GetPermissionlessFarmSwitchAccount gets the "permissionless_farm_switch" account.
func (inst *CreatePermissionlessFarmSwitch) GetPermissionlessFarmSwitchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreatePermissionlessFarmSwitch) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreatePermissionlessFarmSwitch {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreatePermissionlessFarmSwitch) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *CreatePermissionlessFarmSwitch) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreatePermissionlessFarmSwitch) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreatePermissionlessFarmSwitch {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *CreatePermissionlessFarmSwitch) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst CreatePermissionlessFarmSwitch) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreatePermissionlessFarmSwitch,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreatePermissionlessFarmSwitch) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreatePermissionlessFarmSwitch) Validate() error {
	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PermissionlessFarmSwitch is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreatePermissionlessFarmSwitch) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreatePermissionlessFarmSwitch")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("permissionless_farm_switch", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj CreatePermissionlessFarmSwitch) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreatePermissionlessFarmSwitch) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreatePermissionlessFarmSwitchInstruction declares a new CreatePermissionlessFarmSwitch instruction with the provided parameters and accounts.
func NewCreatePermissionlessFarmSwitchInstruction() *CreatePermissionlessFarmSwitch {
	return NewCreatePermissionlessFarmSwitchInstructionBuilder()
}

// NewSimpleCreatePermissionlessFarmSwitchInstruction declares a new CreatePermissionlessFarmSwitch instruction with the provided parameters and accounts.
func NewSimpleCreatePermissionlessFarmSwitchInstruction() *CreatePermissionlessFarmSwitch {
	return NewCreatePermissionlessFarmSwitchInstructionBuilder()
}
