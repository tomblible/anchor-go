// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hpnf

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Creates an operation account for the program
//
// # Arguments
//
// * `ctx`- The context of accounts
//
type CreateOperationAccount struct {

	// [0] = [WRITE, SIGNER] owner
	// ··········· Address to be set as operation account owner.
	//
	// [1] = [WRITE] operation_state
	// ··········· Initialize operation state account to store operation owner address and white list mint.
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateOperationAccountInstructionBuilder creates a new `CreateOperationAccount` instruction builder.
func NewCreateOperationAccountInstructionBuilder() *CreateOperationAccount {
	nd := &CreateOperationAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Owner).WRITE().SIGNER()
	nd.AccountMetaSlice[1] = ag_solanago.Meta(OperationStatePDA).WRITE()
	nd.AccountMetaSlice[2] = ag_solanago.Meta(SystemProgram)
	return nd
}

// SetOwnerAccount sets the "owner" account.
// Address to be set as operation account owner.
func (inst *CreateOperationAccount) SetOwnerAccount(owner ag_solanago.PublicKey) *CreateOperationAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// Address to be set as operation account owner.
func (inst *CreateOperationAccount) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOperationStateAccount sets the "operation_state" account.
// Initialize operation state account to store operation owner address and white list mint.
func (inst *CreateOperationAccount) SetOperationStateAccount(operationState ag_solanago.PublicKey) *CreateOperationAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(operationState).WRITE()
	return inst
}

// GetOperationStateAccount gets the "operation_state" account.
// Initialize operation state account to store operation owner address and white list mint.
func (inst *CreateOperationAccount) GetOperationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateOperationAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateOperationAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateOperationAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *CreateOperationAccount) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateOperationAccount) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateOperationAccount {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *CreateOperationAccount) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst CreateOperationAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateOperationAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateOperationAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateOperationAccount) Validate() error {
	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OperationState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateOperationAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateOperationAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("operation_state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj CreateOperationAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateOperationAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateOperationAccountInstruction declares a new CreateOperationAccount instruction with the provided parameters and accounts.
func NewCreateOperationAccountInstruction() *CreateOperationAccount {
	return NewCreateOperationAccountInstructionBuilder()
}

// NewSimpleCreateOperationAccountInstruction declares a new CreateOperationAccount instruction with the provided parameters and accounts.
func NewSimpleCreateOperationAccountInstruction() *CreateOperationAccount {
	return NewCreateOperationAccountInstructionBuilder()
}
