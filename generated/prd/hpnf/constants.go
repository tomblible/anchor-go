// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hpnf

import (
	"encoding/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

func FindProtocolPositionAddress(poolState ag_solanago.PublicKey, personalPositionTickLowerIndex int32, personalPositionTickUpperIndex int32) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f736974696f6e
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x73), byte(0x69), byte(0x74), byte(0x69), byte(0x6f), byte(0x6e)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: personalPositionTickLowerIndex
	argBytes2 := make([]byte, 4)
	binary.LittleEndian.PutUint32(argBytes2, uint32(personalPositionTickLowerIndex))
	seeds = append(seeds, argBytes2)
	// path: personalPositionTickUpperIndex
	argBytes3 := make([]byte, 4)
	binary.LittleEndian.PutUint32(argBytes3, uint32(personalPositionTickUpperIndex))
	seeds = append(seeds, argBytes3)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindProtocolPositionAddress(poolState ag_solanago.PublicKey, personalPositionTickLowerIndex int32, personalPositionTickUpperIndex int32) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindProtocolPositionAddress(poolState, personalPositionTickLowerIndex, personalPositionTickUpperIndex)
	return
}

func FindTickArrayLowerAddress(poolState ag_solanago.PublicKey, tickArrayLowerStartIndex int32) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x7469636b5f6172726179
	seeds = append(seeds, []byte{byte(0x74), byte(0x69), byte(0x63), byte(0x6b), byte(0x5f), byte(0x61), byte(0x72), byte(0x72), byte(0x61), byte(0x79)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: tickArrayLowerStartIndex
	argBytes2 := make([]byte, 4)
	binary.LittleEndian.PutUint32(argBytes2, uint32(tickArrayLowerStartIndex))
	seeds = append(seeds, argBytes2)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTickArrayLowerAddress(poolState ag_solanago.PublicKey, tickArrayLowerStartIndex int32) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindTickArrayLowerAddress(poolState, tickArrayLowerStartIndex)
	return
}

func FindPersonalPositionAddress(positionNftMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f736974696f6e
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x73), byte(0x69), byte(0x74), byte(0x69), byte(0x6f), byte(0x6e)})
	// path: positionNftMint
	seeds = append(seeds, positionNftMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPersonalPositionAddress(positionNftMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindPersonalPositionAddress(positionNftMint)
	return
}

func FindAmmConfigAddress(index uint16) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x616d6d5f636f6e666967
	seeds = append(seeds, []byte{byte(0x61), byte(0x6d), byte(0x6d), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67)})
	// path: index
	argBytes1 := make([]byte, 2)
	binary.LittleEndian.PutUint16(argBytes1, uint16(index))
	seeds = append(seeds, argBytes1)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindAmmConfigAddress(index uint16) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindAmmConfigAddress(index)
	return
}

func FindTokenVault1Address(poolState ag_solanago.PublicKey, tokenMint1 ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c5f7661756c74
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: tokenMint1
	seeds = append(seeds, tokenMint1.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTokenVault1Address(poolState ag_solanago.PublicKey, tokenMint1 ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindTokenVault1Address(poolState, tokenMint1)
	return
}

func FindObservationStateAddress(poolState ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x6f62736572766174696f6e
	seeds = append(seeds, []byte{byte(0x6f), byte(0x62), byte(0x73), byte(0x65), byte(0x72), byte(0x76), byte(0x61), byte(0x74), byte(0x69), byte(0x6f), byte(0x6e)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindObservationStateAddress(poolState ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindObservationStateAddress(poolState)
	return
}

func FindRewardTokenVaultAddress(poolState ag_solanago.PublicKey, rewardTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c5f7265776172645f7661756c74
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x72), byte(0x65), byte(0x77), byte(0x61), byte(0x72), byte(0x64), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: rewardTokenMint
	seeds = append(seeds, rewardTokenMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindRewardTokenVaultAddress(poolState ag_solanago.PublicKey, rewardTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindRewardTokenVaultAddress(poolState, rewardTokenMint)
	return
}

func FindTickArrayUpperAddress(poolState ag_solanago.PublicKey, tickArrayUpperStartIndex int32) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x7469636b5f6172726179
	seeds = append(seeds, []byte{byte(0x74), byte(0x69), byte(0x63), byte(0x6b), byte(0x5f), byte(0x61), byte(0x72), byte(0x72), byte(0x61), byte(0x79)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: tickArrayUpperStartIndex
	argBytes2 := make([]byte, 4)
	binary.LittleEndian.PutUint32(argBytes2, uint32(tickArrayUpperStartIndex))
	seeds = append(seeds, argBytes2)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTickArrayUpperAddress(poolState ag_solanago.PublicKey, tickArrayUpperStartIndex int32) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindTickArrayUpperAddress(poolState, tickArrayUpperStartIndex)
	return
}

func FindPoolStateAddress(ammConfig ag_solanago.PublicKey, tokenMint0 ag_solanago.PublicKey, tokenMint1 ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c)})
	// path: ammConfig
	seeds = append(seeds, ammConfig.Bytes())
	// path: tokenMint0
	seeds = append(seeds, tokenMint0.Bytes())
	// path: tokenMint1
	seeds = append(seeds, tokenMint1.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPoolStateAddress(ammConfig ag_solanago.PublicKey, tokenMint0 ag_solanago.PublicKey, tokenMint1 ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindPoolStateAddress(ammConfig, tokenMint0, tokenMint1)
	return
}

func FindTokenVault0Address(poolState ag_solanago.PublicKey, tokenMint0 ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c5f7661756c74
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())
	// path: tokenMint0
	seeds = append(seeds, tokenMint0.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTokenVault0Address(poolState ag_solanago.PublicKey, tokenMint0 ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindTokenVault0Address(poolState, tokenMint0)
	return
}

func FindTickArrayBitmapAddress(poolState ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c5f7469636b5f61727261795f6269746d61705f657874656e73696f6e
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x74), byte(0x69), byte(0x63), byte(0x6b), byte(0x5f), byte(0x61), byte(0x72), byte(0x72), byte(0x61), byte(0x79), byte(0x5f), byte(0x62), byte(0x69), byte(0x74), byte(0x6d), byte(0x61), byte(0x70), byte(0x5f), byte(0x65), byte(0x78), byte(0x74), byte(0x65), byte(0x6e), byte(0x73), byte(0x69), byte(0x6f), byte(0x6e)})
	// path: poolState
	seeds = append(seeds, poolState.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTickArrayBitmapAddress(poolState ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindTickArrayBitmapAddress(poolState)
	return
}

func FindSupportMintAssociatedAddress(tokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x737570706f72745f6d696e74
	seeds = append(seeds, []byte{byte(0x73), byte(0x75), byte(0x70), byte(0x70), byte(0x6f), byte(0x72), byte(0x74), byte(0x5f), byte(0x6d), byte(0x69), byte(0x6e), byte(0x74)})
	// path: tokenMint
	seeds = append(seeds, tokenMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindSupportMintAssociatedAddress(tokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindSupportMintAssociatedAddress(tokenMint)
	return
}
