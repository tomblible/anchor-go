// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hpnf

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Collect the fund fee accrued to the pool
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount_0_requested` - The maximum amount of token_0 to send, can be 0 to collect fees in only token_1
// * `amount_1_requested` - The maximum amount of token_1 to send, can be 0 to collect fees in only token_0
//
type CollectFundFee struct {
	Amount0Requested *uint64
	Amount1Requested *uint64

	// [0] = [SIGNER] owner
	// ··········· Only admin or fund_owner can collect fee now
	//
	// [1] = [WRITE] pool_state
	// ··········· Pool state stores accumulated protocol fee amount
	//
	// [2] = [] amm_config
	// ··········· Amm config account stores fund_owner
	//
	// [3] = [WRITE] token_vault_0
	// ··········· The address that holds pool tokens for token_0
	//
	// [4] = [WRITE] token_vault_1
	// ··········· The address that holds pool tokens for token_1
	//
	// [5] = [] vault_0_mint
	// ··········· The mint of token vault 0
	//
	// [6] = [] vault_1_mint
	// ··········· The mint of token vault 1
	//
	// [7] = [WRITE] recipient_token_account_0
	// ··········· The address that receives the collected token_0 protocol fees
	//
	// [8] = [WRITE] recipient_token_account_1
	// ··········· The address that receives the collected token_1 protocol fees
	//
	// [9] = [] token_program
	// ··········· The SPL program to perform token transfers
	//
	// [10] = [] token_program_2022
	// ··········· The SPL program 2022 to perform token transfers
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectFundFeeInstructionBuilder creates a new `CollectFundFee` instruction builder.
func NewCollectFundFeeInstructionBuilder() *CollectFundFee {
	nd := &CollectFundFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	nd.AccountMetaSlice[9] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[10] = ag_solanago.Meta(Token22Program)
	return nd
}

// SetAmount0Requested sets the "amount_0_requested" parameter.
func (inst *CollectFundFee) SetAmount0Requested(amount_0_requested uint64) *CollectFundFee {
	inst.Amount0Requested = &amount_0_requested
	return inst
}

// SetAmount1Requested sets the "amount_1_requested" parameter.
func (inst *CollectFundFee) SetAmount1Requested(amount_1_requested uint64) *CollectFundFee {
	inst.Amount1Requested = &amount_1_requested
	return inst
}

// SetOwnerAccount sets the "owner" account.
// Only admin or fund_owner can collect fee now
func (inst *CollectFundFee) SetOwnerAccount(owner ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// Only admin or fund_owner can collect fee now
func (inst *CollectFundFee) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolStateAccount sets the "pool_state" account.
// Pool state stores accumulated protocol fee amount
func (inst *CollectFundFee) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
// Pool state stores accumulated protocol fee amount
func (inst *CollectFundFee) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmConfigAccount sets the "amm_config" account.
// Amm config account stores fund_owner
func (inst *CollectFundFee) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "amm_config" account.
// Amm config account stores fund_owner
func (inst *CollectFundFee) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenVault0Account sets the "token_vault_0" account.
// The address that holds pool tokens for token_0
func (inst *CollectFundFee) SetTokenVault0Account(tokenVault0 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenVault0).WRITE()
	return inst
}

// GetTokenVault0Account gets the "token_vault_0" account.
// The address that holds pool tokens for token_0
func (inst *CollectFundFee) GetTokenVault0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenVault1Account sets the "token_vault_1" account.
// The address that holds pool tokens for token_1
func (inst *CollectFundFee) SetTokenVault1Account(tokenVault1 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenVault1).WRITE()
	return inst
}

// GetTokenVault1Account gets the "token_vault_1" account.
// The address that holds pool tokens for token_1
func (inst *CollectFundFee) GetTokenVault1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetVault0MintAccount sets the "vault_0_mint" account.
// The mint of token vault 0
func (inst *CollectFundFee) SetVault0MintAccount(vault0Mint ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(vault0Mint)
	return inst
}

// GetVault0MintAccount gets the "vault_0_mint" account.
// The mint of token vault 0
func (inst *CollectFundFee) GetVault0MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetVault1MintAccount sets the "vault_1_mint" account.
// The mint of token vault 1
func (inst *CollectFundFee) SetVault1MintAccount(vault1Mint ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vault1Mint)
	return inst
}

// GetVault1MintAccount gets the "vault_1_mint" account.
// The mint of token vault 1
func (inst *CollectFundFee) GetVault1MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRecipientTokenAccount0Account sets the "recipient_token_account_0" account.
// The address that receives the collected token_0 protocol fees
func (inst *CollectFundFee) SetRecipientTokenAccount0Account(recipientTokenAccount0 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(recipientTokenAccount0).WRITE()
	return inst
}

// GetRecipientTokenAccount0Account gets the "recipient_token_account_0" account.
// The address that receives the collected token_0 protocol fees
func (inst *CollectFundFee) GetRecipientTokenAccount0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRecipientTokenAccount1Account sets the "recipient_token_account_1" account.
// The address that receives the collected token_1 protocol fees
func (inst *CollectFundFee) SetRecipientTokenAccount1Account(recipientTokenAccount1 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(recipientTokenAccount1).WRITE()
	return inst
}

// GetRecipientTokenAccount1Account gets the "recipient_token_account_1" account.
// The address that receives the collected token_1 protocol fees
func (inst *CollectFundFee) GetRecipientTokenAccount1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "token_program" account.
// The SPL program to perform token transfers
func (inst *CollectFundFee) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// The SPL program to perform token transfers
func (inst *CollectFundFee) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgram2022Account sets the "token_program_2022" account.
// The SPL program 2022 to perform token transfers
func (inst *CollectFundFee) SetTokenProgram2022Account(tokenProgram2022 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram2022)
	return inst
}

// GetTokenProgram2022Account gets the "token_program_2022" account.
// The SPL program 2022 to perform token transfers
func (inst *CollectFundFee) GetTokenProgram2022Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst *CollectFundFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CollectFundFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CollectFundFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:11], metas...)
	return inst
}

func (inst *CollectFundFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11:]
}

func (inst CollectFundFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectFundFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectFundFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectFundFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount0Requested == nil {
			return errors.New("amount0Requested parameter is not set")
		}
		if inst.Amount1Requested == nil {
			return errors.New("amount1Requested parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 11 {
		return errors.New("accounts slice has wrong length: expected 11 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenVault0 is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenVault1 is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Vault0Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Vault1Mint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.RecipientTokenAccount0 is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.RecipientTokenAccount1 is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram2022 is not set")
		}
	}
	return nil
}

func (inst *CollectFundFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectFundFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Amount0Requested", *inst.Amount0Requested))
						paramsBranch.Child(ag_format.Param("  Amount1Requested", *inst.Amount1Requested))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               pool_state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               amm_config", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            token_vault_0", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            token_vault_1", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             vault_0_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             vault_1_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("recipient_token_account_0", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("recipient_token_account_1", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            token_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       token_program_2022", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj CollectFundFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount0Requested` param:
	err = encoder.Encode(obj.Amount0Requested)
	if err != nil {
		return err
	}
	// Serialize `Amount1Requested` param:
	err = encoder.Encode(obj.Amount1Requested)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CollectFundFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount0Requested`:
	err = decoder.Decode(&obj.Amount0Requested)
	if err != nil {
		return err
	}
	// Deserialize `Amount1Requested`:
	err = decoder.Decode(&obj.Amount1Requested)
	if err != nil {
		return err
	}
	return nil
}

// NewCollectFundFeeInstruction declares a new CollectFundFee instruction with the provided parameters and accounts.
func NewCollectFundFeeInstruction(
	// Parameters:
	amount_0_requested uint64,
	amount_1_requested uint64,
	// Accounts:
	owner ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	tokenVault0 ag_solanago.PublicKey,
	tokenVault1 ag_solanago.PublicKey,
	vault0Mint ag_solanago.PublicKey,
	vault1Mint ag_solanago.PublicKey,
	recipientTokenAccount0 ag_solanago.PublicKey,
	recipientTokenAccount1 ag_solanago.PublicKey) *CollectFundFee {
	return NewCollectFundFeeInstructionBuilder().
		SetAmount0Requested(amount_0_requested).
		SetAmount1Requested(amount_1_requested).
		SetOwnerAccount(owner).
		SetPoolStateAccount(poolState).
		SetAmmConfigAccount(ammConfig).
		SetTokenVault0Account(tokenVault0).
		SetTokenVault1Account(tokenVault1).
		SetVault0MintAccount(vault0Mint).
		SetVault1MintAccount(vault1Mint).
		SetRecipientTokenAccount0Account(recipientTokenAccount0).
		SetRecipientTokenAccount1Account(recipientTokenAccount1)
}

// NewSimpleCollectFundFeeInstruction declares a new CollectFundFee instruction with the provided parameters and accounts.
func NewSimpleCollectFundFeeInstruction(
	// Parameters:
	amount_0_requested uint64,
	amount_1_requested uint64,
	// Accounts:
	owner ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	tokenVault0 ag_solanago.PublicKey,
	tokenVault1 ag_solanago.PublicKey,
	vault0Mint ag_solanago.PublicKey,
	vault1Mint ag_solanago.PublicKey,
	recipientTokenAccount0 ag_solanago.PublicKey,
	recipientTokenAccount1 ag_solanago.PublicKey) *CollectFundFee {
	return NewCollectFundFeeInstructionBuilder().
		SetAmount0Requested(amount_0_requested).
		SetAmount1Requested(amount_1_requested).
		SetOwnerAccount(owner).
		SetPoolStateAccount(poolState).
		SetAmmConfigAccount(ammConfig).
		SetTokenVault0Account(tokenVault0).
		SetTokenVault1Account(tokenVault1).
		SetVault0MintAccount(vault0Mint).
		SetVault1MintAccount(vault1Mint).
		SetRecipientTokenAccount0Account(recipientTokenAccount0).
		SetRecipientTokenAccount1Account(recipientTokenAccount1)
}
