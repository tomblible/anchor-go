// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hpnf

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AmmConfig struct {
	// Bump to identify PDA
	Bump  uint8
	Index uint16

	// Address of the protocol owner
	Owner ag_solanago.PublicKey

	// The protocol fee
	ProtocolFeeRate uint32

	// The trade fee, denominated in hundredths of a bip (10^-6)
	TradeFeeRate uint32

	// The tick spacing
	TickSpacing uint16

	// The fund fee, denominated in hundredths of a bip (10^-6)
	FundFeeRate uint32
	padding_u32 uint32
	FundOwner   ag_solanago.PublicKey
	padding     [3]uint64
}

func (obj AmmConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeRate` param:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `FundFeeRate` param:
	err = encoder.Encode(obj.FundFeeRate)
	if err != nil {
		return err
	}
	// Serialize `padding_u32` param:
	err = encoder.Encode(obj.padding_u32)
	if err != nil {
		return err
	}
	// Serialize `FundOwner` param:
	err = encoder.Encode(obj.FundOwner)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AmmConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `FundFeeRate`:
	err = decoder.Decode(&obj.FundFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `padding_u32`:
	err = decoder.Decode(&obj.padding_u32)
	if err != nil {
		return err
	}
	// Deserialize `FundOwner`:
	err = decoder.Decode(&obj.FundOwner)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type CollectPersonalFeeEvent struct {
	// The ID of the token for which underlying tokens were collected
	PositionNftMint ag_solanago.PublicKey

	// The token account that received the collected token_0 tokens
	RecipientTokenAccount0 ag_solanago.PublicKey

	// The token account that received the collected token_1 tokens
	RecipientTokenAccount1 ag_solanago.PublicKey

	// The amount of token_0 owed to the position that was collected
	Amount0 uint64

	// The amount of token_1 owed to the position that was collected
	Amount1 uint64
}

func (obj CollectPersonalFeeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionNftMint` param:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return err
	}
	// Serialize `RecipientTokenAccount0` param:
	err = encoder.Encode(obj.RecipientTokenAccount0)
	if err != nil {
		return err
	}
	// Serialize `RecipientTokenAccount1` param:
	err = encoder.Encode(obj.RecipientTokenAccount1)
	if err != nil {
		return err
	}
	// Serialize `Amount0` param:
	err = encoder.Encode(obj.Amount0)
	if err != nil {
		return err
	}
	// Serialize `Amount1` param:
	err = encoder.Encode(obj.Amount1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CollectPersonalFeeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return err
	}
	// Deserialize `RecipientTokenAccount0`:
	err = decoder.Decode(&obj.RecipientTokenAccount0)
	if err != nil {
		return err
	}
	// Deserialize `RecipientTokenAccount1`:
	err = decoder.Decode(&obj.RecipientTokenAccount1)
	if err != nil {
		return err
	}
	// Deserialize `Amount0`:
	err = decoder.Decode(&obj.Amount0)
	if err != nil {
		return err
	}
	// Deserialize `Amount1`:
	err = decoder.Decode(&obj.Amount1)
	if err != nil {
		return err
	}
	return nil
}

type CollectProtocolFeeEvent struct {
	// The pool whose protocol fee is collected
	PoolState ag_solanago.PublicKey

	// The address that receives the collected token_0 protocol fees
	RecipientTokenAccount0 ag_solanago.PublicKey

	// The address that receives the collected token_1 protocol fees
	RecipientTokenAccount1 ag_solanago.PublicKey

	// The amount of token_0 protocol fees that is withdrawn
	Amount0 uint64

	// The amount of token_0 protocol fees that is withdrawn
	Amount1 uint64
}

func (obj CollectProtocolFeeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `RecipientTokenAccount0` param:
	err = encoder.Encode(obj.RecipientTokenAccount0)
	if err != nil {
		return err
	}
	// Serialize `RecipientTokenAccount1` param:
	err = encoder.Encode(obj.RecipientTokenAccount1)
	if err != nil {
		return err
	}
	// Serialize `Amount0` param:
	err = encoder.Encode(obj.Amount0)
	if err != nil {
		return err
	}
	// Serialize `Amount1` param:
	err = encoder.Encode(obj.Amount1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CollectProtocolFeeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `RecipientTokenAccount0`:
	err = decoder.Decode(&obj.RecipientTokenAccount0)
	if err != nil {
		return err
	}
	// Deserialize `RecipientTokenAccount1`:
	err = decoder.Decode(&obj.RecipientTokenAccount1)
	if err != nil {
		return err
	}
	// Deserialize `Amount0`:
	err = decoder.Decode(&obj.Amount0)
	if err != nil {
		return err
	}
	// Deserialize `Amount1`:
	err = decoder.Decode(&obj.Amount1)
	if err != nil {
		return err
	}
	return nil
}

type ConfigChangeEvent struct {
	Index           uint16
	Owner           ag_solanago.PublicKey
	ProtocolFeeRate uint32
	TradeFeeRate    uint32
	TickSpacing     uint16
	FundFeeRate     uint32
	FundOwner       ag_solanago.PublicKey
}

func (obj ConfigChangeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeRate` param:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `FundFeeRate` param:
	err = encoder.Encode(obj.FundFeeRate)
	if err != nil {
		return err
	}
	// Serialize `FundOwner` param:
	err = encoder.Encode(obj.FundOwner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigChangeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `FundFeeRate`:
	err = decoder.Decode(&obj.FundFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `FundOwner`:
	err = decoder.Decode(&obj.FundOwner)
	if err != nil {
		return err
	}
	return nil
}

type CreatePersonalPositionEvent struct {
	// The pool for which liquidity was added
	PoolState ag_solanago.PublicKey

	// The address that create the position
	Minter ag_solanago.PublicKey

	// The owner of the position and recipient of any minted liquidity
	NftOwner ag_solanago.PublicKey

	// The lower tick of the position
	TickLowerIndex int32

	// The upper tick of the position
	TickUpperIndex int32

	// The amount of liquidity minted to the position range
	Liquidity ag_binary.Uint128

	// The amount of token_0 was deposit for the liquidity
	DepositAmount0 uint64

	// The amount of token_1 was deposit for the liquidity
	DepositAmount1 uint64

	// The token transfer fee for deposit_amount_0
	DepositAmount0TransferFee uint64

	// The token transfer fee for deposit_amount_1
	DepositAmount1TransferFee uint64
}

func (obj CreatePersonalPositionEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Minter` param:
	err = encoder.Encode(obj.Minter)
	if err != nil {
		return err
	}
	// Serialize `NftOwner` param:
	err = encoder.Encode(obj.NftOwner)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `DepositAmount0` param:
	err = encoder.Encode(obj.DepositAmount0)
	if err != nil {
		return err
	}
	// Serialize `DepositAmount1` param:
	err = encoder.Encode(obj.DepositAmount1)
	if err != nil {
		return err
	}
	// Serialize `DepositAmount0TransferFee` param:
	err = encoder.Encode(obj.DepositAmount0TransferFee)
	if err != nil {
		return err
	}
	// Serialize `DepositAmount1TransferFee` param:
	err = encoder.Encode(obj.DepositAmount1TransferFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreatePersonalPositionEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Minter`:
	err = decoder.Decode(&obj.Minter)
	if err != nil {
		return err
	}
	// Deserialize `NftOwner`:
	err = decoder.Decode(&obj.NftOwner)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `DepositAmount0`:
	err = decoder.Decode(&obj.DepositAmount0)
	if err != nil {
		return err
	}
	// Deserialize `DepositAmount1`:
	err = decoder.Decode(&obj.DepositAmount1)
	if err != nil {
		return err
	}
	// Deserialize `DepositAmount0TransferFee`:
	err = decoder.Decode(&obj.DepositAmount0TransferFee)
	if err != nil {
		return err
	}
	// Deserialize `DepositAmount1TransferFee`:
	err = decoder.Decode(&obj.DepositAmount1TransferFee)
	if err != nil {
		return err
	}
	return nil
}

type DecreaseLiquidityEvent struct {
	// The ID of the token for which liquidity was decreased
	PositionNftMint ag_solanago.PublicKey

	// The amount by which liquidity for the position was decreased
	Liquidity ag_binary.Uint128

	// The amount of token_0 that was paid for the decrease in liquidity
	DecreaseAmount0 uint64

	// The amount of token_1 that was paid for the decrease in liquidity
	DecreaseAmount1 uint64
	FeeAmount0      uint64

	// The amount of token_1 fee
	FeeAmount1 uint64

	// The amount of rewards
	RewardAmounts [3]uint64

	// The amount of token_0 transfer fee
	TransferFee0 uint64

	// The amount of token_1 transfer fee
	TransferFee1 uint64
}

func (obj DecreaseLiquidityEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionNftMint` param:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `DecreaseAmount0` param:
	err = encoder.Encode(obj.DecreaseAmount0)
	if err != nil {
		return err
	}
	// Serialize `DecreaseAmount1` param:
	err = encoder.Encode(obj.DecreaseAmount1)
	if err != nil {
		return err
	}
	// Serialize `FeeAmount0` param:
	err = encoder.Encode(obj.FeeAmount0)
	if err != nil {
		return err
	}
	// Serialize `FeeAmount1` param:
	err = encoder.Encode(obj.FeeAmount1)
	if err != nil {
		return err
	}
	// Serialize `RewardAmounts` param:
	err = encoder.Encode(obj.RewardAmounts)
	if err != nil {
		return err
	}
	// Serialize `TransferFee0` param:
	err = encoder.Encode(obj.TransferFee0)
	if err != nil {
		return err
	}
	// Serialize `TransferFee1` param:
	err = encoder.Encode(obj.TransferFee1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DecreaseLiquidityEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `DecreaseAmount0`:
	err = decoder.Decode(&obj.DecreaseAmount0)
	if err != nil {
		return err
	}
	// Deserialize `DecreaseAmount1`:
	err = decoder.Decode(&obj.DecreaseAmount1)
	if err != nil {
		return err
	}
	// Deserialize `FeeAmount0`:
	err = decoder.Decode(&obj.FeeAmount0)
	if err != nil {
		return err
	}
	// Deserialize `FeeAmount1`:
	err = decoder.Decode(&obj.FeeAmount1)
	if err != nil {
		return err
	}
	// Deserialize `RewardAmounts`:
	err = decoder.Decode(&obj.RewardAmounts)
	if err != nil {
		return err
	}
	// Deserialize `TransferFee0`:
	err = decoder.Decode(&obj.TransferFee0)
	if err != nil {
		return err
	}
	// Deserialize `TransferFee1`:
	err = decoder.Decode(&obj.TransferFee1)
	if err != nil {
		return err
	}
	return nil
}

type IncreaseLiquidityEvent struct {
	// The ID of the token for which liquidity was increased
	PositionNftMint ag_solanago.PublicKey

	// The amount by which liquidity for the NFT position was increased
	Liquidity ag_binary.Uint128

	// The amount of token_0 that was paid for the increase in liquidity
	Amount0 uint64

	// The amount of token_1 that was paid for the increase in liquidity
	Amount1 uint64

	// The token transfer fee for amount_0
	Amount0TransferFee uint64

	// The token transfer fee for amount_1
	Amount1TransferFee uint64
}

func (obj IncreaseLiquidityEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionNftMint` param:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `Amount0` param:
	err = encoder.Encode(obj.Amount0)
	if err != nil {
		return err
	}
	// Serialize `Amount1` param:
	err = encoder.Encode(obj.Amount1)
	if err != nil {
		return err
	}
	// Serialize `Amount0TransferFee` param:
	err = encoder.Encode(obj.Amount0TransferFee)
	if err != nil {
		return err
	}
	// Serialize `Amount1TransferFee` param:
	err = encoder.Encode(obj.Amount1TransferFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *IncreaseLiquidityEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `Amount0`:
	err = decoder.Decode(&obj.Amount0)
	if err != nil {
		return err
	}
	// Deserialize `Amount1`:
	err = decoder.Decode(&obj.Amount1)
	if err != nil {
		return err
	}
	// Deserialize `Amount0TransferFee`:
	err = decoder.Decode(&obj.Amount0TransferFee)
	if err != nil {
		return err
	}
	// Deserialize `Amount1TransferFee`:
	err = decoder.Decode(&obj.Amount1TransferFee)
	if err != nil {
		return err
	}
	return nil
}

type InitializeRewardParam struct {
	// Reward open time
	OpenTime uint64

	// Reward end time
	EndTime uint64

	// Token reward per second are earned per unit of liquidity
	EmissionsPerSecondX64 ag_binary.Uint128
}

func (obj InitializeRewardParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	// Serialize `EmissionsPerSecondX64` param:
	err = encoder.Encode(obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeRewardParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	// Deserialize `EmissionsPerSecondX64`:
	err = decoder.Decode(&obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityCalculateEvent struct {
	// The pool liquidity before decrease or increase
	PoolLiquidity ag_binary.Uint128

	// The pool price when decrease or increase in liquidity
	PoolSqrtPriceX64 ag_binary.Uint128

	// The pool tick when decrease or increase in liquidity
	PoolTick int32

	// The amount of token_0 that was calculated for the decrease or increase in liquidity
	CalcAmount0 uint64

	// The amount of token_1 that was calculated for the decrease or increase in liquidity
	CalcAmount1   uint64
	TradeFeeOwed0 uint64

	// The amount of token_1 fee
	TradeFeeOwed1 uint64

	// The amount of token_0 transfer fee without trade_fee_amount_0
	TransferFee0 uint64

	// The amount of token_1 transfer fee without trade_fee_amount_0
	TransferFee1 uint64
}

func (obj LiquidityCalculateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolLiquidity` param:
	err = encoder.Encode(obj.PoolLiquidity)
	if err != nil {
		return err
	}
	// Serialize `PoolSqrtPriceX64` param:
	err = encoder.Encode(obj.PoolSqrtPriceX64)
	if err != nil {
		return err
	}
	// Serialize `PoolTick` param:
	err = encoder.Encode(obj.PoolTick)
	if err != nil {
		return err
	}
	// Serialize `CalcAmount0` param:
	err = encoder.Encode(obj.CalcAmount0)
	if err != nil {
		return err
	}
	// Serialize `CalcAmount1` param:
	err = encoder.Encode(obj.CalcAmount1)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeOwed0` param:
	err = encoder.Encode(obj.TradeFeeOwed0)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeOwed1` param:
	err = encoder.Encode(obj.TradeFeeOwed1)
	if err != nil {
		return err
	}
	// Serialize `TransferFee0` param:
	err = encoder.Encode(obj.TransferFee0)
	if err != nil {
		return err
	}
	// Serialize `TransferFee1` param:
	err = encoder.Encode(obj.TransferFee1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityCalculateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolLiquidity`:
	err = decoder.Decode(&obj.PoolLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `PoolSqrtPriceX64`:
	err = decoder.Decode(&obj.PoolSqrtPriceX64)
	if err != nil {
		return err
	}
	// Deserialize `PoolTick`:
	err = decoder.Decode(&obj.PoolTick)
	if err != nil {
		return err
	}
	// Deserialize `CalcAmount0`:
	err = decoder.Decode(&obj.CalcAmount0)
	if err != nil {
		return err
	}
	// Deserialize `CalcAmount1`:
	err = decoder.Decode(&obj.CalcAmount1)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeOwed0`:
	err = decoder.Decode(&obj.TradeFeeOwed0)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeOwed1`:
	err = decoder.Decode(&obj.TradeFeeOwed1)
	if err != nil {
		return err
	}
	// Deserialize `TransferFee0`:
	err = decoder.Decode(&obj.TransferFee0)
	if err != nil {
		return err
	}
	// Deserialize `TransferFee1`:
	err = decoder.Decode(&obj.TransferFee1)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityChangeEvent struct {
	// The pool for swap
	PoolState ag_solanago.PublicKey

	// The tick of the pool
	Tick int32

	// The tick lower of position
	TickLower int32

	// The tick lower of position
	TickUpper int32

	// The liquidity of the pool before liquidity change
	LiquidityBefore ag_binary.Uint128

	// The liquidity of the pool after liquidity change
	LiquidityAfter ag_binary.Uint128
}

func (obj LiquidityChangeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Tick` param:
	err = encoder.Encode(obj.Tick)
	if err != nil {
		return err
	}
	// Serialize `TickLower` param:
	err = encoder.Encode(obj.TickLower)
	if err != nil {
		return err
	}
	// Serialize `TickUpper` param:
	err = encoder.Encode(obj.TickUpper)
	if err != nil {
		return err
	}
	// Serialize `LiquidityBefore` param:
	err = encoder.Encode(obj.LiquidityBefore)
	if err != nil {
		return err
	}
	// Serialize `LiquidityAfter` param:
	err = encoder.Encode(obj.LiquidityAfter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityChangeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Tick`:
	err = decoder.Decode(&obj.Tick)
	if err != nil {
		return err
	}
	// Deserialize `TickLower`:
	err = decoder.Decode(&obj.TickLower)
	if err != nil {
		return err
	}
	// Deserialize `TickUpper`:
	err = decoder.Decode(&obj.TickUpper)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityBefore`:
	err = decoder.Decode(&obj.LiquidityBefore)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityAfter`:
	err = decoder.Decode(&obj.LiquidityAfter)
	if err != nil {
		return err
	}
	return nil
}

type Observation struct {
	// The block timestamp of the observation
	BlockTimestamp uint32

	// the cumulative of tick during the duration time
	TickCumulative int64

	// padding for feature update
	padding [4]uint64
}

func (obj Observation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BlockTimestamp` param:
	err = encoder.Encode(obj.BlockTimestamp)
	if err != nil {
		return err
	}
	// Serialize `TickCumulative` param:
	err = encoder.Encode(obj.TickCumulative)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Observation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BlockTimestamp`:
	err = decoder.Decode(&obj.BlockTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `TickCumulative`:
	err = decoder.Decode(&obj.TickCumulative)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type ObservationState struct {
	// Whether the ObservationState is initialized
	Initialized bool

	// recent update epoch
	RecentEpoch uint64

	// the most-recently updated index of the observations array
	ObservationIndex uint16

	// belongs to which pool
	PoolId ag_solanago.PublicKey

	// observation array
	Observations [100]Observation

	// padding for feature update
	padding [4]uint64
}

func (obj ObservationState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `RecentEpoch` param:
	err = encoder.Encode(obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Serialize `ObservationIndex` param:
	err = encoder.Encode(obj.ObservationIndex)
	if err != nil {
		return err
	}
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `Observations` param:
	err = encoder.Encode(obj.Observations)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ObservationState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `RecentEpoch`:
	err = decoder.Decode(&obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Deserialize `ObservationIndex`:
	err = decoder.Decode(&obj.ObservationIndex)
	if err != nil {
		return err
	}
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `Observations`:
	err = decoder.Decode(&obj.Observations)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type OperationState struct {
	// Bump to identify PDA
	Bump uint8

	// Address of the operation owner
	OperationOwners [10]ag_solanago.PublicKey

	// The mint address of whitelist to emit reward
	WhitelistMints [100]ag_solanago.PublicKey
}

func (obj OperationState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `OperationOwners` param:
	err = encoder.Encode(obj.OperationOwners)
	if err != nil {
		return err
	}
	// Serialize `WhitelistMints` param:
	err = encoder.Encode(obj.WhitelistMints)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `OperationOwners`:
	err = decoder.Decode(&obj.OperationOwners)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistMints`:
	err = decoder.Decode(&obj.WhitelistMints)
	if err != nil {
		return err
	}
	return nil
}

type PermissionlessFarmSwitch struct {
	// Bump to identify PDA
	Bump uint8

	// Is the permissionless farm allowed or not
	IsOn bool
}

func (obj PermissionlessFarmSwitch) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `IsOn` param:
	err = encoder.Encode(obj.IsOn)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PermissionlessFarmSwitch) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `IsOn`:
	err = decoder.Decode(&obj.IsOn)
	if err != nil {
		return err
	}
	return nil
}

type PersonalPositionState struct {
	// Bump to identify PDA
	Bump [1]uint8

	// Mint address of the tokenized position
	NftMint ag_solanago.PublicKey

	// The ID of the pool with which this token is connected
	PoolId ag_solanago.PublicKey

	// The lower bound tick of the position
	TickLowerIndex int32

	// The upper bound tick of the position
	TickUpperIndex int32

	// The amount of liquidity owned by this position
	Liquidity ag_binary.Uint128

	// The token_0 fee growth of the aggregate position as of the last action on the individual position
	FeeGrowthInside0LastX64 ag_binary.Uint128

	// The token_1 fee growth of the aggregate position as of the last action on the individual position
	FeeGrowthInside1LastX64 ag_binary.Uint128

	// The fees owed to the position owner in token_0, as of the last computation
	TokenFeesOwed0 uint64

	// The fees owed to the position owner in token_1, as of the last computation
	TokenFeesOwed1 uint64
	RewardInfos    [3]PositionRewardInfo
	RecentEpoch    uint64
	padding        [7]uint64
}

func (obj PersonalPositionState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `NftMint` param:
	err = encoder.Encode(obj.NftMint)
	if err != nil {
		return err
	}
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthInside0LastX64` param:
	err = encoder.Encode(obj.FeeGrowthInside0LastX64)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthInside1LastX64` param:
	err = encoder.Encode(obj.FeeGrowthInside1LastX64)
	if err != nil {
		return err
	}
	// Serialize `TokenFeesOwed0` param:
	err = encoder.Encode(obj.TokenFeesOwed0)
	if err != nil {
		return err
	}
	// Serialize `TokenFeesOwed1` param:
	err = encoder.Encode(obj.TokenFeesOwed1)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `RecentEpoch` param:
	err = encoder.Encode(obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PersonalPositionState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `NftMint`:
	err = decoder.Decode(&obj.NftMint)
	if err != nil {
		return err
	}
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthInside0LastX64`:
	err = decoder.Decode(&obj.FeeGrowthInside0LastX64)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthInside1LastX64`:
	err = decoder.Decode(&obj.FeeGrowthInside1LastX64)
	if err != nil {
		return err
	}
	// Deserialize `TokenFeesOwed0`:
	err = decoder.Decode(&obj.TokenFeesOwed0)
	if err != nil {
		return err
	}
	// Deserialize `TokenFeesOwed1`:
	err = decoder.Decode(&obj.TokenFeesOwed1)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `RecentEpoch`:
	err = decoder.Decode(&obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type PoolCreatedEvent struct {
	// The first token of the pool by address sort order
	TokenMint0 ag_solanago.PublicKey

	// The second token of the pool by address sort order
	TokenMint1 ag_solanago.PublicKey

	// The minimum number of ticks between initialized ticks
	TickSpacing uint16

	// The address of the created pool
	PoolState ag_solanago.PublicKey

	// The initial sqrt price of the pool, as a Q64.64
	SqrtPriceX64 ag_binary.Uint128

	// The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool
	Tick int32

	// Vault of token_0
	TokenVault0 ag_solanago.PublicKey

	// Vault of token_1
	TokenVault1 ag_solanago.PublicKey
}

func (obj PoolCreatedEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint0` param:
	err = encoder.Encode(obj.TokenMint0)
	if err != nil {
		return err
	}
	// Serialize `TokenMint1` param:
	err = encoder.Encode(obj.TokenMint1)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceX64` param:
	err = encoder.Encode(obj.SqrtPriceX64)
	if err != nil {
		return err
	}
	// Serialize `Tick` param:
	err = encoder.Encode(obj.Tick)
	if err != nil {
		return err
	}
	// Serialize `TokenVault0` param:
	err = encoder.Encode(obj.TokenVault0)
	if err != nil {
		return err
	}
	// Serialize `TokenVault1` param:
	err = encoder.Encode(obj.TokenVault1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolCreatedEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint0`:
	err = decoder.Decode(&obj.TokenMint0)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint1`:
	err = decoder.Decode(&obj.TokenMint1)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceX64`:
	err = decoder.Decode(&obj.SqrtPriceX64)
	if err != nil {
		return err
	}
	// Deserialize `Tick`:
	err = decoder.Decode(&obj.Tick)
	if err != nil {
		return err
	}
	// Deserialize `TokenVault0`:
	err = decoder.Decode(&obj.TokenVault0)
	if err != nil {
		return err
	}
	// Deserialize `TokenVault1`:
	err = decoder.Decode(&obj.TokenVault1)
	if err != nil {
		return err
	}
	return nil
}

type PoolState struct {
	// Bump to identify PDA
	Bump      [1]uint8
	AmmConfig ag_solanago.PublicKey
	Owner     ag_solanago.PublicKey

	// Token pair of the pool, where token_mint_0 address < token_mint_1 address
	TokenMint0 ag_solanago.PublicKey
	TokenMint1 ag_solanago.PublicKey

	// Token pair vault
	TokenVault0 ag_solanago.PublicKey
	TokenVault1 ag_solanago.PublicKey

	// observation account key
	ObservationKey ag_solanago.PublicKey

	// mint0 and mint1 decimals
	MintDecimals0 uint8
	MintDecimals1 uint8

	// The minimum number of ticks between initialized ticks
	TickSpacing uint16

	// The currently in range liquidity available to the pool.
	Liquidity ag_binary.Uint128

	// The current price of the pool as a sqrt(token_1/token_0) Q64.64 value
	SqrtPriceX64 ag_binary.Uint128

	// The current tick of the pool, i.e. according to the last tick transition that was run.
	TickCurrent int32
	padding3    uint16
	padding4    uint16

	// The fee growth as a Q64.64 number, i.e. fees of token_0 and token_1 collected per
	// unit of liquidity for the entire life of the pool.
	FeeGrowthGlobal0X64 ag_binary.Uint128
	FeeGrowthGlobal1X64 ag_binary.Uint128

	// The amounts of token_0 and token_1 that are owed to the protocol.
	ProtocolFeesToken0 uint64
	ProtocolFeesToken1 uint64

	// The amounts in and out of swap token_0 and token_1
	SwapInAmountToken0  ag_binary.Uint128
	SwapOutAmountToken1 ag_binary.Uint128
	SwapInAmountToken1  ag_binary.Uint128
	SwapOutAmountToken0 ag_binary.Uint128

	// Bitwise representation of the state of the pool
	// bit0, 1: disable open position and increase liquidity, 0: normal
	// bit1, 1: disable decrease liquidity, 0: normal
	// bit2, 1: disable collect fee, 0: normal
	// bit3, 1: disable collect reward, 0: normal
	// bit4, 1: disable swap, 0: normal
	Status uint8

	// Leave blank for future use
	padding     [7]uint8
	RewardInfos [3]RewardInfo

	// Packed initialized tick array state
	TickArrayBitmap [16]uint64

	// except protocol_fee and fund_fee
	TotalFeesToken0 uint64

	// except protocol_fee and fund_fee
	TotalFeesClaimedToken0 uint64
	TotalFeesToken1        uint64
	TotalFeesClaimedToken1 uint64
	FundFeesToken0         uint64
	FundFeesToken1         uint64
	OpenTime               uint64
	RecentEpoch            uint64
	padding1               [24]uint64
	padding2               [32]uint64
}

func (obj PoolState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `AmmConfig` param:
	err = encoder.Encode(obj.AmmConfig)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `TokenMint0` param:
	err = encoder.Encode(obj.TokenMint0)
	if err != nil {
		return err
	}
	// Serialize `TokenMint1` param:
	err = encoder.Encode(obj.TokenMint1)
	if err != nil {
		return err
	}
	// Serialize `TokenVault0` param:
	err = encoder.Encode(obj.TokenVault0)
	if err != nil {
		return err
	}
	// Serialize `TokenVault1` param:
	err = encoder.Encode(obj.TokenVault1)
	if err != nil {
		return err
	}
	// Serialize `ObservationKey` param:
	err = encoder.Encode(obj.ObservationKey)
	if err != nil {
		return err
	}
	// Serialize `MintDecimals0` param:
	err = encoder.Encode(obj.MintDecimals0)
	if err != nil {
		return err
	}
	// Serialize `MintDecimals1` param:
	err = encoder.Encode(obj.MintDecimals1)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceX64` param:
	err = encoder.Encode(obj.SqrtPriceX64)
	if err != nil {
		return err
	}
	// Serialize `TickCurrent` param:
	err = encoder.Encode(obj.TickCurrent)
	if err != nil {
		return err
	}
	// Serialize `padding3` param:
	err = encoder.Encode(obj.padding3)
	if err != nil {
		return err
	}
	// Serialize `padding4` param:
	err = encoder.Encode(obj.padding4)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthGlobal0X64` param:
	err = encoder.Encode(obj.FeeGrowthGlobal0X64)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthGlobal1X64` param:
	err = encoder.Encode(obj.FeeGrowthGlobal1X64)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesToken0` param:
	err = encoder.Encode(obj.ProtocolFeesToken0)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesToken1` param:
	err = encoder.Encode(obj.ProtocolFeesToken1)
	if err != nil {
		return err
	}
	// Serialize `SwapInAmountToken0` param:
	err = encoder.Encode(obj.SwapInAmountToken0)
	if err != nil {
		return err
	}
	// Serialize `SwapOutAmountToken1` param:
	err = encoder.Encode(obj.SwapOutAmountToken1)
	if err != nil {
		return err
	}
	// Serialize `SwapInAmountToken1` param:
	err = encoder.Encode(obj.SwapInAmountToken1)
	if err != nil {
		return err
	}
	// Serialize `SwapOutAmountToken0` param:
	err = encoder.Encode(obj.SwapOutAmountToken0)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `TickArrayBitmap` param:
	err = encoder.Encode(obj.TickArrayBitmap)
	if err != nil {
		return err
	}
	// Serialize `TotalFeesToken0` param:
	err = encoder.Encode(obj.TotalFeesToken0)
	if err != nil {
		return err
	}
	// Serialize `TotalFeesClaimedToken0` param:
	err = encoder.Encode(obj.TotalFeesClaimedToken0)
	if err != nil {
		return err
	}
	// Serialize `TotalFeesToken1` param:
	err = encoder.Encode(obj.TotalFeesToken1)
	if err != nil {
		return err
	}
	// Serialize `TotalFeesClaimedToken1` param:
	err = encoder.Encode(obj.TotalFeesClaimedToken1)
	if err != nil {
		return err
	}
	// Serialize `FundFeesToken0` param:
	err = encoder.Encode(obj.FundFeesToken0)
	if err != nil {
		return err
	}
	// Serialize `FundFeesToken1` param:
	err = encoder.Encode(obj.FundFeesToken1)
	if err != nil {
		return err
	}
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	// Serialize `RecentEpoch` param:
	err = encoder.Encode(obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Serialize `padding1` param:
	err = encoder.Encode(obj.padding1)
	if err != nil {
		return err
	}
	// Serialize `padding2` param:
	err = encoder.Encode(obj.padding2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `AmmConfig`:
	err = decoder.Decode(&obj.AmmConfig)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint0`:
	err = decoder.Decode(&obj.TokenMint0)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint1`:
	err = decoder.Decode(&obj.TokenMint1)
	if err != nil {
		return err
	}
	// Deserialize `TokenVault0`:
	err = decoder.Decode(&obj.TokenVault0)
	if err != nil {
		return err
	}
	// Deserialize `TokenVault1`:
	err = decoder.Decode(&obj.TokenVault1)
	if err != nil {
		return err
	}
	// Deserialize `ObservationKey`:
	err = decoder.Decode(&obj.ObservationKey)
	if err != nil {
		return err
	}
	// Deserialize `MintDecimals0`:
	err = decoder.Decode(&obj.MintDecimals0)
	if err != nil {
		return err
	}
	// Deserialize `MintDecimals1`:
	err = decoder.Decode(&obj.MintDecimals1)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceX64`:
	err = decoder.Decode(&obj.SqrtPriceX64)
	if err != nil {
		return err
	}
	// Deserialize `TickCurrent`:
	err = decoder.Decode(&obj.TickCurrent)
	if err != nil {
		return err
	}
	// Deserialize `padding3`:
	err = decoder.Decode(&obj.padding3)
	if err != nil {
		return err
	}
	// Deserialize `padding4`:
	err = decoder.Decode(&obj.padding4)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthGlobal0X64`:
	err = decoder.Decode(&obj.FeeGrowthGlobal0X64)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthGlobal1X64`:
	err = decoder.Decode(&obj.FeeGrowthGlobal1X64)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesToken0`:
	err = decoder.Decode(&obj.ProtocolFeesToken0)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesToken1`:
	err = decoder.Decode(&obj.ProtocolFeesToken1)
	if err != nil {
		return err
	}
	// Deserialize `SwapInAmountToken0`:
	err = decoder.Decode(&obj.SwapInAmountToken0)
	if err != nil {
		return err
	}
	// Deserialize `SwapOutAmountToken1`:
	err = decoder.Decode(&obj.SwapOutAmountToken1)
	if err != nil {
		return err
	}
	// Deserialize `SwapInAmountToken1`:
	err = decoder.Decode(&obj.SwapInAmountToken1)
	if err != nil {
		return err
	}
	// Deserialize `SwapOutAmountToken0`:
	err = decoder.Decode(&obj.SwapOutAmountToken0)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `TickArrayBitmap`:
	err = decoder.Decode(&obj.TickArrayBitmap)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeesToken0`:
	err = decoder.Decode(&obj.TotalFeesToken0)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeesClaimedToken0`:
	err = decoder.Decode(&obj.TotalFeesClaimedToken0)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeesToken1`:
	err = decoder.Decode(&obj.TotalFeesToken1)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeesClaimedToken1`:
	err = decoder.Decode(&obj.TotalFeesClaimedToken1)
	if err != nil {
		return err
	}
	// Deserialize `FundFeesToken0`:
	err = decoder.Decode(&obj.FundFeesToken0)
	if err != nil {
		return err
	}
	// Deserialize `FundFeesToken1`:
	err = decoder.Decode(&obj.FundFeesToken1)
	if err != nil {
		return err
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	// Deserialize `RecentEpoch`:
	err = decoder.Decode(&obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Deserialize `padding1`:
	err = decoder.Decode(&obj.padding1)
	if err != nil {
		return err
	}
	// Deserialize `padding2`:
	err = decoder.Decode(&obj.padding2)
	if err != nil {
		return err
	}
	return nil
}

type PositionRewardInfo struct {
	GrowthInsideLastX64 ag_binary.Uint128
	RewardAmountOwed    uint64
}

func (obj PositionRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `GrowthInsideLastX64` param:
	err = encoder.Encode(obj.GrowthInsideLastX64)
	if err != nil {
		return err
	}
	// Serialize `RewardAmountOwed` param:
	err = encoder.Encode(obj.RewardAmountOwed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `GrowthInsideLastX64`:
	err = decoder.Decode(&obj.GrowthInsideLastX64)
	if err != nil {
		return err
	}
	// Deserialize `RewardAmountOwed`:
	err = decoder.Decode(&obj.RewardAmountOwed)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolPositionState struct {
	// Bump to identify PDA
	Bump uint8

	// The ID of the pool with which this token is connected
	PoolId ag_solanago.PublicKey

	// The lower bound tick of the position
	TickLowerIndex int32

	// The upper bound tick of the position
	TickUpperIndex int32

	// The amount of liquidity owned by this position
	Liquidity ag_binary.Uint128

	// The token_0 fee growth per unit of liquidity as of the last update to liquidity or fees owed
	FeeGrowthInside0LastX64 ag_binary.Uint128

	// The token_1 fee growth per unit of liquidity as of the last update to liquidity or fees owed
	FeeGrowthInside1LastX64 ag_binary.Uint128

	// The fees owed to the position owner in token_0
	TokenFeesOwed0 uint64

	// The fees owed to the position owner in token_1
	TokenFeesOwed1 uint64

	// The reward growth per unit of liquidity as of the last update to liquidity
	RewardGrowthInside [3]ag_binary.Uint128
	RecentEpoch        uint64
	padding            [7]uint64
}

func (obj ProtocolPositionState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthInside0LastX64` param:
	err = encoder.Encode(obj.FeeGrowthInside0LastX64)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthInside1LastX64` param:
	err = encoder.Encode(obj.FeeGrowthInside1LastX64)
	if err != nil {
		return err
	}
	// Serialize `TokenFeesOwed0` param:
	err = encoder.Encode(obj.TokenFeesOwed0)
	if err != nil {
		return err
	}
	// Serialize `TokenFeesOwed1` param:
	err = encoder.Encode(obj.TokenFeesOwed1)
	if err != nil {
		return err
	}
	// Serialize `RewardGrowthInside` param:
	err = encoder.Encode(obj.RewardGrowthInside)
	if err != nil {
		return err
	}
	// Serialize `RecentEpoch` param:
	err = encoder.Encode(obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolPositionState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthInside0LastX64`:
	err = decoder.Decode(&obj.FeeGrowthInside0LastX64)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthInside1LastX64`:
	err = decoder.Decode(&obj.FeeGrowthInside1LastX64)
	if err != nil {
		return err
	}
	// Deserialize `TokenFeesOwed0`:
	err = decoder.Decode(&obj.TokenFeesOwed0)
	if err != nil {
		return err
	}
	// Deserialize `TokenFeesOwed1`:
	err = decoder.Decode(&obj.TokenFeesOwed1)
	if err != nil {
		return err
	}
	// Deserialize `RewardGrowthInside`:
	err = decoder.Decode(&obj.RewardGrowthInside)
	if err != nil {
		return err
	}
	// Deserialize `RecentEpoch`:
	err = decoder.Decode(&obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type RewardInfo struct {
	// Reward state
	RewardState uint8

	// Reward open time
	OpenTime uint64

	// Reward end time
	EndTime uint64

	// Reward last update time
	LastUpdateTime uint64

	// Q64.64 number indicates how many tokens per second are earned per unit of liquidity.
	EmissionsPerSecondX64 ag_binary.Uint128

	// The total amount of reward emissioned
	RewardTotalEmissioned uint64

	// The total amount of claimed reward
	RewardClaimed uint64

	// Reward token mint.
	TokenMint ag_solanago.PublicKey

	// Reward vault token account.
	TokenVault ag_solanago.PublicKey

	// The owner that has permission to set reward param
	Authority ag_solanago.PublicKey

	// Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward
	// emissions were turned on.
	RewardGrowthGlobalX64 ag_binary.Uint128
}

func (obj RewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardState` param:
	err = encoder.Encode(obj.RewardState)
	if err != nil {
		return err
	}
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTime` param:
	err = encoder.Encode(obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Serialize `EmissionsPerSecondX64` param:
	err = encoder.Encode(obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Serialize `RewardTotalEmissioned` param:
	err = encoder.Encode(obj.RewardTotalEmissioned)
	if err != nil {
		return err
	}
	// Serialize `RewardClaimed` param:
	err = encoder.Encode(obj.RewardClaimed)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenVault` param:
	err = encoder.Encode(obj.TokenVault)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `RewardGrowthGlobalX64` param:
	err = encoder.Encode(obj.RewardGrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardState`:
	err = decoder.Decode(&obj.RewardState)
	if err != nil {
		return err
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTime`:
	err = decoder.Decode(&obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Deserialize `EmissionsPerSecondX64`:
	err = decoder.Decode(&obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Deserialize `RewardTotalEmissioned`:
	err = decoder.Decode(&obj.RewardTotalEmissioned)
	if err != nil {
		return err
	}
	// Deserialize `RewardClaimed`:
	err = decoder.Decode(&obj.RewardClaimed)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenVault`:
	err = decoder.Decode(&obj.TokenVault)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `RewardGrowthGlobalX64`:
	err = decoder.Decode(&obj.RewardGrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

type SupportMintAssociated struct {
	// Bump to identify PDA
	Bump uint8

	// Address of the supported token22 mint
	Mint    ag_solanago.PublicKey
	padding [8]uint64
}

func (obj SupportMintAssociated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SupportMintAssociated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type SwapEvent struct {
	// The pool for which token_0 and token_1 were swapped
	PoolState ag_solanago.PublicKey

	// The address that initiated the swap call, and that received the callback
	Sender ag_solanago.PublicKey

	// The payer token account in zero for one swaps, or the recipient token account
	// in one for zero swaps
	TokenAccount0 ag_solanago.PublicKey

	// The payer token account in one for zero swaps, or the recipient token account
	// in zero for one swaps
	TokenAccount1 ag_solanago.PublicKey

	// The real delta amount of the token_0 of the pool or user
	Amount0 uint64

	// The transfer fee charged by the withheld_amount of the token_0
	TransferFee0 uint64

	// The real delta of the token_1 of the pool or user
	Amount1 uint64

	// The transfer fee charged by the withheld_amount of the token_1
	TransferFee1 uint64

	// if true, amount_0 is negtive and amount_1 is positive
	ZeroForOne bool

	// The sqrt(price) of the pool after the swap, as a Q64.64
	SqrtPriceX64 ag_binary.Uint128

	// The liquidity of the pool after the swap
	Liquidity ag_binary.Uint128

	// The log base 1.0001 of price of the pool after the swap
	Tick int32
}

func (obj SwapEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolState` param:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `TokenAccount0` param:
	err = encoder.Encode(obj.TokenAccount0)
	if err != nil {
		return err
	}
	// Serialize `TokenAccount1` param:
	err = encoder.Encode(obj.TokenAccount1)
	if err != nil {
		return err
	}
	// Serialize `Amount0` param:
	err = encoder.Encode(obj.Amount0)
	if err != nil {
		return err
	}
	// Serialize `TransferFee0` param:
	err = encoder.Encode(obj.TransferFee0)
	if err != nil {
		return err
	}
	// Serialize `Amount1` param:
	err = encoder.Encode(obj.Amount1)
	if err != nil {
		return err
	}
	// Serialize `TransferFee1` param:
	err = encoder.Encode(obj.TransferFee1)
	if err != nil {
		return err
	}
	// Serialize `ZeroForOne` param:
	err = encoder.Encode(obj.ZeroForOne)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceX64` param:
	err = encoder.Encode(obj.SqrtPriceX64)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `Tick` param:
	err = encoder.Encode(obj.Tick)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `TokenAccount0`:
	err = decoder.Decode(&obj.TokenAccount0)
	if err != nil {
		return err
	}
	// Deserialize `TokenAccount1`:
	err = decoder.Decode(&obj.TokenAccount1)
	if err != nil {
		return err
	}
	// Deserialize `Amount0`:
	err = decoder.Decode(&obj.Amount0)
	if err != nil {
		return err
	}
	// Deserialize `TransferFee0`:
	err = decoder.Decode(&obj.TransferFee0)
	if err != nil {
		return err
	}
	// Deserialize `Amount1`:
	err = decoder.Decode(&obj.Amount1)
	if err != nil {
		return err
	}
	// Deserialize `TransferFee1`:
	err = decoder.Decode(&obj.TransferFee1)
	if err != nil {
		return err
	}
	// Deserialize `ZeroForOne`:
	err = decoder.Decode(&obj.ZeroForOne)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceX64`:
	err = decoder.Decode(&obj.SqrtPriceX64)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `Tick`:
	err = decoder.Decode(&obj.Tick)
	if err != nil {
		return err
	}
	return nil
}

type TickArrayBitmapExtension struct {
	PoolId ag_solanago.PublicKey

	// Packed initialized tick array state for start_tick_index is positive
	PositiveTickArrayBitmap [14][8]uint64

	// Packed initialized tick array state for start_tick_index is negitive
	NegativeTickArrayBitmap [14][8]uint64
}

func (obj TickArrayBitmapExtension) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `PositiveTickArrayBitmap` param:
	err = encoder.Encode(obj.PositiveTickArrayBitmap)
	if err != nil {
		return err
	}
	// Serialize `NegativeTickArrayBitmap` param:
	err = encoder.Encode(obj.NegativeTickArrayBitmap)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TickArrayBitmapExtension) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `PositiveTickArrayBitmap`:
	err = decoder.Decode(&obj.PositiveTickArrayBitmap)
	if err != nil {
		return err
	}
	// Deserialize `NegativeTickArrayBitmap`:
	err = decoder.Decode(&obj.NegativeTickArrayBitmap)
	if err != nil {
		return err
	}
	return nil
}

type TickArrayState struct {
	PoolId               ag_solanago.PublicKey
	StartTickIndex       int32
	Ticks                [60]TickState
	InitializedTickCount uint8
	RecentEpoch          uint64
	padding              [107]uint8
}

func (obj TickArrayState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `StartTickIndex` param:
	err = encoder.Encode(obj.StartTickIndex)
	if err != nil {
		return err
	}
	// Serialize `Ticks` param:
	err = encoder.Encode(obj.Ticks)
	if err != nil {
		return err
	}
	// Serialize `InitializedTickCount` param:
	err = encoder.Encode(obj.InitializedTickCount)
	if err != nil {
		return err
	}
	// Serialize `RecentEpoch` param:
	err = encoder.Encode(obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TickArrayState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `StartTickIndex`:
	err = decoder.Decode(&obj.StartTickIndex)
	if err != nil {
		return err
	}
	// Deserialize `Ticks`:
	err = decoder.Decode(&obj.Ticks)
	if err != nil {
		return err
	}
	// Deserialize `InitializedTickCount`:
	err = decoder.Decode(&obj.InitializedTickCount)
	if err != nil {
		return err
	}
	// Deserialize `RecentEpoch`:
	err = decoder.Decode(&obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type TickState struct {
	Tick int32

	// Amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left)
	LiquidityNet ag_binary.Int128

	// The total position liquidity that references this tick
	LiquidityGross ag_binary.Uint128

	// Fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)
	// only has relative meaning, not absolute — the value depends on when the tick is initialized
	FeeGrowthOutside0X64    ag_binary.Uint128
	FeeGrowthOutside1X64    ag_binary.Uint128
	RewardGrowthsOutsideX64 [3]ag_binary.Uint128
	padding                 [13]uint32
}

func (obj TickState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Tick` param:
	err = encoder.Encode(obj.Tick)
	if err != nil {
		return err
	}
	// Serialize `LiquidityNet` param:
	err = encoder.Encode(obj.LiquidityNet)
	if err != nil {
		return err
	}
	// Serialize `LiquidityGross` param:
	err = encoder.Encode(obj.LiquidityGross)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthOutside0X64` param:
	err = encoder.Encode(obj.FeeGrowthOutside0X64)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthOutside1X64` param:
	err = encoder.Encode(obj.FeeGrowthOutside1X64)
	if err != nil {
		return err
	}
	// Serialize `RewardGrowthsOutsideX64` param:
	err = encoder.Encode(obj.RewardGrowthsOutsideX64)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TickState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Tick`:
	err = decoder.Decode(&obj.Tick)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityNet`:
	err = decoder.Decode(&obj.LiquidityNet)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityGross`:
	err = decoder.Decode(&obj.LiquidityGross)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthOutside0X64`:
	err = decoder.Decode(&obj.FeeGrowthOutside0X64)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthOutside1X64`:
	err = decoder.Decode(&obj.FeeGrowthOutside1X64)
	if err != nil {
		return err
	}
	// Deserialize `RewardGrowthsOutsideX64`:
	err = decoder.Decode(&obj.RewardGrowthsOutsideX64)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type UpdateRewardInfosEvent struct {
	// Reward info
	RewardGrowthGlobalX64 [3]ag_binary.Uint128
}

func (obj UpdateRewardInfosEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardGrowthGlobalX64` param:
	err = encoder.Encode(obj.RewardGrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdateRewardInfosEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardGrowthGlobalX64`:
	err = decoder.Decode(&obj.RewardGrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}
