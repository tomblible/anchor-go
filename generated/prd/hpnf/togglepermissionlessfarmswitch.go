// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hpnf

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Toggle the permissionless farm switch account
//
// # Arguments
//
// * `ctx`- The context of accounts
// * `is_on`- Is the permissionless farm allowed or not
//
type TogglePermissionlessFarmSwitch struct {
	IsOn *bool

	// [0] = [WRITE, SIGNER] owner
	//
	// [1] = [WRITE] permissionless_farm_switch
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTogglePermissionlessFarmSwitchInstructionBuilder creates a new `TogglePermissionlessFarmSwitch` instruction builder.
func NewTogglePermissionlessFarmSwitchInstructionBuilder() *TogglePermissionlessFarmSwitch {
	nd := &TogglePermissionlessFarmSwitch{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Owner).WRITE().SIGNER()
	nd.AccountMetaSlice[1] = ag_solanago.Meta(PermissionlessFarmSwitchPDA).WRITE()
	nd.AccountMetaSlice[2] = ag_solanago.Meta(SystemProgram)
	return nd
}

// SetIsOn sets the "is_on" parameter.
func (inst *TogglePermissionlessFarmSwitch) SetIsOn(is_on bool) *TogglePermissionlessFarmSwitch {
	inst.IsOn = &is_on
	return inst
}

// SetOwnerAccount sets the "owner" account.
func (inst *TogglePermissionlessFarmSwitch) SetOwnerAccount(owner ag_solanago.PublicKey) *TogglePermissionlessFarmSwitch {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *TogglePermissionlessFarmSwitch) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPermissionlessFarmSwitchAccount sets the "permissionless_farm_switch" account.
func (inst *TogglePermissionlessFarmSwitch) SetPermissionlessFarmSwitchAccount(permissionlessFarmSwitch ag_solanago.PublicKey) *TogglePermissionlessFarmSwitch {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(permissionlessFarmSwitch).WRITE()
	return inst
}

// GetPermissionlessFarmSwitchAccount gets the "permissionless_farm_switch" account.
func (inst *TogglePermissionlessFarmSwitch) GetPermissionlessFarmSwitchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *TogglePermissionlessFarmSwitch) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *TogglePermissionlessFarmSwitch {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *TogglePermissionlessFarmSwitch) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *TogglePermissionlessFarmSwitch) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *TogglePermissionlessFarmSwitch) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *TogglePermissionlessFarmSwitch {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *TogglePermissionlessFarmSwitch) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst TogglePermissionlessFarmSwitch) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TogglePermissionlessFarmSwitch,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TogglePermissionlessFarmSwitch) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TogglePermissionlessFarmSwitch) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.IsOn == nil {
			return errors.New("isOn parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PermissionlessFarmSwitch is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *TogglePermissionlessFarmSwitch) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TogglePermissionlessFarmSwitch")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" IsOn", *inst.IsOn))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("permissionless_farm_switch", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj TogglePermissionlessFarmSwitch) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsOn` param:
	err = encoder.Encode(obj.IsOn)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TogglePermissionlessFarmSwitch) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsOn`:
	err = decoder.Decode(&obj.IsOn)
	if err != nil {
		return err
	}
	return nil
}

// NewTogglePermissionlessFarmSwitchInstruction declares a new TogglePermissionlessFarmSwitch instruction with the provided parameters and accounts.
func NewTogglePermissionlessFarmSwitchInstruction(
	// Parameters:
	is_on bool) *TogglePermissionlessFarmSwitch {
	return NewTogglePermissionlessFarmSwitchInstructionBuilder().
		SetIsOn(is_on)
}

// NewSimpleTogglePermissionlessFarmSwitchInstruction declares a new TogglePermissionlessFarmSwitch instruction with the provided parameters and accounts.
func NewSimpleTogglePermissionlessFarmSwitchInstruction(
	// Parameters:
	is_on bool) *TogglePermissionlessFarmSwitch {
	return NewTogglePermissionlessFarmSwitchInstructionBuilder().
		SetIsOn(is_on)
}
