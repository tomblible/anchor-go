// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hpnf

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create support token22 mint account which can create pool and send rewards with ignoring the not support extensions.
type CreateSupportMintAssociated struct {

	// [0] = [WRITE, SIGNER] owner
	// ··········· Address to be set as protocol owner.
	//
	// [1] = [] token_mint
	// ··········· Support token mint
	//
	// [2] = [WRITE] support_mint_associated
	// ··········· Initialize support mint state account to store support mint address and bump.
	//
	// [3] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateSupportMintAssociatedInstructionBuilder creates a new `CreateSupportMintAssociated` instruction builder.
func NewCreateSupportMintAssociatedInstructionBuilder() *CreateSupportMintAssociated {
	nd := &CreateSupportMintAssociated{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Owner).WRITE().SIGNER()
	nd.AccountMetaSlice[3] = ag_solanago.Meta(SystemProgram)
	return nd
}

// SetOwnerAccount sets the "owner" account.
// Address to be set as protocol owner.
func (inst *CreateSupportMintAssociated) SetOwnerAccount(owner ag_solanago.PublicKey) *CreateSupportMintAssociated {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// Address to be set as protocol owner.
func (inst *CreateSupportMintAssociated) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMintAccount sets the "token_mint" account.
// Support token mint
func (inst *CreateSupportMintAssociated) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *CreateSupportMintAssociated {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "token_mint" account.
// Support token mint
func (inst *CreateSupportMintAssociated) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSupportMintAssociatedAccount sets the "support_mint_associated" account.
// Initialize support mint state account to store support mint address and bump.
func (inst *CreateSupportMintAssociated) SetSupportMintAssociatedAccount(supportMintAssociated ag_solanago.PublicKey) *CreateSupportMintAssociated {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(supportMintAssociated).WRITE()
	return inst
}

// GetSupportMintAssociatedAccount gets the "support_mint_associated" account.
// Initialize support mint state account to store support mint address and bump.
func (inst *CreateSupportMintAssociated) GetSupportMintAssociatedAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateSupportMintAssociated) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateSupportMintAssociated {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateSupportMintAssociated) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *CreateSupportMintAssociated) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateSupportMintAssociated) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateSupportMintAssociated {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *CreateSupportMintAssociated) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst CreateSupportMintAssociated) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateSupportMintAssociated,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateSupportMintAssociated) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateSupportMintAssociated) Validate() error {
	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SupportMintAssociated is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateSupportMintAssociated) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateSupportMintAssociated")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             token_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("support_mint_associated", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         system_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CreateSupportMintAssociated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateSupportMintAssociated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateSupportMintAssociatedInstruction declares a new CreateSupportMintAssociated instruction with the provided parameters and accounts.
func NewCreateSupportMintAssociatedInstruction(
	tokenMint ag_solanago.PublicKey,
	supportMintAssociated ag_solanago.PublicKey) *CreateSupportMintAssociated {
	return NewCreateSupportMintAssociatedInstructionBuilder().
		SetTokenMintAccount(tokenMint).
		SetSupportMintAssociatedAccount(supportMintAssociated)
}

// NewSimpleCreateSupportMintAssociatedInstruction declares a new CreateSupportMintAssociated instruction with the provided parameters and accounts.
func NewSimpleCreateSupportMintAssociatedInstruction(
	tokenMint ag_solanago.PublicKey) *CreateSupportMintAssociated {
	supportMintAssociated := MustFindSupportMintAssociatedAddress(tokenMint)
	return NewCreateSupportMintAssociatedInstructionBuilder().
		SetTokenMintAccount(tokenMint).
		SetSupportMintAssociatedAccount(supportMintAssociated)
}
