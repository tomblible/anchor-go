// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseClaimFeeOperator is the `close_claim_fee_operator` instruction.
type CloseClaimFeeOperator struct {

	// [0] = [WRITE] claim_fee_operator
	//
	// [1] = [WRITE] rent_receiver
	//
	// [2] = [SIGNER] admin
	//
	// [3] = [] event_authority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseClaimFeeOperatorInstructionBuilder creates a new `CloseClaimFeeOperator` instruction builder.
func NewCloseClaimFeeOperatorInstructionBuilder() *CloseClaimFeeOperator {
	nd := &CloseClaimFeeOperator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetClaimFeeOperatorAccount sets the "claim_fee_operator" account.
func (inst *CloseClaimFeeOperator) SetClaimFeeOperatorAccount(claimFeeOperator ag_solanago.PublicKey) *CloseClaimFeeOperator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(claimFeeOperator).WRITE()
	return inst
}

// GetClaimFeeOperatorAccount gets the "claim_fee_operator" account.
func (inst *CloseClaimFeeOperator) GetClaimFeeOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRentReceiverAccount sets the "rent_receiver" account.
func (inst *CloseClaimFeeOperator) SetRentReceiverAccount(rentReceiver ag_solanago.PublicKey) *CloseClaimFeeOperator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(rentReceiver).WRITE()
	return inst
}

// GetRentReceiverAccount gets the "rent_receiver" account.
func (inst *CloseClaimFeeOperator) GetRentReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *CloseClaimFeeOperator) SetAdminAccount(admin ag_solanago.PublicKey) *CloseClaimFeeOperator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *CloseClaimFeeOperator) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CloseClaimFeeOperator) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CloseClaimFeeOperator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CloseClaimFeeOperator) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *CloseClaimFeeOperator) SetProgramAccount(program ag_solanago.PublicKey) *CloseClaimFeeOperator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CloseClaimFeeOperator) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *CloseClaimFeeOperator) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CloseClaimFeeOperator) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CloseClaimFeeOperator {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *CloseClaimFeeOperator) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst CloseClaimFeeOperator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseClaimFeeOperator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseClaimFeeOperator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseClaimFeeOperator) Validate() error {
	if len(inst.AccountMetaSlice) != 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ClaimFeeOperator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RentReceiver is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CloseClaimFeeOperator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseClaimFeeOperator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("claim_fee_operator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     rent_receiver", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   event_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CloseClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CloseClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseClaimFeeOperatorInstruction declares a new CloseClaimFeeOperator instruction with the provided parameters and accounts.
func NewCloseClaimFeeOperatorInstruction(
	// Accounts:
	claimFeeOperator ag_solanago.PublicKey,
	rentReceiver ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *CloseClaimFeeOperator {
	return NewCloseClaimFeeOperatorInstructionBuilder().
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetRentReceiverAccount(rentReceiver).
		SetAdminAccount(admin).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleCloseClaimFeeOperatorInstruction declares a new CloseClaimFeeOperator instruction with the provided parameters and accounts.
func NewSimpleCloseClaimFeeOperatorInstruction(
	// Accounts:
	claimFeeOperator ag_solanago.PublicKey,
	rentReceiver ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *CloseClaimFeeOperator {
	return NewCloseClaimFeeOperatorInstructionBuilder().
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetRentReceiverAccount(rentReceiver).
		SetAdminAccount(admin)
}
