// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ADMIN FUNCTIONS /////
type CreateConfig struct {
	Index            *uint64
	ConfigParameters *StaticConfigParameters

	// [0] = [WRITE] config
	//
	// [1] = [WRITE, SIGNER] admin
	//
	// [2] = [] system_program
	//
	// [3] = [] event_authority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateConfigInstructionBuilder creates a new `CreateConfig` instruction builder.
func NewCreateConfigInstructionBuilder() *CreateConfig {
	nd := &CreateConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetIndex sets the "index" parameter.
func (inst *CreateConfig) SetIndex(index uint64) *CreateConfig {
	inst.Index = &index
	return inst
}

// SetConfigParameters sets the "config_parameters" parameter.
func (inst *CreateConfig) SetConfigParameters(config_parameters StaticConfigParameters) *CreateConfig {
	inst.ConfigParameters = &config_parameters
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *CreateConfig) SetConfigAccount(config ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *CreateConfig) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *CreateConfig) SetAdminAccount(admin ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *CreateConfig) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CreateConfig) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CreateConfig) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *CreateConfig) SetProgramAccount(program ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CreateConfig) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *CreateConfig) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateConfig) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateConfig {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *CreateConfig) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst CreateConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Index == nil {
			return errors.New("index parameter is not set")
		}
		if inst.ConfigParameters == nil {
			return errors.New("configParameters parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CreateConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("            Index", *inst.Index))
						paramsBranch.Child(ag_format.Param(" ConfigParameters", *inst.ConfigParameters))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `ConfigParameters` param:
	err = encoder.Encode(obj.ConfigParameters)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `ConfigParameters`:
	err = decoder.Decode(&obj.ConfigParameters)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateConfigInstruction declares a new CreateConfig instruction with the provided parameters and accounts.
func NewCreateConfigInstruction(
	// Parameters:
	index uint64,
	config_parameters StaticConfigParameters,
	// Accounts:
	config ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *CreateConfig {
	return NewCreateConfigInstructionBuilder().
		SetIndex(index).
		SetConfigParameters(config_parameters).
		SetConfigAccount(config).
		SetAdminAccount(admin)
}

// NewSimpleCreateConfigInstruction declares a new CreateConfig instruction with the provided parameters and accounts.
func NewSimpleCreateConfigInstruction(
	// Parameters:
	index uint64,
	config_parameters StaticConfigParameters,
	admin ag_solanago.PublicKey) *CreateConfig {
	config := MustFindConfigAddress(index)
	return NewCreateConfigInstructionBuilder().
		SetIndex(index).
		SetConfigParameters(config_parameters).
		SetConfigAccount(config).
		SetAdminAccount(admin)
}
