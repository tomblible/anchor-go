// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClaimPartnerFee is the `claim_partner_fee` instruction.
type ClaimPartnerFee struct {
	MaxAmountA *uint64
	MaxAmountB *uint64

	// [0] = [] pool_authority
	//
	// [1] = [WRITE] pool
	//
	// [2] = [WRITE] token_a_account
	// ··········· The treasury token a account
	//
	// [3] = [WRITE] token_b_account
	// ··········· The treasury token b account
	//
	// [4] = [WRITE] token_a_vault
	// ··········· The vault token account for input token
	//
	// [5] = [WRITE] token_b_vault
	// ··········· The vault token account for output token
	//
	// [6] = [] token_a_mint
	// ··········· The mint of token a
	//
	// [7] = [] token_b_mint
	// ··········· The mint of token b
	//
	// [8] = [SIGNER] partner
	//
	// [9] = [] token_a_program
	// ··········· Token a program
	//
	// [10] = [] token_b_program
	// ··········· Token b program
	//
	// [11] = [] event_authority
	//
	// [12] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimPartnerFeeInstructionBuilder creates a new `ClaimPartnerFee` instruction builder.
func NewClaimPartnerFeeInstructionBuilder() *ClaimPartnerFee {
	nd := &ClaimPartnerFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(PoolAuthorityPDA)
	nd.AccountMetaSlice[11] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[12] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetMaxAmountA sets the "max_amount_a" parameter.
func (inst *ClaimPartnerFee) SetMaxAmountA(max_amount_a uint64) *ClaimPartnerFee {
	inst.MaxAmountA = &max_amount_a
	return inst
}

// SetMaxAmountB sets the "max_amount_b" parameter.
func (inst *ClaimPartnerFee) SetMaxAmountB(max_amount_b uint64) *ClaimPartnerFee {
	inst.MaxAmountB = &max_amount_b
	return inst
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *ClaimPartnerFee) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *ClaimPartnerFee) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *ClaimPartnerFee) SetPoolAccount(pool ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *ClaimPartnerFee) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAAccountAccount sets the "token_a_account" account.
// The treasury token a account
func (inst *ClaimPartnerFee) SetTokenAAccountAccount(tokenAAccount ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAAccount).WRITE()
	return inst
}

// GetTokenAAccountAccount gets the "token_a_account" account.
// The treasury token a account
func (inst *ClaimPartnerFee) GetTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBAccountAccount sets the "token_b_account" account.
// The treasury token b account
func (inst *ClaimPartnerFee) SetTokenBAccountAccount(tokenBAccount ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBAccount).WRITE()
	return inst
}

// GetTokenBAccountAccount gets the "token_b_account" account.
// The treasury token b account
func (inst *ClaimPartnerFee) GetTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenAVaultAccount sets the "token_a_vault" account.
// The vault token account for input token
func (inst *ClaimPartnerFee) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

// GetTokenAVaultAccount gets the "token_a_vault" account.
// The vault token account for input token
func (inst *ClaimPartnerFee) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenBVaultAccount sets the "token_b_vault" account.
// The vault token account for output token
func (inst *ClaimPartnerFee) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

// GetTokenBVaultAccount gets the "token_b_vault" account.
// The vault token account for output token
func (inst *ClaimPartnerFee) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenAMintAccount sets the "token_a_mint" account.
// The mint of token a
func (inst *ClaimPartnerFee) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "token_a_mint" account.
// The mint of token a
func (inst *ClaimPartnerFee) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenBMintAccount sets the "token_b_mint" account.
// The mint of token b
func (inst *ClaimPartnerFee) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "token_b_mint" account.
// The mint of token b
func (inst *ClaimPartnerFee) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPartnerAccount sets the "partner" account.
func (inst *ClaimPartnerFee) SetPartnerAccount(partner ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(partner).SIGNER()
	return inst
}

// GetPartnerAccount gets the "partner" account.
func (inst *ClaimPartnerFee) GetPartnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenAProgramAccount sets the "token_a_program" account.
// Token a program
func (inst *ClaimPartnerFee) SetTokenAProgramAccount(tokenAProgram ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenAProgram)
	return inst
}

// GetTokenAProgramAccount gets the "token_a_program" account.
// Token a program
func (inst *ClaimPartnerFee) GetTokenAProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenBProgramAccount sets the "token_b_program" account.
// Token b program
func (inst *ClaimPartnerFee) SetTokenBProgramAccount(tokenBProgram ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenBProgram)
	return inst
}

// GetTokenBProgramAccount gets the "token_b_program" account.
// Token b program
func (inst *ClaimPartnerFee) GetTokenBProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *ClaimPartnerFee) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *ClaimPartnerFee) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetProgramAccount sets the "program" account.
func (inst *ClaimPartnerFee) SetProgramAccount(program ag_solanago.PublicKey) *ClaimPartnerFee {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *ClaimPartnerFee) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst *ClaimPartnerFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ClaimPartnerFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ClaimPartnerFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:13], metas...)
	return inst
}

func (inst *ClaimPartnerFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13:]
}

func (inst ClaimPartnerFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimPartnerFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimPartnerFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimPartnerFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MaxAmountA == nil {
			return errors.New("maxAmountA parameter is not set")
		}
		if inst.MaxAmountB == nil {
			return errors.New("maxAmountB parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 13 {
		return errors.New("accounts slice has wrong length: expected 13 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Partner is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenAProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenBProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *ClaimPartnerFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimPartnerFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  MaxAmountA", *inst.MaxAmountA))
						paramsBranch.Child(ag_format.Param("  MaxAmountB", *inst.MaxAmountB))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       token_a_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       token_b_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  token_a_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  token_b_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   token_a_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   token_b_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        partner", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("token_a_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("token_b_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj ClaimPartnerFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxAmountA` param:
	err = encoder.Encode(obj.MaxAmountA)
	if err != nil {
		return err
	}
	// Serialize `MaxAmountB` param:
	err = encoder.Encode(obj.MaxAmountB)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ClaimPartnerFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxAmountA`:
	err = decoder.Decode(&obj.MaxAmountA)
	if err != nil {
		return err
	}
	// Deserialize `MaxAmountB`:
	err = decoder.Decode(&obj.MaxAmountB)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimPartnerFeeInstruction declares a new ClaimPartnerFee instruction with the provided parameters and accounts.
func NewClaimPartnerFeeInstruction(
	// Parameters:
	max_amount_a uint64,
	max_amount_b uint64,
	pool ag_solanago.PublicKey,
	tokenAAccount ag_solanago.PublicKey,
	tokenBAccount ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	partner ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey) *ClaimPartnerFee {
	return NewClaimPartnerFeeInstructionBuilder().
		SetMaxAmountA(max_amount_a).
		SetMaxAmountB(max_amount_b).
		SetPoolAccount(pool).
		SetTokenAAccountAccount(tokenAAccount).
		SetTokenBAccountAccount(tokenBAccount).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetPartnerAccount(partner).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram)
}

// NewSimpleClaimPartnerFeeInstruction declares a new ClaimPartnerFee instruction with the provided parameters and accounts.
func NewSimpleClaimPartnerFeeInstruction(
	// Parameters:
	max_amount_a uint64,
	max_amount_b uint64,
	pool ag_solanago.PublicKey,
	tokenAAccount ag_solanago.PublicKey,
	tokenBAccount ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	partner ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey) *ClaimPartnerFee {
	return NewClaimPartnerFeeInstructionBuilder().
		SetMaxAmountA(max_amount_a).
		SetMaxAmountB(max_amount_b).
		SetPoolAccount(pool).
		SetTokenAAccountAccount(tokenAAccount).
		SetTokenBAccountAccount(tokenBAccount).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetPartnerAccount(partner).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram)
}
