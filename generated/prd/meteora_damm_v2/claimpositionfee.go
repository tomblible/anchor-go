// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClaimPositionFee is the `claim_position_fee` instruction.
type ClaimPositionFee struct {

	// [0] = [] pool_authority
	//
	// [1] = [] pool
	//
	// [2] = [WRITE] position
	//
	// [3] = [WRITE] token_a_account
	// ··········· The user token a account
	//
	// [4] = [WRITE] token_b_account
	// ··········· The user token b account
	//
	// [5] = [WRITE] token_a_vault
	// ··········· The vault token account for input token
	//
	// [6] = [WRITE] token_b_vault
	// ··········· The vault token account for output token
	//
	// [7] = [] token_a_mint
	// ··········· The mint of token a
	//
	// [8] = [] token_b_mint
	// ··········· The mint of token b
	//
	// [9] = [] position_nft_account
	// ··········· The token account for nft
	//
	// [10] = [SIGNER] owner
	// ··········· owner of position
	//
	// [11] = [] token_a_program
	// ··········· Token a program
	//
	// [12] = [] token_b_program
	// ··········· Token b program
	//
	// [13] = [] event_authority
	//
	// [14] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimPositionFeeInstructionBuilder creates a new `ClaimPositionFee` instruction builder.
func NewClaimPositionFeeInstructionBuilder() *ClaimPositionFee {
	nd := &ClaimPositionFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(PoolAuthorityPDA)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[14] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *ClaimPositionFee) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *ClaimPositionFee) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *ClaimPositionFee) SetPoolAccount(pool ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool)
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *ClaimPositionFee) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionAccount sets the "position" account.
func (inst *ClaimPositionFee) SetPositionAccount(position ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *ClaimPositionFee) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenAAccountAccount sets the "token_a_account" account.
// The user token a account
func (inst *ClaimPositionFee) SetTokenAAccountAccount(tokenAAccount ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenAAccount).WRITE()
	return inst
}

// GetTokenAAccountAccount gets the "token_a_account" account.
// The user token a account
func (inst *ClaimPositionFee) GetTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenBAccountAccount sets the "token_b_account" account.
// The user token b account
func (inst *ClaimPositionFee) SetTokenBAccountAccount(tokenBAccount ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenBAccount).WRITE()
	return inst
}

// GetTokenBAccountAccount gets the "token_b_account" account.
// The user token b account
func (inst *ClaimPositionFee) GetTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenAVaultAccount sets the "token_a_vault" account.
// The vault token account for input token
func (inst *ClaimPositionFee) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

// GetTokenAVaultAccount gets the "token_a_vault" account.
// The vault token account for input token
func (inst *ClaimPositionFee) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenBVaultAccount sets the "token_b_vault" account.
// The vault token account for output token
func (inst *ClaimPositionFee) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

// GetTokenBVaultAccount gets the "token_b_vault" account.
// The vault token account for output token
func (inst *ClaimPositionFee) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenAMintAccount sets the "token_a_mint" account.
// The mint of token a
func (inst *ClaimPositionFee) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "token_a_mint" account.
// The mint of token a
func (inst *ClaimPositionFee) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenBMintAccount sets the "token_b_mint" account.
// The mint of token b
func (inst *ClaimPositionFee) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "token_b_mint" account.
// The mint of token b
func (inst *ClaimPositionFee) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPositionNftAccountAccount sets the "position_nft_account" account.
// The token account for nft
func (inst *ClaimPositionFee) SetPositionNftAccountAccount(positionNftAccount ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(positionNftAccount)
	return inst
}

// GetPositionNftAccountAccount gets the "position_nft_account" account.
// The token account for nft
func (inst *ClaimPositionFee) GetPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetOwnerAccount sets the "owner" account.
// owner of position
func (inst *ClaimPositionFee) SetOwnerAccount(owner ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// owner of position
func (inst *ClaimPositionFee) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenAProgramAccount sets the "token_a_program" account.
// Token a program
func (inst *ClaimPositionFee) SetTokenAProgramAccount(tokenAProgram ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenAProgram)
	return inst
}

// GetTokenAProgramAccount gets the "token_a_program" account.
// Token a program
func (inst *ClaimPositionFee) GetTokenAProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenBProgramAccount sets the "token_b_program" account.
// Token b program
func (inst *ClaimPositionFee) SetTokenBProgramAccount(tokenBProgram ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenBProgram)
	return inst
}

// GetTokenBProgramAccount gets the "token_b_program" account.
// Token b program
func (inst *ClaimPositionFee) GetTokenBProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *ClaimPositionFee) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *ClaimPositionFee) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetProgramAccount sets the "program" account.
func (inst *ClaimPositionFee) SetProgramAccount(program ag_solanago.PublicKey) *ClaimPositionFee {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *ClaimPositionFee) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst *ClaimPositionFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ClaimPositionFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ClaimPositionFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:15], metas...)
	return inst
}

func (inst *ClaimPositionFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15:]
}

func (inst ClaimPositionFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimPositionFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimPositionFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimPositionFee) Validate() error {
	if len(inst.AccountMetaSlice) != 15 {
		return errors.New("accounts slice has wrong length: expected 15 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenAAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenBAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenAProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenBProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *ClaimPositionFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimPositionFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       position", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       token_a_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       token_b_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  token_a_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  token_b_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   token_a_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   token_b_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  position_nft_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("token_a_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("token_b_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj ClaimPositionFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClaimPositionFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClaimPositionFeeInstruction declares a new ClaimPositionFee instruction with the provided parameters and accounts.
func NewClaimPositionFeeInstruction(
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	tokenAAccount ag_solanago.PublicKey,
	tokenBAccount ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey) *ClaimPositionFee {
	return NewClaimPositionFeeInstructionBuilder().
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetTokenAAccountAccount(tokenAAccount).
		SetTokenBAccountAccount(tokenBAccount).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetPositionNftAccountAccount(positionNftAccount).
		SetOwnerAccount(owner).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram)
}

// NewSimpleClaimPositionFeeInstruction declares a new ClaimPositionFee instruction with the provided parameters and accounts.
func NewSimpleClaimPositionFeeInstruction(
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	tokenAAccount ag_solanago.PublicKey,
	tokenBAccount ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey) *ClaimPositionFee {
	return NewClaimPositionFeeInstructionBuilder().
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetTokenAAccountAccount(tokenAAccount).
		SetTokenBAccountAccount(tokenBAccount).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetPositionNftAccountAccount(positionNftAccount).
		SetOwnerAccount(owner).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram)
}
