// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// LockPosition is the `lock_position` instruction.
type LockPosition struct {
	Params *VestingParameters

	// [0] = [] pool
	//
	// [1] = [WRITE] position
	//
	// [2] = [WRITE, SIGNER] vesting
	//
	// [3] = [] position_nft_account
	// ··········· The token account for nft
	//
	// [4] = [SIGNER] owner
	// ··········· owner of position
	//
	// [5] = [WRITE, SIGNER] payer
	//
	// [6] = [] system_program
	//
	// [7] = [] event_authority
	//
	// [8] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewLockPositionInstructionBuilder creates a new `LockPosition` instruction builder.
func NewLockPositionInstructionBuilder() *LockPosition {
	nd := &LockPosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	nd.AccountMetaSlice[6] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[7] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetParams sets the "params" parameter.
func (inst *LockPosition) SetParams(params VestingParameters) *LockPosition {
	inst.Params = &params
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *LockPosition) SetPoolAccount(pool ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool)
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *LockPosition) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccount sets the "position" account.
func (inst *LockPosition) SetPositionAccount(position ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *LockPosition) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVestingAccount sets the "vesting" account.
func (inst *LockPosition) SetVestingAccount(vesting ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vesting).WRITE().SIGNER()
	return inst
}

// GetVestingAccount gets the "vesting" account.
func (inst *LockPosition) GetVestingAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionNftAccountAccount sets the "position_nft_account" account.
// The token account for nft
func (inst *LockPosition) SetPositionNftAccountAccount(positionNftAccount ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionNftAccount)
	return inst
}

// GetPositionNftAccountAccount gets the "position_nft_account" account.
// The token account for nft
func (inst *LockPosition) GetPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOwnerAccount sets the "owner" account.
// owner of position
func (inst *LockPosition) SetOwnerAccount(owner ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// owner of position
func (inst *LockPosition) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPayerAccount sets the "payer" account.
func (inst *LockPosition) SetPayerAccount(payer ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *LockPosition) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *LockPosition) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *LockPosition) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *LockPosition) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *LockPosition) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetProgramAccount sets the "program" account.
func (inst *LockPosition) SetProgramAccount(program ag_solanago.PublicKey) *LockPosition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *LockPosition) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst *LockPosition) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *LockPosition) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *LockPosition {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:9], metas...)
	return inst
}

func (inst *LockPosition) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9:]
}

func (inst LockPosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_LockPosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst LockPosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *LockPosition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 9 {
		return errors.New("accounts slice has wrong length: expected 9 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Vesting is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *LockPosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("LockPosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        vesting", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  position_nft_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          payer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj LockPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *LockPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewLockPositionInstruction declares a new LockPosition instruction with the provided parameters and accounts.
func NewLockPositionInstruction(
	// Parameters:
	params VestingParameters,
	// Accounts:
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	vesting ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *LockPosition {
	return NewLockPositionInstructionBuilder().
		SetParams(params).
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetVestingAccount(vesting).
		SetPositionNftAccountAccount(positionNftAccount).
		SetOwnerAccount(owner).
		SetPayerAccount(payer)
}

// NewSimpleLockPositionInstruction declares a new LockPosition instruction with the provided parameters and accounts.
func NewSimpleLockPositionInstruction(
	// Parameters:
	params VestingParameters,
	// Accounts:
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	vesting ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *LockPosition {
	return NewLockPositionInstructionBuilder().
		SetParams(params).
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetVestingAccount(vesting).
		SetPositionNftAccountAccount(positionNftAccount).
		SetOwnerAccount(owner).
		SetPayerAccount(payer)
}
