// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawIneligibleReward is the `withdraw_ineligible_reward` instruction.
type WithdrawIneligibleReward struct {
	RewardIndex *uint8

	// [0] = [] pool_authority
	//
	// [1] = [WRITE] pool
	//
	// [2] = [WRITE] reward_vault
	//
	// [3] = [] reward_mint
	//
	// [4] = [WRITE] funder_token_account
	//
	// [5] = [SIGNER] funder
	//
	// [6] = [] token_program
	//
	// [7] = [] event_authority
	//
	// [8] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawIneligibleRewardInstructionBuilder creates a new `WithdrawIneligibleReward` instruction builder.
func NewWithdrawIneligibleRewardInstructionBuilder() *WithdrawIneligibleReward {
	nd := &WithdrawIneligibleReward{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(PoolAuthorityPDA)
	nd.AccountMetaSlice[7] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetRewardIndex sets the "reward_index" parameter.
func (inst *WithdrawIneligibleReward) SetRewardIndex(reward_index uint8) *WithdrawIneligibleReward {
	inst.RewardIndex = &reward_index
	return inst
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *WithdrawIneligibleReward) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *WithdrawIneligibleReward) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *WithdrawIneligibleReward) SetPoolAccount(pool ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *WithdrawIneligibleReward) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRewardVaultAccount sets the "reward_vault" account.
func (inst *WithdrawIneligibleReward) SetRewardVaultAccount(rewardVault ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rewardVault).WRITE()
	return inst
}

// GetRewardVaultAccount gets the "reward_vault" account.
func (inst *WithdrawIneligibleReward) GetRewardVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRewardMintAccount sets the "reward_mint" account.
func (inst *WithdrawIneligibleReward) SetRewardMintAccount(rewardMint ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rewardMint)
	return inst
}

// GetRewardMintAccount gets the "reward_mint" account.
func (inst *WithdrawIneligibleReward) GetRewardMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFunderTokenAccountAccount sets the "funder_token_account" account.
func (inst *WithdrawIneligibleReward) SetFunderTokenAccountAccount(funderTokenAccount ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(funderTokenAccount).WRITE()
	return inst
}

// GetFunderTokenAccountAccount gets the "funder_token_account" account.
func (inst *WithdrawIneligibleReward) GetFunderTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFunderAccount sets the "funder" account.
func (inst *WithdrawIneligibleReward) SetFunderAccount(funder ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(funder).SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *WithdrawIneligibleReward) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *WithdrawIneligibleReward) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *WithdrawIneligibleReward) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *WithdrawIneligibleReward) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *WithdrawIneligibleReward) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetProgramAccount sets the "program" account.
func (inst *WithdrawIneligibleReward) SetProgramAccount(program ag_solanago.PublicKey) *WithdrawIneligibleReward {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *WithdrawIneligibleReward) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst *WithdrawIneligibleReward) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WithdrawIneligibleReward) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WithdrawIneligibleReward {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:9], metas...)
	return inst
}

func (inst *WithdrawIneligibleReward) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9:]
}

func (inst WithdrawIneligibleReward) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawIneligibleReward,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawIneligibleReward) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawIneligibleReward) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("rewardIndex parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 9 {
		return errors.New("accounts slice has wrong length: expected 9 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RewardVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RewardMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FunderTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *WithdrawIneligibleReward) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawIneligibleReward")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" RewardIndex", *inst.RewardIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   reward_vault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    reward_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  funder_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         funder", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  token_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj WithdrawIneligibleReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawIneligibleReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawIneligibleRewardInstruction declares a new WithdrawIneligibleReward instruction with the provided parameters and accounts.
func NewWithdrawIneligibleRewardInstruction(
	// Parameters:
	reward_index uint8,
	// Accounts:
	poolAuthority ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	funderTokenAccount ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *WithdrawIneligibleReward {
	return NewWithdrawIneligibleRewardInstructionBuilder().
		SetRewardIndex(reward_index).
		SetPoolAuthorityAccount(poolAuthority).
		SetPoolAccount(pool).
		SetRewardVaultAccount(rewardVault).
		SetRewardMintAccount(rewardMint).
		SetFunderTokenAccountAccount(funderTokenAccount).
		SetFunderAccount(funder).
		SetTokenProgramAccount(tokenProgram).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleWithdrawIneligibleRewardInstruction declares a new WithdrawIneligibleReward instruction with the provided parameters and accounts.
func NewSimpleWithdrawIneligibleRewardInstruction(
	// Parameters:
	reward_index uint8,
	pool ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	funderTokenAccount ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *WithdrawIneligibleReward {
	return NewWithdrawIneligibleRewardInstructionBuilder().
		SetRewardIndex(reward_index).
		SetPoolAccount(pool).
		SetRewardVaultAccount(rewardVault).
		SetRewardMintAccount(rewardMint).
		SetFunderTokenAccountAccount(funderTokenAccount).
		SetFunderAccount(funder).
		SetTokenProgramAccount(tokenProgram)
}
