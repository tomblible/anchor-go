// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateTokenBadge is the `create_token_badge` instruction.
type CreateTokenBadge struct {

	// [0] = [WRITE] token_badge
	//
	// [1] = [] token_mint
	//
	// [2] = [WRITE, SIGNER] admin
	//
	// [3] = [] system_program
	//
	// [4] = [] event_authority
	//
	// [5] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateTokenBadgeInstructionBuilder creates a new `CreateTokenBadge` instruction builder.
func NewCreateTokenBadgeInstructionBuilder() *CreateTokenBadge {
	nd := &CreateTokenBadge{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[5] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetTokenBadgeAccount sets the "token_badge" account.
func (inst *CreateTokenBadge) SetTokenBadgeAccount(tokenBadge ag_solanago.PublicKey) *CreateTokenBadge {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenBadge).WRITE()
	return inst
}

// GetTokenBadgeAccount gets the "token_badge" account.
func (inst *CreateTokenBadge) GetTokenBadgeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMintAccount sets the "token_mint" account.
func (inst *CreateTokenBadge) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *CreateTokenBadge {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "token_mint" account.
func (inst *CreateTokenBadge) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *CreateTokenBadge) SetAdminAccount(admin ag_solanago.PublicKey) *CreateTokenBadge {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *CreateTokenBadge) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateTokenBadge) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateTokenBadge {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateTokenBadge) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CreateTokenBadge) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CreateTokenBadge {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CreateTokenBadge) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramAccount sets the "program" account.
func (inst *CreateTokenBadge) SetProgramAccount(program ag_solanago.PublicKey) *CreateTokenBadge {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CreateTokenBadge) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst *CreateTokenBadge) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateTokenBadge) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateTokenBadge {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:6], metas...)
	return inst
}

func (inst *CreateTokenBadge) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6:]
}

func (inst CreateTokenBadge) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateTokenBadge,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateTokenBadge) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateTokenBadge) Validate() error {
	if len(inst.AccountMetaSlice) != 6 {
		return errors.New("accounts slice has wrong length: expected 6 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenBadge is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CreateTokenBadge) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateTokenBadge")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    token_badge", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     token_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CreateTokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateTokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateTokenBadgeInstruction declares a new CreateTokenBadge instruction with the provided parameters and accounts.
func NewCreateTokenBadgeInstruction(
	// Accounts:
	tokenBadge ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *CreateTokenBadge {
	return NewCreateTokenBadgeInstructionBuilder().
		SetTokenBadgeAccount(tokenBadge).
		SetTokenMintAccount(tokenMint).
		SetAdminAccount(admin).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleCreateTokenBadgeInstruction declares a new CreateTokenBadge instruction with the provided parameters and accounts.
func NewSimpleCreateTokenBadgeInstruction(
	tokenMint ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *CreateTokenBadge {
	tokenBadge := MustFindTokenBadgeAddress(tokenMint)
	return NewCreateTokenBadgeInstructionBuilder().
		SetTokenBadgeAccount(tokenBadge).
		SetTokenMintAccount(tokenMint).
		SetAdminAccount(admin)
}
