// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RefreshVesting is the `refresh_vesting` instruction.
type RefreshVesting struct {

	// [0] = [] pool
	//
	// [1] = [WRITE] position
	//
	// [2] = [] position_nft_account
	// ··········· The token account for nft
	//
	// [3] = [] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRefreshVestingInstructionBuilder creates a new `RefreshVesting` instruction builder.
func NewRefreshVestingInstructionBuilder() *RefreshVesting {
	nd := &RefreshVesting{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetPoolAccount sets the "pool" account.
func (inst *RefreshVesting) SetPoolAccount(pool ag_solanago.PublicKey) *RefreshVesting {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool)
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *RefreshVesting) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccount sets the "position" account.
func (inst *RefreshVesting) SetPositionAccount(position ag_solanago.PublicKey) *RefreshVesting {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *RefreshVesting) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionNftAccountAccount sets the "position_nft_account" account.
// The token account for nft
func (inst *RefreshVesting) SetPositionNftAccountAccount(positionNftAccount ag_solanago.PublicKey) *RefreshVesting {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(positionNftAccount)
	return inst
}

// GetPositionNftAccountAccount gets the "position_nft_account" account.
// The token account for nft
func (inst *RefreshVesting) GetPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOwnerAccount sets the "owner" account.
func (inst *RefreshVesting) SetOwnerAccount(owner ag_solanago.PublicKey) *RefreshVesting {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *RefreshVesting) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *RefreshVesting) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *RefreshVesting) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *RefreshVesting {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *RefreshVesting) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst RefreshVesting) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RefreshVesting,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RefreshVesting) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RefreshVesting) Validate() error {
	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *RefreshVesting) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RefreshVesting")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("position_nft_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        owner", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj RefreshVesting) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RefreshVesting) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRefreshVestingInstruction declares a new RefreshVesting instruction with the provided parameters and accounts.
func NewRefreshVestingInstruction(
	// Accounts:
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *RefreshVesting {
	return NewRefreshVestingInstructionBuilder().
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetPositionNftAccountAccount(positionNftAccount).
		SetOwnerAccount(owner)
}

// NewSimpleRefreshVestingInstruction declares a new RefreshVesting instruction with the provided parameters and accounts.
func NewSimpleRefreshVestingInstruction(
	// Accounts:
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *RefreshVesting {
	return NewRefreshVestingInstructionBuilder().
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetPositionNftAccountAccount(positionNftAccount).
		SetOwnerAccount(owner)
}
