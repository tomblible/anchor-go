// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type BaseFeeConfig struct {
	CliffFeeNumerator uint64
	SecondFactor      uint64
	ThirdFactor       uint64
	FirstFactor       uint16
	BaseFeeMode       uint8
	padding_0         [5]uint8
}

func (obj BaseFeeConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator` param:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `SecondFactor` param:
	err = encoder.Encode(obj.SecondFactor)
	if err != nil {
		return err
	}
	// Serialize `ThirdFactor` param:
	err = encoder.Encode(obj.ThirdFactor)
	if err != nil {
		return err
	}
	// Serialize `FirstFactor` param:
	err = encoder.Encode(obj.FirstFactor)
	if err != nil {
		return err
	}
	// Serialize `BaseFeeMode` param:
	err = encoder.Encode(obj.BaseFeeMode)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BaseFeeConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `SecondFactor`:
	err = decoder.Decode(&obj.SecondFactor)
	if err != nil {
		return err
	}
	// Deserialize `ThirdFactor`:
	err = decoder.Decode(&obj.ThirdFactor)
	if err != nil {
		return err
	}
	// Deserialize `FirstFactor`:
	err = decoder.Decode(&obj.FirstFactor)
	if err != nil {
		return err
	}
	// Deserialize `BaseFeeMode`:
	err = decoder.Decode(&obj.BaseFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	return nil
}

type BaseFeeParameters struct {
	CliffFeeNumerator uint64
	FirstFactor       uint16
	SecondFactor      uint64
	ThirdFactor       uint64
	BaseFeeMode       uint8
}

func (obj BaseFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator` param:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `FirstFactor` param:
	err = encoder.Encode(obj.FirstFactor)
	if err != nil {
		return err
	}
	// Serialize `SecondFactor` param:
	err = encoder.Encode(obj.SecondFactor)
	if err != nil {
		return err
	}
	// Serialize `ThirdFactor` param:
	err = encoder.Encode(obj.ThirdFactor)
	if err != nil {
		return err
	}
	// Serialize `BaseFeeMode` param:
	err = encoder.Encode(obj.BaseFeeMode)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BaseFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `FirstFactor`:
	err = decoder.Decode(&obj.FirstFactor)
	if err != nil {
		return err
	}
	// Deserialize `SecondFactor`:
	err = decoder.Decode(&obj.SecondFactor)
	if err != nil {
		return err
	}
	// Deserialize `ThirdFactor`:
	err = decoder.Decode(&obj.ThirdFactor)
	if err != nil {
		return err
	}
	// Deserialize `BaseFeeMode`:
	err = decoder.Decode(&obj.BaseFeeMode)
	if err != nil {
		return err
	}
	return nil
}

type ClaimFeeOperator struct {
	// operator
	Operator ag_solanago.PublicKey

	// Reserve
	_padding [128]uint8
}

func (obj ClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type Config struct {
	PoolFees             PoolFees
	ActivationDuration   uint64
	VaultConfigKey       ag_solanago.PublicKey
	PoolCreatorAuthority ag_solanago.PublicKey
	ActivationType       uint8
	PartnerFeeNumerator  uint64
	padding              [219]uint8
}

func (obj Config) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `ActivationDuration` param:
	err = encoder.Encode(obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `PartnerFeeNumerator` param:
	err = encoder.Encode(obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `ActivationDuration`:
	err = decoder.Decode(&obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `PartnerFeeNumerator`:
	err = decoder.Decode(&obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type ConfigParameters struct {
	PoolFees                    PoolFeeParameters
	CollectFeeMode              uint8
	MigrationOption             uint8
	ActivationType              uint8
	TokenType                   uint8
	TokenDecimal                uint8
	PartnerLpPercentage         uint8
	PartnerLockedLpPercentage   uint8
	CreatorLpPercentage         uint8
	CreatorLockedLpPercentage   uint8
	MigrationQuoteThreshold     uint64
	SqrtStartPrice              ag_binary.Uint128
	LockedVesting               LockedVestingParams
	MigrationFeeOption          uint8
	TokenSupply                 *TokenSupplyParams `bin:"optional"`
	CreatorTradingFeePercentage uint8
	TokenUpdateAuthority        uint8
	MigrationFee                MigrationFee
	padding_0                   [4]uint8

	// padding for future use
	padding_1 [7]uint64
	Curve     []LiquidityDistributionParameters
}

func (obj ConfigParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `MigrationOption` param:
	err = encoder.Encode(obj.MigrationOption)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `TokenType` param:
	err = encoder.Encode(obj.TokenType)
	if err != nil {
		return err
	}
	// Serialize `TokenDecimal` param:
	err = encoder.Encode(obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Serialize `PartnerLpPercentage` param:
	err = encoder.Encode(obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedLpPercentage` param:
	err = encoder.Encode(obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLpPercentage` param:
	err = encoder.Encode(obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedLpPercentage` param:
	err = encoder.Encode(obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `MigrationQuoteThreshold` param:
	err = encoder.Encode(obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Serialize `SqrtStartPrice` param:
	err = encoder.Encode(obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Serialize `LockedVesting` param:
	err = encoder.Encode(obj.LockedVesting)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeeOption` param:
	err = encoder.Encode(obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Serialize `TokenSupply` param (optional):
	{
		if obj.TokenSupply == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TokenSupply)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CreatorTradingFeePercentage` param:
	err = encoder.Encode(obj.CreatorTradingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `TokenUpdateAuthority` param:
	err = encoder.Encode(obj.TokenUpdateAuthority)
	if err != nil {
		return err
	}
	// Serialize `MigrationFee` param:
	err = encoder.Encode(obj.MigrationFee)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `padding_1` param:
	err = encoder.Encode(obj.padding_1)
	if err != nil {
		return err
	}
	// Serialize `Curve` param:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `MigrationOption`:
	err = decoder.Decode(&obj.MigrationOption)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `TokenType`:
	err = decoder.Decode(&obj.TokenType)
	if err != nil {
		return err
	}
	// Deserialize `TokenDecimal`:
	err = decoder.Decode(&obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLpPercentage`:
	err = decoder.Decode(&obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedLpPercentage`:
	err = decoder.Decode(&obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLpPercentage`:
	err = decoder.Decode(&obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedLpPercentage`:
	err = decoder.Decode(&obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `MigrationQuoteThreshold`:
	err = decoder.Decode(&obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Deserialize `SqrtStartPrice`:
	err = decoder.Decode(&obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Deserialize `LockedVesting`:
	err = decoder.Decode(&obj.LockedVesting)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeeOption`:
	err = decoder.Decode(&obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Deserialize `TokenSupply` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TokenSupply)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CreatorTradingFeePercentage`:
	err = decoder.Decode(&obj.CreatorTradingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `TokenUpdateAuthority`:
	err = decoder.Decode(&obj.TokenUpdateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFee`:
	err = decoder.Decode(&obj.MigrationFee)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `padding_1`:
	err = decoder.Decode(&obj.padding_1)
	if err != nil {
		return err
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

type CreatePartnerMetadataParameters struct {
	padding [96]uint8
	Name    string
	Website string
	Logo    string
}

func (obj CreatePartnerMetadataParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Website` param:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return err
	}
	// Serialize `Logo` param:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreatePartnerMetadataParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return err
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

type CreateVirtualPoolMetadataParameters struct {
	padding [96]uint8
	Name    string
	Website string
	Logo    string
}

func (obj CreateVirtualPoolMetadataParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Website` param:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return err
	}
	// Serialize `Logo` param:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateVirtualPoolMetadataParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return err
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

type DynamicFeeConfig struct {
	Initialized              uint8
	padding                  [7]uint8
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
	BinStep                  uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	padding2                 [8]uint8
	BinStepU128              ag_binary.Uint128
}

func (obj DynamicFeeConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `padding2` param:
	err = encoder.Encode(obj.padding2)
	if err != nil {
		return err
	}
	// Serialize `BinStepU128` param:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicFeeConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `padding2`:
	err = decoder.Decode(&obj.padding2)
	if err != nil {
		return err
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return err
	}
	return nil
}

type DynamicFeeParameters struct {
	BinStep                  uint16
	BinStepU128              ag_binary.Uint128
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
}

func (obj DynamicFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BinStepU128` param:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	return nil
}

type EvtClaimCreatorTradingFee struct {
	Pool             ag_solanago.PublicKey
	TokenBaseAmount  uint64
	TokenQuoteAmount uint64
}

func (obj EvtClaimCreatorTradingFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenBaseAmount` param:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenQuoteAmount` param:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimCreatorTradingFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtClaimProtocolFee struct {
	Pool             ag_solanago.PublicKey
	TokenBaseAmount  uint64
	TokenQuoteAmount uint64
}

func (obj EvtClaimProtocolFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenBaseAmount` param:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenQuoteAmount` param:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimProtocolFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtClaimTradingFee struct {
	Pool             ag_solanago.PublicKey
	TokenBaseAmount  uint64
	TokenQuoteAmount uint64
}

func (obj EvtClaimTradingFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenBaseAmount` param:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenQuoteAmount` param:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimTradingFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtCloseClaimFeeOperator struct {
	ClaimFeeOperator ag_solanago.PublicKey
	Operator         ag_solanago.PublicKey
}

func (obj EvtCloseClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ClaimFeeOperator` param:
	err = encoder.Encode(obj.ClaimFeeOperator)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCloseClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ClaimFeeOperator`:
	err = decoder.Decode(&obj.ClaimFeeOperator)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreateClaimFeeOperator struct {
	Operator ag_solanago.PublicKey
}

func (obj EvtCreateClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreateConfig struct {
	Config                    ag_solanago.PublicKey
	QuoteMint                 ag_solanago.PublicKey
	FeeClaimer                ag_solanago.PublicKey
	Owner                     ag_solanago.PublicKey
	PoolFees                  PoolFeeParameters
	CollectFeeMode            uint8
	MigrationOption           uint8
	ActivationType            uint8
	TokenDecimal              uint8
	TokenType                 uint8
	PartnerLockedLpPercentage uint8
	PartnerLpPercentage       uint8
	CreatorLockedLpPercentage uint8
	CreatorLpPercentage       uint8
	SwapBaseAmount            uint64
	MigrationQuoteThreshold   uint64
	MigrationBaseAmount       uint64
	SqrtStartPrice            ag_binary.Uint128
	LockedVesting             LockedVestingParams
	MigrationFeeOption        uint8
	FixedTokenSupplyFlag      uint8
	PreMigrationTokenSupply   uint64
	PostMigrationTokenSupply  uint64
	Curve                     []LiquidityDistributionParameters
}

func (obj EvtCreateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `FeeClaimer` param:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `MigrationOption` param:
	err = encoder.Encode(obj.MigrationOption)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `TokenDecimal` param:
	err = encoder.Encode(obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Serialize `TokenType` param:
	err = encoder.Encode(obj.TokenType)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedLpPercentage` param:
	err = encoder.Encode(obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `PartnerLpPercentage` param:
	err = encoder.Encode(obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedLpPercentage` param:
	err = encoder.Encode(obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLpPercentage` param:
	err = encoder.Encode(obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `SwapBaseAmount` param:
	err = encoder.Encode(obj.SwapBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `MigrationQuoteThreshold` param:
	err = encoder.Encode(obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Serialize `MigrationBaseAmount` param:
	err = encoder.Encode(obj.MigrationBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `SqrtStartPrice` param:
	err = encoder.Encode(obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Serialize `LockedVesting` param:
	err = encoder.Encode(obj.LockedVesting)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeeOption` param:
	err = encoder.Encode(obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Serialize `FixedTokenSupplyFlag` param:
	err = encoder.Encode(obj.FixedTokenSupplyFlag)
	if err != nil {
		return err
	}
	// Serialize `PreMigrationTokenSupply` param:
	err = encoder.Encode(obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `PostMigrationTokenSupply` param:
	err = encoder.Encode(obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `Curve` param:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `MigrationOption`:
	err = decoder.Decode(&obj.MigrationOption)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `TokenDecimal`:
	err = decoder.Decode(&obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Deserialize `TokenType`:
	err = decoder.Decode(&obj.TokenType)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedLpPercentage`:
	err = decoder.Decode(&obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLpPercentage`:
	err = decoder.Decode(&obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedLpPercentage`:
	err = decoder.Decode(&obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLpPercentage`:
	err = decoder.Decode(&obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `SwapBaseAmount`:
	err = decoder.Decode(&obj.SwapBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `MigrationQuoteThreshold`:
	err = decoder.Decode(&obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MigrationBaseAmount`:
	err = decoder.Decode(&obj.MigrationBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `SqrtStartPrice`:
	err = decoder.Decode(&obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Deserialize `LockedVesting`:
	err = decoder.Decode(&obj.LockedVesting)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeeOption`:
	err = decoder.Decode(&obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Deserialize `FixedTokenSupplyFlag`:
	err = decoder.Decode(&obj.FixedTokenSupplyFlag)
	if err != nil {
		return err
	}
	// Deserialize `PreMigrationTokenSupply`:
	err = decoder.Decode(&obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `PostMigrationTokenSupply`:
	err = decoder.Decode(&obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreateDammV2MigrationMetadata struct {
	VirtualPool ag_solanago.PublicKey
}

func (obj EvtCreateDammV2MigrationMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateDammV2MigrationMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreateMeteoraMigrationMetadata struct {
	VirtualPool ag_solanago.PublicKey
}

func (obj EvtCreateMeteoraMigrationMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateMeteoraMigrationMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreatorWithdrawSurplus struct {
	Pool          ag_solanago.PublicKey
	SurplusAmount uint64
}

func (obj EvtCreatorWithdrawSurplus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `SurplusAmount` param:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreatorWithdrawSurplus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtCurveComplete struct {
	Pool         ag_solanago.PublicKey
	Config       ag_solanago.PublicKey
	BaseReserve  uint64
	QuoteReserve uint64
}

func (obj EvtCurveComplete) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `BaseReserve` param:
	err = encoder.Encode(obj.BaseReserve)
	if err != nil {
		return err
	}
	// Serialize `QuoteReserve` param:
	err = encoder.Encode(obj.QuoteReserve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCurveComplete) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `BaseReserve`:
	err = decoder.Decode(&obj.BaseReserve)
	if err != nil {
		return err
	}
	// Deserialize `QuoteReserve`:
	err = decoder.Decode(&obj.QuoteReserve)
	if err != nil {
		return err
	}
	return nil
}

type EvtInitializePool struct {
	Pool            ag_solanago.PublicKey
	Config          ag_solanago.PublicKey
	Creator         ag_solanago.PublicKey
	BaseMint        ag_solanago.PublicKey
	PoolType        uint8
	ActivationPoint uint64
}

func (obj EvtInitializePool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtInitializePool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	return nil
}

type EvtPartnerMetadata struct {
	PartnerMetadata ag_solanago.PublicKey
	FeeClaimer      ag_solanago.PublicKey
}

func (obj EvtPartnerMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PartnerMetadata` param:
	err = encoder.Encode(obj.PartnerMetadata)
	if err != nil {
		return err
	}
	// Serialize `FeeClaimer` param:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtPartnerMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PartnerMetadata`:
	err = decoder.Decode(&obj.PartnerMetadata)
	if err != nil {
		return err
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return err
	}
	return nil
}

type EvtPartnerWithdrawMigrationFee struct {
	Pool ag_solanago.PublicKey
	Fee  uint64
}

func (obj EvtPartnerWithdrawMigrationFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtPartnerWithdrawMigrationFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	return nil
}

type EvtPartnerWithdrawSurplus struct {
	Pool          ag_solanago.PublicKey
	SurplusAmount uint64
}

func (obj EvtPartnerWithdrawSurplus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `SurplusAmount` param:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtPartnerWithdrawSurplus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtProtocolWithdrawSurplus struct {
	Pool          ag_solanago.PublicKey
	SurplusAmount uint64
}

func (obj EvtProtocolWithdrawSurplus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `SurplusAmount` param:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtProtocolWithdrawSurplus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtSwap struct {
	Pool             ag_solanago.PublicKey
	Config           ag_solanago.PublicKey
	TradeDirection   uint8
	HasReferral      bool
	Params           SwapParameters
	SwapResult       SwapResult
	AmountIn         uint64
	CurrentTimestamp uint64
}

func (obj EvtSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `TradeDirection` param:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return err
	}
	// Serialize `HasReferral` param:
	err = encoder.Encode(obj.HasReferral)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `SwapResult` param:
	err = encoder.Encode(obj.SwapResult)
	if err != nil {
		return err
	}
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `CurrentTimestamp` param:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return err
	}
	// Deserialize `HasReferral`:
	err = decoder.Decode(&obj.HasReferral)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `SwapResult`:
	err = decoder.Decode(&obj.SwapResult)
	if err != nil {
		return err
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

type EvtUpdatePoolCreator struct {
	Pool       ag_solanago.PublicKey
	Creator    ag_solanago.PublicKey
	NewCreator ag_solanago.PublicKey
}

func (obj EvtUpdatePoolCreator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `NewCreator` param:
	err = encoder.Encode(obj.NewCreator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtUpdatePoolCreator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `NewCreator`:
	err = decoder.Decode(&obj.NewCreator)
	if err != nil {
		return err
	}
	return nil
}

type EvtVirtualPoolMetadata struct {
	VirtualPoolMetadata ag_solanago.PublicKey
	VirtualPool         ag_solanago.PublicKey
}

func (obj EvtVirtualPoolMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VirtualPoolMetadata` param:
	err = encoder.Encode(obj.VirtualPoolMetadata)
	if err != nil {
		return err
	}
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtVirtualPoolMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VirtualPoolMetadata`:
	err = decoder.Decode(&obj.VirtualPoolMetadata)
	if err != nil {
		return err
	}
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

type EvtWithdrawLeftover struct {
	Pool             ag_solanago.PublicKey
	LeftoverReceiver ag_solanago.PublicKey
	LeftoverAmount   uint64
}

func (obj EvtWithdrawLeftover) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `LeftoverReceiver` param:
	err = encoder.Encode(obj.LeftoverReceiver)
	if err != nil {
		return err
	}
	// Serialize `LeftoverAmount` param:
	err = encoder.Encode(obj.LeftoverAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtWithdrawLeftover) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverReceiver`:
	err = decoder.Decode(&obj.LeftoverReceiver)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverAmount`:
	err = decoder.Decode(&obj.LeftoverAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtWithdrawMigrationFee struct {
	Pool ag_solanago.PublicKey
	Fee  uint64
	Flag uint8
}

func (obj EvtWithdrawMigrationFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	// Serialize `Flag` param:
	err = encoder.Encode(obj.Flag)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtWithdrawMigrationFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	// Deserialize `Flag`:
	err = decoder.Decode(&obj.Flag)
	if err != nil {
		return err
	}
	return nil
}

type InitializePoolParameters struct {
	Name   string
	Symbol string
	Uri    string
}

func (obj InitializePoolParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializePoolParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityDistributionConfig struct {
	SqrtPrice ag_binary.Uint128
	Liquidity ag_binary.Uint128
}

func (obj LiquidityDistributionConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityDistributionConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityDistributionParameters struct {
	SqrtPrice ag_binary.Uint128
	Liquidity ag_binary.Uint128
}

func (obj LiquidityDistributionParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityDistributionParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	return nil
}

type LockEscrow struct {
	Pool                ag_solanago.PublicKey
	Owner               ag_solanago.PublicKey
	EscrowVault         ag_solanago.PublicKey
	Bump                uint8
	TotalLockedAmount   uint64
	LpPerToken          ag_binary.Uint128
	UnclaimedFeePending uint64
	AFee                uint64
	BFee                uint64
}

func (obj LockEscrow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `EscrowVault` param:
	err = encoder.Encode(obj.EscrowVault)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `TotalLockedAmount` param:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Serialize `LpPerToken` param:
	err = encoder.Encode(obj.LpPerToken)
	if err != nil {
		return err
	}
	// Serialize `UnclaimedFeePending` param:
	err = encoder.Encode(obj.UnclaimedFeePending)
	if err != nil {
		return err
	}
	// Serialize `AFee` param:
	err = encoder.Encode(obj.AFee)
	if err != nil {
		return err
	}
	// Serialize `BFee` param:
	err = encoder.Encode(obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockEscrow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `EscrowVault`:
	err = decoder.Decode(&obj.EscrowVault)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Deserialize `LpPerToken`:
	err = decoder.Decode(&obj.LpPerToken)
	if err != nil {
		return err
	}
	// Deserialize `UnclaimedFeePending`:
	err = decoder.Decode(&obj.UnclaimedFeePending)
	if err != nil {
		return err
	}
	// Deserialize `AFee`:
	err = decoder.Decode(&obj.AFee)
	if err != nil {
		return err
	}
	// Deserialize `BFee`:
	err = decoder.Decode(&obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

type LockedVestingConfig struct {
	AmountPerPeriod                uint64
	CliffDurationFromMigrationTime uint64
	Frequency                      uint64
	NumberOfPeriod                 uint64
	CliffUnlockAmount              uint64
	_padding                       uint64
}

func (obj LockedVestingConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountPerPeriod` param:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return err
	}
	// Serialize `CliffDurationFromMigrationTime` param:
	err = encoder.Encode(obj.CliffDurationFromMigrationTime)
	if err != nil {
		return err
	}
	// Serialize `Frequency` param:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Serialize `CliffUnlockAmount` param:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockedVestingConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return err
	}
	// Deserialize `CliffDurationFromMigrationTime`:
	err = decoder.Decode(&obj.CliffDurationFromMigrationTime)
	if err != nil {
		return err
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type LockedVestingParams struct {
	AmountPerPeriod                uint64
	CliffDurationFromMigrationTime uint64
	Frequency                      uint64
	NumberOfPeriod                 uint64
	CliffUnlockAmount              uint64
}

func (obj LockedVestingParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountPerPeriod` param:
	err = encoder.Encode(obj.AmountPerPeriod)
	if err != nil {
		return err
	}
	// Serialize `CliffDurationFromMigrationTime` param:
	err = encoder.Encode(obj.CliffDurationFromMigrationTime)
	if err != nil {
		return err
	}
	// Serialize `Frequency` param:
	err = encoder.Encode(obj.Frequency)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Serialize `CliffUnlockAmount` param:
	err = encoder.Encode(obj.CliffUnlockAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockedVestingParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountPerPeriod`:
	err = decoder.Decode(&obj.AmountPerPeriod)
	if err != nil {
		return err
	}
	// Deserialize `CliffDurationFromMigrationTime`:
	err = decoder.Decode(&obj.CliffDurationFromMigrationTime)
	if err != nil {
		return err
	}
	// Deserialize `Frequency`:
	err = decoder.Decode(&obj.Frequency)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Deserialize `CliffUnlockAmount`:
	err = decoder.Decode(&obj.CliffUnlockAmount)
	if err != nil {
		return err
	}
	return nil
}

type MeteoraDammMigrationMetadata struct {
	// pool
	VirtualPool ag_solanago.PublicKey

	// !!! BE CAREFUL to use tomestone field, previous is pool creator
	padding_0 [32]uint8

	// partner
	Partner ag_solanago.PublicKey

	// lp mint
	LpMint ag_solanago.PublicKey

	// partner locked lp
	PartnerLockedLp uint64

	// partner lp
	PartnerLp uint64

	// creator locked lp
	CreatorLockedLp uint64

	// creator lp
	CreatorLp uint64

	// padding
	_padding_0 uint8

	// flag to check whether lp is locked for creator
	CreatorLockedStatus uint8

	// flag to check whether lp is locked for partner
	PartnerLockedStatus uint8

	// flag to check whether creator has claimed lp token
	CreatorClaimStatus uint8

	// flag to check whether partner has claimed lp token
	PartnerClaimStatus uint8

	// Reserve
	_padding [107]uint8
}

func (obj MeteoraDammMigrationMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `Partner` param:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedLp` param:
	err = encoder.Encode(obj.PartnerLockedLp)
	if err != nil {
		return err
	}
	// Serialize `PartnerLp` param:
	err = encoder.Encode(obj.PartnerLp)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedLp` param:
	err = encoder.Encode(obj.CreatorLockedLp)
	if err != nil {
		return err
	}
	// Serialize `CreatorLp` param:
	err = encoder.Encode(obj.CreatorLp)
	if err != nil {
		return err
	}
	// Serialize `_padding_0` param:
	err = encoder.Encode(obj._padding_0)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedStatus` param:
	err = encoder.Encode(obj.CreatorLockedStatus)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedStatus` param:
	err = encoder.Encode(obj.PartnerLockedStatus)
	if err != nil {
		return err
	}
	// Serialize `CreatorClaimStatus` param:
	err = encoder.Encode(obj.CreatorClaimStatus)
	if err != nil {
		return err
	}
	// Serialize `PartnerClaimStatus` param:
	err = encoder.Encode(obj.PartnerClaimStatus)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MeteoraDammMigrationMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return err
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedLp`:
	err = decoder.Decode(&obj.PartnerLockedLp)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLp`:
	err = decoder.Decode(&obj.PartnerLp)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedLp`:
	err = decoder.Decode(&obj.CreatorLockedLp)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLp`:
	err = decoder.Decode(&obj.CreatorLp)
	if err != nil {
		return err
	}
	// Deserialize `_padding_0`:
	err = decoder.Decode(&obj._padding_0)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedStatus`:
	err = decoder.Decode(&obj.CreatorLockedStatus)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedStatus`:
	err = decoder.Decode(&obj.PartnerLockedStatus)
	if err != nil {
		return err
	}
	// Deserialize `CreatorClaimStatus`:
	err = decoder.Decode(&obj.CreatorClaimStatus)
	if err != nil {
		return err
	}
	// Deserialize `PartnerClaimStatus`:
	err = decoder.Decode(&obj.PartnerClaimStatus)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type MeteoraDammV2Metadata struct {
	// pool
	VirtualPool ag_solanago.PublicKey

	// !!! BE CAREFUL to use tomestone field, previous is pool creator
	padding_0 [32]uint8

	// partner
	Partner ag_solanago.PublicKey

	// Reserve
	_padding [126]uint8
}

func (obj MeteoraDammV2Metadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `Partner` param:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MeteoraDammV2Metadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type MigrationFee struct {
	FeePercentage        uint8
	CreatorFeePercentage uint8
}

func (obj MigrationFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeePercentage` param:
	err = encoder.Encode(obj.FeePercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorFeePercentage` param:
	err = encoder.Encode(obj.CreatorFeePercentage)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MigrationFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeePercentage`:
	err = decoder.Decode(&obj.FeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorFeePercentage`:
	err = decoder.Decode(&obj.CreatorFeePercentage)
	if err != nil {
		return err
	}
	return nil
}

type PartnerMetadata struct {
	// fee claimer
	FeeClaimer ag_solanago.PublicKey

	// padding for future use
	padding [6]ag_binary.Uint128

	// Name of partner.
	Name string

	// Website of partner.
	Website string

	// Logo of partner
	Logo string
}

func (obj PartnerMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeClaimer` param:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Website` param:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return err
	}
	// Serialize `Logo` param:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PartnerMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return err
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

type PoolConfig struct {
	// quote mint
	QuoteMint ag_solanago.PublicKey

	// Address to get the fee
	FeeClaimer ag_solanago.PublicKey

	// Address to receive extra base token after migration, in case token is fixed supply
	LeftoverReceiver ag_solanago.PublicKey

	// Pool fee
	PoolFees PoolFeesConfig

	// Collect fee mode
	CollectFeeMode uint8

	// migration option
	MigrationOption uint8

	// whether mode slot or timestamp
	ActivationType uint8

	// token decimals
	TokenDecimal uint8

	// version
	Version uint8

	// token type of base token
	TokenType uint8

	// quote token flag
	QuoteTokenFlag uint8

	// partner locked lp percentage
	PartnerLockedLpPercentage uint8

	// partner lp percentage
	PartnerLpPercentage uint8

	// creator post migration fee percentage
	CreatorLockedLpPercentage uint8

	// creator lp percentage
	CreatorLpPercentage uint8

	// migration fee option
	MigrationFeeOption uint8

	// flag to indicate whether token is dynamic supply (0) or fixed supply (1)
	FixedTokenSupplyFlag uint8

	// creator trading fee percentage
	CreatorTradingFeePercentage uint8

	// token update authority
	TokenUpdateAuthority uint8

	// migration fee percentage
	MigrationFeePercentage uint8

	// creator migration fee percentage
	CreatorMigrationFeePercentage uint8

	// padding 1
	_padding_1 [7]uint8

	// swap base amount
	SwapBaseAmount uint64

	// migration quote threshold (in quote token)
	MigrationQuoteThreshold uint64

	// migration base threshold (in base token)
	MigrationBaseThreshold uint64

	// migration sqrt price
	MigrationSqrtPrice ag_binary.Uint128

	// locked vesting config
	LockedVestingConfig LockedVestingConfig

	// pre migration token supply
	PreMigrationTokenSupply uint64

	// post migration token supply
	PostMigrationTokenSupply uint64

	// padding 2
	_padding_2 [2]ag_binary.Uint128

	// minimum price
	SqrtStartPrice ag_binary.Uint128

	// curve, only use 20 point firstly, we can extend that latter
	Curve [20]LiquidityDistributionConfig
}

func (obj PoolConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `FeeClaimer` param:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Serialize `LeftoverReceiver` param:
	err = encoder.Encode(obj.LeftoverReceiver)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `MigrationOption` param:
	err = encoder.Encode(obj.MigrationOption)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `TokenDecimal` param:
	err = encoder.Encode(obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `TokenType` param:
	err = encoder.Encode(obj.TokenType)
	if err != nil {
		return err
	}
	// Serialize `QuoteTokenFlag` param:
	err = encoder.Encode(obj.QuoteTokenFlag)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedLpPercentage` param:
	err = encoder.Encode(obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `PartnerLpPercentage` param:
	err = encoder.Encode(obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedLpPercentage` param:
	err = encoder.Encode(obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLpPercentage` param:
	err = encoder.Encode(obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeeOption` param:
	err = encoder.Encode(obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Serialize `FixedTokenSupplyFlag` param:
	err = encoder.Encode(obj.FixedTokenSupplyFlag)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeePercentage` param:
	err = encoder.Encode(obj.CreatorTradingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `TokenUpdateAuthority` param:
	err = encoder.Encode(obj.TokenUpdateAuthority)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeePercentage` param:
	err = encoder.Encode(obj.MigrationFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorMigrationFeePercentage` param:
	err = encoder.Encode(obj.CreatorMigrationFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `_padding_1` param:
	err = encoder.Encode(obj._padding_1)
	if err != nil {
		return err
	}
	// Serialize `SwapBaseAmount` param:
	err = encoder.Encode(obj.SwapBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `MigrationQuoteThreshold` param:
	err = encoder.Encode(obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Serialize `MigrationBaseThreshold` param:
	err = encoder.Encode(obj.MigrationBaseThreshold)
	if err != nil {
		return err
	}
	// Serialize `MigrationSqrtPrice` param:
	err = encoder.Encode(obj.MigrationSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `LockedVestingConfig` param:
	err = encoder.Encode(obj.LockedVestingConfig)
	if err != nil {
		return err
	}
	// Serialize `PreMigrationTokenSupply` param:
	err = encoder.Encode(obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `PostMigrationTokenSupply` param:
	err = encoder.Encode(obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `_padding_2` param:
	err = encoder.Encode(obj._padding_2)
	if err != nil {
		return err
	}
	// Serialize `SqrtStartPrice` param:
	err = encoder.Encode(obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Serialize `Curve` param:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverReceiver`:
	err = decoder.Decode(&obj.LeftoverReceiver)
	if err != nil {
		return err
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `MigrationOption`:
	err = decoder.Decode(&obj.MigrationOption)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `TokenDecimal`:
	err = decoder.Decode(&obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `TokenType`:
	err = decoder.Decode(&obj.TokenType)
	if err != nil {
		return err
	}
	// Deserialize `QuoteTokenFlag`:
	err = decoder.Decode(&obj.QuoteTokenFlag)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedLpPercentage`:
	err = decoder.Decode(&obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLpPercentage`:
	err = decoder.Decode(&obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedLpPercentage`:
	err = decoder.Decode(&obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLpPercentage`:
	err = decoder.Decode(&obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeeOption`:
	err = decoder.Decode(&obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Deserialize `FixedTokenSupplyFlag`:
	err = decoder.Decode(&obj.FixedTokenSupplyFlag)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeePercentage`:
	err = decoder.Decode(&obj.CreatorTradingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `TokenUpdateAuthority`:
	err = decoder.Decode(&obj.TokenUpdateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeePercentage`:
	err = decoder.Decode(&obj.MigrationFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorMigrationFeePercentage`:
	err = decoder.Decode(&obj.CreatorMigrationFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `_padding_1`:
	err = decoder.Decode(&obj._padding_1)
	if err != nil {
		return err
	}
	// Deserialize `SwapBaseAmount`:
	err = decoder.Decode(&obj.SwapBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `MigrationQuoteThreshold`:
	err = decoder.Decode(&obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MigrationBaseThreshold`:
	err = decoder.Decode(&obj.MigrationBaseThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MigrationSqrtPrice`:
	err = decoder.Decode(&obj.MigrationSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `LockedVestingConfig`:
	err = decoder.Decode(&obj.LockedVestingConfig)
	if err != nil {
		return err
	}
	// Deserialize `PreMigrationTokenSupply`:
	err = decoder.Decode(&obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `PostMigrationTokenSupply`:
	err = decoder.Decode(&obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `_padding_2`:
	err = decoder.Decode(&obj._padding_2)
	if err != nil {
		return err
	}
	// Deserialize `SqrtStartPrice`:
	err = decoder.Decode(&obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

type PoolFeeParameters struct {
	// Base fee
	BaseFee BaseFeeParameters

	// dynamic fee
	DynamicFee *DynamicFeeParameters `bin:"optional"`
}

func (obj PoolFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseFee` param:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return err
	}
	// Serialize `DynamicFee` param (optional):
	{
		if obj.DynamicFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.DynamicFee)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *PoolFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return err
	}
	// Deserialize `DynamicFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.DynamicFee)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type PoolFees struct {
	TradeFeeNumerator           uint64
	TradeFeeDenominator         uint64
	ProtocolTradeFeeNumerator   uint64
	ProtocolTradeFeeDenominator uint64
}

func (obj PoolFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeDenominator` param:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeDenominator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

type PoolFeesConfig struct {
	BaseFee            BaseFeeConfig
	DynamicFee         DynamicFeeConfig
	padding_0          [5]uint64
	padding_1          [6]uint8
	ProtocolFeePercent uint8
	ReferralFeePercent uint8
}

func (obj PoolFeesConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseFee` param:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return err
	}
	// Serialize `DynamicFee` param:
	err = encoder.Encode(obj.DynamicFee)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `padding_1` param:
	err = encoder.Encode(obj.padding_1)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeePercent` param:
	err = encoder.Encode(obj.ProtocolFeePercent)
	if err != nil {
		return err
	}
	// Serialize `ReferralFeePercent` param:
	err = encoder.Encode(obj.ReferralFeePercent)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolFeesConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return err
	}
	// Deserialize `DynamicFee`:
	err = decoder.Decode(&obj.DynamicFee)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `padding_1`:
	err = decoder.Decode(&obj.padding_1)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeePercent`:
	err = decoder.Decode(&obj.ProtocolFeePercent)
	if err != nil {
		return err
	}
	// Deserialize `ReferralFeePercent`:
	err = decoder.Decode(&obj.ReferralFeePercent)
	if err != nil {
		return err
	}
	return nil
}

type PoolMetrics struct {
	TotalProtocolBaseFee  uint64
	TotalProtocolQuoteFee uint64
	TotalTradingBaseFee   uint64
	TotalTradingQuoteFee  uint64
}

func (obj PoolMetrics) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalProtocolBaseFee` param:
	err = encoder.Encode(obj.TotalProtocolBaseFee)
	if err != nil {
		return err
	}
	// Serialize `TotalProtocolQuoteFee` param:
	err = encoder.Encode(obj.TotalProtocolQuoteFee)
	if err != nil {
		return err
	}
	// Serialize `TotalTradingBaseFee` param:
	err = encoder.Encode(obj.TotalTradingBaseFee)
	if err != nil {
		return err
	}
	// Serialize `TotalTradingQuoteFee` param:
	err = encoder.Encode(obj.TotalTradingQuoteFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolMetrics) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalProtocolBaseFee`:
	err = decoder.Decode(&obj.TotalProtocolBaseFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalProtocolQuoteFee`:
	err = decoder.Decode(&obj.TotalProtocolQuoteFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalTradingBaseFee`:
	err = decoder.Decode(&obj.TotalTradingBaseFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalTradingQuoteFee`:
	err = decoder.Decode(&obj.TotalTradingQuoteFee)
	if err != nil {
		return err
	}
	return nil
}

type SwapParameters struct {
	AmountIn         uint64
	MinimumAmountOut uint64
}

func (obj SwapParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

type SwapResult struct {
	ActualInputAmount uint64
	OutputAmount      uint64
	NextSqrtPrice     ag_binary.Uint128
	TradingFee        uint64
	ProtocolFee       uint64
	ReferralFee       uint64
}

func (obj SwapResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActualInputAmount` param:
	err = encoder.Encode(obj.ActualInputAmount)
	if err != nil {
		return err
	}
	// Serialize `OutputAmount` param:
	err = encoder.Encode(obj.OutputAmount)
	if err != nil {
		return err
	}
	// Serialize `NextSqrtPrice` param:
	err = encoder.Encode(obj.NextSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `TradingFee` param:
	err = encoder.Encode(obj.TradingFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `ReferralFee` param:
	err = encoder.Encode(obj.ReferralFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActualInputAmount`:
	err = decoder.Decode(&obj.ActualInputAmount)
	if err != nil {
		return err
	}
	// Deserialize `OutputAmount`:
	err = decoder.Decode(&obj.OutputAmount)
	if err != nil {
		return err
	}
	// Deserialize `NextSqrtPrice`:
	err = decoder.Decode(&obj.NextSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `TradingFee`:
	err = decoder.Decode(&obj.TradingFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `ReferralFee`:
	err = decoder.Decode(&obj.ReferralFee)
	if err != nil {
		return err
	}
	return nil
}

type TokenSupplyParams struct {
	// pre migration token supply
	PreMigrationTokenSupply uint64

	// post migration token supply
	// becase DBC allow user to swap over the migration quote threshold, so in extreme case user may swap more than allowed buffer on curve
	// that result the total supply in post migration may be increased a bit (between pre_migration_token_supply and post_migration_token_supply)
	PostMigrationTokenSupply uint64
}

func (obj TokenSupplyParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PreMigrationTokenSupply` param:
	err = encoder.Encode(obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `PostMigrationTokenSupply` param:
	err = encoder.Encode(obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenSupplyParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PreMigrationTokenSupply`:
	err = decoder.Decode(&obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `PostMigrationTokenSupply`:
	err = decoder.Decode(&obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	return nil
}

type VirtualPool struct {
	// volatility tracker
	VolatilityTracker VolatilityTracker

	// config key
	Config ag_solanago.PublicKey

	// creator
	Creator ag_solanago.PublicKey

	// base mint
	BaseMint ag_solanago.PublicKey

	// base vault
	BaseVault ag_solanago.PublicKey

	// quote vault
	QuoteVault ag_solanago.PublicKey

	// base reserve
	BaseReserve uint64

	// quote reserve
	QuoteReserve uint64

	// protocol base fee
	ProtocolBaseFee uint64

	// protocol quote fee
	ProtocolQuoteFee uint64

	// partner base fee
	PartnerBaseFee uint64

	// trading quote fee
	PartnerQuoteFee uint64

	// current price
	SqrtPrice ag_binary.Uint128

	// Activation point
	ActivationPoint uint64

	// pool type, spl token or token2022
	PoolType uint8

	// is migrated
	IsMigrated uint8

	// is partner withdraw surplus
	IsPartnerWithdrawSurplus uint8

	// is protocol withdraw surplus
	IsProtocolWithdrawSurplus uint8

	// migration progress
	MigrationProgress uint8

	// is withdraw leftover
	IsWithdrawLeftover uint8

	// is creator withdraw surplus
	IsCreatorWithdrawSurplus uint8

	// migration fee withdraw status, first bit is for partner, second bit is for creator
	MigrationFeeWithdrawStatus uint8

	// pool metrics
	Metrics PoolMetrics

	// The time curve is finished
	FinishCurveTimestamp uint64

	// creator base fee
	CreatorBaseFee uint64

	// creator quote fee
	CreatorQuoteFee uint64

	// Padding for further use
	_padding_1 [7]uint64
}

func (obj VirtualPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VolatilityTracker` param:
	err = encoder.Encode(obj.VolatilityTracker)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `BaseVault` param:
	err = encoder.Encode(obj.BaseVault)
	if err != nil {
		return err
	}
	// Serialize `QuoteVault` param:
	err = encoder.Encode(obj.QuoteVault)
	if err != nil {
		return err
	}
	// Serialize `BaseReserve` param:
	err = encoder.Encode(obj.BaseReserve)
	if err != nil {
		return err
	}
	// Serialize `QuoteReserve` param:
	err = encoder.Encode(obj.QuoteReserve)
	if err != nil {
		return err
	}
	// Serialize `ProtocolBaseFee` param:
	err = encoder.Encode(obj.ProtocolBaseFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolQuoteFee` param:
	err = encoder.Encode(obj.ProtocolQuoteFee)
	if err != nil {
		return err
	}
	// Serialize `PartnerBaseFee` param:
	err = encoder.Encode(obj.PartnerBaseFee)
	if err != nil {
		return err
	}
	// Serialize `PartnerQuoteFee` param:
	err = encoder.Encode(obj.PartnerQuoteFee)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	// Serialize `IsMigrated` param:
	err = encoder.Encode(obj.IsMigrated)
	if err != nil {
		return err
	}
	// Serialize `IsPartnerWithdrawSurplus` param:
	err = encoder.Encode(obj.IsPartnerWithdrawSurplus)
	if err != nil {
		return err
	}
	// Serialize `IsProtocolWithdrawSurplus` param:
	err = encoder.Encode(obj.IsProtocolWithdrawSurplus)
	if err != nil {
		return err
	}
	// Serialize `MigrationProgress` param:
	err = encoder.Encode(obj.MigrationProgress)
	if err != nil {
		return err
	}
	// Serialize `IsWithdrawLeftover` param:
	err = encoder.Encode(obj.IsWithdrawLeftover)
	if err != nil {
		return err
	}
	// Serialize `IsCreatorWithdrawSurplus` param:
	err = encoder.Encode(obj.IsCreatorWithdrawSurplus)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeeWithdrawStatus` param:
	err = encoder.Encode(obj.MigrationFeeWithdrawStatus)
	if err != nil {
		return err
	}
	// Serialize `Metrics` param:
	err = encoder.Encode(obj.Metrics)
	if err != nil {
		return err
	}
	// Serialize `FinishCurveTimestamp` param:
	err = encoder.Encode(obj.FinishCurveTimestamp)
	if err != nil {
		return err
	}
	// Serialize `CreatorBaseFee` param:
	err = encoder.Encode(obj.CreatorBaseFee)
	if err != nil {
		return err
	}
	// Serialize `CreatorQuoteFee` param:
	err = encoder.Encode(obj.CreatorQuoteFee)
	if err != nil {
		return err
	}
	// Serialize `_padding_1` param:
	err = encoder.Encode(obj._padding_1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VirtualPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VolatilityTracker`:
	err = decoder.Decode(&obj.VolatilityTracker)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `BaseVault`:
	err = decoder.Decode(&obj.BaseVault)
	if err != nil {
		return err
	}
	// Deserialize `QuoteVault`:
	err = decoder.Decode(&obj.QuoteVault)
	if err != nil {
		return err
	}
	// Deserialize `BaseReserve`:
	err = decoder.Decode(&obj.BaseReserve)
	if err != nil {
		return err
	}
	// Deserialize `QuoteReserve`:
	err = decoder.Decode(&obj.QuoteReserve)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolBaseFee`:
	err = decoder.Decode(&obj.ProtocolBaseFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolQuoteFee`:
	err = decoder.Decode(&obj.ProtocolQuoteFee)
	if err != nil {
		return err
	}
	// Deserialize `PartnerBaseFee`:
	err = decoder.Decode(&obj.PartnerBaseFee)
	if err != nil {
		return err
	}
	// Deserialize `PartnerQuoteFee`:
	err = decoder.Decode(&obj.PartnerQuoteFee)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	// Deserialize `IsMigrated`:
	err = decoder.Decode(&obj.IsMigrated)
	if err != nil {
		return err
	}
	// Deserialize `IsPartnerWithdrawSurplus`:
	err = decoder.Decode(&obj.IsPartnerWithdrawSurplus)
	if err != nil {
		return err
	}
	// Deserialize `IsProtocolWithdrawSurplus`:
	err = decoder.Decode(&obj.IsProtocolWithdrawSurplus)
	if err != nil {
		return err
	}
	// Deserialize `MigrationProgress`:
	err = decoder.Decode(&obj.MigrationProgress)
	if err != nil {
		return err
	}
	// Deserialize `IsWithdrawLeftover`:
	err = decoder.Decode(&obj.IsWithdrawLeftover)
	if err != nil {
		return err
	}
	// Deserialize `IsCreatorWithdrawSurplus`:
	err = decoder.Decode(&obj.IsCreatorWithdrawSurplus)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeeWithdrawStatus`:
	err = decoder.Decode(&obj.MigrationFeeWithdrawStatus)
	if err != nil {
		return err
	}
	// Deserialize `Metrics`:
	err = decoder.Decode(&obj.Metrics)
	if err != nil {
		return err
	}
	// Deserialize `FinishCurveTimestamp`:
	err = decoder.Decode(&obj.FinishCurveTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `CreatorBaseFee`:
	err = decoder.Decode(&obj.CreatorBaseFee)
	if err != nil {
		return err
	}
	// Deserialize `CreatorQuoteFee`:
	err = decoder.Decode(&obj.CreatorQuoteFee)
	if err != nil {
		return err
	}
	// Deserialize `_padding_1`:
	err = decoder.Decode(&obj._padding_1)
	if err != nil {
		return err
	}
	return nil
}

type VirtualPoolMetadata struct {
	// virtual pool
	VirtualPool ag_solanago.PublicKey

	// padding for future use
	padding [6]ag_binary.Uint128

	// Name of project.
	Name string

	// Website of project.
	Website string

	// Logo of project
	Logo string
}

func (obj VirtualPoolMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Website` param:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return err
	}
	// Serialize `Logo` param:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VirtualPoolMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return err
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

type VolatilityTracker struct {
	LastUpdateTimestamp   uint64
	padding               [8]uint8
	SqrtPriceReference    ag_binary.Uint128
	VolatilityAccumulator ag_binary.Uint128
	VolatilityReference   ag_binary.Uint128
}

func (obj VolatilityTracker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LastUpdateTimestamp` param:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceReference` param:
	err = encoder.Encode(obj.SqrtPriceReference)
	if err != nil {
		return err
	}
	// Serialize `VolatilityAccumulator` param:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VolatilityReference` param:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VolatilityTracker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceReference`:
	err = decoder.Decode(&obj.SqrtPriceReference)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return err
	}
	return nil
}
