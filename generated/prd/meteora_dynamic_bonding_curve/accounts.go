// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dynamic_bonding_curve

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type ClaimFeeOperatorAccount struct {
	// operator
	Operator ag_solanago.PublicKey

	// Reserve
	_padding [128]uint8
}

var ClaimFeeOperatorAccountDiscriminator = [8]byte{166, 48, 134, 86, 34, 200, 188, 150}

func (obj ClaimFeeOperatorAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ClaimFeeOperatorAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimFeeOperatorAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ClaimFeeOperatorAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[166 48 134 86 34 200 188 150]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type ConfigAccount struct {
	PoolFees             PoolFees
	ActivationDuration   uint64
	VaultConfigKey       ag_solanago.PublicKey
	PoolCreatorAuthority ag_solanago.PublicKey
	ActivationType       uint8
	PartnerFeeNumerator  uint64
	padding              [219]uint8
}

var ConfigAccountDiscriminator = [8]byte{155, 12, 170, 224, 30, 250, 204, 130}

func (obj ConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `ActivationDuration` param:
	err = encoder.Encode(obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `PartnerFeeNumerator` param:
	err = encoder.Encode(obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[155 12 170 224 30 250 204 130]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `ActivationDuration`:
	err = decoder.Decode(&obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `PartnerFeeNumerator`:
	err = decoder.Decode(&obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type LockEscrowAccount struct {
	Pool                ag_solanago.PublicKey
	Owner               ag_solanago.PublicKey
	EscrowVault         ag_solanago.PublicKey
	Bump                uint8
	TotalLockedAmount   uint64
	LpPerToken          ag_binary.Uint128
	UnclaimedFeePending uint64
	AFee                uint64
	BFee                uint64
}

var LockEscrowAccountDiscriminator = [8]byte{190, 106, 121, 6, 200, 182, 21, 75}

func (obj LockEscrowAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LockEscrowAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `EscrowVault` param:
	err = encoder.Encode(obj.EscrowVault)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `TotalLockedAmount` param:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Serialize `LpPerToken` param:
	err = encoder.Encode(obj.LpPerToken)
	if err != nil {
		return err
	}
	// Serialize `UnclaimedFeePending` param:
	err = encoder.Encode(obj.UnclaimedFeePending)
	if err != nil {
		return err
	}
	// Serialize `AFee` param:
	err = encoder.Encode(obj.AFee)
	if err != nil {
		return err
	}
	// Serialize `BFee` param:
	err = encoder.Encode(obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockEscrowAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LockEscrowAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[190 106 121 6 200 182 21 75]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `EscrowVault`:
	err = decoder.Decode(&obj.EscrowVault)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Deserialize `LpPerToken`:
	err = decoder.Decode(&obj.LpPerToken)
	if err != nil {
		return err
	}
	// Deserialize `UnclaimedFeePending`:
	err = decoder.Decode(&obj.UnclaimedFeePending)
	if err != nil {
		return err
	}
	// Deserialize `AFee`:
	err = decoder.Decode(&obj.AFee)
	if err != nil {
		return err
	}
	// Deserialize `BFee`:
	err = decoder.Decode(&obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

type MeteoraDammMigrationMetadataAccount struct {
	// pool
	VirtualPool ag_solanago.PublicKey

	// !!! BE CAREFUL to use tomestone field, previous is pool creator
	padding_0 [32]uint8

	// partner
	Partner ag_solanago.PublicKey

	// lp mint
	LpMint ag_solanago.PublicKey

	// partner locked lp
	PartnerLockedLp uint64

	// partner lp
	PartnerLp uint64

	// creator locked lp
	CreatorLockedLp uint64

	// creator lp
	CreatorLp uint64

	// padding
	_padding_0 uint8

	// flag to check whether lp is locked for creator
	CreatorLockedStatus uint8

	// flag to check whether lp is locked for partner
	PartnerLockedStatus uint8

	// flag to check whether creator has claimed lp token
	CreatorClaimStatus uint8

	// flag to check whether partner has claimed lp token
	PartnerClaimStatus uint8

	// Reserve
	_padding [107]uint8
}

var MeteoraDammMigrationMetadataAccountDiscriminator = [8]byte{17, 155, 141, 215, 207, 4, 133, 156}

func (obj MeteoraDammMigrationMetadataAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MeteoraDammMigrationMetadataAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `Partner` param:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedLp` param:
	err = encoder.Encode(obj.PartnerLockedLp)
	if err != nil {
		return err
	}
	// Serialize `PartnerLp` param:
	err = encoder.Encode(obj.PartnerLp)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedLp` param:
	err = encoder.Encode(obj.CreatorLockedLp)
	if err != nil {
		return err
	}
	// Serialize `CreatorLp` param:
	err = encoder.Encode(obj.CreatorLp)
	if err != nil {
		return err
	}
	// Serialize `_padding_0` param:
	err = encoder.Encode(obj._padding_0)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedStatus` param:
	err = encoder.Encode(obj.CreatorLockedStatus)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedStatus` param:
	err = encoder.Encode(obj.PartnerLockedStatus)
	if err != nil {
		return err
	}
	// Serialize `CreatorClaimStatus` param:
	err = encoder.Encode(obj.CreatorClaimStatus)
	if err != nil {
		return err
	}
	// Serialize `PartnerClaimStatus` param:
	err = encoder.Encode(obj.PartnerClaimStatus)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MeteoraDammMigrationMetadataAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MeteoraDammMigrationMetadataAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[17 155 141 215 207 4 133 156]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return err
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedLp`:
	err = decoder.Decode(&obj.PartnerLockedLp)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLp`:
	err = decoder.Decode(&obj.PartnerLp)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedLp`:
	err = decoder.Decode(&obj.CreatorLockedLp)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLp`:
	err = decoder.Decode(&obj.CreatorLp)
	if err != nil {
		return err
	}
	// Deserialize `_padding_0`:
	err = decoder.Decode(&obj._padding_0)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedStatus`:
	err = decoder.Decode(&obj.CreatorLockedStatus)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedStatus`:
	err = decoder.Decode(&obj.PartnerLockedStatus)
	if err != nil {
		return err
	}
	// Deserialize `CreatorClaimStatus`:
	err = decoder.Decode(&obj.CreatorClaimStatus)
	if err != nil {
		return err
	}
	// Deserialize `PartnerClaimStatus`:
	err = decoder.Decode(&obj.PartnerClaimStatus)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type MeteoraDammV2MetadataAccount struct {
	// pool
	VirtualPool ag_solanago.PublicKey

	// !!! BE CAREFUL to use tomestone field, previous is pool creator
	padding_0 [32]uint8

	// partner
	Partner ag_solanago.PublicKey

	// Reserve
	_padding [126]uint8
}

var MeteoraDammV2MetadataAccountDiscriminator = [8]byte{104, 221, 219, 203, 10, 142, 250, 163}

func (obj MeteoraDammV2MetadataAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MeteoraDammV2MetadataAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `Partner` param:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MeteoraDammV2MetadataAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MeteoraDammV2MetadataAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[104 221 219 203 10 142 250 163]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type PartnerMetadataAccount struct {
	// fee claimer
	FeeClaimer ag_solanago.PublicKey

	// padding for future use
	padding [6]ag_binary.Uint128

	// Name of partner.
	Name string

	// Website of partner.
	Website string

	// Logo of partner
	Logo string
}

var PartnerMetadataAccountDiscriminator = [8]byte{68, 68, 130, 19, 16, 209, 98, 156}

func (obj PartnerMetadataAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PartnerMetadataAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `FeeClaimer` param:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Website` param:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return err
	}
	// Serialize `Logo` param:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PartnerMetadataAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PartnerMetadataAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[68 68 130 19 16 209 98 156]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return err
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

type PoolConfigAccount struct {
	// quote mint
	QuoteMint ag_solanago.PublicKey

	// Address to get the fee
	FeeClaimer ag_solanago.PublicKey

	// Address to receive extra base token after migration, in case token is fixed supply
	LeftoverReceiver ag_solanago.PublicKey

	// Pool fee
	PoolFees PoolFeesConfig

	// Collect fee mode
	CollectFeeMode uint8

	// migration option
	MigrationOption uint8

	// whether mode slot or timestamp
	ActivationType uint8

	// token decimals
	TokenDecimal uint8

	// version
	Version uint8

	// token type of base token
	TokenType uint8

	// quote token flag
	QuoteTokenFlag uint8

	// partner locked lp percentage
	PartnerLockedLpPercentage uint8

	// partner lp percentage
	PartnerLpPercentage uint8

	// creator post migration fee percentage
	CreatorLockedLpPercentage uint8

	// creator lp percentage
	CreatorLpPercentage uint8

	// migration fee option
	MigrationFeeOption uint8

	// flag to indicate whether token is dynamic supply (0) or fixed supply (1)
	FixedTokenSupplyFlag uint8

	// creator trading fee percentage
	CreatorTradingFeePercentage uint8

	// token update authority
	TokenUpdateAuthority uint8

	// migration fee percentage
	MigrationFeePercentage uint8

	// creator migration fee percentage
	CreatorMigrationFeePercentage uint8

	// padding 1
	_padding_1 [7]uint8

	// swap base amount
	SwapBaseAmount uint64

	// migration quote threshold (in quote token)
	MigrationQuoteThreshold uint64

	// migration base threshold (in base token)
	MigrationBaseThreshold uint64

	// migration sqrt price
	MigrationSqrtPrice ag_binary.Uint128

	// locked vesting config
	LockedVestingConfig LockedVestingConfig

	// pre migration token supply
	PreMigrationTokenSupply uint64

	// post migration token supply
	PostMigrationTokenSupply uint64

	// padding 2
	_padding_2 [2]ag_binary.Uint128

	// minimum price
	SqrtStartPrice ag_binary.Uint128

	// curve, only use 20 point firstly, we can extend that latter
	Curve [20]LiquidityDistributionConfig
}

var PoolConfigAccountDiscriminator = [8]byte{26, 108, 14, 123, 116, 230, 129, 43}

func (obj PoolConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `FeeClaimer` param:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Serialize `LeftoverReceiver` param:
	err = encoder.Encode(obj.LeftoverReceiver)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `MigrationOption` param:
	err = encoder.Encode(obj.MigrationOption)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `TokenDecimal` param:
	err = encoder.Encode(obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `TokenType` param:
	err = encoder.Encode(obj.TokenType)
	if err != nil {
		return err
	}
	// Serialize `QuoteTokenFlag` param:
	err = encoder.Encode(obj.QuoteTokenFlag)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedLpPercentage` param:
	err = encoder.Encode(obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `PartnerLpPercentage` param:
	err = encoder.Encode(obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedLpPercentage` param:
	err = encoder.Encode(obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLpPercentage` param:
	err = encoder.Encode(obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeeOption` param:
	err = encoder.Encode(obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Serialize `FixedTokenSupplyFlag` param:
	err = encoder.Encode(obj.FixedTokenSupplyFlag)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeePercentage` param:
	err = encoder.Encode(obj.CreatorTradingFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `TokenUpdateAuthority` param:
	err = encoder.Encode(obj.TokenUpdateAuthority)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeePercentage` param:
	err = encoder.Encode(obj.MigrationFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorMigrationFeePercentage` param:
	err = encoder.Encode(obj.CreatorMigrationFeePercentage)
	if err != nil {
		return err
	}
	// Serialize `_padding_1` param:
	err = encoder.Encode(obj._padding_1)
	if err != nil {
		return err
	}
	// Serialize `SwapBaseAmount` param:
	err = encoder.Encode(obj.SwapBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `MigrationQuoteThreshold` param:
	err = encoder.Encode(obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Serialize `MigrationBaseThreshold` param:
	err = encoder.Encode(obj.MigrationBaseThreshold)
	if err != nil {
		return err
	}
	// Serialize `MigrationSqrtPrice` param:
	err = encoder.Encode(obj.MigrationSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `LockedVestingConfig` param:
	err = encoder.Encode(obj.LockedVestingConfig)
	if err != nil {
		return err
	}
	// Serialize `PreMigrationTokenSupply` param:
	err = encoder.Encode(obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `PostMigrationTokenSupply` param:
	err = encoder.Encode(obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `_padding_2` param:
	err = encoder.Encode(obj._padding_2)
	if err != nil {
		return err
	}
	// Serialize `SqrtStartPrice` param:
	err = encoder.Encode(obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Serialize `Curve` param:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[26 108 14 123 116 230 129 43]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverReceiver`:
	err = decoder.Decode(&obj.LeftoverReceiver)
	if err != nil {
		return err
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `MigrationOption`:
	err = decoder.Decode(&obj.MigrationOption)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `TokenDecimal`:
	err = decoder.Decode(&obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `TokenType`:
	err = decoder.Decode(&obj.TokenType)
	if err != nil {
		return err
	}
	// Deserialize `QuoteTokenFlag`:
	err = decoder.Decode(&obj.QuoteTokenFlag)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedLpPercentage`:
	err = decoder.Decode(&obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLpPercentage`:
	err = decoder.Decode(&obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedLpPercentage`:
	err = decoder.Decode(&obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLpPercentage`:
	err = decoder.Decode(&obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeeOption`:
	err = decoder.Decode(&obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Deserialize `FixedTokenSupplyFlag`:
	err = decoder.Decode(&obj.FixedTokenSupplyFlag)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeePercentage`:
	err = decoder.Decode(&obj.CreatorTradingFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `TokenUpdateAuthority`:
	err = decoder.Decode(&obj.TokenUpdateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeePercentage`:
	err = decoder.Decode(&obj.MigrationFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorMigrationFeePercentage`:
	err = decoder.Decode(&obj.CreatorMigrationFeePercentage)
	if err != nil {
		return err
	}
	// Deserialize `_padding_1`:
	err = decoder.Decode(&obj._padding_1)
	if err != nil {
		return err
	}
	// Deserialize `SwapBaseAmount`:
	err = decoder.Decode(&obj.SwapBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `MigrationQuoteThreshold`:
	err = decoder.Decode(&obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MigrationBaseThreshold`:
	err = decoder.Decode(&obj.MigrationBaseThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MigrationSqrtPrice`:
	err = decoder.Decode(&obj.MigrationSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `LockedVestingConfig`:
	err = decoder.Decode(&obj.LockedVestingConfig)
	if err != nil {
		return err
	}
	// Deserialize `PreMigrationTokenSupply`:
	err = decoder.Decode(&obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `PostMigrationTokenSupply`:
	err = decoder.Decode(&obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `_padding_2`:
	err = decoder.Decode(&obj._padding_2)
	if err != nil {
		return err
	}
	// Deserialize `SqrtStartPrice`:
	err = decoder.Decode(&obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

type VirtualPoolAccount struct {
	// volatility tracker
	VolatilityTracker VolatilityTracker

	// config key
	Config ag_solanago.PublicKey

	// creator
	Creator ag_solanago.PublicKey

	// base mint
	BaseMint ag_solanago.PublicKey

	// base vault
	BaseVault ag_solanago.PublicKey

	// quote vault
	QuoteVault ag_solanago.PublicKey

	// base reserve
	BaseReserve uint64

	// quote reserve
	QuoteReserve uint64

	// protocol base fee
	ProtocolBaseFee uint64

	// protocol quote fee
	ProtocolQuoteFee uint64

	// partner base fee
	PartnerBaseFee uint64

	// trading quote fee
	PartnerQuoteFee uint64

	// current price
	SqrtPrice ag_binary.Uint128

	// Activation point
	ActivationPoint uint64

	// pool type, spl token or token2022
	PoolType uint8

	// is migrated
	IsMigrated uint8

	// is partner withdraw surplus
	IsPartnerWithdrawSurplus uint8

	// is protocol withdraw surplus
	IsProtocolWithdrawSurplus uint8

	// migration progress
	MigrationProgress uint8

	// is withdraw leftover
	IsWithdrawLeftover uint8

	// is creator withdraw surplus
	IsCreatorWithdrawSurplus uint8

	// migration fee withdraw status, first bit is for partner, second bit is for creator
	MigrationFeeWithdrawStatus uint8

	// pool metrics
	Metrics PoolMetrics

	// The time curve is finished
	FinishCurveTimestamp uint64

	// creator base fee
	CreatorBaseFee uint64

	// creator quote fee
	CreatorQuoteFee uint64

	// Padding for further use
	_padding_1 [7]uint64
}

var VirtualPoolAccountDiscriminator = [8]byte{213, 224, 5, 209, 98, 69, 119, 92}

func (obj VirtualPoolAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VirtualPoolAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `VolatilityTracker` param:
	err = encoder.Encode(obj.VolatilityTracker)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `BaseVault` param:
	err = encoder.Encode(obj.BaseVault)
	if err != nil {
		return err
	}
	// Serialize `QuoteVault` param:
	err = encoder.Encode(obj.QuoteVault)
	if err != nil {
		return err
	}
	// Serialize `BaseReserve` param:
	err = encoder.Encode(obj.BaseReserve)
	if err != nil {
		return err
	}
	// Serialize `QuoteReserve` param:
	err = encoder.Encode(obj.QuoteReserve)
	if err != nil {
		return err
	}
	// Serialize `ProtocolBaseFee` param:
	err = encoder.Encode(obj.ProtocolBaseFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolQuoteFee` param:
	err = encoder.Encode(obj.ProtocolQuoteFee)
	if err != nil {
		return err
	}
	// Serialize `PartnerBaseFee` param:
	err = encoder.Encode(obj.PartnerBaseFee)
	if err != nil {
		return err
	}
	// Serialize `PartnerQuoteFee` param:
	err = encoder.Encode(obj.PartnerQuoteFee)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	// Serialize `IsMigrated` param:
	err = encoder.Encode(obj.IsMigrated)
	if err != nil {
		return err
	}
	// Serialize `IsPartnerWithdrawSurplus` param:
	err = encoder.Encode(obj.IsPartnerWithdrawSurplus)
	if err != nil {
		return err
	}
	// Serialize `IsProtocolWithdrawSurplus` param:
	err = encoder.Encode(obj.IsProtocolWithdrawSurplus)
	if err != nil {
		return err
	}
	// Serialize `MigrationProgress` param:
	err = encoder.Encode(obj.MigrationProgress)
	if err != nil {
		return err
	}
	// Serialize `IsWithdrawLeftover` param:
	err = encoder.Encode(obj.IsWithdrawLeftover)
	if err != nil {
		return err
	}
	// Serialize `IsCreatorWithdrawSurplus` param:
	err = encoder.Encode(obj.IsCreatorWithdrawSurplus)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeeWithdrawStatus` param:
	err = encoder.Encode(obj.MigrationFeeWithdrawStatus)
	if err != nil {
		return err
	}
	// Serialize `Metrics` param:
	err = encoder.Encode(obj.Metrics)
	if err != nil {
		return err
	}
	// Serialize `FinishCurveTimestamp` param:
	err = encoder.Encode(obj.FinishCurveTimestamp)
	if err != nil {
		return err
	}
	// Serialize `CreatorBaseFee` param:
	err = encoder.Encode(obj.CreatorBaseFee)
	if err != nil {
		return err
	}
	// Serialize `CreatorQuoteFee` param:
	err = encoder.Encode(obj.CreatorQuoteFee)
	if err != nil {
		return err
	}
	// Serialize `_padding_1` param:
	err = encoder.Encode(obj._padding_1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VirtualPoolAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VirtualPoolAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[213 224 5 209 98 69 119 92]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `VolatilityTracker`:
	err = decoder.Decode(&obj.VolatilityTracker)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `BaseVault`:
	err = decoder.Decode(&obj.BaseVault)
	if err != nil {
		return err
	}
	// Deserialize `QuoteVault`:
	err = decoder.Decode(&obj.QuoteVault)
	if err != nil {
		return err
	}
	// Deserialize `BaseReserve`:
	err = decoder.Decode(&obj.BaseReserve)
	if err != nil {
		return err
	}
	// Deserialize `QuoteReserve`:
	err = decoder.Decode(&obj.QuoteReserve)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolBaseFee`:
	err = decoder.Decode(&obj.ProtocolBaseFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolQuoteFee`:
	err = decoder.Decode(&obj.ProtocolQuoteFee)
	if err != nil {
		return err
	}
	// Deserialize `PartnerBaseFee`:
	err = decoder.Decode(&obj.PartnerBaseFee)
	if err != nil {
		return err
	}
	// Deserialize `PartnerQuoteFee`:
	err = decoder.Decode(&obj.PartnerQuoteFee)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	// Deserialize `IsMigrated`:
	err = decoder.Decode(&obj.IsMigrated)
	if err != nil {
		return err
	}
	// Deserialize `IsPartnerWithdrawSurplus`:
	err = decoder.Decode(&obj.IsPartnerWithdrawSurplus)
	if err != nil {
		return err
	}
	// Deserialize `IsProtocolWithdrawSurplus`:
	err = decoder.Decode(&obj.IsProtocolWithdrawSurplus)
	if err != nil {
		return err
	}
	// Deserialize `MigrationProgress`:
	err = decoder.Decode(&obj.MigrationProgress)
	if err != nil {
		return err
	}
	// Deserialize `IsWithdrawLeftover`:
	err = decoder.Decode(&obj.IsWithdrawLeftover)
	if err != nil {
		return err
	}
	// Deserialize `IsCreatorWithdrawSurplus`:
	err = decoder.Decode(&obj.IsCreatorWithdrawSurplus)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeeWithdrawStatus`:
	err = decoder.Decode(&obj.MigrationFeeWithdrawStatus)
	if err != nil {
		return err
	}
	// Deserialize `Metrics`:
	err = decoder.Decode(&obj.Metrics)
	if err != nil {
		return err
	}
	// Deserialize `FinishCurveTimestamp`:
	err = decoder.Decode(&obj.FinishCurveTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `CreatorBaseFee`:
	err = decoder.Decode(&obj.CreatorBaseFee)
	if err != nil {
		return err
	}
	// Deserialize `CreatorQuoteFee`:
	err = decoder.Decode(&obj.CreatorQuoteFee)
	if err != nil {
		return err
	}
	// Deserialize `_padding_1`:
	err = decoder.Decode(&obj._padding_1)
	if err != nil {
		return err
	}
	return nil
}

type VirtualPoolMetadataAccount struct {
	// virtual pool
	VirtualPool ag_solanago.PublicKey

	// padding for future use
	padding [6]ag_binary.Uint128

	// Name of project.
	Name string

	// Website of project.
	Website string

	// Logo of project
	Logo string
}

var VirtualPoolMetadataAccountDiscriminator = [8]byte{217, 37, 82, 250, 43, 47, 228, 254}

func (obj VirtualPoolMetadataAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VirtualPoolMetadataAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Website` param:
	err = encoder.Encode(obj.Website)
	if err != nil {
		return err
	}
	// Serialize `Logo` param:
	err = encoder.Encode(obj.Logo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VirtualPoolMetadataAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VirtualPoolMetadataAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[217 37 82 250 43 47 228 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Website`:
	err = decoder.Decode(&obj.Website)
	if err != nil {
		return err
	}
	// Deserialize `Logo`:
	err = decoder.Decode(&obj.Logo)
	if err != nil {
		return err
	}
	return nil
}
