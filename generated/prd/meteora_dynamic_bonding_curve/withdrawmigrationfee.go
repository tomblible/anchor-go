// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BOTH partner and creator FUNCTIONS ///
type WithdrawMigrationFee struct {
	Flag *uint8

	// [0] = [] pool_authority
	//
	// [1] = [] config
	//
	// [2] = [WRITE] virtual_pool
	//
	// [3] = [WRITE] token_quote_account
	// ··········· The receiver token account
	//
	// [4] = [WRITE] quote_vault
	// ··········· The vault token account for output token
	//
	// [5] = [] quote_mint
	// ··········· The mint of quote token
	//
	// [6] = [SIGNER] sender
	//
	// [7] = [] token_quote_program
	// ··········· Token b program
	//
	// [8] = [] event_authority
	//
	// [9] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawMigrationFeeInstructionBuilder creates a new `WithdrawMigrationFee` instruction builder.
func NewWithdrawMigrationFeeInstructionBuilder() *WithdrawMigrationFee {
	nd := &WithdrawMigrationFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(PoolAuthority)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[9] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetFlag sets the "flag" parameter.
func (inst *WithdrawMigrationFee) SetFlag(flag uint8) *WithdrawMigrationFee {
	inst.Flag = &flag
	return inst
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *WithdrawMigrationFee) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *WithdrawMigrationFee) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *WithdrawMigrationFee) SetConfigAccount(config ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *WithdrawMigrationFee) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVirtualPoolAccount sets the "virtual_pool" account.
func (inst *WithdrawMigrationFee) SetVirtualPoolAccount(virtualPool ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(virtualPool).WRITE()
	return inst
}

// GetVirtualPoolAccount gets the "virtual_pool" account.
func (inst *WithdrawMigrationFee) GetVirtualPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenQuoteAccountAccount sets the "token_quote_account" account.
// The receiver token account
func (inst *WithdrawMigrationFee) SetTokenQuoteAccountAccount(tokenQuoteAccount ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenQuoteAccount).WRITE()
	return inst
}

// GetTokenQuoteAccountAccount gets the "token_quote_account" account.
// The receiver token account
func (inst *WithdrawMigrationFee) GetTokenQuoteAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// The vault token account for output token
func (inst *WithdrawMigrationFee) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// The vault token account for output token
func (inst *WithdrawMigrationFee) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetQuoteMintAccount sets the "quote_mint" account.
// The mint of quote token
func (inst *WithdrawMigrationFee) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
// The mint of quote token
func (inst *WithdrawMigrationFee) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSenderAccount sets the "sender" account.
func (inst *WithdrawMigrationFee) SetSenderAccount(sender ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(sender).SIGNER()
	return inst
}

// GetSenderAccount gets the "sender" account.
func (inst *WithdrawMigrationFee) GetSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenQuoteProgramAccount sets the "token_quote_program" account.
// Token b program
func (inst *WithdrawMigrationFee) SetTokenQuoteProgramAccount(tokenQuoteProgram ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenQuoteProgram)
	return inst
}

// GetTokenQuoteProgramAccount gets the "token_quote_program" account.
// Token b program
func (inst *WithdrawMigrationFee) GetTokenQuoteProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *WithdrawMigrationFee) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *WithdrawMigrationFee) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProgramAccount sets the "program" account.
func (inst *WithdrawMigrationFee) SetProgramAccount(program ag_solanago.PublicKey) *WithdrawMigrationFee {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *WithdrawMigrationFee) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *WithdrawMigrationFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WithdrawMigrationFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WithdrawMigrationFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *WithdrawMigrationFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst WithdrawMigrationFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawMigrationFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawMigrationFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawMigrationFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Flag == nil {
			return errors.New("flag parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VirtualPool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenQuoteAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Sender is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenQuoteProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *WithdrawMigrationFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawMigrationFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Flag", *inst.Flag))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       virtual_pool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       token_quote_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        quote_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         quote_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             sender", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("token_quote_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    event_authority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj WithdrawMigrationFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Flag` param:
	err = encoder.Encode(obj.Flag)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawMigrationFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Flag`:
	err = decoder.Decode(&obj.Flag)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawMigrationFeeInstruction declares a new WithdrawMigrationFee instruction with the provided parameters and accounts.
func NewWithdrawMigrationFeeInstruction(
	// Parameters:
	flag uint8,
	config ag_solanago.PublicKey,
	virtualPool ag_solanago.PublicKey,
	tokenQuoteAccount ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	tokenQuoteProgram ag_solanago.PublicKey) *WithdrawMigrationFee {
	return NewWithdrawMigrationFeeInstructionBuilder().
		SetFlag(flag).
		SetConfigAccount(config).
		SetVirtualPoolAccount(virtualPool).
		SetTokenQuoteAccountAccount(tokenQuoteAccount).
		SetQuoteVaultAccount(quoteVault).
		SetQuoteMintAccount(quoteMint).
		SetSenderAccount(sender).
		SetTokenQuoteProgramAccount(tokenQuoteProgram)
}

// NewSimpleWithdrawMigrationFeeInstruction declares a new WithdrawMigrationFee instruction with the provided parameters and accounts.
func NewSimpleWithdrawMigrationFeeInstruction(
	// Parameters:
	flag uint8,
	config ag_solanago.PublicKey,
	virtualPool ag_solanago.PublicKey,
	tokenQuoteAccount ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	tokenQuoteProgram ag_solanago.PublicKey) *WithdrawMigrationFee {
	return NewWithdrawMigrationFeeInstructionBuilder().
		SetFlag(flag).
		SetConfigAccount(config).
		SetVirtualPoolAccount(virtualPool).
		SetTokenQuoteAccountAccount(tokenQuoteAccount).
		SetQuoteVaultAccount(quoteVault).
		SetQuoteMintAccount(quoteMint).
		SetSenderAccount(sender).
		SetTokenQuoteProgramAccount(tokenQuoteProgram)
}
