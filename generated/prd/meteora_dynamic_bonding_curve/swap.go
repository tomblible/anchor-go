// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dynamic_bonding_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TRADING BOTS FUNCTIONS ////
type Swap struct {
	Params *SwapParameters

	// [0] = [] pool_authority
	//
	// [1] = [] config
	// ··········· config key
	//
	// [2] = [WRITE] pool
	// ··········· Pool account
	//
	// [3] = [WRITE] input_token_account
	// ··········· The user token account for input token
	//
	// [4] = [WRITE] output_token_account
	// ··········· The user token account for output token
	//
	// [5] = [WRITE] base_vault
	// ··········· The vault token account for base token
	//
	// [6] = [WRITE] quote_vault
	// ··········· The vault token account for quote token
	//
	// [7] = [] base_mint
	// ··········· The mint of base token
	//
	// [8] = [] quote_mint
	// ··········· The mint of quote token
	//
	// [9] = [SIGNER] payer
	// ··········· The user performing the swap
	//
	// [10] = [] token_base_program
	// ··········· Token base program
	//
	// [11] = [] token_quote_program
	// ··········· Token quote program
	//
	// [12] = [WRITE] referral_token_account
	// ··········· referral token account
	//
	// [13] = [] event_authority
	//
	// [14] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapInstructionBuilder creates a new `Swap` instruction builder.
func NewSwapInstructionBuilder() *Swap {
	nd := &Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(PoolAuthority)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[14] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetParams sets the "params" parameter.
func (inst *Swap) SetParams(params SwapParameters) *Swap {
	inst.Params = &params
	return inst
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *Swap) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *Swap) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
// config key
func (inst *Swap) SetConfigAccount(config ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
// config key
func (inst *Swap) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAccount sets the "pool" account.
// Pool account
func (inst *Swap) SetPoolAccount(pool ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account
func (inst *Swap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetInputTokenAccountAccount sets the "input_token_account" account.
// The user token account for input token
func (inst *Swap) SetInputTokenAccountAccount(inputTokenAccount ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(inputTokenAccount).WRITE()
	return inst
}

// GetInputTokenAccountAccount gets the "input_token_account" account.
// The user token account for input token
func (inst *Swap) GetInputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOutputTokenAccountAccount sets the "output_token_account" account.
// The user token account for output token
func (inst *Swap) SetOutputTokenAccountAccount(outputTokenAccount ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(outputTokenAccount).WRITE()
	return inst
}

// GetOutputTokenAccountAccount gets the "output_token_account" account.
// The user token account for output token
func (inst *Swap) GetOutputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBaseVaultAccount sets the "base_vault" account.
// The vault token account for base token
func (inst *Swap) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// The vault token account for base token
func (inst *Swap) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// The vault token account for quote token
func (inst *Swap) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// The vault token account for quote token
func (inst *Swap) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBaseMintAccount sets the "base_mint" account.
// The mint of base token
func (inst *Swap) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
// The mint of base token
func (inst *Swap) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetQuoteMintAccount sets the "quote_mint" account.
// The mint of quote token
func (inst *Swap) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
// The mint of quote token
func (inst *Swap) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPayerAccount sets the "payer" account.
// The user performing the swap
func (inst *Swap) SetPayerAccount(payer ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// The user performing the swap
func (inst *Swap) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenBaseProgramAccount sets the "token_base_program" account.
// Token base program
func (inst *Swap) SetTokenBaseProgramAccount(tokenBaseProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenBaseProgram)
	return inst
}

// GetTokenBaseProgramAccount gets the "token_base_program" account.
// Token base program
func (inst *Swap) GetTokenBaseProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenQuoteProgramAccount sets the "token_quote_program" account.
// Token quote program
func (inst *Swap) SetTokenQuoteProgramAccount(tokenQuoteProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenQuoteProgram)
	return inst
}

// GetTokenQuoteProgramAccount gets the "token_quote_program" account.
// Token quote program
func (inst *Swap) GetTokenQuoteProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetReferralTokenAccountAccount sets the "referral_token_account" account.
// referral token account
func (inst *Swap) SetReferralTokenAccountAccount(referralTokenAccount ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(referralTokenAccount).WRITE()
	return inst
}

// GetReferralTokenAccountAccount gets the "referral_token_account" account (optional).
// referral token account
func (inst *Swap) GetReferralTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *Swap) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *Swap) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetProgramAccount sets the "program" account.
func (inst *Swap) SetProgramAccount(program ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Swap) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst *Swap) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Swap) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Swap {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:15], metas...)
	return inst
}

func (inst *Swap) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15:]
}

func (inst Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Swap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Swap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 15 {
		return errors.New("accounts slice has wrong length: expected 15 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.InputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OutputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenBaseProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenQuoteProgram is not set")
		}

		// [12] = ReferralTokenAccount is optional

		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               pool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       input_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      output_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         base_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        quote_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          base_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         quote_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("              payer", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta(" token_base_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("token_quote_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("    referral_token_", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("    event_authority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("            program", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSwapInstruction(
	// Parameters:
	params SwapParameters,
	config ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenBaseProgram ag_solanago.PublicKey,
	tokenQuoteProgram ag_solanago.PublicKey,
	referralTokenAccount ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetParams(params).
		SetConfigAccount(config).
		SetPoolAccount(pool).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetPayerAccount(payer).
		SetTokenBaseProgramAccount(tokenBaseProgram).
		SetTokenQuoteProgramAccount(tokenQuoteProgram).
		SetReferralTokenAccountAccount(referralTokenAccount)
}

// NewSimpleSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSimpleSwapInstruction(
	// Parameters:
	params SwapParameters,
	config ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenBaseProgram ag_solanago.PublicKey,
	tokenQuoteProgram ag_solanago.PublicKey,
	referralTokenAccount ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetParams(params).
		SetConfigAccount(config).
		SetPoolAccount(pool).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetPayerAccount(payer).
		SetTokenBaseProgramAccount(tokenBaseProgram).
		SetTokenQuoteProgramAccount(tokenQuoteProgram).
		SetReferralTokenAccountAccount(referralTokenAccount)
}
