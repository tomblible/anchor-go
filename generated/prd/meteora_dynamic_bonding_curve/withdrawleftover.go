// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dynamic_bonding_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawLeftover is the `withdraw_leftover` instruction.
type WithdrawLeftover struct {

	// [0] = [] pool_authority
	//
	// [1] = [] config
	//
	// [2] = [WRITE] virtual_pool
	//
	// [3] = [WRITE] token_base_account
	// ··········· The receiver token account, withdraw to ATA
	//
	// [4] = [WRITE] base_vault
	// ··········· The vault token account for output token
	//
	// [5] = [] base_mint
	// ··········· The mint of quote token
	//
	// [6] = [] leftover_receiver
	//
	// [7] = [] token_base_program
	// ··········· Token base program
	//
	// [8] = [] event_authority
	//
	// [9] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawLeftoverInstructionBuilder creates a new `WithdrawLeftover` instruction builder.
func NewWithdrawLeftoverInstructionBuilder() *WithdrawLeftover {
	nd := &WithdrawLeftover{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(PoolAuthority)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[9] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *WithdrawLeftover) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *WithdrawLeftover) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *WithdrawLeftover) SetConfigAccount(config ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *WithdrawLeftover) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVirtualPoolAccount sets the "virtual_pool" account.
func (inst *WithdrawLeftover) SetVirtualPoolAccount(virtualPool ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(virtualPool).WRITE()
	return inst
}

// GetVirtualPoolAccount gets the "virtual_pool" account.
func (inst *WithdrawLeftover) GetVirtualPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBaseAccountAccount sets the "token_base_account" account.
// The receiver token account, withdraw to ATA
func (inst *WithdrawLeftover) SetTokenBaseAccountAccount(tokenBaseAccount ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBaseAccount).WRITE()
	return inst
}

// GetTokenBaseAccountAccount gets the "token_base_account" account.
// The receiver token account, withdraw to ATA
func (inst *WithdrawLeftover) GetTokenBaseAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseVaultAccount sets the "base_vault" account.
// The vault token account for output token
func (inst *WithdrawLeftover) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// The vault token account for output token
func (inst *WithdrawLeftover) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBaseMintAccount sets the "base_mint" account.
// The mint of quote token
func (inst *WithdrawLeftover) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
// The mint of quote token
func (inst *WithdrawLeftover) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetLeftoverReceiverAccount sets the "leftover_receiver" account.
func (inst *WithdrawLeftover) SetLeftoverReceiverAccount(leftoverReceiver ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(leftoverReceiver)
	return inst
}

// GetLeftoverReceiverAccount gets the "leftover_receiver" account.
func (inst *WithdrawLeftover) GetLeftoverReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenBaseProgramAccount sets the "token_base_program" account.
// Token base program
func (inst *WithdrawLeftover) SetTokenBaseProgramAccount(tokenBaseProgram ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenBaseProgram)
	return inst
}

// GetTokenBaseProgramAccount gets the "token_base_program" account.
// Token base program
func (inst *WithdrawLeftover) GetTokenBaseProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *WithdrawLeftover) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *WithdrawLeftover) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProgramAccount sets the "program" account.
func (inst *WithdrawLeftover) SetProgramAccount(program ag_solanago.PublicKey) *WithdrawLeftover {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *WithdrawLeftover) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *WithdrawLeftover) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WithdrawLeftover) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WithdrawLeftover {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *WithdrawLeftover) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst WithdrawLeftover) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawLeftover,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawLeftover) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawLeftover) Validate() error {
	if len(inst.AccountMetaSlice) != 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VirtualPool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBaseAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.LeftoverReceiver is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenBaseProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *WithdrawLeftover) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawLeftover")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      virtual_pool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       token_base_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        base_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         base_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" leftover_receiver", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("token_base_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   event_authority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj WithdrawLeftover) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawLeftover) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawLeftoverInstruction declares a new WithdrawLeftover instruction with the provided parameters and accounts.
func NewWithdrawLeftoverInstruction(
	config ag_solanago.PublicKey,
	virtualPool ag_solanago.PublicKey,
	tokenBaseAccount ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	leftoverReceiver ag_solanago.PublicKey,
	tokenBaseProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *WithdrawLeftover {
	return NewWithdrawLeftoverInstructionBuilder().
		SetConfigAccount(config).
		SetVirtualPoolAccount(virtualPool).
		SetTokenBaseAccountAccount(tokenBaseAccount).
		SetBaseVaultAccount(baseVault).
		SetBaseMintAccount(baseMint).
		SetLeftoverReceiverAccount(leftoverReceiver).
		SetTokenBaseProgramAccount(tokenBaseProgram).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleWithdrawLeftoverInstruction declares a new WithdrawLeftover instruction with the provided parameters and accounts.
func NewSimpleWithdrawLeftoverInstruction(
	config ag_solanago.PublicKey,
	virtualPool ag_solanago.PublicKey,
	tokenBaseAccount ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	leftoverReceiver ag_solanago.PublicKey,
	tokenBaseProgram ag_solanago.PublicKey) *WithdrawLeftover {
	return NewWithdrawLeftoverInstructionBuilder().
		SetConfigAccount(config).
		SetVirtualPoolAccount(virtualPool).
		SetTokenBaseAccountAccount(tokenBaseAccount).
		SetBaseVaultAccount(baseVault).
		SetBaseMintAccount(baseMint).
		SetLeftoverReceiverAccount(leftoverReceiver).
		SetTokenBaseProgramAccount(tokenBaseProgram)
}
