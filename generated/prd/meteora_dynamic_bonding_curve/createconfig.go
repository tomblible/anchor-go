// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateConfig is the `create_config` instruction.
type CreateConfig struct {
	ConfigParameters *ConfigParameters

	// [0] = [WRITE, SIGNER] config
	//
	// [1] = [] fee_claimer
	//
	// [2] = [] leftover_receiver
	//
	// [3] = [] quote_mint
	// ··········· quote mint
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [] system_program
	//
	// [6] = [] event_authority
	//
	// [7] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateConfigInstructionBuilder creates a new `CreateConfig` instruction builder.
func NewCreateConfigInstructionBuilder() *CreateConfig {
	nd := &CreateConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	nd.AccountMetaSlice[5] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[6] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[7] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetConfigParameters sets the "config_parameters" parameter.
func (inst *CreateConfig) SetConfigParameters(config_parameters ConfigParameters) *CreateConfig {
	inst.ConfigParameters = &config_parameters
	return inst
}

// SetConfigAccount sets the "config" account.
func (inst *CreateConfig) SetConfigAccount(config ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config).WRITE().SIGNER()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *CreateConfig) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFeeClaimerAccount sets the "fee_claimer" account.
func (inst *CreateConfig) SetFeeClaimerAccount(feeClaimer ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(feeClaimer)
	return inst
}

// GetFeeClaimerAccount gets the "fee_claimer" account.
func (inst *CreateConfig) GetFeeClaimerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLeftoverReceiverAccount sets the "leftover_receiver" account.
func (inst *CreateConfig) SetLeftoverReceiverAccount(leftoverReceiver ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(leftoverReceiver)
	return inst
}

// GetLeftoverReceiverAccount gets the "leftover_receiver" account.
func (inst *CreateConfig) GetLeftoverReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetQuoteMintAccount sets the "quote_mint" account.
// quote mint
func (inst *CreateConfig) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
// quote mint
func (inst *CreateConfig) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateConfig) SetPayerAccount(payer ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateConfig) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CreateConfig) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CreateConfig) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetProgramAccount sets the "program" account.
func (inst *CreateConfig) SetProgramAccount(program ag_solanago.PublicKey) *CreateConfig {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CreateConfig) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst *CreateConfig) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateConfig) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateConfig {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:8], metas...)
	return inst
}

func (inst *CreateConfig) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8:]
}

func (inst CreateConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ConfigParameters == nil {
			return errors.New("configParameters parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 8 {
		return errors.New("accounts slice has wrong length: expected 8 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FeeClaimer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LeftoverReceiver is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CreateConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" ConfigParameters", *inst.ConfigParameters))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      fee_claimer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("leftover_receiver", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       quote_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   system_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  event_authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          program", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CreateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ConfigParameters` param:
	err = encoder.Encode(obj.ConfigParameters)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ConfigParameters`:
	err = decoder.Decode(&obj.ConfigParameters)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateConfigInstruction declares a new CreateConfig instruction with the provided parameters and accounts.
func NewCreateConfigInstruction(
	// Parameters:
	config_parameters ConfigParameters,
	// Accounts:
	config ag_solanago.PublicKey,
	feeClaimer ag_solanago.PublicKey,
	leftoverReceiver ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *CreateConfig {
	return NewCreateConfigInstructionBuilder().
		SetConfigParameters(config_parameters).
		SetConfigAccount(config).
		SetFeeClaimerAccount(feeClaimer).
		SetLeftoverReceiverAccount(leftoverReceiver).
		SetQuoteMintAccount(quoteMint).
		SetPayerAccount(payer)
}

// NewSimpleCreateConfigInstruction declares a new CreateConfig instruction with the provided parameters and accounts.
func NewSimpleCreateConfigInstruction(
	// Parameters:
	config_parameters ConfigParameters,
	// Accounts:
	config ag_solanago.PublicKey,
	feeClaimer ag_solanago.PublicKey,
	leftoverReceiver ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *CreateConfig {
	return NewCreateConfigInstructionBuilder().
		SetConfigParameters(config_parameters).
		SetConfigAccount(config).
		SetFeeClaimerAccount(feeClaimer).
		SetLeftoverReceiverAccount(leftoverReceiver).
		SetQuoteMintAccount(quoteMint).
		SetPayerAccount(payer)
}
