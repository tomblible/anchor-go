// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dynamic_bonding_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PERMISSIONLESS FUNCTIONS ///
// create locker
type CreateLocker struct {

	// [0] = [WRITE] virtual_pool
	// ··········· Virtual pool
	//
	// [1] = [] config
	// ··········· Config
	//
	// [2] = [WRITE] pool_authority
	//
	// [3] = [WRITE] base_vault
	//
	// [4] = [WRITE] base_mint
	//
	// [5] = [WRITE] base
	//
	// [6] = [] creator
	//
	// [7] = [WRITE] escrow
	//
	// [8] = [WRITE] escrow_token
	//
	// [9] = [WRITE, SIGNER] payer
	//
	// [10] = [] token_program
	//
	// [11] = [] locker_program
	//
	// [12] = [] locker_event_authority
	//
	// [13] = [] system_program
	// ··········· System program.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateLockerInstructionBuilder creates a new `CreateLocker` instruction builder.
func NewCreateLockerInstructionBuilder() *CreateLocker {
	nd := &CreateLocker{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(PoolAuthority).WRITE()
	nd.AccountMetaSlice[11] = ag_solanago.Meta(LockerProgram)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(SystemProgram)
	return nd
}

// SetVirtualPoolAccount sets the "virtual_pool" account.
// Virtual pool
func (inst *CreateLocker) SetVirtualPoolAccount(virtualPool ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(virtualPool).WRITE()
	return inst
}

// GetVirtualPoolAccount gets the "virtual_pool" account.
// Virtual pool
func (inst *CreateLocker) GetVirtualPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
// Config
func (inst *CreateLocker) SetConfigAccount(config ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
// Config
func (inst *CreateLocker) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *CreateLocker) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolAuthority).WRITE()
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *CreateLocker) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBaseVaultAccount sets the "base_vault" account.
func (inst *CreateLocker) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
func (inst *CreateLocker) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseMintAccount sets the "base_mint" account.
func (inst *CreateLocker) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseMint).WRITE()
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
func (inst *CreateLocker) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBaseAccount sets the "base" account.
func (inst *CreateLocker) SetBaseAccount(base ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(base).WRITE()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *CreateLocker) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCreatorAccount sets the "creator" account.
func (inst *CreateLocker) SetCreatorAccount(creator ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(creator)
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *CreateLocker) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *CreateLocker) SetEscrowAccount(escrow ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *CreateLocker) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEscrowTokenAccount sets the "escrow_token" account.
func (inst *CreateLocker) SetEscrowTokenAccount(escrowToken ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(escrowToken).WRITE()
	return inst
}

// GetEscrowTokenAccount gets the "escrow_token" account.
func (inst *CreateLocker) GetEscrowTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateLocker) SetPayerAccount(payer ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateLocker) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *CreateLocker) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *CreateLocker) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetLockerProgramAccount sets the "locker_program" account.
func (inst *CreateLocker) SetLockerProgramAccount(lockerProgram ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(lockerProgram)
	return inst
}

// GetLockerProgramAccount gets the "locker_program" account.
func (inst *CreateLocker) GetLockerProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetLockerEventAuthorityAccount sets the "locker_event_authority" account.
func (inst *CreateLocker) SetLockerEventAuthorityAccount(lockerEventAuthority ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(lockerEventAuthority)
	return inst
}

// GetLockerEventAuthorityAccount gets the "locker_event_authority" account.
func (inst *CreateLocker) GetLockerEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSystemProgramAccount sets the "system_program" account.
// System program.
func (inst *CreateLocker) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateLocker {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// System program.
func (inst *CreateLocker) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *CreateLocker) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateLocker) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateLocker {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *CreateLocker) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst CreateLocker) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateLocker,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateLocker) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateLocker) Validate() error {
	if len(inst.AccountMetaSlice) != 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VirtualPool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EscrowToken is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.LockerProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.LockerEventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateLocker) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateLocker")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          virtual_pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        pool_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            base_vault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             base_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  base", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("               creator", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                escrow", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          escrow_token", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                 payer", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         token_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        locker_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("locker_event_authority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        system_program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj CreateLocker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateLocker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateLockerInstruction declares a new CreateLocker instruction with the provided parameters and accounts.
func NewCreateLockerInstruction(
	// Accounts:
	virtualPool ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	base ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	escrowToken ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	lockerEventAuthority ag_solanago.PublicKey) *CreateLocker {
	return NewCreateLockerInstructionBuilder().
		SetVirtualPoolAccount(virtualPool).
		SetConfigAccount(config).
		SetBaseVaultAccount(baseVault).
		SetBaseMintAccount(baseMint).
		SetBaseAccount(base).
		SetCreatorAccount(creator).
		SetEscrowAccount(escrow).
		SetEscrowTokenAccount(escrowToken).
		SetPayerAccount(payer).
		SetTokenProgramAccount(tokenProgram).
		SetLockerEventAuthorityAccount(lockerEventAuthority)
}

// NewSimpleCreateLockerInstruction declares a new CreateLocker instruction with the provided parameters and accounts.
func NewSimpleCreateLockerInstruction(
	// Accounts:
	virtualPool ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	escrowToken ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	lockerEventAuthority ag_solanago.PublicKey) *CreateLocker {
	base := MustFindBaseAddress(virtualPool)
	return NewCreateLockerInstructionBuilder().
		SetVirtualPoolAccount(virtualPool).
		SetConfigAccount(config).
		SetBaseVaultAccount(baseVault).
		SetBaseMintAccount(baseMint).
		SetBaseAccount(base).
		SetCreatorAccount(creator).
		SetEscrowAccount(escrow).
		SetEscrowTokenAccount(escrowToken).
		SetPayerAccount(payer).
		SetTokenProgramAccount(tokenProgram).
		SetLockerEventAuthorityAccount(lockerEventAuthority)
}
