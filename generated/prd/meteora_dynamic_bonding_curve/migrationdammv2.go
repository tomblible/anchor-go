// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MigrationDammV2 is the `migration_damm_v2` instruction.
type MigrationDammV2 struct {

	// [0] = [WRITE] virtual_pool
	// ··········· virtual pool
	//
	// [1] = [] migration_metadata
	// ··········· migration metadata
	//
	// [2] = [] config
	// ··········· virtual pool config key
	//
	// [3] = [WRITE] pool_authority
	//
	// [4] = [WRITE] pool
	//
	// [5] = [WRITE] first_position_nft_mint
	//
	// [6] = [WRITE] first_position_nft_account
	//
	// [7] = [WRITE] first_position
	//
	// [8] = [WRITE] second_position_nft_mint
	//
	// [9] = [WRITE] second_position_nft_account
	//
	// [10] = [WRITE] second_position
	//
	// [11] = [] damm_pool_authority
	//
	// [12] = [] amm_program
	//
	// [13] = [WRITE] base_mint
	//
	// [14] = [WRITE] quote_mint
	//
	// [15] = [WRITE] token_a_vault
	//
	// [16] = [WRITE] token_b_vault
	//
	// [17] = [WRITE] base_vault
	//
	// [18] = [WRITE] quote_vault
	//
	// [19] = [WRITE, SIGNER] payer
	//
	// [20] = [] token_base_program
	//
	// [21] = [] token_quote_program
	//
	// [22] = [] token_2022_program
	//
	// [23] = [] damm_event_authority
	//
	// [24] = [] system_program
	// ··········· System program.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrationDammV2InstructionBuilder creates a new `MigrationDammV2` instruction builder.
func NewMigrationDammV2InstructionBuilder() *MigrationDammV2 {
	nd := &MigrationDammV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 25),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(PoolAuthority).WRITE()
	nd.AccountMetaSlice[12] = ag_solanago.Meta(AmmProgram)
	nd.AccountMetaSlice[24] = ag_solanago.Meta(SystemProgram)
	return nd
}

// SetVirtualPoolAccount sets the "virtual_pool" account.
// virtual pool
func (inst *MigrationDammV2) SetVirtualPoolAccount(virtualPool ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(virtualPool).WRITE()
	return inst
}

// GetVirtualPoolAccount gets the "virtual_pool" account.
// virtual pool
func (inst *MigrationDammV2) GetVirtualPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMigrationMetadataAccount sets the "migration_metadata" account.
// migration metadata
func (inst *MigrationDammV2) SetMigrationMetadataAccount(migrationMetadata ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(migrationMetadata)
	return inst
}

// GetMigrationMetadataAccount gets the "migration_metadata" account.
// migration metadata
func (inst *MigrationDammV2) GetMigrationMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetConfigAccount sets the "config" account.
// virtual pool config key
func (inst *MigrationDammV2) SetConfigAccount(config ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
// virtual pool config key
func (inst *MigrationDammV2) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *MigrationDammV2) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolAuthority).WRITE()
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *MigrationDammV2) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolAccount sets the "pool" account.
func (inst *MigrationDammV2) SetPoolAccount(pool ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *MigrationDammV2) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFirstPositionNftMintAccount sets the "first_position_nft_mint" account.
func (inst *MigrationDammV2) SetFirstPositionNftMintAccount(firstPositionNftMint ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(firstPositionNftMint).WRITE()
	return inst
}

// GetFirstPositionNftMintAccount gets the "first_position_nft_mint" account.
func (inst *MigrationDammV2) GetFirstPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetFirstPositionNftAccountAccount sets the "first_position_nft_account" account.
func (inst *MigrationDammV2) SetFirstPositionNftAccountAccount(firstPositionNftAccount ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(firstPositionNftAccount).WRITE()
	return inst
}

// GetFirstPositionNftAccountAccount gets the "first_position_nft_account" account.
func (inst *MigrationDammV2) GetFirstPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetFirstPositionAccount sets the "first_position" account.
func (inst *MigrationDammV2) SetFirstPositionAccount(firstPosition ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(firstPosition).WRITE()
	return inst
}

// GetFirstPositionAccount gets the "first_position" account.
func (inst *MigrationDammV2) GetFirstPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSecondPositionNftMintAccount sets the "second_position_nft_mint" account.
func (inst *MigrationDammV2) SetSecondPositionNftMintAccount(secondPositionNftMint ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(secondPositionNftMint).WRITE()
	return inst
}

// GetSecondPositionNftMintAccount gets the "second_position_nft_mint" account (optional).
func (inst *MigrationDammV2) GetSecondPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSecondPositionNftAccountAccount sets the "second_position_nft_account" account.
func (inst *MigrationDammV2) SetSecondPositionNftAccountAccount(secondPositionNftAccount ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(secondPositionNftAccount).WRITE()
	return inst
}

// GetSecondPositionNftAccountAccount gets the "second_position_nft_account" account (optional).
func (inst *MigrationDammV2) GetSecondPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSecondPositionAccount sets the "second_position" account.
func (inst *MigrationDammV2) SetSecondPositionAccount(secondPosition ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(secondPosition).WRITE()
	return inst
}

// GetSecondPositionAccount gets the "second_position" account (optional).
func (inst *MigrationDammV2) GetSecondPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetDammPoolAuthorityAccount sets the "damm_pool_authority" account.
func (inst *MigrationDammV2) SetDammPoolAuthorityAccount(dammPoolAuthority ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(dammPoolAuthority)
	return inst
}

// GetDammPoolAuthorityAccount gets the "damm_pool_authority" account.
func (inst *MigrationDammV2) GetDammPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetAmmProgramAccount sets the "amm_program" account.
func (inst *MigrationDammV2) SetAmmProgramAccount(ammProgram ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(ammProgram)
	return inst
}

// GetAmmProgramAccount gets the "amm_program" account.
func (inst *MigrationDammV2) GetAmmProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetBaseMintAccount sets the "base_mint" account.
func (inst *MigrationDammV2) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(baseMint).WRITE()
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
func (inst *MigrationDammV2) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetQuoteMintAccount sets the "quote_mint" account.
func (inst *MigrationDammV2) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(quoteMint).WRITE()
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
func (inst *MigrationDammV2) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTokenAVaultAccount sets the "token_a_vault" account.
func (inst *MigrationDammV2) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

// GetTokenAVaultAccount gets the "token_a_vault" account.
func (inst *MigrationDammV2) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTokenBVaultAccount sets the "token_b_vault" account.
func (inst *MigrationDammV2) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

// GetTokenBVaultAccount gets the "token_b_vault" account.
func (inst *MigrationDammV2) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetBaseVaultAccount sets the "base_vault" account.
func (inst *MigrationDammV2) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
func (inst *MigrationDammV2) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
func (inst *MigrationDammV2) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
func (inst *MigrationDammV2) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetPayerAccount sets the "payer" account.
func (inst *MigrationDammV2) SetPayerAccount(payer ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MigrationDammV2) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetTokenBaseProgramAccount sets the "token_base_program" account.
func (inst *MigrationDammV2) SetTokenBaseProgramAccount(tokenBaseProgram ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(tokenBaseProgram)
	return inst
}

// GetTokenBaseProgramAccount gets the "token_base_program" account.
func (inst *MigrationDammV2) GetTokenBaseProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetTokenQuoteProgramAccount sets the "token_quote_program" account.
func (inst *MigrationDammV2) SetTokenQuoteProgramAccount(tokenQuoteProgram ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(tokenQuoteProgram)
	return inst
}

// GetTokenQuoteProgramAccount gets the "token_quote_program" account.
func (inst *MigrationDammV2) GetTokenQuoteProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetToken2022ProgramAccount sets the "token_2022_program" account.
func (inst *MigrationDammV2) SetToken2022ProgramAccount(token2022Program ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(token2022Program)
	return inst
}

// GetToken2022ProgramAccount gets the "token_2022_program" account.
func (inst *MigrationDammV2) GetToken2022ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetDammEventAuthorityAccount sets the "damm_event_authority" account.
func (inst *MigrationDammV2) SetDammEventAuthorityAccount(dammEventAuthority ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(dammEventAuthority)
	return inst
}

// GetDammEventAuthorityAccount gets the "damm_event_authority" account.
func (inst *MigrationDammV2) GetDammEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetSystemProgramAccount sets the "system_program" account.
// System program.
func (inst *MigrationDammV2) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MigrationDammV2 {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// System program.
func (inst *MigrationDammV2) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

func (inst *MigrationDammV2) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *MigrationDammV2) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *MigrationDammV2 {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:25], metas...)
	return inst
}

func (inst *MigrationDammV2) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[25:]
}

func (inst MigrationDammV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MigrationDammV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MigrationDammV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MigrationDammV2) Validate() error {
	if len(inst.AccountMetaSlice) < 25 {
		return errors.New("accounts slice has wrong length: expected 25 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VirtualPool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MigrationMetadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FirstPositionNftMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.FirstPositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.FirstPosition is not set")
		}

		// [8] = SecondPositionNftMint is optional

		// [9] = SecondPositionNftAccount is optional

		// [10] = SecondPosition is optional

		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.DammPoolAuthority is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.AmmProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.TokenBaseProgram is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.TokenQuoteProgram is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.Token2022Program is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.DammEventAuthority is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *MigrationDammV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MigrationDammV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=25]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            virtual_pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      migration_metadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  config", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          pool_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    pool", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" first_position_nft_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     first_position_nft_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          first_position", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("second_position_nft_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    second_position_nft_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         second_position", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     damm_pool_authority", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("             amm_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("               base_mint", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("              quote_mint", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("           token_a_vault", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("           token_b_vault", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("              base_vault", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("             quote_vault", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("      token_base_program", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("     token_quote_program", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("      token_2022_program", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("    damm_event_authority", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(24)))
					})
				})
		})
}

func (obj MigrationDammV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MigrationDammV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMigrationDammV2Instruction declares a new MigrationDammV2 instruction with the provided parameters and accounts.
func NewMigrationDammV2Instruction(
	// Accounts:
	virtualPool ag_solanago.PublicKey,
	migrationMetadata ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	firstPositionNftMint ag_solanago.PublicKey,
	firstPositionNftAccount ag_solanago.PublicKey,
	firstPosition ag_solanago.PublicKey,
	secondPositionNftMint ag_solanago.PublicKey,
	secondPositionNftAccount ag_solanago.PublicKey,
	secondPosition ag_solanago.PublicKey,
	dammPoolAuthority ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenBaseProgram ag_solanago.PublicKey,
	tokenQuoteProgram ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey,
	dammEventAuthority ag_solanago.PublicKey) *MigrationDammV2 {
	return NewMigrationDammV2InstructionBuilder().
		SetVirtualPoolAccount(virtualPool).
		SetMigrationMetadataAccount(migrationMetadata).
		SetConfigAccount(config).
		SetPoolAccount(pool).
		SetFirstPositionNftMintAccount(firstPositionNftMint).
		SetFirstPositionNftAccountAccount(firstPositionNftAccount).
		SetFirstPositionAccount(firstPosition).
		SetSecondPositionNftMintAccount(secondPositionNftMint).
		SetSecondPositionNftAccountAccount(secondPositionNftAccount).
		SetSecondPositionAccount(secondPosition).
		SetDammPoolAuthorityAccount(dammPoolAuthority).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetPayerAccount(payer).
		SetTokenBaseProgramAccount(tokenBaseProgram).
		SetTokenQuoteProgramAccount(tokenQuoteProgram).
		SetToken2022ProgramAccount(token2022Program).
		SetDammEventAuthorityAccount(dammEventAuthority)
}

// NewSimpleMigrationDammV2Instruction declares a new MigrationDammV2 instruction with the provided parameters and accounts.
func NewSimpleMigrationDammV2Instruction(
	// Accounts:
	virtualPool ag_solanago.PublicKey,
	migrationMetadata ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	firstPositionNftMint ag_solanago.PublicKey,
	firstPositionNftAccount ag_solanago.PublicKey,
	firstPosition ag_solanago.PublicKey,
	secondPositionNftMint ag_solanago.PublicKey,
	secondPositionNftAccount ag_solanago.PublicKey,
	secondPosition ag_solanago.PublicKey,
	dammPoolAuthority ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenBaseProgram ag_solanago.PublicKey,
	tokenQuoteProgram ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey,
	dammEventAuthority ag_solanago.PublicKey) *MigrationDammV2 {
	return NewMigrationDammV2InstructionBuilder().
		SetVirtualPoolAccount(virtualPool).
		SetMigrationMetadataAccount(migrationMetadata).
		SetConfigAccount(config).
		SetPoolAccount(pool).
		SetFirstPositionNftMintAccount(firstPositionNftMint).
		SetFirstPositionNftAccountAccount(firstPositionNftAccount).
		SetFirstPositionAccount(firstPosition).
		SetSecondPositionNftMintAccount(secondPositionNftMint).
		SetSecondPositionNftAccountAccount(secondPositionNftAccount).
		SetSecondPositionAccount(secondPosition).
		SetDammPoolAuthorityAccount(dammPoolAuthority).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetPayerAccount(payer).
		SetTokenBaseProgramAccount(tokenBaseProgram).
		SetTokenQuoteProgramAccount(tokenQuoteProgram).
		SetToken2022ProgramAccount(token2022Program).
		SetDammEventAuthorityAccount(dammEventAuthority)
}
