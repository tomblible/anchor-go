// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MigrateMeteoraDammLockLpToken is the `migrate_meteora_damm_lock_lp_token` instruction.
type MigrateMeteoraDammLockLpToken struct {

	// [0] = [] virtual_pool
	//
	// [1] = [WRITE] migration_metadata
	// ··········· migration_metadata
	//
	// [2] = [WRITE] pool_authority
	//
	// [3] = [WRITE] pool
	//
	// [4] = [] lp_mint
	//
	// [5] = [WRITE] lock_escrow
	//
	// [6] = [] owner
	//
	// [7] = [WRITE] source_tokens
	//
	// [8] = [WRITE] escrow_vault
	//
	// [9] = [] amm_program
	//
	// [10] = [] a_vault
	//
	// [11] = [] b_vault
	//
	// [12] = [] a_vault_lp
	//
	// [13] = [] b_vault_lp
	//
	// [14] = [] a_vault_lp_mint
	//
	// [15] = [] b_vault_lp_mint
	//
	// [16] = [] token_program
	// ··········· token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrateMeteoraDammLockLpTokenInstructionBuilder creates a new `MigrateMeteoraDammLockLpToken` instruction builder.
func NewMigrateMeteoraDammLockLpTokenInstructionBuilder() *MigrateMeteoraDammLockLpToken {
	nd := &MigrateMeteoraDammLockLpToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(PoolAuthority).WRITE()
	nd.AccountMetaSlice[9] = ag_solanago.Meta(MeteoraPoolsProgram)
	nd.AccountMetaSlice[16] = ag_solanago.Meta(TokenProgram)
	return nd
}

// SetVirtualPoolAccount sets the "virtual_pool" account.
func (inst *MigrateMeteoraDammLockLpToken) SetVirtualPoolAccount(virtualPool ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(virtualPool)
	return inst
}

// GetVirtualPoolAccount gets the "virtual_pool" account.
func (inst *MigrateMeteoraDammLockLpToken) GetVirtualPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMigrationMetadataAccount sets the "migration_metadata" account.
// migration_metadata
func (inst *MigrateMeteoraDammLockLpToken) SetMigrationMetadataAccount(migrationMetadata ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(migrationMetadata).WRITE()
	return inst
}

// GetMigrationMetadataAccount gets the "migration_metadata" account.
// migration_metadata
func (inst *MigrateMeteoraDammLockLpToken) GetMigrationMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *MigrateMeteoraDammLockLpToken) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolAuthority).WRITE()
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *MigrateMeteoraDammLockLpToken) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolAccount sets the "pool" account.
func (inst *MigrateMeteoraDammLockLpToken) SetPoolAccount(pool ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *MigrateMeteoraDammLockLpToken) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLpMintAccount sets the "lp_mint" account.
func (inst *MigrateMeteoraDammLockLpToken) SetLpMintAccount(lpMint ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(lpMint)
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
func (inst *MigrateMeteoraDammLockLpToken) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLockEscrowAccount sets the "lock_escrow" account.
func (inst *MigrateMeteoraDammLockLpToken) SetLockEscrowAccount(lockEscrow ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(lockEscrow).WRITE()
	return inst
}

// GetLockEscrowAccount gets the "lock_escrow" account.
func (inst *MigrateMeteoraDammLockLpToken) GetLockEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOwnerAccount sets the "owner" account.
func (inst *MigrateMeteoraDammLockLpToken) SetOwnerAccount(owner ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *MigrateMeteoraDammLockLpToken) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSourceTokensAccount sets the "source_tokens" account.
func (inst *MigrateMeteoraDammLockLpToken) SetSourceTokensAccount(sourceTokens ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(sourceTokens).WRITE()
	return inst
}

// GetSourceTokensAccount gets the "source_tokens" account.
func (inst *MigrateMeteoraDammLockLpToken) GetSourceTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEscrowVaultAccount sets the "escrow_vault" account.
func (inst *MigrateMeteoraDammLockLpToken) SetEscrowVaultAccount(escrowVault ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(escrowVault).WRITE()
	return inst
}

// GetEscrowVaultAccount gets the "escrow_vault" account.
func (inst *MigrateMeteoraDammLockLpToken) GetEscrowVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAmmProgramAccount sets the "amm_program" account.
func (inst *MigrateMeteoraDammLockLpToken) SetAmmProgramAccount(ammProgram ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(ammProgram)
	return inst
}

// GetAmmProgramAccount gets the "amm_program" account.
func (inst *MigrateMeteoraDammLockLpToken) GetAmmProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAVaultAccount sets the "a_vault" account.
func (inst *MigrateMeteoraDammLockLpToken) SetAVaultAccount(aVault ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(aVault)
	return inst
}

// GetAVaultAccount gets the "a_vault" account.
func (inst *MigrateMeteoraDammLockLpToken) GetAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBVaultAccount sets the "b_vault" account.
func (inst *MigrateMeteoraDammLockLpToken) SetBVaultAccount(bVault ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(bVault)
	return inst
}

// GetBVaultAccount gets the "b_vault" account.
func (inst *MigrateMeteoraDammLockLpToken) GetBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetAVaultLpAccount sets the "a_vault_lp" account.
func (inst *MigrateMeteoraDammLockLpToken) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(aVaultLp)
	return inst
}

// GetAVaultLpAccount gets the "a_vault_lp" account.
func (inst *MigrateMeteoraDammLockLpToken) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetBVaultLpAccount sets the "b_vault_lp" account.
func (inst *MigrateMeteoraDammLockLpToken) SetBVaultLpAccount(bVaultLp ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(bVaultLp)
	return inst
}

// GetBVaultLpAccount gets the "b_vault_lp" account.
func (inst *MigrateMeteoraDammLockLpToken) GetBVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetAVaultLpMintAccount sets the "a_vault_lp_mint" account.
func (inst *MigrateMeteoraDammLockLpToken) SetAVaultLpMintAccount(aVaultLpMint ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(aVaultLpMint)
	return inst
}

// GetAVaultLpMintAccount gets the "a_vault_lp_mint" account.
func (inst *MigrateMeteoraDammLockLpToken) GetAVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetBVaultLpMintAccount sets the "b_vault_lp_mint" account.
func (inst *MigrateMeteoraDammLockLpToken) SetBVaultLpMintAccount(bVaultLpMint ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(bVaultLpMint)
	return inst
}

// GetBVaultLpMintAccount gets the "b_vault_lp_mint" account.
func (inst *MigrateMeteoraDammLockLpToken) GetBVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTokenProgramAccount sets the "token_program" account.
// token_program
func (inst *MigrateMeteoraDammLockLpToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// token_program
func (inst *MigrateMeteoraDammLockLpToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst *MigrateMeteoraDammLockLpToken) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *MigrateMeteoraDammLockLpToken) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *MigrateMeteoraDammLockLpToken {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:17], metas...)
	return inst
}

func (inst *MigrateMeteoraDammLockLpToken) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[17:]
}

func (inst MigrateMeteoraDammLockLpToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MigrateMeteoraDammLockLpToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MigrateMeteoraDammLockLpToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MigrateMeteoraDammLockLpToken) Validate() error {
	if len(inst.AccountMetaSlice) < 17 {
		return errors.New("accounts slice has wrong length: expected 17 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VirtualPool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MigrationMetadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LockEscrow is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SourceTokens is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EscrowVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AmmProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BVault is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.BVaultLp is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.AVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.BVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *MigrateMeteoraDammLockLpToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MigrateMeteoraDammLockLpToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      virtual_pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("migration_metadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    pool_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              pool", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           lp_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       lock_escrow", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             owner", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     source_tokens", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      escrow_vault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       amm_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           a_vault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("           b_vault", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("        a_vault_lp", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        b_vault_lp", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("   a_vault_lp_mint", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("   b_vault_lp_mint", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("     token_program", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj MigrateMeteoraDammLockLpToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MigrateMeteoraDammLockLpToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMigrateMeteoraDammLockLpTokenInstruction declares a new MigrateMeteoraDammLockLpToken instruction with the provided parameters and accounts.
func NewMigrateMeteoraDammLockLpTokenInstruction(
	// Accounts:
	virtualPool ag_solanago.PublicKey,
	migrationMetadata ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	lockEscrow ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	sourceTokens ag_solanago.PublicKey,
	escrowVault ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	return NewMigrateMeteoraDammLockLpTokenInstructionBuilder().
		SetVirtualPoolAccount(virtualPool).
		SetMigrationMetadataAccount(migrationMetadata).
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetLockEscrowAccount(lockEscrow).
		SetOwnerAccount(owner).
		SetSourceTokensAccount(sourceTokens).
		SetEscrowVaultAccount(escrowVault).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint)
}

// NewSimpleMigrateMeteoraDammLockLpTokenInstruction declares a new MigrateMeteoraDammLockLpToken instruction with the provided parameters and accounts.
func NewSimpleMigrateMeteoraDammLockLpTokenInstruction(
	// Accounts:
	virtualPool ag_solanago.PublicKey,
	migrationMetadata ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	lockEscrow ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	sourceTokens ag_solanago.PublicKey,
	escrowVault ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey) *MigrateMeteoraDammLockLpToken {
	return NewMigrateMeteoraDammLockLpTokenInstructionBuilder().
		SetVirtualPoolAccount(virtualPool).
		SetMigrationMetadataAccount(migrationMetadata).
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetLockEscrowAccount(lockEscrow).
		SetOwnerAccount(owner).
		SetSourceTokensAccount(sourceTokens).
		SetEscrowVaultAccount(escrowVault).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint)
}
