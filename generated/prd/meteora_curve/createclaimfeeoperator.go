// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ADMIN FUNCTIONS_ ///
type CreateClaimFeeOperator struct {

	// [0] = [WRITE] claim_fee_operator
	//
	// [1] = [] operator
	//
	// [2] = [WRITE, SIGNER] admin
	//
	// [3] = [] system_program
	//
	// [4] = [] event_authority
	//
	// [5] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateClaimFeeOperatorInstructionBuilder creates a new `CreateClaimFeeOperator` instruction builder.
func NewCreateClaimFeeOperatorInstructionBuilder() *CreateClaimFeeOperator {
	nd := &CreateClaimFeeOperator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[5] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetClaimFeeOperatorAccount sets the "claim_fee_operator" account.
func (inst *CreateClaimFeeOperator) SetClaimFeeOperatorAccount(claimFeeOperator ag_solanago.PublicKey) *CreateClaimFeeOperator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(claimFeeOperator).WRITE()
	return inst
}

// GetClaimFeeOperatorAccount gets the "claim_fee_operator" account.
func (inst *CreateClaimFeeOperator) GetClaimFeeOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOperatorAccount sets the "operator" account.
func (inst *CreateClaimFeeOperator) SetOperatorAccount(operator ag_solanago.PublicKey) *CreateClaimFeeOperator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(operator)
	return inst
}

// GetOperatorAccount gets the "operator" account.
func (inst *CreateClaimFeeOperator) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *CreateClaimFeeOperator) SetAdminAccount(admin ag_solanago.PublicKey) *CreateClaimFeeOperator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *CreateClaimFeeOperator) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateClaimFeeOperator) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateClaimFeeOperator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateClaimFeeOperator) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CreateClaimFeeOperator) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CreateClaimFeeOperator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CreateClaimFeeOperator) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramAccount sets the "program" account.
func (inst *CreateClaimFeeOperator) SetProgramAccount(program ag_solanago.PublicKey) *CreateClaimFeeOperator {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CreateClaimFeeOperator) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst *CreateClaimFeeOperator) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateClaimFeeOperator) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateClaimFeeOperator {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:6], metas...)
	return inst
}

func (inst *CreateClaimFeeOperator) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6:]
}

func (inst CreateClaimFeeOperator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateClaimFeeOperator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateClaimFeeOperator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateClaimFeeOperator) Validate() error {
	if len(inst.AccountMetaSlice) < 6 {
		return errors.New("accounts slice has wrong length: expected 6 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ClaimFeeOperator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Operator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CreateClaimFeeOperator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateClaimFeeOperator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("claim_fee_operator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          operator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    system_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   event_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CreateClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateClaimFeeOperatorInstruction declares a new CreateClaimFeeOperator instruction with the provided parameters and accounts.
func NewCreateClaimFeeOperatorInstruction(
	// Accounts:
	claimFeeOperator ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *CreateClaimFeeOperator {
	return NewCreateClaimFeeOperatorInstructionBuilder().
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetOperatorAccount(operator).
		SetAdminAccount(admin)
}

// NewSimpleCreateClaimFeeOperatorInstruction declares a new CreateClaimFeeOperator instruction with the provided parameters and accounts.
func NewSimpleCreateClaimFeeOperatorInstruction(
	operator ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *CreateClaimFeeOperator {
	claimFeeOperator := MustFindClaimFeeOperatorAddress(operator)
	return NewCreateClaimFeeOperatorInstructionBuilder().
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetOperatorAccount(operator).
		SetAdminAccount(admin)
}
