// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package mastermind

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WrapSolForCurve is the `wrap_sol_for_curve` instruction.
type WrapSolForCurve struct {

	// [0] = [] state
	//
	// [1] = [WRITE] token_mint
	//
	// [2] = [WRITE] bonding_curve
	//
	// [3] = [WRITE] bonding_curve_sol_vault
	//
	// [4] = [] wrapper_program
	//
	// [5] = [WRITE] wrapper_state
	//
	// [6] = [WRITE] wrapper_mint
	//
	// [7] = [] wrapper_mint_authority
	//
	// [8] = [WRITE] wrapper_bonding_curve_token_account
	//
	// [9] = [WRITE, SIGNER] payer
	//
	// [10] = [] token_program
	//
	// [11] = [] associated_token_program
	//
	// [12] = [] system_program
	//
	// [13] = [] rent
	//
	// [14] = [] event_authority
	//
	// [15] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWrapSolForCurveInstructionBuilder creates a new `WrapSolForCurve` instruction builder.
func NewWrapSolForCurveInstructionBuilder() *WrapSolForCurve {
	nd := &WrapSolForCurve{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(StatePDA)
	nd.AccountMetaSlice[10] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[11] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[12] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(RentProgram)
	nd.AccountMetaSlice[14] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[15] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *WrapSolForCurve) SetStateAccount(state ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *WrapSolForCurve) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMintAccount sets the "token_mint" account.
func (inst *WrapSolForCurve) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMint).WRITE()
	return inst
}

// GetTokenMintAccount gets the "token_mint" account.
func (inst *WrapSolForCurve) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBondingCurveAccount sets the "bonding_curve" account.
func (inst *WrapSolForCurve) SetBondingCurveAccount(bondingCurve ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(bondingCurve).WRITE()
	return inst
}

// GetBondingCurveAccount gets the "bonding_curve" account.
func (inst *WrapSolForCurve) GetBondingCurveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBondingCurveSolVaultAccount sets the "bonding_curve_sol_vault" account.
func (inst *WrapSolForCurve) SetBondingCurveSolVaultAccount(bondingCurveSolVault ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bondingCurveSolVault).WRITE()
	return inst
}

// GetBondingCurveSolVaultAccount gets the "bonding_curve_sol_vault" account.
func (inst *WrapSolForCurve) GetBondingCurveSolVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWrapperProgramAccount sets the "wrapper_program" account.
func (inst *WrapSolForCurve) SetWrapperProgramAccount(wrapperProgram ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(wrapperProgram)
	return inst
}

// GetWrapperProgramAccount gets the "wrapper_program" account.
func (inst *WrapSolForCurve) GetWrapperProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWrapperStateAccount sets the "wrapper_state" account.
func (inst *WrapSolForCurve) SetWrapperStateAccount(wrapperState ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(wrapperState).WRITE()
	return inst
}

// GetWrapperStateAccount gets the "wrapper_state" account.
func (inst *WrapSolForCurve) GetWrapperStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetWrapperMintAccount sets the "wrapper_mint" account.
func (inst *WrapSolForCurve) SetWrapperMintAccount(wrapperMint ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(wrapperMint).WRITE()
	return inst
}

// GetWrapperMintAccount gets the "wrapper_mint" account.
func (inst *WrapSolForCurve) GetWrapperMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetWrapperMintAuthorityAccount sets the "wrapper_mint_authority" account.
func (inst *WrapSolForCurve) SetWrapperMintAuthorityAccount(wrapperMintAuthority ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(wrapperMintAuthority)
	return inst
}

// GetWrapperMintAuthorityAccount gets the "wrapper_mint_authority" account.
func (inst *WrapSolForCurve) GetWrapperMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetWrapperBondingCurveTokenAccountAccount sets the "wrapper_bonding_curve_token_account" account.
func (inst *WrapSolForCurve) SetWrapperBondingCurveTokenAccountAccount(wrapperBondingCurveTokenAccount ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(wrapperBondingCurveTokenAccount).WRITE()
	return inst
}

// GetWrapperBondingCurveTokenAccountAccount gets the "wrapper_bonding_curve_token_account" account.
func (inst *WrapSolForCurve) GetWrapperBondingCurveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPayerAccount sets the "payer" account.
func (inst *WrapSolForCurve) SetPayerAccount(payer ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *WrapSolForCurve) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *WrapSolForCurve) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *WrapSolForCurve) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *WrapSolForCurve) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *WrapSolForCurve) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *WrapSolForCurve) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *WrapSolForCurve) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetRentAccount sets the "rent" account.
func (inst *WrapSolForCurve) SetRentAccount(rent ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *WrapSolForCurve) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *WrapSolForCurve) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *WrapSolForCurve) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetProgramAccount sets the "program" account.
func (inst *WrapSolForCurve) SetProgramAccount(program ag_solanago.PublicKey) *WrapSolForCurve {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *WrapSolForCurve) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst *WrapSolForCurve) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WrapSolForCurve) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WrapSolForCurve {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:16], metas...)
	return inst
}

func (inst *WrapSolForCurve) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[16:]
}

func (inst WrapSolForCurve) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WrapSolForCurve,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WrapSolForCurve) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WrapSolForCurve) Validate() error {
	if len(inst.AccountMetaSlice) < 16 {
		return errors.New("accounts slice has wrong length: expected 16 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BondingCurve is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BondingCurveSolVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.WrapperProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.WrapperState is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.WrapperMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.WrapperMintAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.WrapperBondingCurveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *WrapSolForCurve) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WrapSolForCurve")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                       state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                  token_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               bonding_curve", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     bonding_curve_sol_vault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             wrapper_program", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("               wrapper_state", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                wrapper_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      wrapper_mint_authority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("wrapper_bonding_curve_token_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                       payer", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("               token_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    associated_token_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("              system_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                        rent", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("             event_authority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                     program", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj WrapSolForCurve) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WrapSolForCurve) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWrapSolForCurveInstruction declares a new WrapSolForCurve instruction with the provided parameters and accounts.
func NewWrapSolForCurveInstruction(
	tokenMint ag_solanago.PublicKey,
	bondingCurve ag_solanago.PublicKey,
	bondingCurveSolVault ag_solanago.PublicKey,
	wrapperProgram ag_solanago.PublicKey,
	wrapperState ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	wrapperMintAuthority ag_solanago.PublicKey,
	wrapperBondingCurveTokenAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *WrapSolForCurve {
	return NewWrapSolForCurveInstructionBuilder().
		SetTokenMintAccount(tokenMint).
		SetBondingCurveAccount(bondingCurve).
		SetBondingCurveSolVaultAccount(bondingCurveSolVault).
		SetWrapperProgramAccount(wrapperProgram).
		SetWrapperStateAccount(wrapperState).
		SetWrapperMintAccount(wrapperMint).
		SetWrapperMintAuthorityAccount(wrapperMintAuthority).
		SetWrapperBondingCurveTokenAccountAccount(wrapperBondingCurveTokenAccount).
		SetPayerAccount(payer)
}

// NewSimpleWrapSolForCurveInstruction declares a new WrapSolForCurve instruction with the provided parameters and accounts.
func NewSimpleWrapSolForCurveInstruction(
	tokenMint ag_solanago.PublicKey,
	wrapperProgram ag_solanago.PublicKey,
	wrapperState ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	wrapperMintAuthority ag_solanago.PublicKey,
	wrapperBondingCurveTokenAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *WrapSolForCurve {
	bondingCurve := MustFindBondingCurveAddress(tokenMint)
	bondingCurveSolVault := MustFindBondingCurveSolVaultAddress(tokenMint)
	return NewWrapSolForCurveInstructionBuilder().
		SetTokenMintAccount(tokenMint).
		SetBondingCurveAccount(bondingCurve).
		SetBondingCurveSolVaultAccount(bondingCurveSolVault).
		SetWrapperProgramAccount(wrapperProgram).
		SetWrapperStateAccount(wrapperState).
		SetWrapperMintAccount(wrapperMint).
		SetWrapperMintAuthorityAccount(wrapperMintAuthority).
		SetWrapperBondingCurveTokenAccountAccount(wrapperBondingCurveTokenAccount).
		SetPayerAccount(payer)
}
