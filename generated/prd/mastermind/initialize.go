// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package mastermind

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	Migrator                   *ag_solanago.PublicKey
	WrapperMint                *ag_solanago.PublicKey
	FeeReceiver                *ag_solanago.PublicKey
	FeeBps                     *uint64
	InitialVirtualTokenReserve *uint64
	InitialVirtualSolReserve   *uint64
	CoinLotSize                *uint64
	PcLotSize                  *uint64

	// [0] = [WRITE] state
	//
	// [1] = [WRITE, SIGNER] signer
	//
	// [2] = [] rent
	//
	// [3] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(StatePDA).WRITE()
	nd.AccountMetaSlice[2] = ag_solanago.Meta(RentProgram)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(SystemProgram)
	return nd
}

// SetMigrator sets the "migrator" parameter.
func (inst *Initialize) SetMigrator(migrator ag_solanago.PublicKey) *Initialize {
	inst.Migrator = &migrator
	return inst
}

// SetWrapperMint sets the "wrapper_mint" parameter.
func (inst *Initialize) SetWrapperMint(wrapper_mint ag_solanago.PublicKey) *Initialize {
	inst.WrapperMint = &wrapper_mint
	return inst
}

// SetFeeReceiver sets the "fee_receiver" parameter.
func (inst *Initialize) SetFeeReceiver(fee_receiver ag_solanago.PublicKey) *Initialize {
	inst.FeeReceiver = &fee_receiver
	return inst
}

// SetFeeBps sets the "fee_bps" parameter.
func (inst *Initialize) SetFeeBps(fee_bps uint64) *Initialize {
	inst.FeeBps = &fee_bps
	return inst
}

// SetInitialVirtualTokenReserve sets the "initial_virtual_token_reserve" parameter.
func (inst *Initialize) SetInitialVirtualTokenReserve(initial_virtual_token_reserve uint64) *Initialize {
	inst.InitialVirtualTokenReserve = &initial_virtual_token_reserve
	return inst
}

// SetInitialVirtualSolReserve sets the "initial_virtual_sol_reserve" parameter.
func (inst *Initialize) SetInitialVirtualSolReserve(initial_virtual_sol_reserve uint64) *Initialize {
	inst.InitialVirtualSolReserve = &initial_virtual_sol_reserve
	return inst
}

// SetCoinLotSize sets the "coin_lot_size" parameter.
func (inst *Initialize) SetCoinLotSize(coin_lot_size uint64) *Initialize {
	inst.CoinLotSize = &coin_lot_size
	return inst
}

// SetPcLotSize sets the "pc_lot_size" parameter.
func (inst *Initialize) SetPcLotSize(pc_lot_size uint64) *Initialize {
	inst.PcLotSize = &pc_lot_size
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *Initialize) SetStateAccount(state ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *Initialize) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSignerAccount sets the "signer" account.
func (inst *Initialize) SetSignerAccount(signer ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *Initialize) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRentAccount sets the "rent" account.
func (inst *Initialize) SetRentAccount(rent ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *Initialize) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Initialize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Initialize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *Initialize) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Initialize) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Initialize {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *Initialize) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Migrator == nil {
			return errors.New("migrator parameter is not set")
		}
		if inst.WrapperMint == nil {
			return errors.New("wrapperMint parameter is not set")
		}
		if inst.FeeReceiver == nil {
			return errors.New("feeReceiver parameter is not set")
		}
		if inst.FeeBps == nil {
			return errors.New("feeBps parameter is not set")
		}
		if inst.InitialVirtualTokenReserve == nil {
			return errors.New("initialVirtualTokenReserve parameter is not set")
		}
		if inst.InitialVirtualSolReserve == nil {
			return errors.New("initialVirtualSolReserve parameter is not set")
		}
		if inst.CoinLotSize == nil {
			return errors.New("coinLotSize parameter is not set")
		}
		if inst.PcLotSize == nil {
			return errors.New("pcLotSize parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=8]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                     Migrator", *inst.Migrator))
						paramsBranch.Child(ag_format.Param("                  WrapperMint", *inst.WrapperMint))
						paramsBranch.Child(ag_format.Param("                  FeeReceiver", *inst.FeeReceiver))
						paramsBranch.Child(ag_format.Param("                       FeeBps", *inst.FeeBps))
						paramsBranch.Child(ag_format.Param("   InitialVirtualTokenReserve", *inst.InitialVirtualTokenReserve))
						paramsBranch.Child(ag_format.Param("     InitialVirtualSolReserve", *inst.InitialVirtualSolReserve))
						paramsBranch.Child(ag_format.Param("                  CoinLotSize", *inst.CoinLotSize))
						paramsBranch.Child(ag_format.Param("                    PcLotSize", *inst.PcLotSize))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        signer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          rent", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Migrator` param:
	err = encoder.Encode(obj.Migrator)
	if err != nil {
		return err
	}
	// Serialize `WrapperMint` param:
	err = encoder.Encode(obj.WrapperMint)
	if err != nil {
		return err
	}
	// Serialize `FeeReceiver` param:
	err = encoder.Encode(obj.FeeReceiver)
	if err != nil {
		return err
	}
	// Serialize `FeeBps` param:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return err
	}
	// Serialize `InitialVirtualTokenReserve` param:
	err = encoder.Encode(obj.InitialVirtualTokenReserve)
	if err != nil {
		return err
	}
	// Serialize `InitialVirtualSolReserve` param:
	err = encoder.Encode(obj.InitialVirtualSolReserve)
	if err != nil {
		return err
	}
	// Serialize `CoinLotSize` param:
	err = encoder.Encode(obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Serialize `PcLotSize` param:
	err = encoder.Encode(obj.PcLotSize)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Migrator`:
	err = decoder.Decode(&obj.Migrator)
	if err != nil {
		return err
	}
	// Deserialize `WrapperMint`:
	err = decoder.Decode(&obj.WrapperMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeReceiver`:
	err = decoder.Decode(&obj.FeeReceiver)
	if err != nil {
		return err
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return err
	}
	// Deserialize `InitialVirtualTokenReserve`:
	err = decoder.Decode(&obj.InitialVirtualTokenReserve)
	if err != nil {
		return err
	}
	// Deserialize `InitialVirtualSolReserve`:
	err = decoder.Decode(&obj.InitialVirtualSolReserve)
	if err != nil {
		return err
	}
	// Deserialize `CoinLotSize`:
	err = decoder.Decode(&obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Deserialize `PcLotSize`:
	err = decoder.Decode(&obj.PcLotSize)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	migrator ag_solanago.PublicKey,
	wrapper_mint ag_solanago.PublicKey,
	fee_receiver ag_solanago.PublicKey,
	fee_bps uint64,
	initial_virtual_token_reserve uint64,
	initial_virtual_sol_reserve uint64,
	coin_lot_size uint64,
	pc_lot_size uint64,
	signer ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetMigrator(migrator).
		SetWrapperMint(wrapper_mint).
		SetFeeReceiver(fee_receiver).
		SetFeeBps(fee_bps).
		SetInitialVirtualTokenReserve(initial_virtual_token_reserve).
		SetInitialVirtualSolReserve(initial_virtual_sol_reserve).
		SetCoinLotSize(coin_lot_size).
		SetPcLotSize(pc_lot_size).
		SetSignerAccount(signer)
}

// NewSimpleInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewSimpleInitializeInstruction(
	// Parameters:
	migrator ag_solanago.PublicKey,
	wrapper_mint ag_solanago.PublicKey,
	fee_receiver ag_solanago.PublicKey,
	fee_bps uint64,
	initial_virtual_token_reserve uint64,
	initial_virtual_sol_reserve uint64,
	coin_lot_size uint64,
	pc_lot_size uint64,
	signer ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetMigrator(migrator).
		SetWrapperMint(wrapper_mint).
		SetFeeReceiver(fee_receiver).
		SetFeeBps(fee_bps).
		SetInitialVirtualTokenReserve(initial_virtual_token_reserve).
		SetInitialVirtualSolReserve(initial_virtual_sol_reserve).
		SetCoinLotSize(coin_lot_size).
		SetPcLotSize(pc_lot_size).
		SetSignerAccount(signer)
}
