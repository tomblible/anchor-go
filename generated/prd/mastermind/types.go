// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package mastermind

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AmmConfig struct {
	// Bump to identify PDA
	Bump uint8

	// Status to control if new pool can be create
	DisableCreatePool bool

	// Config index
	Index uint16

	// The trade fee, denominated in hundredths of a bip (10^-6)
	TradeFeeRate uint64

	// The protocol fee
	ProtocolFeeRate uint64

	// The fund fee, denominated in hundredths of a bip (10^-6)
	FundFeeRate uint64

	// Fee for create a new pool
	CreatePoolFee uint64

	// Address of the protocol fee owner
	ProtocolOwner ag_solanago.PublicKey

	// Address of the fund fee owner
	FundOwner ag_solanago.PublicKey

	// padding
	padding [16]uint64
}

func (obj AmmConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `DisableCreatePool` param:
	err = encoder.Encode(obj.DisableCreatePool)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeRate` param:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `FundFeeRate` param:
	err = encoder.Encode(obj.FundFeeRate)
	if err != nil {
		return err
	}
	// Serialize `CreatePoolFee` param:
	err = encoder.Encode(obj.CreatePoolFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolOwner` param:
	err = encoder.Encode(obj.ProtocolOwner)
	if err != nil {
		return err
	}
	// Serialize `FundOwner` param:
	err = encoder.Encode(obj.FundOwner)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AmmConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `DisableCreatePool`:
	err = decoder.Decode(&obj.DisableCreatePool)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `FundFeeRate`:
	err = decoder.Decode(&obj.FundFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `CreatePoolFee`:
	err = decoder.Decode(&obj.CreatePoolFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolOwner`:
	err = decoder.Decode(&obj.ProtocolOwner)
	if err != nil {
		return err
	}
	// Deserialize `FundOwner`:
	err = decoder.Decode(&obj.FundOwner)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type AuthorityChangedEvent struct {
	OldAuthority ag_solanago.PublicKey
	NewAuthority ag_solanago.PublicKey
}

func (obj AuthorityChangedEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OldAuthority` param:
	err = encoder.Encode(obj.OldAuthority)
	if err != nil {
		return err
	}
	// Serialize `NewAuthority` param:
	err = encoder.Encode(obj.NewAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AuthorityChangedEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OldAuthority`:
	err = decoder.Decode(&obj.OldAuthority)
	if err != nil {
		return err
	}
	// Deserialize `NewAuthority`:
	err = decoder.Decode(&obj.NewAuthority)
	if err != nil {
		return err
	}
	return nil
}

type CollectEvent struct {
	Mint   ag_solanago.PublicKey
	Amount uint64
}

func (obj CollectEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CollectEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type CompleteEvent struct {
	User         ag_solanago.PublicKey
	Mint         ag_solanago.PublicKey
	BondingCurve ag_solanago.PublicKey
	Timestamp    int64
}

func (obj CompleteEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `BondingCurve` param:
	err = encoder.Encode(obj.BondingCurve)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CompleteEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `BondingCurve`:
	err = decoder.Decode(&obj.BondingCurve)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

type CreateEvent struct {
	Name          string
	Symbol        string
	Uri           string
	Mint          ag_solanago.PublicKey
	BondingCurve  ag_solanago.PublicKey
	User          ag_solanago.PublicKey
	MigrationKind MigrationKind
}

func (obj CreateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `BondingCurve` param:
	err = encoder.Encode(obj.BondingCurve)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `MigrationKind` param:
	err = encoder.Encode(obj.MigrationKind)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `BondingCurve`:
	err = decoder.Decode(&obj.BondingCurve)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `MigrationKind`:
	err = decoder.Decode(&obj.MigrationKind)
	if err != nil {
		return err
	}
	return nil
}

type Curve struct {
	Bump    uint8
	Version uint8
	Data    CurveDataV1
}

func (obj Curve) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Curve) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type CurveDataV1 struct {
	Completed           int64
	RealTokenReserve    uint64
	RealSolReserve      uint64
	VirtualTokenReserve uint64
	VirtualSolReserve   uint64
	MigrationKind       MigrationKind
}

func (obj CurveDataV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Completed` param:
	err = encoder.Encode(obj.Completed)
	if err != nil {
		return err
	}
	// Serialize `RealTokenReserve` param:
	err = encoder.Encode(obj.RealTokenReserve)
	if err != nil {
		return err
	}
	// Serialize `RealSolReserve` param:
	err = encoder.Encode(obj.RealSolReserve)
	if err != nil {
		return err
	}
	// Serialize `VirtualTokenReserve` param:
	err = encoder.Encode(obj.VirtualTokenReserve)
	if err != nil {
		return err
	}
	// Serialize `VirtualSolReserve` param:
	err = encoder.Encode(obj.VirtualSolReserve)
	if err != nil {
		return err
	}
	// Serialize `MigrationKind` param:
	err = encoder.Encode(obj.MigrationKind)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveDataV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Completed`:
	err = decoder.Decode(&obj.Completed)
	if err != nil {
		return err
	}
	// Deserialize `RealTokenReserve`:
	err = decoder.Decode(&obj.RealTokenReserve)
	if err != nil {
		return err
	}
	// Deserialize `RealSolReserve`:
	err = decoder.Decode(&obj.RealSolReserve)
	if err != nil {
		return err
	}
	// Deserialize `VirtualTokenReserve`:
	err = decoder.Decode(&obj.VirtualTokenReserve)
	if err != nil {
		return err
	}
	// Deserialize `VirtualSolReserve`:
	err = decoder.Decode(&obj.VirtualSolReserve)
	if err != nil {
		return err
	}
	// Deserialize `MigrationKind`:
	err = decoder.Decode(&obj.MigrationKind)
	if err != nil {
		return err
	}
	return nil
}

type InstructionBumps struct {
	BondingCurve                     uint8
	BondingCurveSolAssociatedAccount uint8
}

func (obj InstructionBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BondingCurve` param:
	err = encoder.Encode(obj.BondingCurve)
	if err != nil {
		return err
	}
	// Serialize `BondingCurveSolAssociatedAccount` param:
	err = encoder.Encode(obj.BondingCurveSolAssociatedAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InstructionBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BondingCurve`:
	err = decoder.Decode(&obj.BondingCurve)
	if err != nil {
		return err
	}
	// Deserialize `BondingCurveSolAssociatedAccount`:
	err = decoder.Decode(&obj.BondingCurveSolAssociatedAccount)
	if err != nil {
		return err
	}
	return nil
}

type LockedCpLiquidityState struct {
	// The Locked liquidity amount without claimed lp fee
	LockedLpAmount uint64

	// Claimed lp fee amount
	ClaimedLpAmount uint64

	// Unclaimed lp fee amount
	UnclaimedLpAmount uint64

	// Last updated cp pool lp total supply
	LastLp uint64

	// Last updated cp pool k
	LastK ag_binary.Uint128

	// Account update recent epoch
	RecentEpoch uint64

	// The ID of the pool with which this record is connected
	PoolId ag_solanago.PublicKey

	// nft mint to check who has authority to collect fee
	FeeNftMint ag_solanago.PublicKey

	// The owner who has locked liquidity
	LockedOwner ag_solanago.PublicKey

	// The mint of locked lp token
	LockedLpMint ag_solanago.PublicKey

	// Unused bytes for future upgrades.
	padding [8]uint64
}

func (obj LockedCpLiquidityState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LockedLpAmount` param:
	err = encoder.Encode(obj.LockedLpAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedLpAmount` param:
	err = encoder.Encode(obj.ClaimedLpAmount)
	if err != nil {
		return err
	}
	// Serialize `UnclaimedLpAmount` param:
	err = encoder.Encode(obj.UnclaimedLpAmount)
	if err != nil {
		return err
	}
	// Serialize `LastLp` param:
	err = encoder.Encode(obj.LastLp)
	if err != nil {
		return err
	}
	// Serialize `LastK` param:
	err = encoder.Encode(obj.LastK)
	if err != nil {
		return err
	}
	// Serialize `RecentEpoch` param:
	err = encoder.Encode(obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `FeeNftMint` param:
	err = encoder.Encode(obj.FeeNftMint)
	if err != nil {
		return err
	}
	// Serialize `LockedOwner` param:
	err = encoder.Encode(obj.LockedOwner)
	if err != nil {
		return err
	}
	// Serialize `LockedLpMint` param:
	err = encoder.Encode(obj.LockedLpMint)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockedCpLiquidityState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LockedLpAmount`:
	err = decoder.Decode(&obj.LockedLpAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedLpAmount`:
	err = decoder.Decode(&obj.ClaimedLpAmount)
	if err != nil {
		return err
	}
	// Deserialize `UnclaimedLpAmount`:
	err = decoder.Decode(&obj.UnclaimedLpAmount)
	if err != nil {
		return err
	}
	// Deserialize `LastLp`:
	err = decoder.Decode(&obj.LastLp)
	if err != nil {
		return err
	}
	// Deserialize `LastK`:
	err = decoder.Decode(&obj.LastK)
	if err != nil {
		return err
	}
	// Deserialize `RecentEpoch`:
	err = decoder.Decode(&obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `FeeNftMint`:
	err = decoder.Decode(&obj.FeeNftMint)
	if err != nil {
		return err
	}
	// Deserialize `LockedOwner`:
	err = decoder.Decode(&obj.LockedOwner)
	if err != nil {
		return err
	}
	// Deserialize `LockedLpMint`:
	err = decoder.Decode(&obj.LockedLpMint)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type MigrateEvent struct {
	TokenMint   ag_solanago.PublicKey
	PoolAddress ag_solanago.PublicKey
	VaultA      ag_solanago.PublicKey
	VaultB      ag_solanago.PublicKey
	Timestamp   int64
}

func (obj MigrateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `PoolAddress` param:
	err = encoder.Encode(obj.PoolAddress)
	if err != nil {
		return err
	}
	// Serialize `VaultA` param:
	err = encoder.Encode(obj.VaultA)
	if err != nil {
		return err
	}
	// Serialize `VaultB` param:
	err = encoder.Encode(obj.VaultB)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MigrateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `PoolAddress`:
	err = decoder.Decode(&obj.PoolAddress)
	if err != nil {
		return err
	}
	// Deserialize `VaultA`:
	err = decoder.Decode(&obj.VaultA)
	if err != nil {
		return err
	}
	// Deserialize `VaultB`:
	err = decoder.Decode(&obj.VaultB)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	return nil
}

type MigrationKind ag_binary.BorshEnum

const (
	MigrationKindPSol MigrationKind = iota
	MigrationKindWSol
)

func (value MigrationKind) String() string {
	switch value {
	case MigrationKindPSol:
		return "PSol"
	case MigrationKindWSol:
		return "WSol"
	default:
		return ""
	}
}

type SetParamsEvent struct {
	FeeReceiver                ag_solanago.PublicKey
	FeeBps                     uint64
	InitialVirtualTokenReserve uint64
	InitialVirtualSolReserve   uint64
}

func (obj SetParamsEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeReceiver` param:
	err = encoder.Encode(obj.FeeReceiver)
	if err != nil {
		return err
	}
	// Serialize `FeeBps` param:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return err
	}
	// Serialize `InitialVirtualTokenReserve` param:
	err = encoder.Encode(obj.InitialVirtualTokenReserve)
	if err != nil {
		return err
	}
	// Serialize `InitialVirtualSolReserve` param:
	err = encoder.Encode(obj.InitialVirtualSolReserve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetParamsEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeReceiver`:
	err = decoder.Decode(&obj.FeeReceiver)
	if err != nil {
		return err
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return err
	}
	// Deserialize `InitialVirtualTokenReserve`:
	err = decoder.Decode(&obj.InitialVirtualTokenReserve)
	if err != nil {
		return err
	}
	// Deserialize `InitialVirtualSolReserve`:
	err = decoder.Decode(&obj.InitialVirtualSolReserve)
	if err != nil {
		return err
	}
	return nil
}

type SetPendingAuthorityEvent struct {
	PendingAuthority ag_solanago.PublicKey
}

func (obj SetPendingAuthorityEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PendingAuthority` param:
	err = encoder.Encode(obj.PendingAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetPendingAuthorityEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PendingAuthority`:
	err = decoder.Decode(&obj.PendingAuthority)
	if err != nil {
		return err
	}
	return nil
}

type State struct {
	Bump    uint8
	Version uint8
	Data    StateDataV1
}

func (obj State) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *State) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type StateDataV1 struct {
	Initialized                bool
	Authority                  ag_solanago.PublicKey
	PendingAuthority           ag_solanago.PublicKey
	WrapperMint                ag_solanago.PublicKey
	FeeReceiver                ag_solanago.PublicKey
	FeeBps                     uint64
	InitialVirtualTokenReserve uint64
	InitialVirtualSolReserve   uint64
	CoinLotSize                uint64
	PcLotSize                  uint64
	SolventWrapper             uint64
	Migrator                   ag_solanago.PublicKey
	MigrationCount             uint64
	MigrationRefund            uint64
}

func (obj StateDataV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `PendingAuthority` param:
	err = encoder.Encode(obj.PendingAuthority)
	if err != nil {
		return err
	}
	// Serialize `WrapperMint` param:
	err = encoder.Encode(obj.WrapperMint)
	if err != nil {
		return err
	}
	// Serialize `FeeReceiver` param:
	err = encoder.Encode(obj.FeeReceiver)
	if err != nil {
		return err
	}
	// Serialize `FeeBps` param:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return err
	}
	// Serialize `InitialVirtualTokenReserve` param:
	err = encoder.Encode(obj.InitialVirtualTokenReserve)
	if err != nil {
		return err
	}
	// Serialize `InitialVirtualSolReserve` param:
	err = encoder.Encode(obj.InitialVirtualSolReserve)
	if err != nil {
		return err
	}
	// Serialize `CoinLotSize` param:
	err = encoder.Encode(obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Serialize `PcLotSize` param:
	err = encoder.Encode(obj.PcLotSize)
	if err != nil {
		return err
	}
	// Serialize `SolventWrapper` param:
	err = encoder.Encode(obj.SolventWrapper)
	if err != nil {
		return err
	}
	// Serialize `Migrator` param:
	err = encoder.Encode(obj.Migrator)
	if err != nil {
		return err
	}
	// Serialize `MigrationCount` param:
	err = encoder.Encode(obj.MigrationCount)
	if err != nil {
		return err
	}
	// Serialize `MigrationRefund` param:
	err = encoder.Encode(obj.MigrationRefund)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StateDataV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `PendingAuthority`:
	err = decoder.Decode(&obj.PendingAuthority)
	if err != nil {
		return err
	}
	// Deserialize `WrapperMint`:
	err = decoder.Decode(&obj.WrapperMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeReceiver`:
	err = decoder.Decode(&obj.FeeReceiver)
	if err != nil {
		return err
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return err
	}
	// Deserialize `InitialVirtualTokenReserve`:
	err = decoder.Decode(&obj.InitialVirtualTokenReserve)
	if err != nil {
		return err
	}
	// Deserialize `InitialVirtualSolReserve`:
	err = decoder.Decode(&obj.InitialVirtualSolReserve)
	if err != nil {
		return err
	}
	// Deserialize `CoinLotSize`:
	err = decoder.Decode(&obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Deserialize `PcLotSize`:
	err = decoder.Decode(&obj.PcLotSize)
	if err != nil {
		return err
	}
	// Deserialize `SolventWrapper`:
	err = decoder.Decode(&obj.SolventWrapper)
	if err != nil {
		return err
	}
	// Deserialize `Migrator`:
	err = decoder.Decode(&obj.Migrator)
	if err != nil {
		return err
	}
	// Deserialize `MigrationCount`:
	err = decoder.Decode(&obj.MigrationCount)
	if err != nil {
		return err
	}
	// Deserialize `MigrationRefund`:
	err = decoder.Decode(&obj.MigrationRefund)
	if err != nil {
		return err
	}
	return nil
}

type TradeEvent struct {
	Mint                 ag_solanago.PublicKey
	SolAmount            uint64
	TokenAmount          uint64
	IsBuy                bool
	User                 ag_solanago.PublicKey
	Timestamp            int64
	RealSolReserves      uint64
	VirtualSolReserves   uint64
	RealTokenReserves    uint64
	VirtualTokenReserves uint64
}

func (obj TradeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `SolAmount` param:
	err = encoder.Encode(obj.SolAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	// Serialize `IsBuy` param:
	err = encoder.Encode(obj.IsBuy)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `RealSolReserves` param:
	err = encoder.Encode(obj.RealSolReserves)
	if err != nil {
		return err
	}
	// Serialize `VirtualSolReserves` param:
	err = encoder.Encode(obj.VirtualSolReserves)
	if err != nil {
		return err
	}
	// Serialize `RealTokenReserves` param:
	err = encoder.Encode(obj.RealTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `VirtualTokenReserves` param:
	err = encoder.Encode(obj.VirtualTokenReserves)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TradeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `SolAmount`:
	err = decoder.Decode(&obj.SolAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `IsBuy`:
	err = decoder.Decode(&obj.IsBuy)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `RealSolReserves`:
	err = decoder.Decode(&obj.RealSolReserves)
	if err != nil {
		return err
	}
	// Deserialize `VirtualSolReserves`:
	err = decoder.Decode(&obj.VirtualSolReserves)
	if err != nil {
		return err
	}
	// Deserialize `RealTokenReserves`:
	err = decoder.Decode(&obj.RealTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `VirtualTokenReserves`:
	err = decoder.Decode(&obj.VirtualTokenReserves)
	if err != nil {
		return err
	}
	return nil
}
