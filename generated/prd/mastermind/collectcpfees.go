// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package mastermind

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectCpFees is the `collect_cp_fees` instruction.
type CollectCpFees struct {
	FeeNftOwnerBump *uint8

	// [0] = [] state
	//
	// [1] = [] locking_program
	//
	// [2] = [] authority
	//
	// [3] = [WRITE] fee_nft_owner
	// ··········· Fee nft owner who is allowed to receive fees
	//
	// [4] = [] fee_nft_account
	// ··········· Fee token account
	//
	// [5] = [WRITE] locked_liquidity
	// ··········· Store the locked the information of liquidity
	//
	// [6] = [] cpmm_program
	// ··········· cpmm program
	//
	// [7] = [] cp_authority
	//
	// [8] = [WRITE] pool_state
	//
	// [9] = [WRITE] lp_mint
	// ··········· The mint of liquidity token
	// ··········· address = pool_state.lp_mint
	//
	// [10] = [WRITE] referral_pool_sol_account
	//
	// [11] = [] wrapper_program
	//
	// [12] = [WRITE] wrapper_state
	//
	// [13] = [WRITE] wrapper_mint
	//
	// [14] = [WRITE] recipient_token_0_account
	// ··········· The token account for receive token_0
	//
	// [15] = [WRITE] recipient_token_1_account
	// ··········· The token account for receive token_1
	//
	// [16] = [WRITE] token_0_vault
	// ··········· The address that holds pool tokens for token_0
	// ··········· address = pool_state.token_0_vault
	//
	// [17] = [WRITE] token_1_vault
	// ··········· The address that holds pool tokens for token_1
	// ··········· address = pool_state.token_1_vault
	//
	// [18] = [WRITE] vault_0_mint
	// ··········· The mint of token_0 vault
	//
	// [19] = [WRITE] vault_1_mint
	// ··········· The mint of token_1 vault
	//
	// [20] = [WRITE] locked_lp_vault
	// ··········· locked lp token account
	//
	// [21] = [] token_program
	// ··········· token Program
	//
	// [22] = [] token_program_2022
	// ··········· Token program 2022
	//
	// [23] = [] memo_program
	// ··········· memo program
	//
	// [24] = [WRITE, SIGNER] payer
	//
	// [25] = [] system_program
	//
	// [26] = [] associated_token_program
	//
	// [27] = [] rent
	//
	// [28] = [] event_authority
	//
	// [29] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectCpFeesInstructionBuilder creates a new `CollectCpFees` instruction builder.
func NewCollectCpFeesInstructionBuilder() *CollectCpFees {
	nd := &CollectCpFees{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 30),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(StatePDA)
	nd.AccountMetaSlice[1] = ag_solanago.Meta(LockingProgram)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(FeeNftOwnerPDA).WRITE()
	nd.AccountMetaSlice[6] = ag_solanago.Meta(RaydiumCPMMProgram)
	nd.AccountMetaSlice[11] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[21] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[22] = ag_solanago.Meta(Token22Program)
	nd.AccountMetaSlice[23] = ag_solanago.Meta(MemoProgram)
	nd.AccountMetaSlice[25] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[26] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[27] = ag_solanago.Meta(RentProgram)
	nd.AccountMetaSlice[28] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[29] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetFeeNftOwnerBump sets the "fee_nft_owner_bump" parameter.
func (inst *CollectCpFees) SetFeeNftOwnerBump(fee_nft_owner_bump uint8) *CollectCpFees {
	inst.FeeNftOwnerBump = &fee_nft_owner_bump
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *CollectCpFees) SetStateAccount(state ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *CollectCpFees) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLockingProgramAccount sets the "locking_program" account.
func (inst *CollectCpFees) SetLockingProgramAccount(lockingProgram ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lockingProgram)
	return inst
}

// GetLockingProgramAccount gets the "locking_program" account.
func (inst *CollectCpFees) GetLockingProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CollectCpFees) SetAuthorityAccount(authority ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CollectCpFees) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFeeNftOwnerAccount sets the "fee_nft_owner" account.
// Fee nft owner who is allowed to receive fees
func (inst *CollectCpFees) SetFeeNftOwnerAccount(feeNftOwner ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(feeNftOwner).WRITE()
	return inst
}

// GetFeeNftOwnerAccount gets the "fee_nft_owner" account.
// Fee nft owner who is allowed to receive fees
func (inst *CollectCpFees) GetFeeNftOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFeeNftAccountAccount sets the "fee_nft_account" account.
// Fee token account
func (inst *CollectCpFees) SetFeeNftAccountAccount(feeNftAccount ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(feeNftAccount)
	return inst
}

// GetFeeNftAccountAccount gets the "fee_nft_account" account.
// Fee token account
func (inst *CollectCpFees) GetFeeNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLockedLiquidityAccount sets the "locked_liquidity" account.
// Store the locked the information of liquidity
func (inst *CollectCpFees) SetLockedLiquidityAccount(lockedLiquidity ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(lockedLiquidity).WRITE()
	return inst
}

// GetLockedLiquidityAccount gets the "locked_liquidity" account.
// Store the locked the information of liquidity
func (inst *CollectCpFees) GetLockedLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCpmmProgramAccount sets the "cpmm_program" account.
// cpmm program
func (inst *CollectCpFees) SetCpmmProgramAccount(cpmmProgram ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(cpmmProgram)
	return inst
}

// GetCpmmProgramAccount gets the "cpmm_program" account.
// cpmm program
func (inst *CollectCpFees) GetCpmmProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCpAuthorityAccount sets the "cp_authority" account.
func (inst *CollectCpFees) SetCpAuthorityAccount(cpAuthority ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(cpAuthority)
	return inst
}

// GetCpAuthorityAccount gets the "cp_authority" account.
func (inst *CollectCpFees) GetCpAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPoolStateAccount sets the "pool_state" account.
func (inst *CollectCpFees) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
func (inst *CollectCpFees) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetLpMintAccount sets the "lp_mint" account.
// The mint of liquidity token
// address = pool_state.lp_mint
func (inst *CollectCpFees) SetLpMintAccount(lpMint ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
// The mint of liquidity token
// address = pool_state.lp_mint
func (inst *CollectCpFees) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetReferralPoolSolAccountAccount sets the "referral_pool_sol_account" account.
func (inst *CollectCpFees) SetReferralPoolSolAccountAccount(referralPoolSolAccount ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(referralPoolSolAccount).WRITE()
	return inst
}

// GetReferralPoolSolAccountAccount gets the "referral_pool_sol_account" account.
func (inst *CollectCpFees) GetReferralPoolSolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetWrapperProgramAccount sets the "wrapper_program" account.
func (inst *CollectCpFees) SetWrapperProgramAccount(wrapperProgram ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(wrapperProgram)
	return inst
}

// GetWrapperProgramAccount gets the "wrapper_program" account.
func (inst *CollectCpFees) GetWrapperProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetWrapperStateAccount sets the "wrapper_state" account.
func (inst *CollectCpFees) SetWrapperStateAccount(wrapperState ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(wrapperState).WRITE()
	return inst
}

// GetWrapperStateAccount gets the "wrapper_state" account.
func (inst *CollectCpFees) GetWrapperStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetWrapperMintAccount sets the "wrapper_mint" account.
func (inst *CollectCpFees) SetWrapperMintAccount(wrapperMint ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(wrapperMint).WRITE()
	return inst
}

// GetWrapperMintAccount gets the "wrapper_mint" account.
func (inst *CollectCpFees) GetWrapperMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetRecipientToken0AccountAccount sets the "recipient_token_0_account" account.
// The token account for receive token_0
func (inst *CollectCpFees) SetRecipientToken0AccountAccount(recipientToken0Account ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(recipientToken0Account).WRITE()
	return inst
}

// GetRecipientToken0AccountAccount gets the "recipient_token_0_account" account.
// The token account for receive token_0
func (inst *CollectCpFees) GetRecipientToken0AccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRecipientToken1AccountAccount sets the "recipient_token_1_account" account.
// The token account for receive token_1
func (inst *CollectCpFees) SetRecipientToken1AccountAccount(recipientToken1Account ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(recipientToken1Account).WRITE()
	return inst
}

// GetRecipientToken1AccountAccount gets the "recipient_token_1_account" account.
// The token account for receive token_1
func (inst *CollectCpFees) GetRecipientToken1AccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetToken0VaultAccount sets the "token_0_vault" account.
// The address that holds pool tokens for token_0
// address = pool_state.token_0_vault
func (inst *CollectCpFees) SetToken0VaultAccount(token0Vault ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(token0Vault).WRITE()
	return inst
}

// GetToken0VaultAccount gets the "token_0_vault" account.
// The address that holds pool tokens for token_0
// address = pool_state.token_0_vault
func (inst *CollectCpFees) GetToken0VaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetToken1VaultAccount sets the "token_1_vault" account.
// The address that holds pool tokens for token_1
// address = pool_state.token_1_vault
func (inst *CollectCpFees) SetToken1VaultAccount(token1Vault ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(token1Vault).WRITE()
	return inst
}

// GetToken1VaultAccount gets the "token_1_vault" account.
// The address that holds pool tokens for token_1
// address = pool_state.token_1_vault
func (inst *CollectCpFees) GetToken1VaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetVault0MintAccount sets the "vault_0_mint" account.
// The mint of token_0 vault
func (inst *CollectCpFees) SetVault0MintAccount(vault0Mint ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(vault0Mint).WRITE()
	return inst
}

// GetVault0MintAccount gets the "vault_0_mint" account.
// The mint of token_0 vault
func (inst *CollectCpFees) GetVault0MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetVault1MintAccount sets the "vault_1_mint" account.
// The mint of token_1 vault
func (inst *CollectCpFees) SetVault1MintAccount(vault1Mint ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(vault1Mint).WRITE()
	return inst
}

// GetVault1MintAccount gets the "vault_1_mint" account.
// The mint of token_1 vault
func (inst *CollectCpFees) GetVault1MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetLockedLpVaultAccount sets the "locked_lp_vault" account.
// locked lp token account
func (inst *CollectCpFees) SetLockedLpVaultAccount(lockedLpVault ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(lockedLpVault).WRITE()
	return inst
}

// GetLockedLpVaultAccount gets the "locked_lp_vault" account.
// locked lp token account
func (inst *CollectCpFees) GetLockedLpVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetTokenProgramAccount sets the "token_program" account.
// token Program
func (inst *CollectCpFees) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// token Program
func (inst *CollectCpFees) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetTokenProgram2022Account sets the "token_program_2022" account.
// Token program 2022
func (inst *CollectCpFees) SetTokenProgram2022Account(tokenProgram2022 ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(tokenProgram2022)
	return inst
}

// GetTokenProgram2022Account gets the "token_program_2022" account.
// Token program 2022
func (inst *CollectCpFees) GetTokenProgram2022Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetMemoProgramAccount sets the "memo_program" account.
// memo program
func (inst *CollectCpFees) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memo_program" account.
// memo program
func (inst *CollectCpFees) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetPayerAccount sets the "payer" account.
func (inst *CollectCpFees) SetPayerAccount(payer ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CollectCpFees) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CollectCpFees) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CollectCpFees) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *CollectCpFees) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *CollectCpFees) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(26)
}

// SetRentAccount sets the "rent" account.
func (inst *CollectCpFees) SetRentAccount(rent ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[27] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CollectCpFees) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(27)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CollectCpFees) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[28] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CollectCpFees) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(28)
}

// SetProgramAccount sets the "program" account.
func (inst *CollectCpFees) SetProgramAccount(program ag_solanago.PublicKey) *CollectCpFees {
	inst.AccountMetaSlice[29] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CollectCpFees) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(29)
}

func (inst *CollectCpFees) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CollectCpFees) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CollectCpFees {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:30], metas...)
	return inst
}

func (inst *CollectCpFees) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[30:]
}

func (inst CollectCpFees) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectCpFees,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectCpFees) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectCpFees) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.FeeNftOwnerBump == nil {
			return errors.New("feeNftOwnerBump parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 30 {
		return errors.New("accounts slice has wrong length: expected 30 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LockingProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FeeNftOwner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FeeNftAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LockedLiquidity is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CpmmProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CpAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.ReferralPoolSolAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.WrapperProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.WrapperState is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.WrapperMint is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.RecipientToken0Account is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.RecipientToken1Account is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Token0Vault is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.Token1Vault is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.Vault0Mint is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.Vault1Mint is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.LockedLpVault is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.TokenProgram2022 is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[27] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[28] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[29] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CollectCpFees) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectCpFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   FeeNftOwnerBump", *inst.FeeNftOwnerBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=30]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         locking_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           fee_nft_owner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                fee_nft_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        locked_liquidity", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            cpmm_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            cp_authority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              pool_state", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                 lp_mint", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      referral_pool_sol_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("         wrapper_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("           wrapper_state", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("            wrapper_mint", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("      recipient_token_0_", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("      recipient_token_1_", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("           token_0_vault", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("           token_1_vault", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("            vault_0_mint", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("            vault_1_mint", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("         locked_lp_vault", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("      token_program_2022", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("            memo_program", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(25)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(26)))
						accountsBranch.Child(ag_format.Meta("                    rent", inst.AccountMetaSlice.Get(27)))
						accountsBranch.Child(ag_format.Meta("         event_authority", inst.AccountMetaSlice.Get(28)))
						accountsBranch.Child(ag_format.Meta("                 program", inst.AccountMetaSlice.Get(29)))
					})
				})
		})
}

func (obj CollectCpFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeNftOwnerBump` param:
	err = encoder.Encode(obj.FeeNftOwnerBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CollectCpFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeNftOwnerBump`:
	err = decoder.Decode(&obj.FeeNftOwnerBump)
	if err != nil {
		return err
	}
	return nil
}

// NewCollectCpFeesInstruction declares a new CollectCpFees instruction with the provided parameters and accounts.
func NewCollectCpFeesInstruction(
	// Parameters:
	fee_nft_owner_bump uint8,
	authority ag_solanago.PublicKey,
	feeNftAccount ag_solanago.PublicKey,
	lockedLiquidity ag_solanago.PublicKey,
	cpAuthority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	referralPoolSolAccount ag_solanago.PublicKey,
	wrapperState ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	recipientToken0Account ag_solanago.PublicKey,
	recipientToken1Account ag_solanago.PublicKey,
	token0Vault ag_solanago.PublicKey,
	token1Vault ag_solanago.PublicKey,
	vault0Mint ag_solanago.PublicKey,
	vault1Mint ag_solanago.PublicKey,
	lockedLpVault ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *CollectCpFees {
	return NewCollectCpFeesInstructionBuilder().
		SetFeeNftOwnerBump(fee_nft_owner_bump).
		SetAuthorityAccount(authority).
		SetFeeNftAccountAccount(feeNftAccount).
		SetLockedLiquidityAccount(lockedLiquidity).
		SetCpAuthorityAccount(cpAuthority).
		SetPoolStateAccount(poolState).
		SetLpMintAccount(lpMint).
		SetReferralPoolSolAccountAccount(referralPoolSolAccount).
		SetWrapperStateAccount(wrapperState).
		SetWrapperMintAccount(wrapperMint).
		SetRecipientToken0AccountAccount(recipientToken0Account).
		SetRecipientToken1AccountAccount(recipientToken1Account).
		SetToken0VaultAccount(token0Vault).
		SetToken1VaultAccount(token1Vault).
		SetVault0MintAccount(vault0Mint).
		SetVault1MintAccount(vault1Mint).
		SetLockedLpVaultAccount(lockedLpVault).
		SetPayerAccount(payer)
}

// NewSimpleCollectCpFeesInstruction declares a new CollectCpFees instruction with the provided parameters and accounts.
func NewSimpleCollectCpFeesInstruction(
	// Parameters:
	fee_nft_owner_bump uint8,
	authority ag_solanago.PublicKey,
	feeNftAccount ag_solanago.PublicKey,
	lockedLiquidity ag_solanago.PublicKey,
	cpAuthority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	referralPoolSolAccount ag_solanago.PublicKey,
	wrapperState ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	recipientToken0Account ag_solanago.PublicKey,
	recipientToken1Account ag_solanago.PublicKey,
	token0Vault ag_solanago.PublicKey,
	token1Vault ag_solanago.PublicKey,
	vault0Mint ag_solanago.PublicKey,
	vault1Mint ag_solanago.PublicKey,
	lockedLpVault ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *CollectCpFees {
	return NewCollectCpFeesInstructionBuilder().
		SetFeeNftOwnerBump(fee_nft_owner_bump).
		SetAuthorityAccount(authority).
		SetFeeNftAccountAccount(feeNftAccount).
		SetLockedLiquidityAccount(lockedLiquidity).
		SetCpAuthorityAccount(cpAuthority).
		SetPoolStateAccount(poolState).
		SetLpMintAccount(lpMint).
		SetReferralPoolSolAccountAccount(referralPoolSolAccount).
		SetWrapperStateAccount(wrapperState).
		SetWrapperMintAccount(wrapperMint).
		SetRecipientToken0AccountAccount(recipientToken0Account).
		SetRecipientToken1AccountAccount(recipientToken1Account).
		SetToken0VaultAccount(token0Vault).
		SetToken1VaultAccount(token1Vault).
		SetVault0MintAccount(vault0Mint).
		SetVault1MintAccount(vault1Mint).
		SetLockedLpVaultAccount(lockedLpVault).
		SetPayerAccount(payer)
}
