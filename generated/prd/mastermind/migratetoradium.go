// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package mastermind

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MigrateToRadium is the `migrate_to_radium` instruction.
type MigrateToRadium struct {

	// [0] = [WRITE] state
	//
	// [1] = [WRITE] token_mint
	//
	// [2] = [WRITE] wrapper_mint
	//
	// [3] = [WRITE] bonding_curve
	//
	// [4] = [WRITE] bonding_curve_wrapper_associated_account
	//
	// [5] = [WRITE] bonding_curve_token_associated_account
	//
	// [6] = [] wrapper_program
	//
	// [7] = [WRITE] wrapper_state
	//
	// [8] = [] wrapper_mint_authority
	//
	// [9] = [WRITE] payer_wrapper_associated_account
	//
	// [10] = [WRITE] payer_token_associated_account
	//
	// [11] = [] cp_swap_program
	//
	// [12] = [WRITE, SIGNER] creator
	// ··········· Address paying to create the pool. Can be anyone
	//
	// [13] = [] amm_config
	// ··········· Which config the pool belongs to.
	//
	// [14] = [] authority
	//
	// [15] = [WRITE] pool_state
	//
	// [16] = [] token_0_mint
	// ··········· Token_0 mint, the key must smaller then token_1 mint.
	//
	// [17] = [] token_1_mint
	// ··········· Token_1 mint, the key must grater then token_0 mint.
	//
	// [18] = [WRITE] lp_mint
	//
	// [19] = [WRITE] creator_token_0
	// ··········· payer token0 account
	//
	// [20] = [WRITE] creator_token_1
	// ··········· creator token1 account
	//
	// [21] = [WRITE] creator_lp_token
	//
	// [22] = [WRITE] token_0_vault
	//
	// [23] = [WRITE] token_1_vault
	//
	// [24] = [WRITE] create_pool_fee
	// ··········· create pool fee account
	//
	// [25] = [WRITE] observation_state
	//
	// [26] = [] locking_program
	//
	// [27] = [] locking_authority
	//
	// [28] = [] fee_nft_owner
	//
	// [29] = [WRITE, SIGNER] fee_nft_mint
	//
	// [30] = [WRITE] fee_nft_account
	//
	// [31] = [WRITE] locked_liquidity
	//
	// [32] = [WRITE] locked_lp_vault
	//
	// [33] = [WRITE] metadata_account
	// ··········· To store metaplex metadata
	//
	// [34] = [WRITE, SIGNER] payer
	//
	// [35] = [] token_program
	//
	// [36] = [] token_0_program
	//
	// [37] = [] token_1_program
	//
	// [38] = [] associated_token_program
	//
	// [39] = [] system_program
	//
	// [40] = [] rent
	//
	// [41] = [] metadata_program
	//
	// [42] = [] event_authority
	//
	// [43] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrateToRadiumInstructionBuilder creates a new `MigrateToRadium` instruction builder.
func NewMigrateToRadiumInstructionBuilder() *MigrateToRadium {
	nd := &MigrateToRadium{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 44),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(StatePDA).WRITE()
	nd.AccountMetaSlice[11] = ag_solanago.Meta(RaydiumCPMMProgram)
	nd.AccountMetaSlice[24] = ag_solanago.Meta(CreatePoolFee).WRITE()
	nd.AccountMetaSlice[26] = ag_solanago.Meta(LockingProgram)
	nd.AccountMetaSlice[28] = ag_solanago.Meta(FeeNftOwnerPDA)
	nd.AccountMetaSlice[35] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[38] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[39] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[40] = ag_solanago.Meta(RentProgram)
	nd.AccountMetaSlice[41] = ag_solanago.Meta(TokenMetadataProgram)
	nd.AccountMetaSlice[42] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[43] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *MigrateToRadium) SetStateAccount(state ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *MigrateToRadium) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMintAccount sets the "token_mint" account.
func (inst *MigrateToRadium) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMint).WRITE()
	return inst
}

// GetTokenMintAccount gets the "token_mint" account.
func (inst *MigrateToRadium) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWrapperMintAccount sets the "wrapper_mint" account.
func (inst *MigrateToRadium) SetWrapperMintAccount(wrapperMint ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(wrapperMint).WRITE()
	return inst
}

// GetWrapperMintAccount gets the "wrapper_mint" account.
func (inst *MigrateToRadium) GetWrapperMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBondingCurveAccount sets the "bonding_curve" account.
func (inst *MigrateToRadium) SetBondingCurveAccount(bondingCurve ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bondingCurve).WRITE()
	return inst
}

// GetBondingCurveAccount gets the "bonding_curve" account.
func (inst *MigrateToRadium) GetBondingCurveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBondingCurveWrapperAssociatedAccountAccount sets the "bonding_curve_wrapper_associated_account" account.
func (inst *MigrateToRadium) SetBondingCurveWrapperAssociatedAccountAccount(bondingCurveWrapperAssociatedAccount ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bondingCurveWrapperAssociatedAccount).WRITE()
	return inst
}

// GetBondingCurveWrapperAssociatedAccountAccount gets the "bonding_curve_wrapper_associated_account" account.
func (inst *MigrateToRadium) GetBondingCurveWrapperAssociatedAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBondingCurveTokenAssociatedAccountAccount sets the "bonding_curve_token_associated_account" account.
func (inst *MigrateToRadium) SetBondingCurveTokenAssociatedAccountAccount(bondingCurveTokenAssociatedAccount ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bondingCurveTokenAssociatedAccount).WRITE()
	return inst
}

// GetBondingCurveTokenAssociatedAccountAccount gets the "bonding_curve_token_associated_account" account.
func (inst *MigrateToRadium) GetBondingCurveTokenAssociatedAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetWrapperProgramAccount sets the "wrapper_program" account.
func (inst *MigrateToRadium) SetWrapperProgramAccount(wrapperProgram ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(wrapperProgram)
	return inst
}

// GetWrapperProgramAccount gets the "wrapper_program" account.
func (inst *MigrateToRadium) GetWrapperProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetWrapperStateAccount sets the "wrapper_state" account.
func (inst *MigrateToRadium) SetWrapperStateAccount(wrapperState ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(wrapperState).WRITE()
	return inst
}

// GetWrapperStateAccount gets the "wrapper_state" account.
func (inst *MigrateToRadium) GetWrapperStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetWrapperMintAuthorityAccount sets the "wrapper_mint_authority" account.
func (inst *MigrateToRadium) SetWrapperMintAuthorityAccount(wrapperMintAuthority ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(wrapperMintAuthority)
	return inst
}

// GetWrapperMintAuthorityAccount gets the "wrapper_mint_authority" account.
func (inst *MigrateToRadium) GetWrapperMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPayerWrapperAssociatedAccountAccount sets the "payer_wrapper_associated_account" account.
func (inst *MigrateToRadium) SetPayerWrapperAssociatedAccountAccount(payerWrapperAssociatedAccount ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(payerWrapperAssociatedAccount).WRITE()
	return inst
}

// GetPayerWrapperAssociatedAccountAccount gets the "payer_wrapper_associated_account" account.
func (inst *MigrateToRadium) GetPayerWrapperAssociatedAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPayerTokenAssociatedAccountAccount sets the "payer_token_associated_account" account.
func (inst *MigrateToRadium) SetPayerTokenAssociatedAccountAccount(payerTokenAssociatedAccount ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(payerTokenAssociatedAccount).WRITE()
	return inst
}

// GetPayerTokenAssociatedAccountAccount gets the "payer_token_associated_account" account.
func (inst *MigrateToRadium) GetPayerTokenAssociatedAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetCpSwapProgramAccount sets the "cp_swap_program" account.
func (inst *MigrateToRadium) SetCpSwapProgramAccount(cpSwapProgram ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(cpSwapProgram)
	return inst
}

// GetCpSwapProgramAccount gets the "cp_swap_program" account.
func (inst *MigrateToRadium) GetCpSwapProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetCreatorAccount sets the "creator" account.
// Address paying to create the pool. Can be anyone
func (inst *MigrateToRadium) SetCreatorAccount(creator ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
// Address paying to create the pool. Can be anyone
func (inst *MigrateToRadium) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetAmmConfigAccount sets the "amm_config" account.
// Which config the pool belongs to.
func (inst *MigrateToRadium) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "amm_config" account.
// Which config the pool belongs to.
func (inst *MigrateToRadium) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *MigrateToRadium) SetAuthorityAccount(authority ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *MigrateToRadium) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetPoolStateAccount sets the "pool_state" account.
func (inst *MigrateToRadium) SetPoolStateAccount(poolState ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
func (inst *MigrateToRadium) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetToken0MintAccount sets the "token_0_mint" account.
// Token_0 mint, the key must smaller then token_1 mint.
func (inst *MigrateToRadium) SetToken0MintAccount(token0Mint ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(token0Mint)
	return inst
}

// GetToken0MintAccount gets the "token_0_mint" account.
// Token_0 mint, the key must smaller then token_1 mint.
func (inst *MigrateToRadium) GetToken0MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetToken1MintAccount sets the "token_1_mint" account.
// Token_1 mint, the key must grater then token_0 mint.
func (inst *MigrateToRadium) SetToken1MintAccount(token1Mint ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(token1Mint)
	return inst
}

// GetToken1MintAccount gets the "token_1_mint" account.
// Token_1 mint, the key must grater then token_0 mint.
func (inst *MigrateToRadium) GetToken1MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetLpMintAccount sets the "lp_mint" account.
func (inst *MigrateToRadium) SetLpMintAccount(lpMint ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
func (inst *MigrateToRadium) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetCreatorToken0Account sets the "creator_token_0" account.
// payer token0 account
func (inst *MigrateToRadium) SetCreatorToken0Account(creatorToken0 ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(creatorToken0).WRITE()
	return inst
}

// GetCreatorToken0Account gets the "creator_token_0" account.
// payer token0 account
func (inst *MigrateToRadium) GetCreatorToken0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetCreatorToken1Account sets the "creator_token_1" account.
// creator token1 account
func (inst *MigrateToRadium) SetCreatorToken1Account(creatorToken1 ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(creatorToken1).WRITE()
	return inst
}

// GetCreatorToken1Account gets the "creator_token_1" account.
// creator token1 account
func (inst *MigrateToRadium) GetCreatorToken1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetCreatorLpTokenAccount sets the "creator_lp_token" account.
func (inst *MigrateToRadium) SetCreatorLpTokenAccount(creatorLpToken ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(creatorLpToken).WRITE()
	return inst
}

// GetCreatorLpTokenAccount gets the "creator_lp_token" account.
func (inst *MigrateToRadium) GetCreatorLpTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetToken0VaultAccount sets the "token_0_vault" account.
func (inst *MigrateToRadium) SetToken0VaultAccount(token0Vault ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(token0Vault).WRITE()
	return inst
}

// GetToken0VaultAccount gets the "token_0_vault" account.
func (inst *MigrateToRadium) GetToken0VaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetToken1VaultAccount sets the "token_1_vault" account.
func (inst *MigrateToRadium) SetToken1VaultAccount(token1Vault ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(token1Vault).WRITE()
	return inst
}

// GetToken1VaultAccount gets the "token_1_vault" account.
func (inst *MigrateToRadium) GetToken1VaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetCreatePoolFeeAccount sets the "create_pool_fee" account.
// create pool fee account
func (inst *MigrateToRadium) SetCreatePoolFeeAccount(createPoolFee ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(createPoolFee).WRITE()
	return inst
}

// GetCreatePoolFeeAccount gets the "create_pool_fee" account.
// create pool fee account
func (inst *MigrateToRadium) GetCreatePoolFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetObservationStateAccount sets the "observation_state" account.
func (inst *MigrateToRadium) SetObservationStateAccount(observationState ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(observationState).WRITE()
	return inst
}

// GetObservationStateAccount gets the "observation_state" account.
func (inst *MigrateToRadium) GetObservationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

// SetLockingProgramAccount sets the "locking_program" account.
func (inst *MigrateToRadium) SetLockingProgramAccount(lockingProgram ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[26] = ag_solanago.Meta(lockingProgram)
	return inst
}

// GetLockingProgramAccount gets the "locking_program" account.
func (inst *MigrateToRadium) GetLockingProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(26)
}

// SetLockingAuthorityAccount sets the "locking_authority" account.
func (inst *MigrateToRadium) SetLockingAuthorityAccount(lockingAuthority ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[27] = ag_solanago.Meta(lockingAuthority)
	return inst
}

// GetLockingAuthorityAccount gets the "locking_authority" account.
func (inst *MigrateToRadium) GetLockingAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(27)
}

// SetFeeNftOwnerAccount sets the "fee_nft_owner" account.
func (inst *MigrateToRadium) SetFeeNftOwnerAccount(feeNftOwner ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[28] = ag_solanago.Meta(feeNftOwner)
	return inst
}

// GetFeeNftOwnerAccount gets the "fee_nft_owner" account.
func (inst *MigrateToRadium) GetFeeNftOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(28)
}

// SetFeeNftMintAccount sets the "fee_nft_mint" account.
func (inst *MigrateToRadium) SetFeeNftMintAccount(feeNftMint ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[29] = ag_solanago.Meta(feeNftMint).WRITE().SIGNER()
	return inst
}

// GetFeeNftMintAccount gets the "fee_nft_mint" account.
func (inst *MigrateToRadium) GetFeeNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(29)
}

// SetFeeNftAccountAccount sets the "fee_nft_account" account.
func (inst *MigrateToRadium) SetFeeNftAccountAccount(feeNftAccount ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[30] = ag_solanago.Meta(feeNftAccount).WRITE()
	return inst
}

// GetFeeNftAccountAccount gets the "fee_nft_account" account.
func (inst *MigrateToRadium) GetFeeNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(30)
}

// SetLockedLiquidityAccount sets the "locked_liquidity" account.
func (inst *MigrateToRadium) SetLockedLiquidityAccount(lockedLiquidity ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[31] = ag_solanago.Meta(lockedLiquidity).WRITE()
	return inst
}

// GetLockedLiquidityAccount gets the "locked_liquidity" account.
func (inst *MigrateToRadium) GetLockedLiquidityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(31)
}

// SetLockedLpVaultAccount sets the "locked_lp_vault" account.
func (inst *MigrateToRadium) SetLockedLpVaultAccount(lockedLpVault ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[32] = ag_solanago.Meta(lockedLpVault).WRITE()
	return inst
}

// GetLockedLpVaultAccount gets the "locked_lp_vault" account.
func (inst *MigrateToRadium) GetLockedLpVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(32)
}

// SetMetadataAccountAccount sets the "metadata_account" account.
// To store metaplex metadata
func (inst *MigrateToRadium) SetMetadataAccountAccount(metadataAccount ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[33] = ag_solanago.Meta(metadataAccount).WRITE()
	return inst
}

// GetMetadataAccountAccount gets the "metadata_account" account.
// To store metaplex metadata
func (inst *MigrateToRadium) GetMetadataAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(33)
}

// SetPayerAccount sets the "payer" account.
func (inst *MigrateToRadium) SetPayerAccount(payer ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[34] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MigrateToRadium) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(34)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *MigrateToRadium) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[35] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *MigrateToRadium) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(35)
}

// SetToken0ProgramAccount sets the "token_0_program" account.
func (inst *MigrateToRadium) SetToken0ProgramAccount(token0Program ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[36] = ag_solanago.Meta(token0Program)
	return inst
}

// GetToken0ProgramAccount gets the "token_0_program" account.
func (inst *MigrateToRadium) GetToken0ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(36)
}

// SetToken1ProgramAccount sets the "token_1_program" account.
func (inst *MigrateToRadium) SetToken1ProgramAccount(token1Program ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[37] = ag_solanago.Meta(token1Program)
	return inst
}

// GetToken1ProgramAccount gets the "token_1_program" account.
func (inst *MigrateToRadium) GetToken1ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(37)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *MigrateToRadium) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[38] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *MigrateToRadium) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(38)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *MigrateToRadium) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[39] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *MigrateToRadium) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(39)
}

// SetRentAccount sets the "rent" account.
func (inst *MigrateToRadium) SetRentAccount(rent ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[40] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MigrateToRadium) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(40)
}

// SetMetadataProgramAccount sets the "metadata_program" account.
func (inst *MigrateToRadium) SetMetadataProgramAccount(metadataProgram ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[41] = ag_solanago.Meta(metadataProgram)
	return inst
}

// GetMetadataProgramAccount gets the "metadata_program" account.
func (inst *MigrateToRadium) GetMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(41)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *MigrateToRadium) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[42] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *MigrateToRadium) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(42)
}

// SetProgramAccount sets the "program" account.
func (inst *MigrateToRadium) SetProgramAccount(program ag_solanago.PublicKey) *MigrateToRadium {
	inst.AccountMetaSlice[43] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *MigrateToRadium) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(43)
}

func (inst *MigrateToRadium) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *MigrateToRadium) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *MigrateToRadium {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:44], metas...)
	return inst
}

func (inst *MigrateToRadium) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[44:]
}

func (inst MigrateToRadium) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MigrateToRadium,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MigrateToRadium) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MigrateToRadium) Validate() error {
	if len(inst.AccountMetaSlice) < 44 {
		return errors.New("accounts slice has wrong length: expected 44 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.WrapperMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BondingCurve is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BondingCurveWrapperAssociatedAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BondingCurveTokenAssociatedAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.WrapperProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.WrapperState is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.WrapperMintAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PayerWrapperAssociatedAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PayerTokenAssociatedAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.CpSwapProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.Token0Mint is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.Token1Mint is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.CreatorToken0 is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.CreatorToken1 is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.CreatorLpToken is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.Token0Vault is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.Token1Vault is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.CreatePoolFee is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.ObservationState is not set")
		}
		if inst.AccountMetaSlice[26] == nil {
			return errors.New("accounts.LockingProgram is not set")
		}
		if inst.AccountMetaSlice[27] == nil {
			return errors.New("accounts.LockingAuthority is not set")
		}
		if inst.AccountMetaSlice[28] == nil {
			return errors.New("accounts.FeeNftOwner is not set")
		}
		if inst.AccountMetaSlice[29] == nil {
			return errors.New("accounts.FeeNftMint is not set")
		}
		if inst.AccountMetaSlice[30] == nil {
			return errors.New("accounts.FeeNftAccount is not set")
		}
		if inst.AccountMetaSlice[31] == nil {
			return errors.New("accounts.LockedLiquidity is not set")
		}
		if inst.AccountMetaSlice[32] == nil {
			return errors.New("accounts.LockedLpVault is not set")
		}
		if inst.AccountMetaSlice[33] == nil {
			return errors.New("accounts.MetadataAccount is not set")
		}
		if inst.AccountMetaSlice[34] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[35] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[36] == nil {
			return errors.New("accounts.Token0Program is not set")
		}
		if inst.AccountMetaSlice[37] == nil {
			return errors.New("accounts.Token1Program is not set")
		}
		if inst.AccountMetaSlice[38] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[39] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[40] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[41] == nil {
			return errors.New("accounts.MetadataProgram is not set")
		}
		if inst.AccountMetaSlice[42] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[43] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *MigrateToRadium) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MigrateToRadium")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=44]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                            state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                       token_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                     wrapper_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                    bonding_curve", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("bonding_curve_wrapper_associated_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  bonding_curve_token_associated_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                  wrapper_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                    wrapper_state", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           wrapper_mint_authority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        payer_wrapper_associated_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          payer_token_associated_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                  cp_swap_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                          creator", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                       amm_config", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                        authority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                       pool_state", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("                     token_0_mint", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("                     token_1_mint", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("                          lp_mint", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("                  creator_token_0", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("                  creator_token_1", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("                 creator_lp_token", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("                    token_0_vault", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("                    token_1_vault", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("                  create_pool_fee", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("                observation_state", inst.AccountMetaSlice.Get(25)))
						accountsBranch.Child(ag_format.Meta("                  locking_program", inst.AccountMetaSlice.Get(26)))
						accountsBranch.Child(ag_format.Meta("                locking_authority", inst.AccountMetaSlice.Get(27)))
						accountsBranch.Child(ag_format.Meta("                    fee_nft_owner", inst.AccountMetaSlice.Get(28)))
						accountsBranch.Child(ag_format.Meta("                     fee_nft_mint", inst.AccountMetaSlice.Get(29)))
						accountsBranch.Child(ag_format.Meta("                         fee_nft_", inst.AccountMetaSlice.Get(30)))
						accountsBranch.Child(ag_format.Meta("                 locked_liquidity", inst.AccountMetaSlice.Get(31)))
						accountsBranch.Child(ag_format.Meta("                  locked_lp_vault", inst.AccountMetaSlice.Get(32)))
						accountsBranch.Child(ag_format.Meta("                        metadata_", inst.AccountMetaSlice.Get(33)))
						accountsBranch.Child(ag_format.Meta("                            payer", inst.AccountMetaSlice.Get(34)))
						accountsBranch.Child(ag_format.Meta("                    token_program", inst.AccountMetaSlice.Get(35)))
						accountsBranch.Child(ag_format.Meta("                  token_0_program", inst.AccountMetaSlice.Get(36)))
						accountsBranch.Child(ag_format.Meta("                  token_1_program", inst.AccountMetaSlice.Get(37)))
						accountsBranch.Child(ag_format.Meta("         associated_token_program", inst.AccountMetaSlice.Get(38)))
						accountsBranch.Child(ag_format.Meta("                   system_program", inst.AccountMetaSlice.Get(39)))
						accountsBranch.Child(ag_format.Meta("                             rent", inst.AccountMetaSlice.Get(40)))
						accountsBranch.Child(ag_format.Meta("                 metadata_program", inst.AccountMetaSlice.Get(41)))
						accountsBranch.Child(ag_format.Meta("                  event_authority", inst.AccountMetaSlice.Get(42)))
						accountsBranch.Child(ag_format.Meta("                          program", inst.AccountMetaSlice.Get(43)))
					})
				})
		})
}

func (obj MigrateToRadium) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MigrateToRadium) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMigrateToRadiumInstruction declares a new MigrateToRadium instruction with the provided parameters and accounts.
func NewMigrateToRadiumInstruction(
	tokenMint ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	bondingCurve ag_solanago.PublicKey,
	bondingCurveWrapperAssociatedAccount ag_solanago.PublicKey,
	bondingCurveTokenAssociatedAccount ag_solanago.PublicKey,
	wrapperProgram ag_solanago.PublicKey,
	wrapperState ag_solanago.PublicKey,
	wrapperMintAuthority ag_solanago.PublicKey,
	payerWrapperAssociatedAccount ag_solanago.PublicKey,
	payerTokenAssociatedAccount ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	token0Mint ag_solanago.PublicKey,
	token1Mint ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	creatorToken0 ag_solanago.PublicKey,
	creatorToken1 ag_solanago.PublicKey,
	creatorLpToken ag_solanago.PublicKey,
	token0Vault ag_solanago.PublicKey,
	token1Vault ag_solanago.PublicKey,
	observationState ag_solanago.PublicKey,
	lockingAuthority ag_solanago.PublicKey,
	feeNftMint ag_solanago.PublicKey,
	feeNftAccount ag_solanago.PublicKey,
	lockedLiquidity ag_solanago.PublicKey,
	lockedLpVault ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	token0Program ag_solanago.PublicKey,
	token1Program ag_solanago.PublicKey) *MigrateToRadium {
	return NewMigrateToRadiumInstructionBuilder().
		SetTokenMintAccount(tokenMint).
		SetWrapperMintAccount(wrapperMint).
		SetBondingCurveAccount(bondingCurve).
		SetBondingCurveWrapperAssociatedAccountAccount(bondingCurveWrapperAssociatedAccount).
		SetBondingCurveTokenAssociatedAccountAccount(bondingCurveTokenAssociatedAccount).
		SetWrapperProgramAccount(wrapperProgram).
		SetWrapperStateAccount(wrapperState).
		SetWrapperMintAuthorityAccount(wrapperMintAuthority).
		SetPayerWrapperAssociatedAccountAccount(payerWrapperAssociatedAccount).
		SetPayerTokenAssociatedAccountAccount(payerTokenAssociatedAccount).
		SetCreatorAccount(creator).
		SetAmmConfigAccount(ammConfig).
		SetAuthorityAccount(authority).
		SetPoolStateAccount(poolState).
		SetToken0MintAccount(token0Mint).
		SetToken1MintAccount(token1Mint).
		SetLpMintAccount(lpMint).
		SetCreatorToken0Account(creatorToken0).
		SetCreatorToken1Account(creatorToken1).
		SetCreatorLpTokenAccount(creatorLpToken).
		SetToken0VaultAccount(token0Vault).
		SetToken1VaultAccount(token1Vault).
		SetObservationStateAccount(observationState).
		SetLockingAuthorityAccount(lockingAuthority).
		SetFeeNftMintAccount(feeNftMint).
		SetFeeNftAccountAccount(feeNftAccount).
		SetLockedLiquidityAccount(lockedLiquidity).
		SetLockedLpVaultAccount(lockedLpVault).
		SetMetadataAccountAccount(metadataAccount).
		SetPayerAccount(payer).
		SetToken0ProgramAccount(token0Program).
		SetToken1ProgramAccount(token1Program)
}

// NewSimpleMigrateToRadiumInstruction declares a new MigrateToRadium instruction with the provided parameters and accounts.
func NewSimpleMigrateToRadiumInstruction(
	tokenMint ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	bondingCurveWrapperAssociatedAccount ag_solanago.PublicKey,
	bondingCurveTokenAssociatedAccount ag_solanago.PublicKey,
	wrapperProgram ag_solanago.PublicKey,
	wrapperState ag_solanago.PublicKey,
	wrapperMintAuthority ag_solanago.PublicKey,
	payerWrapperAssociatedAccount ag_solanago.PublicKey,
	payerTokenAssociatedAccount ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	token0Mint ag_solanago.PublicKey,
	token1Mint ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	creatorToken0 ag_solanago.PublicKey,
	creatorToken1 ag_solanago.PublicKey,
	creatorLpToken ag_solanago.PublicKey,
	token0Vault ag_solanago.PublicKey,
	token1Vault ag_solanago.PublicKey,
	observationState ag_solanago.PublicKey,
	lockingAuthority ag_solanago.PublicKey,
	feeNftMint ag_solanago.PublicKey,
	feeNftAccount ag_solanago.PublicKey,
	lockedLiquidity ag_solanago.PublicKey,
	lockedLpVault ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	token0Program ag_solanago.PublicKey,
	token1Program ag_solanago.PublicKey) *MigrateToRadium {
	bondingCurve := MustFindBondingCurveAddress(tokenMint)
	return NewMigrateToRadiumInstructionBuilder().
		SetTokenMintAccount(tokenMint).
		SetWrapperMintAccount(wrapperMint).
		SetBondingCurveAccount(bondingCurve).
		SetBondingCurveWrapperAssociatedAccountAccount(bondingCurveWrapperAssociatedAccount).
		SetBondingCurveTokenAssociatedAccountAccount(bondingCurveTokenAssociatedAccount).
		SetWrapperProgramAccount(wrapperProgram).
		SetWrapperStateAccount(wrapperState).
		SetWrapperMintAuthorityAccount(wrapperMintAuthority).
		SetPayerWrapperAssociatedAccountAccount(payerWrapperAssociatedAccount).
		SetPayerTokenAssociatedAccountAccount(payerTokenAssociatedAccount).
		SetCreatorAccount(creator).
		SetAmmConfigAccount(ammConfig).
		SetAuthorityAccount(authority).
		SetPoolStateAccount(poolState).
		SetToken0MintAccount(token0Mint).
		SetToken1MintAccount(token1Mint).
		SetLpMintAccount(lpMint).
		SetCreatorToken0Account(creatorToken0).
		SetCreatorToken1Account(creatorToken1).
		SetCreatorLpTokenAccount(creatorLpToken).
		SetToken0VaultAccount(token0Vault).
		SetToken1VaultAccount(token1Vault).
		SetObservationStateAccount(observationState).
		SetLockingAuthorityAccount(lockingAuthority).
		SetFeeNftMintAccount(feeNftMint).
		SetFeeNftAccountAccount(feeNftAccount).
		SetLockedLiquidityAccount(lockedLiquidity).
		SetLockedLpVaultAccount(lockedLpVault).
		SetMetadataAccountAccount(metadataAccount).
		SetPayerAccount(payer).
		SetToken0ProgramAccount(token0Program).
		SetToken1ProgramAccount(token1Program)
}
