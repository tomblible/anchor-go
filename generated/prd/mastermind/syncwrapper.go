// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package mastermind

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SyncWrapper is the `sync_wrapper` instruction.
type SyncWrapper struct {

	// [0] = [WRITE] state
	//
	// [1] = [] wrapper_program
	//
	// [2] = [WRITE] wrapper_state
	//
	// [3] = [WRITE] wrapper_mint
	//
	// [4] = [] wrapper_mint_authority
	//
	// [5] = [WRITE] fee_receiver_token_account
	//
	// [6] = [WRITE, SIGNER] payer
	//
	// [7] = [WRITE] fee_receiver
	//
	// [8] = [] token_program
	//
	// [9] = [] associated_token_program
	//
	// [10] = [] system_program
	//
	// [11] = [] rent
	//
	// [12] = [] event_authority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSyncWrapperInstructionBuilder creates a new `SyncWrapper` instruction builder.
func NewSyncWrapperInstructionBuilder() *SyncWrapper {
	nd := &SyncWrapper{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(StatePDA).WRITE()
	nd.AccountMetaSlice[1] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[9] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[10] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[11] = ag_solanago.Meta(RentProgram)
	nd.AccountMetaSlice[12] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetStateAccount sets the "state" account.
func (inst *SyncWrapper) SetStateAccount(state ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state).WRITE()
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *SyncWrapper) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWrapperProgramAccount sets the "wrapper_program" account.
func (inst *SyncWrapper) SetWrapperProgramAccount(wrapperProgram ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(wrapperProgram)
	return inst
}

// GetWrapperProgramAccount gets the "wrapper_program" account.
func (inst *SyncWrapper) GetWrapperProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWrapperStateAccount sets the "wrapper_state" account.
func (inst *SyncWrapper) SetWrapperStateAccount(wrapperState ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(wrapperState).WRITE()
	return inst
}

// GetWrapperStateAccount gets the "wrapper_state" account.
func (inst *SyncWrapper) GetWrapperStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWrapperMintAccount sets the "wrapper_mint" account.
func (inst *SyncWrapper) SetWrapperMintAccount(wrapperMint ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(wrapperMint).WRITE()
	return inst
}

// GetWrapperMintAccount gets the "wrapper_mint" account.
func (inst *SyncWrapper) GetWrapperMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWrapperMintAuthorityAccount sets the "wrapper_mint_authority" account.
func (inst *SyncWrapper) SetWrapperMintAuthorityAccount(wrapperMintAuthority ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(wrapperMintAuthority)
	return inst
}

// GetWrapperMintAuthorityAccount gets the "wrapper_mint_authority" account.
func (inst *SyncWrapper) GetWrapperMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFeeReceiverTokenAccountAccount sets the "fee_receiver_token_account" account.
func (inst *SyncWrapper) SetFeeReceiverTokenAccountAccount(feeReceiverTokenAccount ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(feeReceiverTokenAccount).WRITE()
	return inst
}

// GetFeeReceiverTokenAccountAccount gets the "fee_receiver_token_account" account.
func (inst *SyncWrapper) GetFeeReceiverTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
func (inst *SyncWrapper) SetPayerAccount(payer ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *SyncWrapper) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetFeeReceiverAccount sets the "fee_receiver" account.
func (inst *SyncWrapper) SetFeeReceiverAccount(feeReceiver ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(feeReceiver).WRITE()
	return inst
}

// GetFeeReceiverAccount gets the "fee_receiver" account.
func (inst *SyncWrapper) GetFeeReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *SyncWrapper) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *SyncWrapper) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *SyncWrapper) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *SyncWrapper) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *SyncWrapper) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *SyncWrapper) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *SyncWrapper) SetRentAccount(rent ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *SyncWrapper) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *SyncWrapper) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *SyncWrapper) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *SyncWrapper) SetProgramAccount(program ag_solanago.PublicKey) *SyncWrapper {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SyncWrapper) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *SyncWrapper) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SyncWrapper) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SyncWrapper {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *SyncWrapper) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst SyncWrapper) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SyncWrapper,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SyncWrapper) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SyncWrapper) Validate() error {
	if len(inst.AccountMetaSlice) < 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.WrapperProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.WrapperState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WrapperMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.WrapperMintAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FeeReceiverTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.FeeReceiver is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *SyncWrapper) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SyncWrapper")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         wrapper_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           wrapper_state", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            wrapper_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  wrapper_mint_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     fee_receiver_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            fee_receiver", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                    rent", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         event_authority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                 program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj SyncWrapper) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SyncWrapper) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSyncWrapperInstruction declares a new SyncWrapper instruction with the provided parameters and accounts.
func NewSyncWrapperInstruction(
	wrapperState ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	wrapperMintAuthority ag_solanago.PublicKey,
	feeReceiverTokenAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	feeReceiver ag_solanago.PublicKey) *SyncWrapper {
	return NewSyncWrapperInstructionBuilder().
		SetWrapperStateAccount(wrapperState).
		SetWrapperMintAccount(wrapperMint).
		SetWrapperMintAuthorityAccount(wrapperMintAuthority).
		SetFeeReceiverTokenAccountAccount(feeReceiverTokenAccount).
		SetPayerAccount(payer).
		SetFeeReceiverAccount(feeReceiver)
}

// NewSimpleSyncWrapperInstruction declares a new SyncWrapper instruction with the provided parameters and accounts.
func NewSimpleSyncWrapperInstruction(
	wrapperState ag_solanago.PublicKey,
	wrapperMint ag_solanago.PublicKey,
	wrapperMintAuthority ag_solanago.PublicKey,
	feeReceiverTokenAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	feeReceiver ag_solanago.PublicKey) *SyncWrapper {
	return NewSyncWrapperInstructionBuilder().
		SetWrapperStateAccount(wrapperState).
		SetWrapperMintAccount(wrapperMint).
		SetWrapperMintAuthorityAccount(wrapperMintAuthority).
		SetFeeReceiverTokenAccountAccount(feeReceiverTokenAccount).
		SetPayerAccount(payer).
		SetFeeReceiverAccount(feeReceiver)
}
