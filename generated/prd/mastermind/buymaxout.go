// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package mastermind

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BuyMaxOut is the `buy_max_out` instruction.
type BuyMaxOut struct {
	Bumps             *InstructionBumps
	MaxSolAmountInput *uint64
	MinTokensOutput   *uint64

	// [0] = [] state
	//
	// [1] = [] mint
	//
	// [2] = [WRITE] bonding_curve
	//
	// [3] = [WRITE] bonding_curve_sol_associated_account
	//
	// [4] = [WRITE] bonding_curve_token_associated_account
	//
	// [5] = [WRITE] receiver_associated_account
	//
	// [6] = [WRITE, SIGNER] payer
	//
	// [7] = [] receiver
	// ··········· @dev: if receiver == payer: repeated accounts don't add to the size of the transaction due to how Solana serializes accounts in transactions.
	//
	// [8] = [WRITE] fee_receiver
	//
	// [9] = [] token_program
	//
	// [10] = [] associated_token_program
	//
	// [11] = [] system_program
	//
	// [12] = [] rent
	//
	// [13] = [] event_authority
	//
	// [14] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBuyMaxOutInstructionBuilder creates a new `BuyMaxOut` instruction builder.
func NewBuyMaxOutInstructionBuilder() *BuyMaxOut {
	nd := &BuyMaxOut{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(StatePDA)
	nd.AccountMetaSlice[9] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[10] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[11] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[12] = ag_solanago.Meta(RentProgram)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[14] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetBumps sets the "bumps" parameter.
func (inst *BuyMaxOut) SetBumps(bumps InstructionBumps) *BuyMaxOut {
	inst.Bumps = &bumps
	return inst
}

// SetMaxSolAmountInput sets the "max_sol_amount_input" parameter.
func (inst *BuyMaxOut) SetMaxSolAmountInput(max_sol_amount_input uint64) *BuyMaxOut {
	inst.MaxSolAmountInput = &max_sol_amount_input
	return inst
}

// SetMinTokensOutput sets the "min_tokens_output" parameter.
func (inst *BuyMaxOut) SetMinTokensOutput(min_tokens_output uint64) *BuyMaxOut {
	inst.MinTokensOutput = &min_tokens_output
	return inst
}

// SetStateAccount sets the "state" account.
func (inst *BuyMaxOut) SetStateAccount(state ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(state)
	return inst
}

// GetStateAccount gets the "state" account.
func (inst *BuyMaxOut) GetStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *BuyMaxOut) SetMintAccount(mint ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *BuyMaxOut) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBondingCurveAccount sets the "bonding_curve" account.
func (inst *BuyMaxOut) SetBondingCurveAccount(bondingCurve ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(bondingCurve).WRITE()
	return inst
}

// GetBondingCurveAccount gets the "bonding_curve" account.
func (inst *BuyMaxOut) GetBondingCurveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBondingCurveSolAssociatedAccountAccount sets the "bonding_curve_sol_associated_account" account.
func (inst *BuyMaxOut) SetBondingCurveSolAssociatedAccountAccount(bondingCurveSolAssociatedAccount ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bondingCurveSolAssociatedAccount).WRITE()
	return inst
}

// GetBondingCurveSolAssociatedAccountAccount gets the "bonding_curve_sol_associated_account" account.
func (inst *BuyMaxOut) GetBondingCurveSolAssociatedAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBondingCurveTokenAssociatedAccountAccount sets the "bonding_curve_token_associated_account" account.
func (inst *BuyMaxOut) SetBondingCurveTokenAssociatedAccountAccount(bondingCurveTokenAssociatedAccount ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bondingCurveTokenAssociatedAccount).WRITE()
	return inst
}

// GetBondingCurveTokenAssociatedAccountAccount gets the "bonding_curve_token_associated_account" account.
func (inst *BuyMaxOut) GetBondingCurveTokenAssociatedAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiverAssociatedAccountAccount sets the "receiver_associated_account" account.
func (inst *BuyMaxOut) SetReceiverAssociatedAccountAccount(receiverAssociatedAccount ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiverAssociatedAccount).WRITE()
	return inst
}

// GetReceiverAssociatedAccountAccount gets the "receiver_associated_account" account.
func (inst *BuyMaxOut) GetReceiverAssociatedAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
func (inst *BuyMaxOut) SetPayerAccount(payer ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *BuyMaxOut) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetReceiverAccount sets the "receiver" account.
// @dev: if receiver == payer: repeated accounts don't add to the size of the transaction due to how Solana serializes accounts in transactions.
func (inst *BuyMaxOut) SetReceiverAccount(receiver ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(receiver)
	return inst
}

// GetReceiverAccount gets the "receiver" account.
// @dev: if receiver == payer: repeated accounts don't add to the size of the transaction due to how Solana serializes accounts in transactions.
func (inst *BuyMaxOut) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetFeeReceiverAccount sets the "fee_receiver" account.
func (inst *BuyMaxOut) SetFeeReceiverAccount(feeReceiver ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(feeReceiver).WRITE()
	return inst
}

// GetFeeReceiverAccount gets the "fee_receiver" account.
func (inst *BuyMaxOut) GetFeeReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *BuyMaxOut) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *BuyMaxOut) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *BuyMaxOut) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *BuyMaxOut) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *BuyMaxOut) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *BuyMaxOut) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetRentAccount sets the "rent" account.
func (inst *BuyMaxOut) SetRentAccount(rent ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *BuyMaxOut) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *BuyMaxOut) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *BuyMaxOut) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetProgramAccount sets the "program" account.
func (inst *BuyMaxOut) SetProgramAccount(program ag_solanago.PublicKey) *BuyMaxOut {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *BuyMaxOut) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst *BuyMaxOut) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *BuyMaxOut) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *BuyMaxOut {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:15], metas...)
	return inst
}

func (inst *BuyMaxOut) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15:]
}

func (inst BuyMaxOut) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_BuyMaxOut,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BuyMaxOut) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BuyMaxOut) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bumps == nil {
			return errors.New("bumps parameter is not set")
		}
		if inst.MaxSolAmountInput == nil {
			return errors.New("maxSolAmountInput parameter is not set")
		}
		if inst.MinTokensOutput == nil {
			return errors.New("minTokensOutput parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 15 {
		return errors.New("accounts slice has wrong length: expected 15 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.State is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BondingCurve is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BondingCurveSolAssociatedAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BondingCurveTokenAssociatedAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReceiverAssociatedAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.FeeReceiver is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *BuyMaxOut) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BuyMaxOut")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("               Bumps", *inst.Bumps))
						paramsBranch.Child(ag_format.Param("   MaxSolAmountInput", *inst.MaxSolAmountInput))
						paramsBranch.Child(ag_format.Param("     MinTokensOutput", *inst.MinTokensOutput))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                          state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                           mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  bonding_curve", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  bonding_curve_sol_associated_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("bonding_curve_token_associated_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           receiver_associated_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                          payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                       receiver", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                   fee_receiver", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                  token_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       associated_token_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                 system_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                           rent", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                event_authority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                        program", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj BuyMaxOut) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bumps` param:
	err = encoder.Encode(obj.Bumps)
	if err != nil {
		return err
	}
	// Serialize `MaxSolAmountInput` param:
	err = encoder.Encode(obj.MaxSolAmountInput)
	if err != nil {
		return err
	}
	// Serialize `MinTokensOutput` param:
	err = encoder.Encode(obj.MinTokensOutput)
	if err != nil {
		return err
	}
	return nil
}
func (obj *BuyMaxOut) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bumps`:
	err = decoder.Decode(&obj.Bumps)
	if err != nil {
		return err
	}
	// Deserialize `MaxSolAmountInput`:
	err = decoder.Decode(&obj.MaxSolAmountInput)
	if err != nil {
		return err
	}
	// Deserialize `MinTokensOutput`:
	err = decoder.Decode(&obj.MinTokensOutput)
	if err != nil {
		return err
	}
	return nil
}

// NewBuyMaxOutInstruction declares a new BuyMaxOut instruction with the provided parameters and accounts.
func NewBuyMaxOutInstruction(
	// Parameters:
	bumps InstructionBumps,
	max_sol_amount_input uint64,
	min_tokens_output uint64,
	mint ag_solanago.PublicKey,
	bondingCurve ag_solanago.PublicKey,
	bondingCurveSolAssociatedAccount ag_solanago.PublicKey,
	bondingCurveTokenAssociatedAccount ag_solanago.PublicKey,
	receiverAssociatedAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	feeReceiver ag_solanago.PublicKey) *BuyMaxOut {
	return NewBuyMaxOutInstructionBuilder().
		SetBumps(bumps).
		SetMaxSolAmountInput(max_sol_amount_input).
		SetMinTokensOutput(min_tokens_output).
		SetMintAccount(mint).
		SetBondingCurveAccount(bondingCurve).
		SetBondingCurveSolAssociatedAccountAccount(bondingCurveSolAssociatedAccount).
		SetBondingCurveTokenAssociatedAccountAccount(bondingCurveTokenAssociatedAccount).
		SetReceiverAssociatedAccountAccount(receiverAssociatedAccount).
		SetPayerAccount(payer).
		SetReceiverAccount(receiver).
		SetFeeReceiverAccount(feeReceiver)
}

// NewSimpleBuyMaxOutInstruction declares a new BuyMaxOut instruction with the provided parameters and accounts.
func NewSimpleBuyMaxOutInstruction(
	// Parameters:
	bumps InstructionBumps,
	max_sol_amount_input uint64,
	min_tokens_output uint64,
	mint ag_solanago.PublicKey,
	bondingCurveTokenAssociatedAccount ag_solanago.PublicKey,
	receiverAssociatedAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	feeReceiver ag_solanago.PublicKey) *BuyMaxOut {
	bondingCurve := MustFindBondingCurveAddress(mint)
	bondingCurveSolAssociatedAccount := MustFindBondingCurveSolAssociatedAccountAddress(mint)
	return NewBuyMaxOutInstructionBuilder().
		SetBumps(bumps).
		SetMaxSolAmountInput(max_sol_amount_input).
		SetMinTokensOutput(min_tokens_output).
		SetMintAccount(mint).
		SetBondingCurveAccount(bondingCurve).
		SetBondingCurveSolAssociatedAccountAccount(bondingCurveSolAssociatedAccount).
		SetBondingCurveTokenAssociatedAccountAccount(bondingCurveTokenAssociatedAccount).
		SetReceiverAssociatedAccountAccount(receiverAssociatedAccount).
		SetPayerAccount(payer).
		SetReceiverAccount(receiver).
		SetFeeReceiverAccount(feeReceiver)
}
