// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package mastermind

import ag_solanago "github.com/gagliardetto/solana-go"

func FindBondingCurveSolAssociatedAccountAddress(mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x626f6e64696e675f63757276655f
	seeds = append(seeds, []byte{byte(0x62), byte(0x6f), byte(0x6e), byte(0x64), byte(0x69), byte(0x6e), byte(0x67), byte(0x5f), byte(0x63), byte(0x75), byte(0x72), byte(0x76), byte(0x65), byte(0x5f)})
	// path: mint
	seeds = append(seeds, mint.Bytes())
	// const: 0x5f736f6c5f7661756c74
	seeds = append(seeds, []byte{byte(0x5f), byte(0x73), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBondingCurveSolAssociatedAccountAddress(mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindBondingCurveSolAssociatedAccountAddress(mint)
	return
}

func FindBondingCurveSolVaultAddress(mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x626f6e64696e675f63757276655f
	seeds = append(seeds, []byte{byte(0x62), byte(0x6f), byte(0x6e), byte(0x64), byte(0x69), byte(0x6e), byte(0x67), byte(0x5f), byte(0x63), byte(0x75), byte(0x72), byte(0x76), byte(0x65), byte(0x5f)})
	// path: mint
	seeds = append(seeds, mint.Bytes())
	// const: 0x5f736f6c5f7661756c74
	seeds = append(seeds, []byte{byte(0x5f), byte(0x73), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBondingCurveSolVaultAddress(mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindBondingCurveSolVaultAddress(mint)
	return
}

func FindBondingCurveAddress(mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x626f6e64696e675f63757276655f
	seeds = append(seeds, []byte{byte(0x62), byte(0x6f), byte(0x6e), byte(0x64), byte(0x69), byte(0x6e), byte(0x67), byte(0x5f), byte(0x63), byte(0x75), byte(0x72), byte(0x76), byte(0x65), byte(0x5f)})
	// path: mint
	seeds = append(seeds, mint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBondingCurveAddress(mint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindBondingCurveAddress(mint)
	return
}
