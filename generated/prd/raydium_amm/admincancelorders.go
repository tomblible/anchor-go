// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminCancelOrders is the `admin_cancel_orders` instruction.
type AdminCancelOrders struct {
	Limit *uint16

	// [0] = [] token_program
	//
	// [1] = [] amm
	//
	// [2] = [] amm_authority
	//
	// [3] = [WRITE] amm_open_orders
	//
	// [4] = [WRITE] amm_target_orders
	//
	// [5] = [WRITE] pool_coin_token_account
	//
	// [6] = [WRITE] pool_pc_token_account
	//
	// [7] = [SIGNER] amm_owner_account
	//
	// [8] = [WRITE] amm_config
	//
	// [9] = [] serum_program
	//
	// [10] = [WRITE] serum_market
	//
	// [11] = [WRITE] serum_coin_vault_account
	//
	// [12] = [WRITE] serum_pc_vault_account
	//
	// [13] = [] serum_vault_signer
	//
	// [14] = [WRITE] serum_event_q
	//
	// [15] = [WRITE] serum_bids
	//
	// [16] = [WRITE] serum_asks
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminCancelOrdersInstructionBuilder creates a new `AdminCancelOrders` instruction builder.
func NewAdminCancelOrdersInstructionBuilder() *AdminCancelOrders {
	nd := &AdminCancelOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	return nd
}

// SetLimit sets the "limit" parameter.
func (inst *AdminCancelOrders) SetLimit(limit uint16) *AdminCancelOrders {
	inst.Limit = &limit
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *AdminCancelOrders) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *AdminCancelOrders) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmAccount sets the "amm" account.
func (inst *AdminCancelOrders) SetAmmAccount(amm ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(amm)
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *AdminCancelOrders) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmAuthorityAccount sets the "amm_authority" account.
func (inst *AdminCancelOrders) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "amm_authority" account.
func (inst *AdminCancelOrders) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmOpenOrdersAccount sets the "amm_open_orders" account.
func (inst *AdminCancelOrders) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammOpenOrders).WRITE()
	return inst
}

// GetAmmOpenOrdersAccount gets the "amm_open_orders" account.
func (inst *AdminCancelOrders) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAmmTargetOrdersAccount sets the "amm_target_orders" account.
func (inst *AdminCancelOrders) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

// GetAmmTargetOrdersAccount gets the "amm_target_orders" account.
func (inst *AdminCancelOrders) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolCoinTokenAccountAccount sets the "pool_coin_token_account" account.
func (inst *AdminCancelOrders) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(poolCoinTokenAccount).WRITE()
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "pool_coin_token_account" account.
func (inst *AdminCancelOrders) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolPcTokenAccountAccount sets the "pool_pc_token_account" account.
func (inst *AdminCancelOrders) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolPcTokenAccount).WRITE()
	return inst
}

// GetPoolPcTokenAccountAccount gets the "pool_pc_token_account" account.
func (inst *AdminCancelOrders) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAmmOwnerAccountAccount sets the "amm_owner_account" account.
func (inst *AdminCancelOrders) SetAmmOwnerAccountAccount(ammOwnerAccount ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(ammOwnerAccount).SIGNER()
	return inst
}

// GetAmmOwnerAccountAccount gets the "amm_owner_account" account.
func (inst *AdminCancelOrders) GetAmmOwnerAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAmmConfigAccount sets the "amm_config" account.
func (inst *AdminCancelOrders) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(ammConfig).WRITE()
	return inst
}

// GetAmmConfigAccount gets the "amm_config" account.
func (inst *AdminCancelOrders) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSerumProgramAccount sets the "serum_program" account.
func (inst *AdminCancelOrders) SetSerumProgramAccount(serumProgram ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(serumProgram)
	return inst
}

// GetSerumProgramAccount gets the "serum_program" account.
func (inst *AdminCancelOrders) GetSerumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSerumMarketAccount sets the "serum_market" account.
func (inst *AdminCancelOrders) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(serumMarket).WRITE()
	return inst
}

// GetSerumMarketAccount gets the "serum_market" account.
func (inst *AdminCancelOrders) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSerumCoinVaultAccountAccount sets the "serum_coin_vault_account" account.
func (inst *AdminCancelOrders) SetSerumCoinVaultAccountAccount(serumCoinVaultAccount ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(serumCoinVaultAccount).WRITE()
	return inst
}

// GetSerumCoinVaultAccountAccount gets the "serum_coin_vault_account" account.
func (inst *AdminCancelOrders) GetSerumCoinVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSerumPcVaultAccountAccount sets the "serum_pc_vault_account" account.
func (inst *AdminCancelOrders) SetSerumPcVaultAccountAccount(serumPcVaultAccount ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(serumPcVaultAccount).WRITE()
	return inst
}

// GetSerumPcVaultAccountAccount gets the "serum_pc_vault_account" account.
func (inst *AdminCancelOrders) GetSerumPcVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSerumVaultSignerAccount sets the "serum_vault_signer" account.
func (inst *AdminCancelOrders) SetSerumVaultSignerAccount(serumVaultSigner ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(serumVaultSigner)
	return inst
}

// GetSerumVaultSignerAccount gets the "serum_vault_signer" account.
func (inst *AdminCancelOrders) GetSerumVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSerumEventQAccount sets the "serum_event_q" account.
func (inst *AdminCancelOrders) SetSerumEventQAccount(serumEventQ ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(serumEventQ).WRITE()
	return inst
}

// GetSerumEventQAccount gets the "serum_event_q" account.
func (inst *AdminCancelOrders) GetSerumEventQAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSerumBidsAccount sets the "serum_bids" account.
func (inst *AdminCancelOrders) SetSerumBidsAccount(serumBids ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(serumBids).WRITE()
	return inst
}

// GetSerumBidsAccount gets the "serum_bids" account.
func (inst *AdminCancelOrders) GetSerumBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetSerumAsksAccount sets the "serum_asks" account.
func (inst *AdminCancelOrders) SetSerumAsksAccount(serumAsks ag_solanago.PublicKey) *AdminCancelOrders {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(serumAsks).WRITE()
	return inst
}

// GetSerumAsksAccount gets the "serum_asks" account.
func (inst *AdminCancelOrders) GetSerumAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst *AdminCancelOrders) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AdminCancelOrders) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AdminCancelOrders {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:17], metas...)
	return inst
}

func (inst *AdminCancelOrders) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[17:]
}

func (inst AdminCancelOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_AdminCancelOrders),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminCancelOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminCancelOrders) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Limit == nil {
			return errors.New("limit parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 17 {
		return errors.New("accounts slice has wrong length: expected 17 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AmmOwnerAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SerumProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SerumCoinVaultAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SerumPcVaultAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SerumVaultSigner is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SerumEventQ is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SerumBids is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.SerumAsks is not set")
		}
	}
	return nil
}

func (inst *AdminCancelOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminCancelOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Limit", *inst.Limit))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               amm", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     amm_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   amm_open_orders", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" amm_target_orders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  pool_coin_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    pool_pc_token_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        amm_owner_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        amm_config", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("     serum_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("      serum_market", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta(" serum_coin_vault_", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   serum_pc_vault_", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("serum_vault_signer", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("     serum_event_q", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("        serum_bids", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("        serum_asks", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj AdminCancelOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Limit` param:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AdminCancelOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

// NewAdminCancelOrdersInstruction declares a new AdminCancelOrders instruction with the provided parameters and accounts.
func NewAdminCancelOrdersInstruction(
	// Parameters:
	limit uint16,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	ammOwnerAccount ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumCoinVaultAccount ag_solanago.PublicKey,
	serumPcVaultAccount ag_solanago.PublicKey,
	serumVaultSigner ag_solanago.PublicKey,
	serumEventQ ag_solanago.PublicKey,
	serumBids ag_solanago.PublicKey,
	serumAsks ag_solanago.PublicKey) *AdminCancelOrders {
	return NewAdminCancelOrdersInstructionBuilder().
		SetLimit(limit).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetAmmOwnerAccountAccount(ammOwnerAccount).
		SetAmmConfigAccount(ammConfig).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetSerumCoinVaultAccountAccount(serumCoinVaultAccount).
		SetSerumPcVaultAccountAccount(serumPcVaultAccount).
		SetSerumVaultSignerAccount(serumVaultSigner).
		SetSerumEventQAccount(serumEventQ).
		SetSerumBidsAccount(serumBids).
		SetSerumAsksAccount(serumAsks)
}

// NewSimpleAdminCancelOrdersInstruction declares a new AdminCancelOrders instruction with the provided parameters and accounts.
func NewSimpleAdminCancelOrdersInstruction(
	// Parameters:
	limit uint16,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	ammOwnerAccount ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumCoinVaultAccount ag_solanago.PublicKey,
	serumPcVaultAccount ag_solanago.PublicKey,
	serumVaultSigner ag_solanago.PublicKey,
	serumEventQ ag_solanago.PublicKey,
	serumBids ag_solanago.PublicKey,
	serumAsks ag_solanago.PublicKey) *AdminCancelOrders {
	return NewAdminCancelOrdersInstructionBuilder().
		SetLimit(limit).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetAmmOwnerAccountAccount(ammOwnerAccount).
		SetAmmConfigAccount(ammConfig).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetSerumCoinVaultAccountAccount(serumCoinVaultAccount).
		SetSerumPcVaultAccountAccount(serumPcVaultAccount).
		SetSerumVaultSignerAccount(serumVaultSigner).
		SetSerumEventQAccount(serumEventQ).
		SetSerumBidsAccount(serumBids).
		SetSerumAsksAccount(serumAsks)
}
