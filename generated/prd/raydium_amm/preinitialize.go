// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PreInitialize is the `pre_initialize` instruction.
type PreInitialize struct {
	Nonce *uint8

	// [0] = [] token_program
	//
	// [1] = [] system_program
	//
	// [2] = [] rent
	//
	// [3] = [WRITE] amm_target_orders
	//
	// [4] = [WRITE] pool_withdraw_queue
	//
	// [5] = [] amm_authority
	//
	// [6] = [WRITE] lp_mint_address
	//
	// [7] = [] coin_mint_address
	//
	// [8] = [] pc_mint_address
	//
	// [9] = [WRITE] pool_coin_token_account
	//
	// [10] = [WRITE] pool_pc_token_account
	//
	// [11] = [WRITE] pool_temp_lp_token_account
	//
	// [12] = [] serum_market
	//
	// [13] = [WRITE, SIGNER] user_wallet
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPreInitializeInstructionBuilder creates a new `PreInitialize` instruction builder.
func NewPreInitializeInstructionBuilder() *PreInitialize {
	nd := &PreInitialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetNonce sets the "nonce" parameter.
func (inst *PreInitialize) SetNonce(nonce uint8) *PreInitialize {
	inst.Nonce = &nonce
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *PreInitialize) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *PreInitialize) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *PreInitialize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *PreInitialize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRentAccount sets the "rent" account.
func (inst *PreInitialize) SetRentAccount(rent ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *PreInitialize) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmTargetOrdersAccount sets the "amm_target_orders" account.
func (inst *PreInitialize) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

// GetAmmTargetOrdersAccount gets the "amm_target_orders" account.
func (inst *PreInitialize) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolWithdrawQueueAccount sets the "pool_withdraw_queue" account.
func (inst *PreInitialize) SetPoolWithdrawQueueAccount(poolWithdrawQueue ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolWithdrawQueue).WRITE()
	return inst
}

// GetPoolWithdrawQueueAccount gets the "pool_withdraw_queue" account.
func (inst *PreInitialize) GetPoolWithdrawQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAmmAuthorityAccount sets the "amm_authority" account.
func (inst *PreInitialize) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "amm_authority" account.
func (inst *PreInitialize) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetLpMintAddressAccount sets the "lp_mint_address" account.
func (inst *PreInitialize) SetLpMintAddressAccount(lpMintAddress ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(lpMintAddress).WRITE()
	return inst
}

// GetLpMintAddressAccount gets the "lp_mint_address" account.
func (inst *PreInitialize) GetLpMintAddressAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCoinMintAddressAccount sets the "coin_mint_address" account.
func (inst *PreInitialize) SetCoinMintAddressAccount(coinMintAddress ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(coinMintAddress)
	return inst
}

// GetCoinMintAddressAccount gets the "coin_mint_address" account.
func (inst *PreInitialize) GetCoinMintAddressAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPcMintAddressAccount sets the "pc_mint_address" account.
func (inst *PreInitialize) SetPcMintAddressAccount(pcMintAddress ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(pcMintAddress)
	return inst
}

// GetPcMintAddressAccount gets the "pc_mint_address" account.
func (inst *PreInitialize) GetPcMintAddressAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPoolCoinTokenAccountAccount sets the "pool_coin_token_account" account.
func (inst *PreInitialize) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(poolCoinTokenAccount).WRITE()
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "pool_coin_token_account" account.
func (inst *PreInitialize) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPoolPcTokenAccountAccount sets the "pool_pc_token_account" account.
func (inst *PreInitialize) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(poolPcTokenAccount).WRITE()
	return inst
}

// GetPoolPcTokenAccountAccount gets the "pool_pc_token_account" account.
func (inst *PreInitialize) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetPoolTempLpTokenAccountAccount sets the "pool_temp_lp_token_account" account.
func (inst *PreInitialize) SetPoolTempLpTokenAccountAccount(poolTempLpTokenAccount ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(poolTempLpTokenAccount).WRITE()
	return inst
}

// GetPoolTempLpTokenAccountAccount gets the "pool_temp_lp_token_account" account.
func (inst *PreInitialize) GetPoolTempLpTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSerumMarketAccount sets the "serum_market" account.
func (inst *PreInitialize) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(serumMarket)
	return inst
}

// GetSerumMarketAccount gets the "serum_market" account.
func (inst *PreInitialize) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetUserWalletAccount sets the "user_wallet" account.
func (inst *PreInitialize) SetUserWalletAccount(userWallet ag_solanago.PublicKey) *PreInitialize {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(userWallet).WRITE().SIGNER()
	return inst
}

// GetUserWalletAccount gets the "user_wallet" account.
func (inst *PreInitialize) GetUserWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *PreInitialize) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *PreInitialize) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *PreInitialize {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *PreInitialize) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst PreInitialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_PreInitialize),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PreInitialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PreInitialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Nonce == nil {
			return errors.New("nonce parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolWithdrawQueue is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.LpMintAddress is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CoinMintAddress is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PcMintAddress is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.PoolTempLpTokenAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.UserWallet is not set")
		}
	}
	return nil
}

func (inst *PreInitialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PreInitialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Nonce", *inst.Nonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     system_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("               rent", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  amm_target_orders", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("pool_withdraw_queue", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      amm_authority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    lp_mint_address", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("  coin_mint_address", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    pc_mint_address", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   pool_coin_token_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     pool_pc_token_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("pool_temp_lp_token_", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("       serum_market", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        user_wallet", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj PreInitialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *PreInitialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	return nil
}

// NewPreInitializeInstruction declares a new PreInitialize instruction with the provided parameters and accounts.
func NewPreInitializeInstruction(
	// Parameters:
	nonce uint8,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	poolWithdrawQueue ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	lpMintAddress ag_solanago.PublicKey,
	coinMintAddress ag_solanago.PublicKey,
	pcMintAddress ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	poolTempLpTokenAccount ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	userWallet ag_solanago.PublicKey) *PreInitialize {
	return NewPreInitializeInstructionBuilder().
		SetNonce(nonce).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetPoolWithdrawQueueAccount(poolWithdrawQueue).
		SetAmmAuthorityAccount(ammAuthority).
		SetLpMintAddressAccount(lpMintAddress).
		SetCoinMintAddressAccount(coinMintAddress).
		SetPcMintAddressAccount(pcMintAddress).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetPoolTempLpTokenAccountAccount(poolTempLpTokenAccount).
		SetSerumMarketAccount(serumMarket).
		SetUserWalletAccount(userWallet)
}

// NewSimplePreInitializeInstruction declares a new PreInitialize instruction with the provided parameters and accounts.
func NewSimplePreInitializeInstruction(
	// Parameters:
	nonce uint8,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	poolWithdrawQueue ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	lpMintAddress ag_solanago.PublicKey,
	coinMintAddress ag_solanago.PublicKey,
	pcMintAddress ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	poolTempLpTokenAccount ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	userWallet ag_solanago.PublicKey) *PreInitialize {
	return NewPreInitializeInstructionBuilder().
		SetNonce(nonce).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetPoolWithdrawQueueAccount(poolWithdrawQueue).
		SetAmmAuthorityAccount(ammAuthority).
		SetLpMintAddressAccount(lpMintAddress).
		SetCoinMintAddressAccount(coinMintAddress).
		SetPcMintAddressAccount(pcMintAddress).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetPoolTempLpTokenAccountAccount(poolTempLpTokenAccount).
		SetSerumMarketAccount(serumMarket).
		SetUserWalletAccount(userWallet)
}
