// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SimulateInfo is the `simulate_info` instruction.
type SimulateInfo struct {
	Param            *uint8
	SwapBaseInValue  *SwapInstructionBaseIn  `bin:"optional"`
	SwapBaseOutValue *SwapInstructionBaseOut `bin:"optional"`

	// [0] = [] amm
	//
	// [1] = [] amm_authority
	//
	// [2] = [] amm_open_orders
	//
	// [3] = [] pool_coin_token_account
	//
	// [4] = [] pool_pc_token_account
	//
	// [5] = [] lp_mint_address
	//
	// [6] = [] serum_market
	//
	// [7] = [] serum_event_queue
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSimulateInfoInstructionBuilder creates a new `SimulateInfo` instruction builder.
func NewSimulateInfoInstructionBuilder() *SimulateInfo {
	nd := &SimulateInfo{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetParam sets the "param" parameter.
func (inst *SimulateInfo) SetParam(param uint8) *SimulateInfo {
	inst.Param = &param
	return inst
}

// SetSwapBaseInValue sets the "swap_base_in_value" parameter.
func (inst *SimulateInfo) SetSwapBaseInValue(swap_base_in_value SwapInstructionBaseIn) *SimulateInfo {
	inst.SwapBaseInValue = &swap_base_in_value
	return inst
}

// SetSwapBaseOutValue sets the "swap_base_out_value" parameter.
func (inst *SimulateInfo) SetSwapBaseOutValue(swap_base_out_value SwapInstructionBaseOut) *SimulateInfo {
	inst.SwapBaseOutValue = &swap_base_out_value
	return inst
}

// SetAmmAccount sets the "amm" account.
func (inst *SimulateInfo) SetAmmAccount(amm ag_solanago.PublicKey) *SimulateInfo {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(amm)
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *SimulateInfo) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmAuthorityAccount sets the "amm_authority" account.
func (inst *SimulateInfo) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *SimulateInfo {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "amm_authority" account.
func (inst *SimulateInfo) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmOpenOrdersAccount sets the "amm_open_orders" account.
func (inst *SimulateInfo) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *SimulateInfo {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammOpenOrders)
	return inst
}

// GetAmmOpenOrdersAccount gets the "amm_open_orders" account.
func (inst *SimulateInfo) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolCoinTokenAccountAccount sets the "pool_coin_token_account" account.
func (inst *SimulateInfo) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *SimulateInfo {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolCoinTokenAccount)
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "pool_coin_token_account" account.
func (inst *SimulateInfo) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolPcTokenAccountAccount sets the "pool_pc_token_account" account.
func (inst *SimulateInfo) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *SimulateInfo {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolPcTokenAccount)
	return inst
}

// GetPoolPcTokenAccountAccount gets the "pool_pc_token_account" account.
func (inst *SimulateInfo) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLpMintAddressAccount sets the "lp_mint_address" account.
func (inst *SimulateInfo) SetLpMintAddressAccount(lpMintAddress ag_solanago.PublicKey) *SimulateInfo {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(lpMintAddress)
	return inst
}

// GetLpMintAddressAccount gets the "lp_mint_address" account.
func (inst *SimulateInfo) GetLpMintAddressAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSerumMarketAccount sets the "serum_market" account.
func (inst *SimulateInfo) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *SimulateInfo {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(serumMarket)
	return inst
}

// GetSerumMarketAccount gets the "serum_market" account.
func (inst *SimulateInfo) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSerumEventQueueAccount sets the "serum_event_queue" account.
func (inst *SimulateInfo) SetSerumEventQueueAccount(serumEventQueue ag_solanago.PublicKey) *SimulateInfo {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(serumEventQueue)
	return inst
}

// GetSerumEventQueueAccount gets the "serum_event_queue" account.
func (inst *SimulateInfo) GetSerumEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst *SimulateInfo) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SimulateInfo) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SimulateInfo {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:8], metas...)
	return inst
}

func (inst *SimulateInfo) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8:]
}

func (inst SimulateInfo) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_SimulateInfo),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SimulateInfo) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SimulateInfo) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Param == nil {
			return errors.New("param parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 8 {
		return errors.New("accounts slice has wrong length: expected 8 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LpMintAddress is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SerumEventQueue is not set")
		}
	}
	return nil
}

func (inst *SimulateInfo) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SimulateInfo")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              Param", *inst.Param))
						paramsBranch.Child(ag_format.Param("    SwapBaseInValue (OPT)", inst.SwapBaseInValue))
						paramsBranch.Child(ag_format.Param("   SwapBaseOutValue (OPT)", inst.SwapBaseOutValue))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              amm", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    amm_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  amm_open_orders", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" pool_coin_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   pool_pc_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  lp_mint_address", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     serum_market", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("serum_event_queue", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj SimulateInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Param` param:
	err = encoder.Encode(obj.Param)
	if err != nil {
		return err
	}
	// Serialize `SwapBaseInValue` param (optional):
	{
		if obj.SwapBaseInValue == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SwapBaseInValue)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `SwapBaseOutValue` param (optional):
	{
		if obj.SwapBaseOutValue == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SwapBaseOutValue)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *SimulateInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Param`:
	err = decoder.Decode(&obj.Param)
	if err != nil {
		return err
	}
	// Deserialize `SwapBaseInValue` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SwapBaseInValue)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `SwapBaseOutValue` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SwapBaseOutValue)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewSimulateInfoInstruction declares a new SimulateInfo instruction with the provided parameters and accounts.
func NewSimulateInfoInstruction(
	// Parameters:
	param uint8,
	swap_base_in_value SwapInstructionBaseIn,
	swap_base_out_value SwapInstructionBaseOut,
	// Accounts:
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	lpMintAddress ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey) *SimulateInfo {
	return NewSimulateInfoInstructionBuilder().
		SetParam(param).
		SetSwapBaseInValue(swap_base_in_value).
		SetSwapBaseOutValue(swap_base_out_value).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetLpMintAddressAccount(lpMintAddress).
		SetSerumMarketAccount(serumMarket).
		SetSerumEventQueueAccount(serumEventQueue)
}

// NewSimpleSimulateInfoInstruction declares a new SimulateInfo instruction with the provided parameters and accounts.
func NewSimpleSimulateInfoInstruction(
	// Parameters:
	param uint8,
	swap_base_in_value SwapInstructionBaseIn,
	swap_base_out_value SwapInstructionBaseOut,
	// Accounts:
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	lpMintAddress ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey) *SimulateInfo {
	return NewSimulateInfoInstructionBuilder().
		SetParam(param).
		SetSwapBaseInValue(swap_base_in_value).
		SetSwapBaseOutValue(swap_base_out_value).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetLpMintAddressAccount(lpMintAddress).
		SetSerumMarketAccount(serumMarket).
		SetSerumEventQueueAccount(serumEventQueue)
}
