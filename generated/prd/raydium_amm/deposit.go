// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Deposit is the `deposit` instruction.
type Deposit struct {
	MaxCoinAmount *uint64
	MaxPcAmount   *uint64
	BaseSide      *uint64

	// [0] = [] token_program
	//
	// [1] = [WRITE] amm
	//
	// [2] = [] amm_authority
	//
	// [3] = [] amm_open_orders
	//
	// [4] = [WRITE] amm_target_orders
	//
	// [5] = [WRITE] lp_mint_address
	//
	// [6] = [WRITE] pool_coin_token_account
	//
	// [7] = [WRITE] pool_pc_token_account
	//
	// [8] = [] serum_market
	//
	// [9] = [WRITE] user_coin_token_account
	//
	// [10] = [WRITE] user_pc_token_account
	//
	// [11] = [WRITE] user_lp_token_account
	//
	// [12] = [SIGNER] user_owner
	//
	// [13] = [] serum_event_queue
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositInstructionBuilder creates a new `Deposit` instruction builder.
func NewDepositInstructionBuilder() *Deposit {
	nd := &Deposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetMaxCoinAmount sets the "max_coin_amount" parameter.
func (inst *Deposit) SetMaxCoinAmount(max_coin_amount uint64) *Deposit {
	inst.MaxCoinAmount = &max_coin_amount
	return inst
}

// SetMaxPcAmount sets the "max_pc_amount" parameter.
func (inst *Deposit) SetMaxPcAmount(max_pc_amount uint64) *Deposit {
	inst.MaxPcAmount = &max_pc_amount
	return inst
}

// SetBaseSide sets the "base_side" parameter.
func (inst *Deposit) SetBaseSide(base_side uint64) *Deposit {
	inst.BaseSide = &base_side
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *Deposit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *Deposit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmAccount sets the "amm" account.
func (inst *Deposit) SetAmmAccount(amm ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(amm).WRITE()
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *Deposit) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmAuthorityAccount sets the "amm_authority" account.
func (inst *Deposit) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "amm_authority" account.
func (inst *Deposit) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmOpenOrdersAccount sets the "amm_open_orders" account.
func (inst *Deposit) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammOpenOrders)
	return inst
}

// GetAmmOpenOrdersAccount gets the "amm_open_orders" account.
func (inst *Deposit) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAmmTargetOrdersAccount sets the "amm_target_orders" account.
func (inst *Deposit) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

// GetAmmTargetOrdersAccount gets the "amm_target_orders" account.
func (inst *Deposit) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLpMintAddressAccount sets the "lp_mint_address" account.
func (inst *Deposit) SetLpMintAddressAccount(lpMintAddress ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(lpMintAddress).WRITE()
	return inst
}

// GetLpMintAddressAccount gets the "lp_mint_address" account.
func (inst *Deposit) GetLpMintAddressAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPoolCoinTokenAccountAccount sets the "pool_coin_token_account" account.
func (inst *Deposit) SetPoolCoinTokenAccountAccount(poolCoinTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(poolCoinTokenAccount).WRITE()
	return inst
}

// GetPoolCoinTokenAccountAccount gets the "pool_coin_token_account" account.
func (inst *Deposit) GetPoolCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetPoolPcTokenAccountAccount sets the "pool_pc_token_account" account.
func (inst *Deposit) SetPoolPcTokenAccountAccount(poolPcTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(poolPcTokenAccount).WRITE()
	return inst
}

// GetPoolPcTokenAccountAccount gets the "pool_pc_token_account" account.
func (inst *Deposit) GetPoolPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSerumMarketAccount sets the "serum_market" account.
func (inst *Deposit) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(serumMarket)
	return inst
}

// GetSerumMarketAccount gets the "serum_market" account.
func (inst *Deposit) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserCoinTokenAccountAccount sets the "user_coin_token_account" account.
func (inst *Deposit) SetUserCoinTokenAccountAccount(userCoinTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userCoinTokenAccount).WRITE()
	return inst
}

// GetUserCoinTokenAccountAccount gets the "user_coin_token_account" account.
func (inst *Deposit) GetUserCoinTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUserPcTokenAccountAccount sets the "user_pc_token_account" account.
func (inst *Deposit) SetUserPcTokenAccountAccount(userPcTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(userPcTokenAccount).WRITE()
	return inst
}

// GetUserPcTokenAccountAccount gets the "user_pc_token_account" account.
func (inst *Deposit) GetUserPcTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserLpTokenAccountAccount sets the "user_lp_token_account" account.
func (inst *Deposit) SetUserLpTokenAccountAccount(userLpTokenAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userLpTokenAccount).WRITE()
	return inst
}

// GetUserLpTokenAccountAccount gets the "user_lp_token_account" account.
func (inst *Deposit) GetUserLpTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserOwnerAccount sets the "user_owner" account.
func (inst *Deposit) SetUserOwnerAccount(userOwner ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(userOwner).SIGNER()
	return inst
}

// GetUserOwnerAccount gets the "user_owner" account.
func (inst *Deposit) GetUserOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSerumEventQueueAccount sets the "serum_event_queue" account.
func (inst *Deposit) SetSerumEventQueueAccount(serumEventQueue ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(serumEventQueue)
	return inst
}

// GetSerumEventQueueAccount gets the "serum_event_queue" account.
func (inst *Deposit) GetSerumEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *Deposit) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Deposit) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Deposit {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *Deposit) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst Deposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_Deposit),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Deposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Deposit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MaxCoinAmount == nil {
			return errors.New("maxCoinAmount parameter is not set")
		}
		if inst.MaxPcAmount == nil {
			return errors.New("maxPcAmount parameter is not set")
		}
		if inst.BaseSide == nil {
			return errors.New("baseSide parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LpMintAddress is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PoolCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.PoolPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.UserCoinTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.UserPcTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserLpTokenAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.UserOwner is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SerumEventQueue is not set")
		}
	}
	return nil
}

func (inst *Deposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Deposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  MaxCoinAmount", *inst.MaxCoinAmount))
						paramsBranch.Child(ag_format.Param("    MaxPcAmount", *inst.MaxPcAmount))
						paramsBranch.Child(ag_format.Param("       BaseSide", *inst.BaseSide))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              amm", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    amm_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  amm_open_orders", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("amm_target_orders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  lp_mint_address", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" pool_coin_token_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   pool_pc_token_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     serum_market", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta(" user_coin_token_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("   user_pc_token_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   user_lp_token_", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("       user_owner", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("serum_event_queue", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj Deposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxCoinAmount` param:
	err = encoder.Encode(obj.MaxCoinAmount)
	if err != nil {
		return err
	}
	// Serialize `MaxPcAmount` param:
	err = encoder.Encode(obj.MaxPcAmount)
	if err != nil {
		return err
	}
	// Serialize `BaseSide` param:
	err = encoder.Encode(obj.BaseSide)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Deposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxCoinAmount`:
	err = decoder.Decode(&obj.MaxCoinAmount)
	if err != nil {
		return err
	}
	// Deserialize `MaxPcAmount`:
	err = decoder.Decode(&obj.MaxPcAmount)
	if err != nil {
		return err
	}
	// Deserialize `BaseSide`:
	err = decoder.Decode(&obj.BaseSide)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositInstruction declares a new Deposit instruction with the provided parameters and accounts.
func NewDepositInstruction(
	// Parameters:
	max_coin_amount uint64,
	max_pc_amount uint64,
	base_side uint64,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	lpMintAddress ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	userCoinTokenAccount ag_solanago.PublicKey,
	userPcTokenAccount ag_solanago.PublicKey,
	userLpTokenAccount ag_solanago.PublicKey,
	userOwner ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey) *Deposit {
	return NewDepositInstructionBuilder().
		SetMaxCoinAmount(max_coin_amount).
		SetMaxPcAmount(max_pc_amount).
		SetBaseSide(base_side).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetLpMintAddressAccount(lpMintAddress).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetSerumMarketAccount(serumMarket).
		SetUserCoinTokenAccountAccount(userCoinTokenAccount).
		SetUserPcTokenAccountAccount(userPcTokenAccount).
		SetUserLpTokenAccountAccount(userLpTokenAccount).
		SetUserOwnerAccount(userOwner).
		SetSerumEventQueueAccount(serumEventQueue)
}

// NewSimpleDepositInstruction declares a new Deposit instruction with the provided parameters and accounts.
func NewSimpleDepositInstruction(
	// Parameters:
	max_coin_amount uint64,
	max_pc_amount uint64,
	base_side uint64,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	lpMintAddress ag_solanago.PublicKey,
	poolCoinTokenAccount ag_solanago.PublicKey,
	poolPcTokenAccount ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	userCoinTokenAccount ag_solanago.PublicKey,
	userPcTokenAccount ag_solanago.PublicKey,
	userLpTokenAccount ag_solanago.PublicKey,
	userOwner ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey) *Deposit {
	return NewDepositInstructionBuilder().
		SetMaxCoinAmount(max_coin_amount).
		SetMaxPcAmount(max_pc_amount).
		SetBaseSide(base_side).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetLpMintAddressAccount(lpMintAddress).
		SetPoolCoinTokenAccountAccount(poolCoinTokenAccount).
		SetPoolPcTokenAccountAccount(poolPcTokenAccount).
		SetSerumMarketAccount(serumMarket).
		SetUserCoinTokenAccountAccount(userCoinTokenAccount).
		SetUserPcTokenAccountAccount(userPcTokenAccount).
		SetUserLpTokenAccountAccount(userLpTokenAccount).
		SetUserOwnerAccount(userOwner).
		SetSerumEventQueueAccount(serumEventQueue)
}
