// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetParams is the `set_params` instruction.
type SetParams struct {
	Param             *uint8
	Value             *uint64                `bin:"optional"`
	NewPubkey         *ag_solanago.PublicKey `bin:"optional"`
	Fees              *Fees                  `bin:"optional"`
	LastOrderDistance *LastOrderDistance     `bin:"optional"`
	NeedTakeAmounts   *NeedTake              `bin:"optional"`

	// [0] = [] token_program
	//
	// [1] = [WRITE] amm
	//
	// [2] = [] amm_authority
	//
	// [3] = [WRITE] amm_open_orders
	//
	// [4] = [WRITE] amm_target_orders
	//
	// [5] = [WRITE] amm_coin_vault
	//
	// [6] = [WRITE] amm_pc_vault
	//
	// [7] = [] serum_program
	//
	// [8] = [WRITE] serum_market
	//
	// [9] = [WRITE] serum_coin_vault
	//
	// [10] = [WRITE] serum_pc_vault
	//
	// [11] = [] serum_vault_signer
	//
	// [12] = [WRITE] serum_event_queue
	//
	// [13] = [WRITE] serum_bids
	//
	// [14] = [WRITE] serum_asks
	//
	// [15] = [SIGNER] amm_admin_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetParamsInstructionBuilder creates a new `SetParams` instruction builder.
func NewSetParamsInstructionBuilder() *SetParams {
	nd := &SetParams{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetParam sets the "param" parameter.
func (inst *SetParams) SetParam(param uint8) *SetParams {
	inst.Param = &param
	return inst
}

// SetValue sets the "value" parameter.
func (inst *SetParams) SetValue(value uint64) *SetParams {
	inst.Value = &value
	return inst
}

// SetNewPubkey sets the "new_pubkey" parameter.
func (inst *SetParams) SetNewPubkey(new_pubkey ag_solanago.PublicKey) *SetParams {
	inst.NewPubkey = &new_pubkey
	return inst
}

// SetFees sets the "fees" parameter.
func (inst *SetParams) SetFees(fees Fees) *SetParams {
	inst.Fees = &fees
	return inst
}

// SetLastOrderDistance sets the "last_order_distance" parameter.
func (inst *SetParams) SetLastOrderDistance(last_order_distance LastOrderDistance) *SetParams {
	inst.LastOrderDistance = &last_order_distance
	return inst
}

// SetNeedTakeAmounts sets the "need_take_amounts" parameter.
func (inst *SetParams) SetNeedTakeAmounts(need_take_amounts NeedTake) *SetParams {
	inst.NeedTakeAmounts = &need_take_amounts
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *SetParams) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *SetParams) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAmmAccount sets the "amm" account.
func (inst *SetParams) SetAmmAccount(amm ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(amm).WRITE()
	return inst
}

// GetAmmAccount gets the "amm" account.
func (inst *SetParams) GetAmmAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmAuthorityAccount sets the "amm_authority" account.
func (inst *SetParams) SetAmmAuthorityAccount(ammAuthority ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammAuthority)
	return inst
}

// GetAmmAuthorityAccount gets the "amm_authority" account.
func (inst *SetParams) GetAmmAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmOpenOrdersAccount sets the "amm_open_orders" account.
func (inst *SetParams) SetAmmOpenOrdersAccount(ammOpenOrders ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammOpenOrders).WRITE()
	return inst
}

// GetAmmOpenOrdersAccount gets the "amm_open_orders" account.
func (inst *SetParams) GetAmmOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAmmTargetOrdersAccount sets the "amm_target_orders" account.
func (inst *SetParams) SetAmmTargetOrdersAccount(ammTargetOrders ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ammTargetOrders).WRITE()
	return inst
}

// GetAmmTargetOrdersAccount gets the "amm_target_orders" account.
func (inst *SetParams) GetAmmTargetOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAmmCoinVaultAccount sets the "amm_coin_vault" account.
func (inst *SetParams) SetAmmCoinVaultAccount(ammCoinVault ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(ammCoinVault).WRITE()
	return inst
}

// GetAmmCoinVaultAccount gets the "amm_coin_vault" account.
func (inst *SetParams) GetAmmCoinVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAmmPcVaultAccount sets the "amm_pc_vault" account.
func (inst *SetParams) SetAmmPcVaultAccount(ammPcVault ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(ammPcVault).WRITE()
	return inst
}

// GetAmmPcVaultAccount gets the "amm_pc_vault" account.
func (inst *SetParams) GetAmmPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSerumProgramAccount sets the "serum_program" account.
func (inst *SetParams) SetSerumProgramAccount(serumProgram ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(serumProgram)
	return inst
}

// GetSerumProgramAccount gets the "serum_program" account.
func (inst *SetParams) GetSerumProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSerumMarketAccount sets the "serum_market" account.
func (inst *SetParams) SetSerumMarketAccount(serumMarket ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(serumMarket).WRITE()
	return inst
}

// GetSerumMarketAccount gets the "serum_market" account.
func (inst *SetParams) GetSerumMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSerumCoinVaultAccount sets the "serum_coin_vault" account.
func (inst *SetParams) SetSerumCoinVaultAccount(serumCoinVault ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(serumCoinVault).WRITE()
	return inst
}

// GetSerumCoinVaultAccount gets the "serum_coin_vault" account.
func (inst *SetParams) GetSerumCoinVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSerumPcVaultAccount sets the "serum_pc_vault" account.
func (inst *SetParams) SetSerumPcVaultAccount(serumPcVault ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(serumPcVault).WRITE()
	return inst
}

// GetSerumPcVaultAccount gets the "serum_pc_vault" account.
func (inst *SetParams) GetSerumPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSerumVaultSignerAccount sets the "serum_vault_signer" account.
func (inst *SetParams) SetSerumVaultSignerAccount(serumVaultSigner ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(serumVaultSigner)
	return inst
}

// GetSerumVaultSignerAccount gets the "serum_vault_signer" account.
func (inst *SetParams) GetSerumVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSerumEventQueueAccount sets the "serum_event_queue" account.
func (inst *SetParams) SetSerumEventQueueAccount(serumEventQueue ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(serumEventQueue).WRITE()
	return inst
}

// GetSerumEventQueueAccount gets the "serum_event_queue" account.
func (inst *SetParams) GetSerumEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSerumBidsAccount sets the "serum_bids" account.
func (inst *SetParams) SetSerumBidsAccount(serumBids ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(serumBids).WRITE()
	return inst
}

// GetSerumBidsAccount gets the "serum_bids" account.
func (inst *SetParams) GetSerumBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSerumAsksAccount sets the "serum_asks" account.
func (inst *SetParams) SetSerumAsksAccount(serumAsks ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(serumAsks).WRITE()
	return inst
}

// GetSerumAsksAccount gets the "serum_asks" account.
func (inst *SetParams) GetSerumAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetAmmAdminAccountAccount sets the "amm_admin_account" account.
func (inst *SetParams) SetAmmAdminAccountAccount(ammAdminAccount ag_solanago.PublicKey) *SetParams {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(ammAdminAccount).SIGNER()
	return inst
}

// GetAmmAdminAccountAccount gets the "amm_admin_account" account.
func (inst *SetParams) GetAmmAdminAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst *SetParams) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetParams) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetParams {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:16], metas...)
	return inst
}

func (inst *SetParams) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[16:]
}

func (inst SetParams) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_SetParams),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetParams) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetParams) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Param == nil {
			return errors.New("param parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 16 {
		return errors.New("accounts slice has wrong length: expected 16 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Amm is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmOpenOrders is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AmmTargetOrders is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AmmCoinVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AmmPcVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SerumProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SerumMarket is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SerumCoinVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SerumPcVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SerumVaultSigner is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SerumEventQueue is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SerumBids is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SerumAsks is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.AmmAdminAccount is not set")
		}
	}
	return nil
}

func (inst *SetParams) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetParams")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("              Param", *inst.Param))
						paramsBranch.Child(ag_format.Param("              Value (OPT)", inst.Value))
						paramsBranch.Child(ag_format.Param("          NewPubkey (OPT)", inst.NewPubkey))
						paramsBranch.Child(ag_format.Param("               Fees (OPT)", inst.Fees))
						paramsBranch.Child(ag_format.Param("  LastOrderDistance (OPT)", inst.LastOrderDistance))
						paramsBranch.Child(ag_format.Param("    NeedTakeAmounts (OPT)", inst.NeedTakeAmounts))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               amm", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     amm_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   amm_open_orders", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" amm_target_orders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    amm_coin_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      amm_pc_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     serum_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      serum_market", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  serum_coin_vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    serum_pc_vault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("serum_vault_signer", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta(" serum_event_queue", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        serum_bids", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        serum_asks", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("        amm_admin_", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj SetParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Param` param:
	err = encoder.Encode(obj.Param)
	if err != nil {
		return err
	}
	// Serialize `Value` param (optional):
	{
		if obj.Value == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Value)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NewPubkey` param (optional):
	{
		if obj.NewPubkey == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewPubkey)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Fees` param (optional):
	{
		if obj.Fees == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Fees)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `LastOrderDistance` param (optional):
	{
		if obj.LastOrderDistance == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LastOrderDistance)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NeedTakeAmounts` param (optional):
	{
		if obj.NeedTakeAmounts == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NeedTakeAmounts)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *SetParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Param`:
	err = decoder.Decode(&obj.Param)
	if err != nil {
		return err
	}
	// Deserialize `Value` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Value)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NewPubkey` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewPubkey)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Fees` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Fees)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `LastOrderDistance` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LastOrderDistance)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NeedTakeAmounts` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NeedTakeAmounts)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewSetParamsInstruction declares a new SetParams instruction with the provided parameters and accounts.
func NewSetParamsInstruction(
	// Parameters:
	param uint8,
	value uint64,
	new_pubkey ag_solanago.PublicKey,
	fees Fees,
	last_order_distance LastOrderDistance,
	need_take_amounts NeedTake,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	ammCoinVault ag_solanago.PublicKey,
	ammPcVault ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumCoinVault ag_solanago.PublicKey,
	serumPcVault ag_solanago.PublicKey,
	serumVaultSigner ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey,
	serumBids ag_solanago.PublicKey,
	serumAsks ag_solanago.PublicKey,
	ammAdminAccount ag_solanago.PublicKey) *SetParams {
	return NewSetParamsInstructionBuilder().
		SetParam(param).
		SetValue(value).
		SetNewPubkey(new_pubkey).
		SetFees(fees).
		SetLastOrderDistance(last_order_distance).
		SetNeedTakeAmounts(need_take_amounts).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetAmmCoinVaultAccount(ammCoinVault).
		SetAmmPcVaultAccount(ammPcVault).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetSerumCoinVaultAccount(serumCoinVault).
		SetSerumPcVaultAccount(serumPcVault).
		SetSerumVaultSignerAccount(serumVaultSigner).
		SetSerumEventQueueAccount(serumEventQueue).
		SetSerumBidsAccount(serumBids).
		SetSerumAsksAccount(serumAsks).
		SetAmmAdminAccountAccount(ammAdminAccount)
}

// NewSimpleSetParamsInstruction declares a new SetParams instruction with the provided parameters and accounts.
func NewSimpleSetParamsInstruction(
	// Parameters:
	param uint8,
	value uint64,
	new_pubkey ag_solanago.PublicKey,
	fees Fees,
	last_order_distance LastOrderDistance,
	need_take_amounts NeedTake,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	amm ag_solanago.PublicKey,
	ammAuthority ag_solanago.PublicKey,
	ammOpenOrders ag_solanago.PublicKey,
	ammTargetOrders ag_solanago.PublicKey,
	ammCoinVault ag_solanago.PublicKey,
	ammPcVault ag_solanago.PublicKey,
	serumProgram ag_solanago.PublicKey,
	serumMarket ag_solanago.PublicKey,
	serumCoinVault ag_solanago.PublicKey,
	serumPcVault ag_solanago.PublicKey,
	serumVaultSigner ag_solanago.PublicKey,
	serumEventQueue ag_solanago.PublicKey,
	serumBids ag_solanago.PublicKey,
	serumAsks ag_solanago.PublicKey,
	ammAdminAccount ag_solanago.PublicKey) *SetParams {
	return NewSetParamsInstructionBuilder().
		SetParam(param).
		SetValue(value).
		SetNewPubkey(new_pubkey).
		SetFees(fees).
		SetLastOrderDistance(last_order_distance).
		SetNeedTakeAmounts(need_take_amounts).
		SetTokenProgramAccount(tokenProgram).
		SetAmmAccount(amm).
		SetAmmAuthorityAccount(ammAuthority).
		SetAmmOpenOrdersAccount(ammOpenOrders).
		SetAmmTargetOrdersAccount(ammTargetOrders).
		SetAmmCoinVaultAccount(ammCoinVault).
		SetAmmPcVaultAccount(ammPcVault).
		SetSerumProgramAccount(serumProgram).
		SetSerumMarketAccount(serumMarket).
		SetSerumCoinVaultAccount(serumCoinVault).
		SetSerumPcVaultAccount(serumPcVault).
		SetSerumVaultSignerAccount(serumVaultSigner).
		SetSerumEventQueueAccount(serumEventQueue).
		SetSerumBidsAccount(serumBids).
		SetSerumAsksAccount(serumAsks).
		SetAmmAdminAccountAccount(ammAdminAccount)
}
