// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

const ProgramName = "RaydiumAmm"

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var ()

const (
	Instruction_Initialize uint8 = iota

	Instruction_Initialize2

	Instruction_MonitorStep

	Instruction_Deposit

	Instruction_Withdraw

	Instruction_MigrateToOpenBook

	Instruction_SetParams

	Instruction_WithdrawPnl

	Instruction_WithdrawSrm

	Instruction_SwapBaseIn

	Instruction_PreInitialize

	Instruction_SwapBaseOut

	Instruction_SimulateInfo

	Instruction_AdminCancelOrders

	Instruction_CreateConfigAccount

	Instruction_UpdateConfigAccount
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id uint8) string {
	switch id {
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_Initialize2:
		return "Initialize2"
	case Instruction_MonitorStep:
		return "MonitorStep"
	case Instruction_Deposit:
		return "Deposit"
	case Instruction_Withdraw:
		return "Withdraw"
	case Instruction_MigrateToOpenBook:
		return "MigrateToOpenBook"
	case Instruction_SetParams:
		return "SetParams"
	case Instruction_WithdrawPnl:
		return "WithdrawPnl"
	case Instruction_WithdrawSrm:
		return "WithdrawSrm"
	case Instruction_SwapBaseIn:
		return "SwapBaseIn"
	case Instruction_PreInitialize:
		return "PreInitialize"
	case Instruction_SwapBaseOut:
		return "SwapBaseOut"
	case Instruction_SimulateInfo:
		return "SimulateInfo"
	case Instruction_AdminCancelOrders:
		return "AdminCancelOrders"
	case Instruction_CreateConfigAccount:
		return "CreateConfigAccount"
	case Instruction_UpdateConfigAccount:
		return "UpdateConfigAccount"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.Uint8TypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "Initialize", Type: (*Initialize)(nil),
		},
		{
			Name: "Initialize2", Type: (*Initialize2)(nil),
		},
		{
			Name: "MonitorStep", Type: (*MonitorStep)(nil),
		},
		{
			Name: "Deposit", Type: (*Deposit)(nil),
		},
		{
			Name: "Withdraw", Type: (*Withdraw)(nil),
		},
		{
			Name: "MigrateToOpenBook", Type: (*MigrateToOpenBook)(nil),
		},
		{
			Name: "SetParams", Type: (*SetParams)(nil),
		},
		{
			Name: "WithdrawPnl", Type: (*WithdrawPnl)(nil),
		},
		{
			Name: "WithdrawSrm", Type: (*WithdrawSrm)(nil),
		},
		{
			Name: "SwapBaseIn", Type: (*SwapBaseIn)(nil),
		},
		{
			Name: "PreInitialize", Type: (*PreInitialize)(nil),
		},
		{
			Name: "SwapBaseOut", Type: (*SwapBaseOut)(nil),
		},
		{
			Name: "SimulateInfo", Type: (*SimulateInfo)(nil),
		},
		{
			Name: "AdminCancelOrders", Type: (*AdminCancelOrders)(nil),
		},
		{
			Name: "CreateConfigAccount", Type: (*CreateConfigAccount)(nil),
		},
		{
			Name: "UpdateConfigAccount", Type: (*UpdateConfigAccount)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteUint8(inst.TypeID.Uint8())
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
