// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Overrides the coin creator for a canonical pump pool
type AdminSetCoinCreator struct {
	CoinCreator *ag_solanago.PublicKey

	// [0] = [SIGNER] admin_set_coin_creator_authority
	//
	// [1] = [] global_config
	//
	// [2] = [WRITE] pool
	//
	// [3] = [] event_authority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminSetCoinCreatorInstructionBuilder creates a new `AdminSetCoinCreator` instruction builder.
func NewAdminSetCoinCreatorInstructionBuilder() *AdminSetCoinCreator {
	nd := &AdminSetCoinCreator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetCoinCreator sets the "coin_creator" parameter.
func (inst *AdminSetCoinCreator) SetCoinCreator(coin_creator ag_solanago.PublicKey) *AdminSetCoinCreator {
	inst.CoinCreator = &coin_creator
	return inst
}

// SetAdminSetCoinCreatorAuthorityAccount sets the "admin_set_coin_creator_authority" account.
func (inst *AdminSetCoinCreator) SetAdminSetCoinCreatorAuthorityAccount(adminSetCoinCreatorAuthority ag_solanago.PublicKey) *AdminSetCoinCreator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(adminSetCoinCreatorAuthority).SIGNER()
	return inst
}

// GetAdminSetCoinCreatorAuthorityAccount gets the "admin_set_coin_creator_authority" account.
func (inst *AdminSetCoinCreator) GetAdminSetCoinCreatorAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalConfigAccount sets the "global_config" account.
func (inst *AdminSetCoinCreator) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *AdminSetCoinCreator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
func (inst *AdminSetCoinCreator) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAccount sets the "pool" account.
func (inst *AdminSetCoinCreator) SetPoolAccount(pool ag_solanago.PublicKey) *AdminSetCoinCreator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *AdminSetCoinCreator) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *AdminSetCoinCreator) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AdminSetCoinCreator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *AdminSetCoinCreator) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *AdminSetCoinCreator) SetProgramAccount(program ag_solanago.PublicKey) *AdminSetCoinCreator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AdminSetCoinCreator) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *AdminSetCoinCreator) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AdminSetCoinCreator) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AdminSetCoinCreator {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *AdminSetCoinCreator) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst AdminSetCoinCreator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminSetCoinCreator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminSetCoinCreator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminSetCoinCreator) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CoinCreator == nil {
			return errors.New("coinCreator parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AdminSetCoinCreatorAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AdminSetCoinCreator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminSetCoinCreator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" CoinCreator", *inst.CoinCreator))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("admin_set_coin_creator_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   global_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                            pool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 event_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                         program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj AdminSetCoinCreator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CoinCreator` param:
	err = encoder.Encode(obj.CoinCreator)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AdminSetCoinCreator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CoinCreator`:
	err = decoder.Decode(&obj.CoinCreator)
	if err != nil {
		return err
	}
	return nil
}

// NewAdminSetCoinCreatorInstruction declares a new AdminSetCoinCreator instruction with the provided parameters and accounts.
func NewAdminSetCoinCreatorInstruction(
	// Parameters:
	coin_creator ag_solanago.PublicKey,
	// Accounts:
	adminSetCoinCreatorAuthority ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	pool ag_solanago.PublicKey) *AdminSetCoinCreator {
	return NewAdminSetCoinCreatorInstructionBuilder().
		SetCoinCreator(coin_creator).
		SetAdminSetCoinCreatorAuthorityAccount(adminSetCoinCreatorAuthority).
		SetGlobalConfigAccount(globalConfig).
		SetPoolAccount(pool)
}

// NewSimpleAdminSetCoinCreatorInstruction declares a new AdminSetCoinCreator instruction with the provided parameters and accounts.
func NewSimpleAdminSetCoinCreatorInstruction(
	// Parameters:
	coin_creator ag_solanago.PublicKey,
	// Accounts:
	adminSetCoinCreatorAuthority ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	pool ag_solanago.PublicKey) *AdminSetCoinCreator {
	return NewAdminSetCoinCreatorInstructionBuilder().
		SetCoinCreator(coin_creator).
		SetAdminSetCoinCreatorAuthorityAccount(adminSetCoinCreatorAuthority).
		SetGlobalConfigAccount(globalConfig).
		SetPoolAccount(pool)
}
