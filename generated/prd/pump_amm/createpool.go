// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreatePool is the `create_pool` instruction.
type CreatePool struct {
	Index         *uint16
	BaseAmountIn  *uint64
	QuoteAmountIn *uint64
	CoinCreator   *ag_solanago.PublicKey

	// [0] = [WRITE] pool
	//
	// [1] = [] global_config
	//
	// [2] = [WRITE, SIGNER] creator
	//
	// [3] = [] base_mint
	//
	// [4] = [] quote_mint
	//
	// [5] = [WRITE] lp_mint
	//
	// [6] = [WRITE] user_base_token_account
	//
	// [7] = [WRITE] user_quote_token_account
	//
	// [8] = [WRITE] user_pool_token_account
	//
	// [9] = [WRITE] pool_base_token_account
	//
	// [10] = [WRITE] pool_quote_token_account
	//
	// [11] = [] system_program
	//
	// [12] = [] token_2022_program
	//
	// [13] = [] base_token_program
	//
	// [14] = [] quote_token_program
	//
	// [15] = [] associated_token_program
	//
	// [16] = [] event_authority
	//
	// [17] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreatePoolInstructionBuilder creates a new `CreatePool` instruction builder.
func NewCreatePoolInstructionBuilder() *CreatePool {
	nd := &CreatePool{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	nd.AccountMetaSlice[11] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[12] = ag_solanago.Meta(Token22Program)
	nd.AccountMetaSlice[15] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[16] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[17] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetIndex sets the "index" parameter.
func (inst *CreatePool) SetIndex(index uint16) *CreatePool {
	inst.Index = &index
	return inst
}

// SetBaseAmountIn sets the "base_amount_in" parameter.
func (inst *CreatePool) SetBaseAmountIn(base_amount_in uint64) *CreatePool {
	inst.BaseAmountIn = &base_amount_in
	return inst
}

// SetQuoteAmountIn sets the "quote_amount_in" parameter.
func (inst *CreatePool) SetQuoteAmountIn(quote_amount_in uint64) *CreatePool {
	inst.QuoteAmountIn = &quote_amount_in
	return inst
}

// SetCoinCreator sets the "coin_creator" parameter.
func (inst *CreatePool) SetCoinCreator(coin_creator ag_solanago.PublicKey) *CreatePool {
	inst.CoinCreator = &coin_creator
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *CreatePool) SetPoolAccount(pool ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *CreatePool) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalConfigAccount sets the "global_config" account.
func (inst *CreatePool) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
func (inst *CreatePool) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCreatorAccount sets the "creator" account.
func (inst *CreatePool) SetCreatorAccount(creator ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *CreatePool) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBaseMintAccount sets the "base_mint" account.
func (inst *CreatePool) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
func (inst *CreatePool) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQuoteMintAccount sets the "quote_mint" account.
func (inst *CreatePool) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
func (inst *CreatePool) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetLpMintAccount sets the "lp_mint" account.
func (inst *CreatePool) SetLpMintAccount(lpMint ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
func (inst *CreatePool) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserBaseTokenAccountAccount sets the "user_base_token_account" account.
func (inst *CreatePool) SetUserBaseTokenAccountAccount(userBaseTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userBaseTokenAccount).WRITE()
	return inst
}

// GetUserBaseTokenAccountAccount gets the "user_base_token_account" account.
func (inst *CreatePool) GetUserBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUserQuoteTokenAccountAccount sets the "user_quote_token_account" account.
func (inst *CreatePool) SetUserQuoteTokenAccountAccount(userQuoteTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userQuoteTokenAccount).WRITE()
	return inst
}

// GetUserQuoteTokenAccountAccount gets the "user_quote_token_account" account.
func (inst *CreatePool) GetUserQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetUserPoolTokenAccountAccount sets the "user_pool_token_account" account.
func (inst *CreatePool) SetUserPoolTokenAccountAccount(userPoolTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(userPoolTokenAccount).WRITE()
	return inst
}

// GetUserPoolTokenAccountAccount gets the "user_pool_token_account" account.
func (inst *CreatePool) GetUserPoolTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetPoolBaseTokenAccountAccount sets the "pool_base_token_account" account.
func (inst *CreatePool) SetPoolBaseTokenAccountAccount(poolBaseTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(poolBaseTokenAccount).WRITE()
	return inst
}

// GetPoolBaseTokenAccountAccount gets the "pool_base_token_account" account.
func (inst *CreatePool) GetPoolBaseTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPoolQuoteTokenAccountAccount sets the "pool_quote_token_account" account.
func (inst *CreatePool) SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(poolQuoteTokenAccount).WRITE()
	return inst
}

// GetPoolQuoteTokenAccountAccount gets the "pool_quote_token_account" account.
func (inst *CreatePool) GetPoolQuoteTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreatePool) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreatePool) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetToken2022ProgramAccount sets the "token_2022_program" account.
func (inst *CreatePool) SetToken2022ProgramAccount(token2022Program ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(token2022Program)
	return inst
}

// GetToken2022ProgramAccount gets the "token_2022_program" account.
func (inst *CreatePool) GetToken2022ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetBaseTokenProgramAccount sets the "base_token_program" account.
func (inst *CreatePool) SetBaseTokenProgramAccount(baseTokenProgram ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(baseTokenProgram)
	return inst
}

// GetBaseTokenProgramAccount gets the "base_token_program" account.
func (inst *CreatePool) GetBaseTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetQuoteTokenProgramAccount sets the "quote_token_program" account.
func (inst *CreatePool) SetQuoteTokenProgramAccount(quoteTokenProgram ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(quoteTokenProgram)
	return inst
}

// GetQuoteTokenProgramAccount gets the "quote_token_program" account.
func (inst *CreatePool) GetQuoteTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *CreatePool) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *CreatePool) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CreatePool) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CreatePool) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetProgramAccount sets the "program" account.
func (inst *CreatePool) SetProgramAccount(program ag_solanago.PublicKey) *CreatePool {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CreatePool) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst *CreatePool) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreatePool) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreatePool {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:18], metas...)
	return inst
}

func (inst *CreatePool) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[18:]
}

func (inst CreatePool) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreatePool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreatePool) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreatePool) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Index == nil {
			return errors.New("index parameter is not set")
		}
		if inst.BaseAmountIn == nil {
			return errors.New("baseAmountIn parameter is not set")
		}
		if inst.QuoteAmountIn == nil {
			return errors.New("quoteAmountIn parameter is not set")
		}
		if inst.CoinCreator == nil {
			return errors.New("coinCreator parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 18 {
		return errors.New("accounts slice has wrong length: expected 18 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.UserPoolTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.PoolBaseTokenAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PoolQuoteTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Token2022Program is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.BaseTokenProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.QuoteTokenProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CreatePool) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreatePool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          Index", *inst.Index))
						paramsBranch.Child(ag_format.Param("   BaseAmountIn", *inst.BaseAmountIn))
						paramsBranch.Child(ag_format.Param("  QuoteAmountIn", *inst.QuoteAmountIn))
						paramsBranch.Child(ag_format.Param("    CoinCreator", *inst.CoinCreator))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           global_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 creator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               base_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              quote_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 lp_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        user_base_token_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       user_quote_token_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        user_pool_token_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        pool_base_token_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("       pool_quote_token_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("      token_2022_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("      base_token_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("     quote_token_program", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("         event_authority", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("                 program", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj CreatePool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `BaseAmountIn` param:
	err = encoder.Encode(obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmountIn` param:
	err = encoder.Encode(obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	// Serialize `CoinCreator` param:
	err = encoder.Encode(obj.CoinCreator)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreatePool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `BaseAmountIn`:
	err = decoder.Decode(&obj.BaseAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmountIn`:
	err = decoder.Decode(&obj.QuoteAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `CoinCreator`:
	err = decoder.Decode(&obj.CoinCreator)
	if err != nil {
		return err
	}
	return nil
}

// NewCreatePoolInstruction declares a new CreatePool instruction with the provided parameters and accounts.
func NewCreatePoolInstruction(
	// Parameters:
	index uint16,
	base_amount_in uint64,
	quote_amount_in uint64,
	coin_creator ag_solanago.PublicKey,
	// Accounts:
	pool ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	userPoolTokenAccount ag_solanago.PublicKey,
	poolBaseTokenAccount ag_solanago.PublicKey,
	poolQuoteTokenAccount ag_solanago.PublicKey,
	baseTokenProgram ag_solanago.PublicKey,
	quoteTokenProgram ag_solanago.PublicKey) *CreatePool {
	return NewCreatePoolInstructionBuilder().
		SetIndex(index).
		SetBaseAmountIn(base_amount_in).
		SetQuoteAmountIn(quote_amount_in).
		SetCoinCreator(coin_creator).
		SetPoolAccount(pool).
		SetCreatorAccount(creator).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetLpMintAccount(lpMint).
		SetUserBaseTokenAccountAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccountAccount(userQuoteTokenAccount).
		SetUserPoolTokenAccountAccount(userPoolTokenAccount).
		SetPoolBaseTokenAccountAccount(poolBaseTokenAccount).
		SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount).
		SetBaseTokenProgramAccount(baseTokenProgram).
		SetQuoteTokenProgramAccount(quoteTokenProgram)
}

// NewSimpleCreatePoolInstruction declares a new CreatePool instruction with the provided parameters and accounts.
func NewSimpleCreatePoolInstruction(
	// Parameters:
	index uint16,
	base_amount_in uint64,
	quote_amount_in uint64,
	coin_creator ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	userBaseTokenAccount ag_solanago.PublicKey,
	userQuoteTokenAccount ag_solanago.PublicKey,
	userPoolTokenAccount ag_solanago.PublicKey,
	poolBaseTokenAccount ag_solanago.PublicKey,
	poolQuoteTokenAccount ag_solanago.PublicKey,
	baseTokenProgram ag_solanago.PublicKey,
	quoteTokenProgram ag_solanago.PublicKey) *CreatePool {
	pool := MustFindPoolAddress(index, creator, baseMint, quoteMint)
	lpMint := MustFindLpMintAddress(pool)
	return NewCreatePoolInstructionBuilder().
		SetIndex(index).
		SetBaseAmountIn(base_amount_in).
		SetQuoteAmountIn(quote_amount_in).
		SetCoinCreator(coin_creator).
		SetPoolAccount(pool).
		SetCreatorAccount(creator).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetLpMintAccount(lpMint).
		SetUserBaseTokenAccountAccount(userBaseTokenAccount).
		SetUserQuoteTokenAccountAccount(userQuoteTokenAccount).
		SetUserPoolTokenAccountAccount(userPoolTokenAccount).
		SetPoolBaseTokenAccountAccount(poolBaseTokenAccount).
		SetPoolQuoteTokenAccountAccount(poolQuoteTokenAccount).
		SetBaseTokenProgramAccount(baseTokenProgram).
		SetQuoteTokenProgramAccount(quoteTokenProgram)
}
