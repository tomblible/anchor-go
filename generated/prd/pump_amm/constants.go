// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"encoding/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

func FindCoinCreatorVaultAuthorityAddress(poolCoinCreator ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x63726561746f725f7661756c74
	seeds = append(seeds, []byte{byte(0x63), byte(0x72), byte(0x65), byte(0x61), byte(0x74), byte(0x6f), byte(0x72), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: poolCoinCreator
	seeds = append(seeds, poolCoinCreator.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindCoinCreatorVaultAuthorityAddress(poolCoinCreator ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindCoinCreatorVaultAuthorityAddress(poolCoinCreator)
	return
}

func FindPoolAddress(index uint16, creator ag_solanago.PublicKey, baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c)})
	// path: index
	argBytes1 := make([]byte, 2)
	binary.LittleEndian.PutUint16(argBytes1, uint16(index))
	seeds = append(seeds, argBytes1)
	// path: creator
	seeds = append(seeds, creator.Bytes())
	// path: baseMint
	seeds = append(seeds, baseMint.Bytes())
	// path: quoteMint
	seeds = append(seeds, quoteMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPoolAddress(index uint16, creator ag_solanago.PublicKey, baseMint ag_solanago.PublicKey, quoteMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindPoolAddress(index, creator, baseMint, quoteMint)
	return
}

func FindLpMintAddress(pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f6f6c5f6c705f6d696e74
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x6c), byte(0x70), byte(0x5f), byte(0x6d), byte(0x69), byte(0x6e), byte(0x74)})
	// path: pool
	seeds = append(seeds, pool.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindLpMintAddress(pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindLpMintAddress(pool)
	return
}
