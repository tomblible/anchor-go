// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClaimTokenIncentives is the `claim_token_incentives` instruction.
type ClaimTokenIncentives struct {

	// [0] = [] user
	//
	// [1] = [WRITE] user_ata
	//
	// [2] = [] global_volume_accumulator
	//
	// [3] = [WRITE] global_incentive_token_account
	//
	// [4] = [WRITE] user_volume_accumulator
	//
	// [5] = [] mint
	//
	// [6] = [] token_program
	//
	// [7] = [] system_program
	//
	// [8] = [] associated_token_program
	//
	// [9] = [] event_authority
	//
	// [10] = [] program
	//
	// [11] = [WRITE, SIGNER] payer
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimTokenIncentivesInstructionBuilder creates a new `ClaimTokenIncentives` instruction builder.
func NewClaimTokenIncentivesInstructionBuilder() *ClaimTokenIncentives {
	nd := &ClaimTokenIncentives{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(GlobalVolumeAccumulatorPDA)
	nd.AccountMetaSlice[7] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[9] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[10] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetUserAccount sets the "user" account.
func (inst *ClaimTokenIncentives) SetUserAccount(user ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user)
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *ClaimTokenIncentives) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAtaAccount sets the "user_ata" account.
func (inst *ClaimTokenIncentives) SetUserAtaAccount(userAta ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userAta).WRITE()
	return inst
}

// GetUserAtaAccount gets the "user_ata" account.
func (inst *ClaimTokenIncentives) GetUserAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGlobalVolumeAccumulatorAccount sets the "global_volume_accumulator" account.
func (inst *ClaimTokenIncentives) SetGlobalVolumeAccumulatorAccount(globalVolumeAccumulator ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(globalVolumeAccumulator)
	return inst
}

// GetGlobalVolumeAccumulatorAccount gets the "global_volume_accumulator" account.
func (inst *ClaimTokenIncentives) GetGlobalVolumeAccumulatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGlobalIncentiveTokenAccountAccount sets the "global_incentive_token_account" account.
func (inst *ClaimTokenIncentives) SetGlobalIncentiveTokenAccountAccount(globalIncentiveTokenAccount ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(globalIncentiveTokenAccount).WRITE()
	return inst
}

// GetGlobalIncentiveTokenAccountAccount gets the "global_incentive_token_account" account.
func (inst *ClaimTokenIncentives) GetGlobalIncentiveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserVolumeAccumulatorAccount sets the "user_volume_accumulator" account.
func (inst *ClaimTokenIncentives) SetUserVolumeAccumulatorAccount(userVolumeAccumulator ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userVolumeAccumulator).WRITE()
	return inst
}

// GetUserVolumeAccumulatorAccount gets the "user_volume_accumulator" account.
func (inst *ClaimTokenIncentives) GetUserVolumeAccumulatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
func (inst *ClaimTokenIncentives) SetMintAccount(mint ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ClaimTokenIncentives) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *ClaimTokenIncentives) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *ClaimTokenIncentives) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *ClaimTokenIncentives) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *ClaimTokenIncentives) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *ClaimTokenIncentives) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *ClaimTokenIncentives) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *ClaimTokenIncentives) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *ClaimTokenIncentives) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProgramAccount sets the "program" account.
func (inst *ClaimTokenIncentives) SetProgramAccount(program ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *ClaimTokenIncentives) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetPayerAccount sets the "payer" account.
func (inst *ClaimTokenIncentives) SetPayerAccount(payer ag_solanago.PublicKey) *ClaimTokenIncentives {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ClaimTokenIncentives) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst *ClaimTokenIncentives) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ClaimTokenIncentives) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ClaimTokenIncentives {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:12], metas...)
	return inst
}

func (inst *ClaimTokenIncentives) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12:]
}

func (inst ClaimTokenIncentives) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimTokenIncentives,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimTokenIncentives) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimTokenIncentives) Validate() error {
	if len(inst.AccountMetaSlice) < 12 {
		return errors.New("accounts slice has wrong length: expected 12 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserAta is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.GlobalVolumeAccumulator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.GlobalIncentiveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserVolumeAccumulator is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Payer is not set")
		}
	}
	return nil
}

func (inst *ClaimTokenIncentives) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimTokenIncentives")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 user_ata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("global_volume_accumulator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  global_incentive_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  user_volume_accumulator", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                     mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            token_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           system_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" associated_token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          event_authority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                    payer", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj ClaimTokenIncentives) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClaimTokenIncentives) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClaimTokenIncentivesInstruction declares a new ClaimTokenIncentives instruction with the provided parameters and accounts.
func NewClaimTokenIncentivesInstruction(
	// Accounts:
	user ag_solanago.PublicKey,
	userAta ag_solanago.PublicKey,
	globalIncentiveTokenAccount ag_solanago.PublicKey,
	userVolumeAccumulator ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *ClaimTokenIncentives {
	return NewClaimTokenIncentivesInstructionBuilder().
		SetUserAccount(user).
		SetUserAtaAccount(userAta).
		SetGlobalIncentiveTokenAccountAccount(globalIncentiveTokenAccount).
		SetUserVolumeAccumulatorAccount(userVolumeAccumulator).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetPayerAccount(payer)
}

// NewSimpleClaimTokenIncentivesInstruction declares a new ClaimTokenIncentives instruction with the provided parameters and accounts.
func NewSimpleClaimTokenIncentivesInstruction(
	// Accounts:
	user ag_solanago.PublicKey,
	userAta ag_solanago.PublicKey,
	globalIncentiveTokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *ClaimTokenIncentives {
	userVolumeAccumulator := MustFindUserVolumeAccumulatorAddress(user)
	return NewClaimTokenIncentivesInstructionBuilder().
		SetUserAccount(user).
		SetUserAtaAccount(userAta).
		SetGlobalIncentiveTokenAccountAccount(globalIncentiveTokenAccount).
		SetUserVolumeAccumulatorAccount(userVolumeAccumulator).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetPayerAccount(payer)
}
