// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminUpdateTokenIncentives is the `admin_update_token_incentives` instruction.
type AdminUpdateTokenIncentives struct {
	StartTime         *int64
	EndTime           *int64
	SecondsInADay     *int64
	DayNumber         *uint64
	TokenSupplyPerDay *uint64

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [] global_config
	//
	// [2] = [WRITE] global_volume_accumulator
	//
	// [3] = [] mint
	//
	// [4] = [WRITE] global_incentive_token_account
	//
	// [5] = [] associated_token_program
	//
	// [6] = [] system_program
	//
	// [7] = [] token_program
	//
	// [8] = [] event_authority
	//
	// [9] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminUpdateTokenIncentivesInstructionBuilder creates a new `AdminUpdateTokenIncentives` instruction builder.
func NewAdminUpdateTokenIncentivesInstructionBuilder() *AdminUpdateTokenIncentives {
	nd := &AdminUpdateTokenIncentives{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(GlobalVolumeAccumulatorPDA).WRITE()
	nd.AccountMetaSlice[5] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[6] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[9] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetStartTime sets the "start_time" parameter.
func (inst *AdminUpdateTokenIncentives) SetStartTime(start_time int64) *AdminUpdateTokenIncentives {
	inst.StartTime = &start_time
	return inst
}

// SetEndTime sets the "end_time" parameter.
func (inst *AdminUpdateTokenIncentives) SetEndTime(end_time int64) *AdminUpdateTokenIncentives {
	inst.EndTime = &end_time
	return inst
}

// SetSecondsInADay sets the "seconds_in_a_day" parameter.
func (inst *AdminUpdateTokenIncentives) SetSecondsInADay(seconds_in_a_day int64) *AdminUpdateTokenIncentives {
	inst.SecondsInADay = &seconds_in_a_day
	return inst
}

// SetDayNumber sets the "day_number" parameter.
func (inst *AdminUpdateTokenIncentives) SetDayNumber(day_number uint64) *AdminUpdateTokenIncentives {
	inst.DayNumber = &day_number
	return inst
}

// SetTokenSupplyPerDay sets the "token_supply_per_day" parameter.
func (inst *AdminUpdateTokenIncentives) SetTokenSupplyPerDay(token_supply_per_day uint64) *AdminUpdateTokenIncentives {
	inst.TokenSupplyPerDay = &token_supply_per_day
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *AdminUpdateTokenIncentives) SetAdminAccount(admin ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AdminUpdateTokenIncentives) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalConfigAccount sets the "global_config" account.
func (inst *AdminUpdateTokenIncentives) SetGlobalConfigAccount(globalConfig ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalConfig)
	return inst
}

// GetGlobalConfigAccount gets the "global_config" account.
func (inst *AdminUpdateTokenIncentives) GetGlobalConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGlobalVolumeAccumulatorAccount sets the "global_volume_accumulator" account.
func (inst *AdminUpdateTokenIncentives) SetGlobalVolumeAccumulatorAccount(globalVolumeAccumulator ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(globalVolumeAccumulator).WRITE()
	return inst
}

// GetGlobalVolumeAccumulatorAccount gets the "global_volume_accumulator" account.
func (inst *AdminUpdateTokenIncentives) GetGlobalVolumeAccumulatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *AdminUpdateTokenIncentives) SetMintAccount(mint ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *AdminUpdateTokenIncentives) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetGlobalIncentiveTokenAccountAccount sets the "global_incentive_token_account" account.
func (inst *AdminUpdateTokenIncentives) SetGlobalIncentiveTokenAccountAccount(globalIncentiveTokenAccount ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(globalIncentiveTokenAccount).WRITE()
	return inst
}

// GetGlobalIncentiveTokenAccountAccount gets the "global_incentive_token_account" account.
func (inst *AdminUpdateTokenIncentives) GetGlobalIncentiveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *AdminUpdateTokenIncentives) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *AdminUpdateTokenIncentives) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AdminUpdateTokenIncentives) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AdminUpdateTokenIncentives) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *AdminUpdateTokenIncentives) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *AdminUpdateTokenIncentives) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *AdminUpdateTokenIncentives) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *AdminUpdateTokenIncentives) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProgramAccount sets the "program" account.
func (inst *AdminUpdateTokenIncentives) SetProgramAccount(program ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AdminUpdateTokenIncentives) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *AdminUpdateTokenIncentives) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AdminUpdateTokenIncentives) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AdminUpdateTokenIncentives {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *AdminUpdateTokenIncentives) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst AdminUpdateTokenIncentives) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminUpdateTokenIncentives,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminUpdateTokenIncentives) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminUpdateTokenIncentives) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.StartTime == nil {
			return errors.New("startTime parameter is not set")
		}
		if inst.EndTime == nil {
			return errors.New("endTime parameter is not set")
		}
		if inst.SecondsInADay == nil {
			return errors.New("secondsInADay parameter is not set")
		}
		if inst.DayNumber == nil {
			return errors.New("dayNumber parameter is not set")
		}
		if inst.TokenSupplyPerDay == nil {
			return errors.New("tokenSupplyPerDay parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.GlobalVolumeAccumulator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.GlobalIncentiveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AdminUpdateTokenIncentives) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminUpdateTokenIncentives")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("           StartTime", *inst.StartTime))
						paramsBranch.Child(ag_format.Param("             EndTime", *inst.EndTime))
						paramsBranch.Child(ag_format.Param("       SecondsInADay", *inst.SecondsInADay))
						paramsBranch.Child(ag_format.Param("           DayNumber", *inst.DayNumber))
						paramsBranch.Child(ag_format.Param("   TokenSupplyPerDay", *inst.TokenSupplyPerDay))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            global_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("global_volume_accumulator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                     mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  global_incentive_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" associated_token_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           system_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            token_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          event_authority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                  program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj AdminUpdateTokenIncentives) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	// Serialize `SecondsInADay` param:
	err = encoder.Encode(obj.SecondsInADay)
	if err != nil {
		return err
	}
	// Serialize `DayNumber` param:
	err = encoder.Encode(obj.DayNumber)
	if err != nil {
		return err
	}
	// Serialize `TokenSupplyPerDay` param:
	err = encoder.Encode(obj.TokenSupplyPerDay)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AdminUpdateTokenIncentives) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	// Deserialize `SecondsInADay`:
	err = decoder.Decode(&obj.SecondsInADay)
	if err != nil {
		return err
	}
	// Deserialize `DayNumber`:
	err = decoder.Decode(&obj.DayNumber)
	if err != nil {
		return err
	}
	// Deserialize `TokenSupplyPerDay`:
	err = decoder.Decode(&obj.TokenSupplyPerDay)
	if err != nil {
		return err
	}
	return nil
}

// NewAdminUpdateTokenIncentivesInstruction declares a new AdminUpdateTokenIncentives instruction with the provided parameters and accounts.
func NewAdminUpdateTokenIncentivesInstruction(
	// Parameters:
	start_time int64,
	end_time int64,
	seconds_in_a_day int64,
	day_number uint64,
	token_supply_per_day uint64,
	// Accounts:
	admin ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	globalIncentiveTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	return NewAdminUpdateTokenIncentivesInstructionBuilder().
		SetStartTime(start_time).
		SetEndTime(end_time).
		SetSecondsInADay(seconds_in_a_day).
		SetDayNumber(day_number).
		SetTokenSupplyPerDay(token_supply_per_day).
		SetAdminAccount(admin).
		SetGlobalConfigAccount(globalConfig).
		SetMintAccount(mint).
		SetGlobalIncentiveTokenAccountAccount(globalIncentiveTokenAccount).
		SetTokenProgramAccount(tokenProgram)
}

// NewSimpleAdminUpdateTokenIncentivesInstruction declares a new AdminUpdateTokenIncentives instruction with the provided parameters and accounts.
func NewSimpleAdminUpdateTokenIncentivesInstruction(
	// Parameters:
	start_time int64,
	end_time int64,
	seconds_in_a_day int64,
	day_number uint64,
	token_supply_per_day uint64,
	// Accounts:
	admin ag_solanago.PublicKey,
	globalConfig ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	globalIncentiveTokenAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *AdminUpdateTokenIncentives {
	return NewAdminUpdateTokenIncentivesInstructionBuilder().
		SetStartTime(start_time).
		SetEndTime(end_time).
		SetSecondsInADay(seconds_in_a_day).
		SetDayNumber(day_number).
		SetTokenSupplyPerDay(token_supply_per_day).
		SetAdminAccount(admin).
		SetGlobalConfigAccount(globalConfig).
		SetMintAccount(mint).
		SetGlobalIncentiveTokenAccountAccount(globalIncentiveTokenAccount).
		SetTokenProgramAccount(tokenProgram)
}
