// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package pump_amm

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type BondingCurveAccount struct {
	VirtualTokenReserves uint64
	VirtualSolReserves   uint64
	RealTokenReserves    uint64
	RealSolReserves      uint64
	TokenTotalSupply     uint64
	Complete             bool
	Creator              ag_solanago.PublicKey
}

var BondingCurveAccountDiscriminator = [8]byte{23, 183, 248, 55, 96, 216, 172, 96}

func (obj BondingCurveAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BondingCurveAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `VirtualTokenReserves` param:
	err = encoder.Encode(obj.VirtualTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `VirtualSolReserves` param:
	err = encoder.Encode(obj.VirtualSolReserves)
	if err != nil {
		return err
	}
	// Serialize `RealTokenReserves` param:
	err = encoder.Encode(obj.RealTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `RealSolReserves` param:
	err = encoder.Encode(obj.RealSolReserves)
	if err != nil {
		return err
	}
	// Serialize `TokenTotalSupply` param:
	err = encoder.Encode(obj.TokenTotalSupply)
	if err != nil {
		return err
	}
	// Serialize `Complete` param:
	err = encoder.Encode(obj.Complete)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BondingCurveAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BondingCurveAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[23 183 248 55 96 216 172 96]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `VirtualTokenReserves`:
	err = decoder.Decode(&obj.VirtualTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `VirtualSolReserves`:
	err = decoder.Decode(&obj.VirtualSolReserves)
	if err != nil {
		return err
	}
	// Deserialize `RealTokenReserves`:
	err = decoder.Decode(&obj.RealTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `RealSolReserves`:
	err = decoder.Decode(&obj.RealSolReserves)
	if err != nil {
		return err
	}
	// Deserialize `TokenTotalSupply`:
	err = decoder.Decode(&obj.TokenTotalSupply)
	if err != nil {
		return err
	}
	// Deserialize `Complete`:
	err = decoder.Decode(&obj.Complete)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	return nil
}

type GlobalConfigAccount struct {
	// The admin pubkey
	Admin ag_solanago.PublicKey

	// The lp fee in basis points (0.01%)
	LpFeeBasisPoints uint64

	// The protocol fee in basis points (0.01%)
	ProtocolFeeBasisPoints uint64

	// Flags to disable certain functionality
	// bit 0 - Disable create pool
	// bit 1 - Disable deposit
	// bit 2 - Disable withdraw
	// bit 3 - Disable buy
	// bit 4 - Disable sell
	DisableFlags uint8

	// Addresses of the protocol fee recipients
	ProtocolFeeRecipients [8]ag_solanago.PublicKey

	// The coin creator fee in basis points (0.01%)
	CoinCreatorFeeBasisPoints uint64

	// The admin authority for setting coin creators
	AdminSetCoinCreatorAuthority ag_solanago.PublicKey
}

var GlobalConfigAccountDiscriminator = [8]byte{149, 8, 156, 202, 160, 252, 176, 217}

func (obj GlobalConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GlobalConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `LpFeeBasisPoints` param:
	err = encoder.Encode(obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeBasisPoints` param:
	err = encoder.Encode(obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `DisableFlags` param:
	err = encoder.Encode(obj.DisableFlags)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRecipients` param:
	err = encoder.Encode(obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	// Serialize `CoinCreatorFeeBasisPoints` param:
	err = encoder.Encode(obj.CoinCreatorFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `AdminSetCoinCreatorAuthority` param:
	err = encoder.Encode(obj.AdminSetCoinCreatorAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GlobalConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GlobalConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[149 8 156 202 160 252 176 217]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `LpFeeBasisPoints`:
	err = decoder.Decode(&obj.LpFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeBasisPoints`:
	err = decoder.Decode(&obj.ProtocolFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `DisableFlags`:
	err = decoder.Decode(&obj.DisableFlags)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRecipients`:
	err = decoder.Decode(&obj.ProtocolFeeRecipients)
	if err != nil {
		return err
	}
	// Deserialize `CoinCreatorFeeBasisPoints`:
	err = decoder.Decode(&obj.CoinCreatorFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `AdminSetCoinCreatorAuthority`:
	err = decoder.Decode(&obj.AdminSetCoinCreatorAuthority)
	if err != nil {
		return err
	}
	return nil
}

type GlobalVolumeAccumulatorAccount struct {
	StartTime        int64
	EndTime          int64
	SecondsInADay    int64
	Mint             ag_solanago.PublicKey
	TotalTokenSupply [30]uint64
	SolVolumes       [30]uint64
}

var GlobalVolumeAccumulatorAccountDiscriminator = [8]byte{202, 42, 246, 43, 142, 190, 30, 255}

func (obj GlobalVolumeAccumulatorAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GlobalVolumeAccumulatorAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	// Serialize `SecondsInADay` param:
	err = encoder.Encode(obj.SecondsInADay)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `TotalTokenSupply` param:
	err = encoder.Encode(obj.TotalTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `SolVolumes` param:
	err = encoder.Encode(obj.SolVolumes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GlobalVolumeAccumulatorAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GlobalVolumeAccumulatorAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[202 42 246 43 142 190 30 255]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	// Deserialize `SecondsInADay`:
	err = decoder.Decode(&obj.SecondsInADay)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `TotalTokenSupply`:
	err = decoder.Decode(&obj.TotalTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `SolVolumes`:
	err = decoder.Decode(&obj.SolVolumes)
	if err != nil {
		return err
	}
	return nil
}

type PoolAccount struct {
	PoolBump              uint8
	Index                 uint16
	Creator               ag_solanago.PublicKey
	BaseMint              ag_solanago.PublicKey
	QuoteMint             ag_solanago.PublicKey
	LpMint                ag_solanago.PublicKey
	PoolBaseTokenAccount  ag_solanago.PublicKey
	PoolQuoteTokenAccount ag_solanago.PublicKey

	// True circulating supply without burns and lock-ups
	LpSupply    uint64
	CoinCreator ag_solanago.PublicKey
}

var PoolAccountDiscriminator = [8]byte{241, 154, 109, 4, 17, 177, 109, 188}

func (obj PoolAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PoolBump` param:
	err = encoder.Encode(obj.PoolBump)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `PoolBaseTokenAccount` param:
	err = encoder.Encode(obj.PoolBaseTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `PoolQuoteTokenAccount` param:
	err = encoder.Encode(obj.PoolQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `LpSupply` param:
	err = encoder.Encode(obj.LpSupply)
	if err != nil {
		return err
	}
	// Serialize `CoinCreator` param:
	err = encoder.Encode(obj.CoinCreator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[241 154 109 4 17 177 109 188]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PoolBump`:
	err = decoder.Decode(&obj.PoolBump)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `PoolBaseTokenAccount`:
	err = decoder.Decode(&obj.PoolBaseTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `PoolQuoteTokenAccount`:
	err = decoder.Decode(&obj.PoolQuoteTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `LpSupply`:
	err = decoder.Decode(&obj.LpSupply)
	if err != nil {
		return err
	}
	// Deserialize `CoinCreator`:
	err = decoder.Decode(&obj.CoinCreator)
	if err != nil {
		return err
	}
	return nil
}

type UserVolumeAccumulatorAccount struct {
	User                  ag_solanago.PublicKey
	NeedsClaim            bool
	TotalUnclaimedTokens  uint64
	TotalClaimedTokens    uint64
	CurrentSolVolume      uint64
	LastUpdateTimestamp   int64
	HasTotalClaimedTokens bool
}

var UserVolumeAccumulatorAccountDiscriminator = [8]byte{86, 255, 112, 14, 102, 53, 154, 250}

func (obj UserVolumeAccumulatorAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserVolumeAccumulatorAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `NeedsClaim` param:
	err = encoder.Encode(obj.NeedsClaim)
	if err != nil {
		return err
	}
	// Serialize `TotalUnclaimedTokens` param:
	err = encoder.Encode(obj.TotalUnclaimedTokens)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedTokens` param:
	err = encoder.Encode(obj.TotalClaimedTokens)
	if err != nil {
		return err
	}
	// Serialize `CurrentSolVolume` param:
	err = encoder.Encode(obj.CurrentSolVolume)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTimestamp` param:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Serialize `HasTotalClaimedTokens` param:
	err = encoder.Encode(obj.HasTotalClaimedTokens)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserVolumeAccumulatorAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserVolumeAccumulatorAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[86 255 112 14 102 53 154 250]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `NeedsClaim`:
	err = decoder.Decode(&obj.NeedsClaim)
	if err != nil {
		return err
	}
	// Deserialize `TotalUnclaimedTokens`:
	err = decoder.Decode(&obj.TotalUnclaimedTokens)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedTokens`:
	err = decoder.Decode(&obj.TotalClaimedTokens)
	if err != nil {
		return err
	}
	// Deserialize `CurrentSolVolume`:
	err = decoder.Decode(&obj.CurrentSolVolume)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `HasTotalClaimedTokens`:
	err = decoder.Decode(&obj.HasTotalClaimedTokens)
	if err != nil {
		return err
	}
	return nil
}
