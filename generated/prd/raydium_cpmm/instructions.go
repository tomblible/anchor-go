// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_cpmm

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

const ProgramName = "RaydiumCpmm"

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var ()

var (
	Instruction_CreateAmmConfig = ag_binary.TypeID([8]byte{137, 52, 237, 212, 215, 117, 108, 104})

	Instruction_UpdateAmmConfig = ag_binary.TypeID([8]byte{49, 60, 174, 136, 154, 28, 116, 200})

	Instruction_UpdatePoolStatus = ag_binary.TypeID([8]byte{130, 87, 108, 6, 46, 224, 117, 123})

	Instruction_CollectProtocolFee = ag_binary.TypeID([8]byte{136, 136, 252, 221, 194, 66, 126, 89})

	Instruction_CollectFundFee = ag_binary.TypeID([8]byte{167, 138, 78, 149, 223, 194, 6, 126})

	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	Instruction_Deposit = ag_binary.TypeID([8]byte{242, 35, 198, 137, 82, 225, 242, 182})

	Instruction_Withdraw = ag_binary.TypeID([8]byte{183, 18, 70, 156, 148, 109, 161, 34})

	Instruction_SwapBaseInput = ag_binary.TypeID([8]byte{143, 190, 90, 218, 196, 30, 51, 222})

	Instruction_SwapBaseOutput = ag_binary.TypeID([8]byte{55, 217, 98, 86, 163, 74, 180, 173})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateAmmConfig:
		return "CreateAmmConfig"
	case Instruction_UpdateAmmConfig:
		return "UpdateAmmConfig"
	case Instruction_UpdatePoolStatus:
		return "UpdatePoolStatus"
	case Instruction_CollectProtocolFee:
		return "CollectProtocolFee"
	case Instruction_CollectFundFee:
		return "CollectFundFee"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_Deposit:
		return "Deposit"
	case Instruction_Withdraw:
		return "Withdraw"
	case Instruction_SwapBaseInput:
		return "SwapBaseInput"
	case Instruction_SwapBaseOutput:
		return "SwapBaseOutput"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "create_amm_config", Type: (*CreateAmmConfig)(nil),
		},
		{
			Name: "update_amm_config", Type: (*UpdateAmmConfig)(nil),
		},
		{
			Name: "update_pool_status", Type: (*UpdatePoolStatus)(nil),
		},
		{
			Name: "collect_protocol_fee", Type: (*CollectProtocolFee)(nil),
		},
		{
			Name: "collect_fund_fee", Type: (*CollectFundFee)(nil),
		},
		{
			Name: "initialize", Type: (*Initialize)(nil),
		},
		{
			Name: "deposit", Type: (*Deposit)(nil),
		},
		{
			Name: "withdraw", Type: (*Withdraw)(nil),
		},
		{
			Name: "swap_base_input", Type: (*SwapBaseInput)(nil),
		},
		{
			Name: "swap_base_output", Type: (*SwapBaseOutput)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
