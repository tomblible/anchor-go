// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_cpmm

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Observation struct {
	BlockTimestamp           uint64
	CumulativeToken0PriceX32 ag_binary.Uint128
	CumulativeToken1PriceX32 ag_binary.Uint128
}

func (obj Observation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BlockTimestamp` param:
	err = encoder.Encode(obj.BlockTimestamp)
	if err != nil {
		return err
	}
	// Serialize `CumulativeToken0PriceX32` param:
	err = encoder.Encode(obj.CumulativeToken0PriceX32)
	if err != nil {
		return err
	}
	// Serialize `CumulativeToken1PriceX32` param:
	err = encoder.Encode(obj.CumulativeToken1PriceX32)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Observation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BlockTimestamp`:
	err = decoder.Decode(&obj.BlockTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeToken0PriceX32`:
	err = decoder.Decode(&obj.CumulativeToken0PriceX32)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeToken1PriceX32`:
	err = decoder.Decode(&obj.CumulativeToken1PriceX32)
	if err != nil {
		return err
	}
	return nil
}

type TradeDirection ag_binary.BorshEnum

const (
	TradeDirectionZeroForOne TradeDirection = iota
	TradeDirectionOneForZero
)

func (value TradeDirection) String() string {
	switch value {
	case TradeDirectionZeroForOne:
		return "ZeroForOne"
	case TradeDirectionOneForZero:
		return "OneForZero"
	default:
		return ""
	}
}

type RoundDirection ag_binary.BorshEnum

const (
	RoundDirectionFloor RoundDirection = iota
	RoundDirectionCeiling
)

func (value RoundDirection) String() string {
	switch value {
	case RoundDirectionFloor:
		return "Floor"
	case RoundDirectionCeiling:
		return "Ceiling"
	default:
		return ""
	}
}

type PoolStatusBitIndex ag_binary.BorshEnum

const (
	PoolStatusBitIndexDeposit PoolStatusBitIndex = iota
	PoolStatusBitIndexWithdraw
	PoolStatusBitIndexSwap
)

func (value PoolStatusBitIndex) String() string {
	switch value {
	case PoolStatusBitIndexDeposit:
		return "Deposit"
	case PoolStatusBitIndexWithdraw:
		return "Withdraw"
	case PoolStatusBitIndexSwap:
		return "Swap"
	default:
		return ""
	}
}

type PoolStatusBitFlag ag_binary.BorshEnum

const (
	PoolStatusBitFlagEnable PoolStatusBitFlag = iota
	PoolStatusBitFlagDisable
)

func (value PoolStatusBitFlag) String() string {
	switch value {
	case PoolStatusBitFlagEnable:
		return "Enable"
	case PoolStatusBitFlagDisable:
		return "Disable"
	default:
		return ""
	}
}

type AmmConfig struct {
	Bump              uint8
	DisableCreatePool bool
	Index             uint16
	TradeFeeRate      uint64
	ProtocolFeeRate   uint64
	FundFeeRate       uint64
	CreatePoolFee     uint64
	ProtocolOwner     ag_solanago.PublicKey
	FundOwner         ag_solanago.PublicKey
	padding           [16]uint64
}

func (obj AmmConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `DisableCreatePool` param:
	err = encoder.Encode(obj.DisableCreatePool)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeRate` param:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `FundFeeRate` param:
	err = encoder.Encode(obj.FundFeeRate)
	if err != nil {
		return err
	}
	// Serialize `CreatePoolFee` param:
	err = encoder.Encode(obj.CreatePoolFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolOwner` param:
	err = encoder.Encode(obj.ProtocolOwner)
	if err != nil {
		return err
	}
	// Serialize `FundOwner` param:
	err = encoder.Encode(obj.FundOwner)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AmmConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `DisableCreatePool`:
	err = decoder.Decode(&obj.DisableCreatePool)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `FundFeeRate`:
	err = decoder.Decode(&obj.FundFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `CreatePoolFee`:
	err = decoder.Decode(&obj.CreatePoolFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolOwner`:
	err = decoder.Decode(&obj.ProtocolOwner)
	if err != nil {
		return err
	}
	// Deserialize `FundOwner`:
	err = decoder.Decode(&obj.FundOwner)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type ObservationState struct {
	Initialized      bool
	ObservationIndex uint16
	PoolId           ag_solanago.PublicKey
	Observations     [100]Observation
	padding          [4]uint64
}

func (obj ObservationState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `ObservationIndex` param:
	err = encoder.Encode(obj.ObservationIndex)
	if err != nil {
		return err
	}
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `Observations` param:
	err = encoder.Encode(obj.Observations)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ObservationState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `ObservationIndex`:
	err = decoder.Decode(&obj.ObservationIndex)
	if err != nil {
		return err
	}
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `Observations`:
	err = decoder.Decode(&obj.Observations)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type PoolState struct {
	AmmConfig          ag_solanago.PublicKey
	PoolCreator        ag_solanago.PublicKey
	Token0Vault        ag_solanago.PublicKey
	Token1Vault        ag_solanago.PublicKey
	LpMint             ag_solanago.PublicKey
	Token0Mint         ag_solanago.PublicKey
	Token1Mint         ag_solanago.PublicKey
	Token0Program      ag_solanago.PublicKey
	Token1Program      ag_solanago.PublicKey
	ObservationKey     ag_solanago.PublicKey
	AuthBump           uint8
	Status             uint8
	LpMintDecimals     uint8
	Mint0Decimals      uint8
	Mint1Decimals      uint8
	LpSupply           uint64
	ProtocolFeesToken0 uint64
	ProtocolFeesToken1 uint64
	FundFeesToken0     uint64
	FundFeesToken1     uint64
	OpenTime           uint64
	RecentEpoch        uint64
	padding            [31]uint64
}

func (obj PoolState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmmConfig` param:
	err = encoder.Encode(obj.AmmConfig)
	if err != nil {
		return err
	}
	// Serialize `PoolCreator` param:
	err = encoder.Encode(obj.PoolCreator)
	if err != nil {
		return err
	}
	// Serialize `Token0Vault` param:
	err = encoder.Encode(obj.Token0Vault)
	if err != nil {
		return err
	}
	// Serialize `Token1Vault` param:
	err = encoder.Encode(obj.Token1Vault)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `Token0Mint` param:
	err = encoder.Encode(obj.Token0Mint)
	if err != nil {
		return err
	}
	// Serialize `Token1Mint` param:
	err = encoder.Encode(obj.Token1Mint)
	if err != nil {
		return err
	}
	// Serialize `Token0Program` param:
	err = encoder.Encode(obj.Token0Program)
	if err != nil {
		return err
	}
	// Serialize `Token1Program` param:
	err = encoder.Encode(obj.Token1Program)
	if err != nil {
		return err
	}
	// Serialize `ObservationKey` param:
	err = encoder.Encode(obj.ObservationKey)
	if err != nil {
		return err
	}
	// Serialize `AuthBump` param:
	err = encoder.Encode(obj.AuthBump)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `LpMintDecimals` param:
	err = encoder.Encode(obj.LpMintDecimals)
	if err != nil {
		return err
	}
	// Serialize `Mint0Decimals` param:
	err = encoder.Encode(obj.Mint0Decimals)
	if err != nil {
		return err
	}
	// Serialize `Mint1Decimals` param:
	err = encoder.Encode(obj.Mint1Decimals)
	if err != nil {
		return err
	}
	// Serialize `LpSupply` param:
	err = encoder.Encode(obj.LpSupply)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesToken0` param:
	err = encoder.Encode(obj.ProtocolFeesToken0)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesToken1` param:
	err = encoder.Encode(obj.ProtocolFeesToken1)
	if err != nil {
		return err
	}
	// Serialize `FundFeesToken0` param:
	err = encoder.Encode(obj.FundFeesToken0)
	if err != nil {
		return err
	}
	// Serialize `FundFeesToken1` param:
	err = encoder.Encode(obj.FundFeesToken1)
	if err != nil {
		return err
	}
	// Serialize `OpenTime` param:
	err = encoder.Encode(obj.OpenTime)
	if err != nil {
		return err
	}
	// Serialize `RecentEpoch` param:
	err = encoder.Encode(obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmmConfig`:
	err = decoder.Decode(&obj.AmmConfig)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreator`:
	err = decoder.Decode(&obj.PoolCreator)
	if err != nil {
		return err
	}
	// Deserialize `Token0Vault`:
	err = decoder.Decode(&obj.Token0Vault)
	if err != nil {
		return err
	}
	// Deserialize `Token1Vault`:
	err = decoder.Decode(&obj.Token1Vault)
	if err != nil {
		return err
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `Token0Mint`:
	err = decoder.Decode(&obj.Token0Mint)
	if err != nil {
		return err
	}
	// Deserialize `Token1Mint`:
	err = decoder.Decode(&obj.Token1Mint)
	if err != nil {
		return err
	}
	// Deserialize `Token0Program`:
	err = decoder.Decode(&obj.Token0Program)
	if err != nil {
		return err
	}
	// Deserialize `Token1Program`:
	err = decoder.Decode(&obj.Token1Program)
	if err != nil {
		return err
	}
	// Deserialize `ObservationKey`:
	err = decoder.Decode(&obj.ObservationKey)
	if err != nil {
		return err
	}
	// Deserialize `AuthBump`:
	err = decoder.Decode(&obj.AuthBump)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `LpMintDecimals`:
	err = decoder.Decode(&obj.LpMintDecimals)
	if err != nil {
		return err
	}
	// Deserialize `Mint0Decimals`:
	err = decoder.Decode(&obj.Mint0Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Mint1Decimals`:
	err = decoder.Decode(&obj.Mint1Decimals)
	if err != nil {
		return err
	}
	// Deserialize `LpSupply`:
	err = decoder.Decode(&obj.LpSupply)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesToken0`:
	err = decoder.Decode(&obj.ProtocolFeesToken0)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesToken1`:
	err = decoder.Decode(&obj.ProtocolFeesToken1)
	if err != nil {
		return err
	}
	// Deserialize `FundFeesToken0`:
	err = decoder.Decode(&obj.FundFeesToken0)
	if err != nil {
		return err
	}
	// Deserialize `FundFeesToken1`:
	err = decoder.Decode(&obj.FundFeesToken1)
	if err != nil {
		return err
	}
	// Deserialize `OpenTime`:
	err = decoder.Decode(&obj.OpenTime)
	if err != nil {
		return err
	}
	// Deserialize `RecentEpoch`:
	err = decoder.Decode(&obj.RecentEpoch)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type LpChangeEvent struct {
	PoolId            ag_solanago.PublicKey
	LpAmountBefore    uint64
	Token0VaultBefore uint64
	Token1VaultBefore uint64
	Token0Amount      uint64
	Token1Amount      uint64
	Token0TransferFee uint64
	Token1TransferFee uint64
	ChangeType        uint8
}

func (obj LpChangeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `LpAmountBefore` param:
	err = encoder.Encode(obj.LpAmountBefore)
	if err != nil {
		return err
	}
	// Serialize `Token0VaultBefore` param:
	err = encoder.Encode(obj.Token0VaultBefore)
	if err != nil {
		return err
	}
	// Serialize `Token1VaultBefore` param:
	err = encoder.Encode(obj.Token1VaultBefore)
	if err != nil {
		return err
	}
	// Serialize `Token0Amount` param:
	err = encoder.Encode(obj.Token0Amount)
	if err != nil {
		return err
	}
	// Serialize `Token1Amount` param:
	err = encoder.Encode(obj.Token1Amount)
	if err != nil {
		return err
	}
	// Serialize `Token0TransferFee` param:
	err = encoder.Encode(obj.Token0TransferFee)
	if err != nil {
		return err
	}
	// Serialize `Token1TransferFee` param:
	err = encoder.Encode(obj.Token1TransferFee)
	if err != nil {
		return err
	}
	// Serialize `ChangeType` param:
	err = encoder.Encode(obj.ChangeType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LpChangeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `LpAmountBefore`:
	err = decoder.Decode(&obj.LpAmountBefore)
	if err != nil {
		return err
	}
	// Deserialize `Token0VaultBefore`:
	err = decoder.Decode(&obj.Token0VaultBefore)
	if err != nil {
		return err
	}
	// Deserialize `Token1VaultBefore`:
	err = decoder.Decode(&obj.Token1VaultBefore)
	if err != nil {
		return err
	}
	// Deserialize `Token0Amount`:
	err = decoder.Decode(&obj.Token0Amount)
	if err != nil {
		return err
	}
	// Deserialize `Token1Amount`:
	err = decoder.Decode(&obj.Token1Amount)
	if err != nil {
		return err
	}
	// Deserialize `Token0TransferFee`:
	err = decoder.Decode(&obj.Token0TransferFee)
	if err != nil {
		return err
	}
	// Deserialize `Token1TransferFee`:
	err = decoder.Decode(&obj.Token1TransferFee)
	if err != nil {
		return err
	}
	// Deserialize `ChangeType`:
	err = decoder.Decode(&obj.ChangeType)
	if err != nil {
		return err
	}
	return nil
}

type SwapEvent struct {
	PoolId            ag_solanago.PublicKey
	InputVaultBefore  uint64
	OutputVaultBefore uint64
	InputAmount       uint64
	OutputAmount      uint64
	InputTransferFee  uint64
	OutputTransferFee uint64
	BaseInput         bool
}

func (obj SwapEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `InputVaultBefore` param:
	err = encoder.Encode(obj.InputVaultBefore)
	if err != nil {
		return err
	}
	// Serialize `OutputVaultBefore` param:
	err = encoder.Encode(obj.OutputVaultBefore)
	if err != nil {
		return err
	}
	// Serialize `InputAmount` param:
	err = encoder.Encode(obj.InputAmount)
	if err != nil {
		return err
	}
	// Serialize `OutputAmount` param:
	err = encoder.Encode(obj.OutputAmount)
	if err != nil {
		return err
	}
	// Serialize `InputTransferFee` param:
	err = encoder.Encode(obj.InputTransferFee)
	if err != nil {
		return err
	}
	// Serialize `OutputTransferFee` param:
	err = encoder.Encode(obj.OutputTransferFee)
	if err != nil {
		return err
	}
	// Serialize `BaseInput` param:
	err = encoder.Encode(obj.BaseInput)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `InputVaultBefore`:
	err = decoder.Decode(&obj.InputVaultBefore)
	if err != nil {
		return err
	}
	// Deserialize `OutputVaultBefore`:
	err = decoder.Decode(&obj.OutputVaultBefore)
	if err != nil {
		return err
	}
	// Deserialize `InputAmount`:
	err = decoder.Decode(&obj.InputAmount)
	if err != nil {
		return err
	}
	// Deserialize `OutputAmount`:
	err = decoder.Decode(&obj.OutputAmount)
	if err != nil {
		return err
	}
	// Deserialize `InputTransferFee`:
	err = decoder.Decode(&obj.InputTransferFee)
	if err != nil {
		return err
	}
	// Deserialize `OutputTransferFee`:
	err = decoder.Decode(&obj.OutputTransferFee)
	if err != nil {
		return err
	}
	// Deserialize `BaseInput`:
	err = decoder.Decode(&obj.BaseInput)
	if err != nil {
		return err
	}
	return nil
}
