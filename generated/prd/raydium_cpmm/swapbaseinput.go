// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package raydium_cpmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SwapBaseInput is the `swap_base_input` instruction.
type SwapBaseInput struct {
	AmountIn         *uint64
	MinimumAmountOut *uint64

	// [0] = [SIGNER] payer
	//
	// [1] = [] authority
	//
	// [2] = [] amm_config
	//
	// [3] = [WRITE] pool_state
	//
	// [4] = [WRITE] input_token_account
	//
	// [5] = [WRITE] output_token_account
	//
	// [6] = [WRITE] input_vault
	//
	// [7] = [WRITE] output_vault
	//
	// [8] = [] input_token_program
	//
	// [9] = [] output_token_program
	//
	// [10] = [] input_token_mint
	//
	// [11] = [] output_token_mint
	//
	// [12] = [WRITE] observation_state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapBaseInputInstructionBuilder creates a new `SwapBaseInput` instruction builder.
func NewSwapBaseInputInstructionBuilder() *SwapBaseInput {
	nd := &SwapBaseInput{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetAmountIn sets the "amount_in" parameter.
func (inst *SwapBaseInput) SetAmountIn(amount_in uint64) *SwapBaseInput {
	inst.AmountIn = &amount_in
	return inst
}

// SetMinimumAmountOut sets the "minimum_amount_out" parameter.
func (inst *SwapBaseInput) SetMinimumAmountOut(minimum_amount_out uint64) *SwapBaseInput {
	inst.MinimumAmountOut = &minimum_amount_out
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *SwapBaseInput) SetPayerAccount(payer ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *SwapBaseInput) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *SwapBaseInput) SetAuthorityAccount(authority ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *SwapBaseInput) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAmmConfigAccount sets the "amm_config" account.
func (inst *SwapBaseInput) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "amm_config" account.
func (inst *SwapBaseInput) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPoolStateAccount sets the "pool_state" account.
func (inst *SwapBaseInput) SetPoolStateAccount(poolState ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "pool_state" account.
func (inst *SwapBaseInput) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetInputTokenAccountAccount sets the "input_token_account" account.
func (inst *SwapBaseInput) SetInputTokenAccountAccount(inputTokenAccount ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(inputTokenAccount).WRITE()
	return inst
}

// GetInputTokenAccountAccount gets the "input_token_account" account.
func (inst *SwapBaseInput) GetInputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOutputTokenAccountAccount sets the "output_token_account" account.
func (inst *SwapBaseInput) SetOutputTokenAccountAccount(outputTokenAccount ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(outputTokenAccount).WRITE()
	return inst
}

// GetOutputTokenAccountAccount gets the "output_token_account" account.
func (inst *SwapBaseInput) GetOutputTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetInputVaultAccount sets the "input_vault" account.
func (inst *SwapBaseInput) SetInputVaultAccount(inputVault ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(inputVault).WRITE()
	return inst
}

// GetInputVaultAccount gets the "input_vault" account.
func (inst *SwapBaseInput) GetInputVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOutputVaultAccount sets the "output_vault" account.
func (inst *SwapBaseInput) SetOutputVaultAccount(outputVault ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(outputVault).WRITE()
	return inst
}

// GetOutputVaultAccount gets the "output_vault" account.
func (inst *SwapBaseInput) GetOutputVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetInputTokenProgramAccount sets the "input_token_program" account.
func (inst *SwapBaseInput) SetInputTokenProgramAccount(inputTokenProgram ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(inputTokenProgram)
	return inst
}

// GetInputTokenProgramAccount gets the "input_token_program" account.
func (inst *SwapBaseInput) GetInputTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOutputTokenProgramAccount sets the "output_token_program" account.
func (inst *SwapBaseInput) SetOutputTokenProgramAccount(outputTokenProgram ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(outputTokenProgram)
	return inst
}

// GetOutputTokenProgramAccount gets the "output_token_program" account.
func (inst *SwapBaseInput) GetOutputTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetInputTokenMintAccount sets the "input_token_mint" account.
func (inst *SwapBaseInput) SetInputTokenMintAccount(inputTokenMint ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(inputTokenMint)
	return inst
}

// GetInputTokenMintAccount gets the "input_token_mint" account.
func (inst *SwapBaseInput) GetInputTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetOutputTokenMintAccount sets the "output_token_mint" account.
func (inst *SwapBaseInput) SetOutputTokenMintAccount(outputTokenMint ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(outputTokenMint)
	return inst
}

// GetOutputTokenMintAccount gets the "output_token_mint" account.
func (inst *SwapBaseInput) GetOutputTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetObservationStateAccount sets the "observation_state" account.
func (inst *SwapBaseInput) SetObservationStateAccount(observationState ag_solanago.PublicKey) *SwapBaseInput {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(observationState).WRITE()
	return inst
}

// GetObservationStateAccount gets the "observation_state" account.
func (inst *SwapBaseInput) GetObservationStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst *SwapBaseInput) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SwapBaseInput) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SwapBaseInput {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:13], metas...)
	return inst
}

func (inst *SwapBaseInput) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13:]
}

func (inst SwapBaseInput) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SwapBaseInput,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SwapBaseInput) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SwapBaseInput) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountIn == nil {
			return errors.New("amountIn parameter is not set")
		}
		if inst.MinimumAmountOut == nil {
			return errors.New("minimumAmountOut parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 13 {
		return errors.New("accounts slice has wrong length: expected 13 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.InputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.OutputTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.InputVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OutputVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.InputTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.OutputTokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.InputTokenMint is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.OutputTokenMint is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.ObservationState is not set")
		}
	}
	return nil
}

func (inst *SwapBaseInput) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SwapBaseInput")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          AmountIn", *inst.AmountIn))
						paramsBranch.Child(ag_format.Param("  MinimumAmountOut", *inst.MinimumAmountOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          amm_config", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          pool_state", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        input_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       output_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         input_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        output_vault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" input_token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("output_token_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    input_token_mint", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   output_token_mint", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   observation_state", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj SwapBaseInput) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SwapBaseInput) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapBaseInputInstruction declares a new SwapBaseInput instruction with the provided parameters and accounts.
func NewSwapBaseInputInstruction(
	// Parameters:
	amount_in uint64,
	minimum_amount_out uint64,
	// Accounts:
	payer ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	inputVault ag_solanago.PublicKey,
	outputVault ag_solanago.PublicKey,
	inputTokenProgram ag_solanago.PublicKey,
	outputTokenProgram ag_solanago.PublicKey,
	inputTokenMint ag_solanago.PublicKey,
	outputTokenMint ag_solanago.PublicKey,
	observationState ag_solanago.PublicKey) *SwapBaseInput {
	return NewSwapBaseInputInstructionBuilder().
		SetAmountIn(amount_in).
		SetMinimumAmountOut(minimum_amount_out).
		SetPayerAccount(payer).
		SetAuthorityAccount(authority).
		SetAmmConfigAccount(ammConfig).
		SetPoolStateAccount(poolState).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetInputVaultAccount(inputVault).
		SetOutputVaultAccount(outputVault).
		SetInputTokenProgramAccount(inputTokenProgram).
		SetOutputTokenProgramAccount(outputTokenProgram).
		SetInputTokenMintAccount(inputTokenMint).
		SetOutputTokenMintAccount(outputTokenMint).
		SetObservationStateAccount(observationState)
}

// NewSimpleSwapBaseInputInstruction declares a new SwapBaseInput instruction with the provided parameters and accounts.
func NewSimpleSwapBaseInputInstruction(
	// Parameters:
	amount_in uint64,
	minimum_amount_out uint64,
	// Accounts:
	payer ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	inputTokenAccount ag_solanago.PublicKey,
	outputTokenAccount ag_solanago.PublicKey,
	inputVault ag_solanago.PublicKey,
	outputVault ag_solanago.PublicKey,
	inputTokenProgram ag_solanago.PublicKey,
	outputTokenProgram ag_solanago.PublicKey,
	inputTokenMint ag_solanago.PublicKey,
	outputTokenMint ag_solanago.PublicKey,
	observationState ag_solanago.PublicKey) *SwapBaseInput {
	return NewSwapBaseInputInstructionBuilder().
		SetAmountIn(amount_in).
		SetMinimumAmountOut(minimum_amount_out).
		SetPayerAccount(payer).
		SetAuthorityAccount(authority).
		SetAmmConfigAccount(ammConfig).
		SetPoolStateAccount(poolState).
		SetInputTokenAccountAccount(inputTokenAccount).
		SetOutputTokenAccountAccount(outputTokenAccount).
		SetInputVaultAccount(inputVault).
		SetOutputVaultAccount(outputVault).
		SetInputTokenProgramAccount(inputTokenProgram).
		SetOutputTokenProgramAccount(outputTokenProgram).
		SetInputTokenMintAccount(inputTokenMint).
		SetOutputTokenMintAccount(outputTokenMint).
		SetObservationStateAccount(observationState)
}
