// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// user withdraw liquidity from vault, if vault reserve doesn't have enough liquidity, it will withdraw from the strategy firstly
type WithdrawDirectlyFromStrategy struct {
	UnmintAmount *uint64
	MinOutAmount *uint64

	// [0] = [WRITE] vault
	// ··········· vault
	//
	// [1] = [WRITE] strategy
	// ··········· strategy
	//
	// [2] = [WRITE] reserve
	//
	// [3] = [] strategy_program
	//
	// [4] = [WRITE] collateral_vault
	// ··········· collateral_vault
	//
	// [5] = [WRITE] token_vault
	// ··········· token_vault
	//
	// [6] = [WRITE] lp_mint
	// ··········· lp_mint
	//
	// [7] = [WRITE] fee_vault
	// ··········· fee_vault
	//
	// [8] = [WRITE] user_token
	// ··········· user_token
	//
	// [9] = [WRITE] user_lp
	// ··········· user_lp
	//
	// [10] = [SIGNER] user
	// ··········· user
	//
	// [11] = [] token_program
	// ··········· token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawDirectlyFromStrategyInstructionBuilder creates a new `WithdrawDirectlyFromStrategy` instruction builder.
func NewWithdrawDirectlyFromStrategyInstructionBuilder() *WithdrawDirectlyFromStrategy {
	nd := &WithdrawDirectlyFromStrategy{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetUnmintAmount sets the "unmint_amount" parameter.
func (inst *WithdrawDirectlyFromStrategy) SetUnmintAmount(unmint_amount uint64) *WithdrawDirectlyFromStrategy {
	inst.UnmintAmount = &unmint_amount
	return inst
}

// SetMinOutAmount sets the "min_out_amount" parameter.
func (inst *WithdrawDirectlyFromStrategy) SetMinOutAmount(min_out_amount uint64) *WithdrawDirectlyFromStrategy {
	inst.MinOutAmount = &min_out_amount
	return inst
}

// SetVaultAccount sets the "vault" account.
// vault
func (inst *WithdrawDirectlyFromStrategy) SetVaultAccount(vault ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
// vault
func (inst *WithdrawDirectlyFromStrategy) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStrategyAccount sets the "strategy" account.
// strategy
func (inst *WithdrawDirectlyFromStrategy) SetStrategyAccount(strategy ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(strategy).WRITE()
	return inst
}

// GetStrategyAccount gets the "strategy" account.
// strategy
func (inst *WithdrawDirectlyFromStrategy) GetStrategyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetReserveAccount sets the "reserve" account.
func (inst *WithdrawDirectlyFromStrategy) SetReserveAccount(reserve ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(reserve).WRITE()
	return inst
}

// GetReserveAccount gets the "reserve" account.
func (inst *WithdrawDirectlyFromStrategy) GetReserveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetStrategyProgramAccount sets the "strategy_program" account.
func (inst *WithdrawDirectlyFromStrategy) SetStrategyProgramAccount(strategyProgram ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(strategyProgram)
	return inst
}

// GetStrategyProgramAccount gets the "strategy_program" account.
func (inst *WithdrawDirectlyFromStrategy) GetStrategyProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCollateralVaultAccount sets the "collateral_vault" account.
// collateral_vault
func (inst *WithdrawDirectlyFromStrategy) SetCollateralVaultAccount(collateralVault ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(collateralVault).WRITE()
	return inst
}

// GetCollateralVaultAccount gets the "collateral_vault" account.
// collateral_vault
func (inst *WithdrawDirectlyFromStrategy) GetCollateralVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenVaultAccount sets the "token_vault" account.
// token_vault
func (inst *WithdrawDirectlyFromStrategy) SetTokenVaultAccount(tokenVault ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenVault).WRITE()
	return inst
}

// GetTokenVaultAccount gets the "token_vault" account.
// token_vault
func (inst *WithdrawDirectlyFromStrategy) GetTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetLpMintAccount sets the "lp_mint" account.
// lp_mint
func (inst *WithdrawDirectlyFromStrategy) SetLpMintAccount(lpMint ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
// lp_mint
func (inst *WithdrawDirectlyFromStrategy) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetFeeVaultAccount sets the "fee_vault" account.
// fee_vault
func (inst *WithdrawDirectlyFromStrategy) SetFeeVaultAccount(feeVault ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(feeVault).WRITE()
	return inst
}

// GetFeeVaultAccount gets the "fee_vault" account.
// fee_vault
func (inst *WithdrawDirectlyFromStrategy) GetFeeVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetUserTokenAccount sets the "user_token" account.
// user_token
func (inst *WithdrawDirectlyFromStrategy) SetUserTokenAccount(userToken ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(userToken).WRITE()
	return inst
}

// GetUserTokenAccount gets the "user_token" account.
// user_token
func (inst *WithdrawDirectlyFromStrategy) GetUserTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserLpAccount sets the "user_lp" account.
// user_lp
func (inst *WithdrawDirectlyFromStrategy) SetUserLpAccount(userLp ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userLp).WRITE()
	return inst
}

// GetUserLpAccount gets the "user_lp" account.
// user_lp
func (inst *WithdrawDirectlyFromStrategy) GetUserLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUserAccount sets the "user" account.
// user
func (inst *WithdrawDirectlyFromStrategy) SetUserAccount(user ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
// user
func (inst *WithdrawDirectlyFromStrategy) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "token_program" account.
// token_program
func (inst *WithdrawDirectlyFromStrategy) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// token_program
func (inst *WithdrawDirectlyFromStrategy) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst *WithdrawDirectlyFromStrategy) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WithdrawDirectlyFromStrategy) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WithdrawDirectlyFromStrategy {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:12], metas...)
	return inst
}

func (inst *WithdrawDirectlyFromStrategy) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12:]
}

func (inst WithdrawDirectlyFromStrategy) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawDirectlyFromStrategy,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawDirectlyFromStrategy) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawDirectlyFromStrategy) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.UnmintAmount == nil {
			return errors.New("unmintAmount parameter is not set")
		}
		if inst.MinOutAmount == nil {
			return errors.New("minOutAmount parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 12 {
		return errors.New("accounts slice has wrong length: expected 12 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Strategy is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Reserve is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.StrategyProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CollateralVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.FeeVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.UserToken is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.UserLp is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawDirectlyFromStrategy) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawDirectlyFromStrategy")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  UnmintAmount", *inst.UnmintAmount))
						paramsBranch.Child(ag_format.Param("  MinOutAmount", *inst.MinOutAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           vault", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        strategy", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         reserve", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("strategy_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("collateral_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     token_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         lp_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       fee_vault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      user_token", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         user_lp", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            user", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   token_program", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj WithdrawDirectlyFromStrategy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UnmintAmount` param:
	err = encoder.Encode(obj.UnmintAmount)
	if err != nil {
		return err
	}
	// Serialize `MinOutAmount` param:
	err = encoder.Encode(obj.MinOutAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawDirectlyFromStrategy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UnmintAmount`:
	err = decoder.Decode(&obj.UnmintAmount)
	if err != nil {
		return err
	}
	// Deserialize `MinOutAmount`:
	err = decoder.Decode(&obj.MinOutAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawDirectlyFromStrategyInstruction declares a new WithdrawDirectlyFromStrategy instruction with the provided parameters and accounts.
func NewWithdrawDirectlyFromStrategyInstruction(
	// Parameters:
	unmint_amount uint64,
	min_out_amount uint64,
	// Accounts:
	vault ag_solanago.PublicKey,
	strategy ag_solanago.PublicKey,
	reserve ag_solanago.PublicKey,
	strategyProgram ag_solanago.PublicKey,
	collateralVault ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	feeVault ag_solanago.PublicKey,
	userToken ag_solanago.PublicKey,
	userLp ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	return NewWithdrawDirectlyFromStrategyInstructionBuilder().
		SetUnmintAmount(unmint_amount).
		SetMinOutAmount(min_out_amount).
		SetVaultAccount(vault).
		SetStrategyAccount(strategy).
		SetReserveAccount(reserve).
		SetStrategyProgramAccount(strategyProgram).
		SetCollateralVaultAccount(collateralVault).
		SetTokenVaultAccount(tokenVault).
		SetLpMintAccount(lpMint).
		SetFeeVaultAccount(feeVault).
		SetUserTokenAccount(userToken).
		SetUserLpAccount(userLp).
		SetUserAccount(user).
		SetTokenProgramAccount(tokenProgram)
}

// NewSimpleWithdrawDirectlyFromStrategyInstruction declares a new WithdrawDirectlyFromStrategy instruction with the provided parameters and accounts.
func NewSimpleWithdrawDirectlyFromStrategyInstruction(
	// Parameters:
	unmint_amount uint64,
	min_out_amount uint64,
	// Accounts:
	vault ag_solanago.PublicKey,
	strategy ag_solanago.PublicKey,
	reserve ag_solanago.PublicKey,
	strategyProgram ag_solanago.PublicKey,
	collateralVault ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	feeVault ag_solanago.PublicKey,
	userToken ag_solanago.PublicKey,
	userLp ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *WithdrawDirectlyFromStrategy {
	return NewWithdrawDirectlyFromStrategyInstructionBuilder().
		SetUnmintAmount(unmint_amount).
		SetMinOutAmount(min_out_amount).
		SetVaultAccount(vault).
		SetStrategyAccount(strategy).
		SetReserveAccount(reserve).
		SetStrategyProgramAccount(strategyProgram).
		SetCollateralVaultAccount(collateralVault).
		SetTokenVaultAccount(tokenVault).
		SetLpMintAccount(lpMint).
		SetFeeVaultAccount(feeVault).
		SetUserTokenAccount(userToken).
		SetUserLpAccount(userLp).
		SetUserAccount(user).
		SetTokenProgramAccount(tokenProgram)
}
