// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// set new operator
type SetOperator struct {

	// [0] = [WRITE] vault
	// ··········· Vault account
	//
	// [1] = [] operator
	//
	// [2] = [SIGNER] admin
	// ··········· admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetOperatorInstructionBuilder creates a new `SetOperator` instruction builder.
func NewSetOperatorInstructionBuilder() *SetOperator {
	nd := &SetOperator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetVaultAccount sets the "vault" account.
// Vault account
func (inst *SetOperator) SetVaultAccount(vault ag_solanago.PublicKey) *SetOperator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
// Vault account
func (inst *SetOperator) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOperatorAccount sets the "operator" account.
func (inst *SetOperator) SetOperatorAccount(operator ag_solanago.PublicKey) *SetOperator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(operator)
	return inst
}

// GetOperatorAccount gets the "operator" account.
func (inst *SetOperator) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
// admin
func (inst *SetOperator) SetAdminAccount(admin ag_solanago.PublicKey) *SetOperator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
// admin
func (inst *SetOperator) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *SetOperator) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetOperator) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetOperator {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *SetOperator) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst SetOperator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetOperator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetOperator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetOperator) Validate() error {
	if len(inst.AccountMetaSlice) != 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Operator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *SetOperator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetOperator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   vault", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("operator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   admin", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SetOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSetOperatorInstruction declares a new SetOperator instruction with the provided parameters and accounts.
func NewSetOperatorInstruction(
	// Accounts:
	vault ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *SetOperator {
	return NewSetOperatorInstructionBuilder().
		SetVaultAccount(vault).
		SetOperatorAccount(operator).
		SetAdminAccount(admin)
}

// NewSimpleSetOperatorInstruction declares a new SetOperator instruction with the provided parameters and accounts.
func NewSimpleSetOperatorInstruction(
	// Accounts:
	vault ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *SetOperator {
	return NewSetOperatorInstructionBuilder().
		SetVaultAccount(vault).
		SetOperatorAccount(operator).
		SetAdminAccount(admin)
}
