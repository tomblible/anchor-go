// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// user deposit liquidity to vault
type Deposit struct {
	TokenAmount          *uint64
	MinimumLpTokenAmount *uint64

	// [0] = [WRITE] vault
	// ··········· vault
	//
	// [1] = [WRITE] token_vault
	// ··········· token_vault
	//
	// [2] = [WRITE] lp_mint
	// ··········· lp_mint
	//
	// [3] = [WRITE] user_token
	// ··········· user_token
	//
	// [4] = [WRITE] user_lp
	// ··········· user_lp
	//
	// [5] = [SIGNER] user
	// ··········· user
	//
	// [6] = [] token_program
	// ··········· token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositInstructionBuilder creates a new `Deposit` instruction builder.
func NewDepositInstructionBuilder() *Deposit {
	nd := &Deposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetTokenAmount sets the "token_amount" parameter.
func (inst *Deposit) SetTokenAmount(token_amount uint64) *Deposit {
	inst.TokenAmount = &token_amount
	return inst
}

// SetMinimumLpTokenAmount sets the "minimum_lp_token_amount" parameter.
func (inst *Deposit) SetMinimumLpTokenAmount(minimum_lp_token_amount uint64) *Deposit {
	inst.MinimumLpTokenAmount = &minimum_lp_token_amount
	return inst
}

// SetVaultAccount sets the "vault" account.
// vault
func (inst *Deposit) SetVaultAccount(vault ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
// vault
func (inst *Deposit) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenVaultAccount sets the "token_vault" account.
// token_vault
func (inst *Deposit) SetTokenVaultAccount(tokenVault ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenVault).WRITE()
	return inst
}

// GetTokenVaultAccount gets the "token_vault" account.
// token_vault
func (inst *Deposit) GetTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLpMintAccount sets the "lp_mint" account.
// lp_mint
func (inst *Deposit) SetLpMintAccount(lpMint ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
// lp_mint
func (inst *Deposit) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserTokenAccount sets the "user_token" account.
// user_token
func (inst *Deposit) SetUserTokenAccount(userToken ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userToken).WRITE()
	return inst
}

// GetUserTokenAccount gets the "user_token" account.
// user_token
func (inst *Deposit) GetUserTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserLpAccount sets the "user_lp" account.
// user_lp
func (inst *Deposit) SetUserLpAccount(userLp ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userLp).WRITE()
	return inst
}

// GetUserLpAccount gets the "user_lp" account.
// user_lp
func (inst *Deposit) GetUserLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserAccount sets the "user" account.
// user
func (inst *Deposit) SetUserAccount(user ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
// user
func (inst *Deposit) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "token_program" account.
// token_program
func (inst *Deposit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// token_program
func (inst *Deposit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst *Deposit) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Deposit) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Deposit {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:7], metas...)
	return inst
}

func (inst *Deposit) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7:]
}

func (inst Deposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Deposit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Deposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Deposit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TokenAmount == nil {
			return errors.New("tokenAmount parameter is not set")
		}
		if inst.MinimumLpTokenAmount == nil {
			return errors.New("minimumLpTokenAmount parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 7 {
		return errors.New("accounts slice has wrong length: expected 7 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserLp is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Deposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Deposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("            TokenAmount", *inst.TokenAmount))
						paramsBranch.Child(ag_format.Param("   MinimumLpTokenAmount", *inst.MinimumLpTokenAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        vault", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  token_vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      lp_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   user_token", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      user_lp", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         user", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("token_program", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj Deposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MinimumLpTokenAmount` param:
	err = encoder.Encode(obj.MinimumLpTokenAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Deposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MinimumLpTokenAmount`:
	err = decoder.Decode(&obj.MinimumLpTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositInstruction declares a new Deposit instruction with the provided parameters and accounts.
func NewDepositInstruction(
	// Parameters:
	token_amount uint64,
	minimum_lp_token_amount uint64,
	// Accounts:
	vault ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	userToken ag_solanago.PublicKey,
	userLp ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Deposit {
	return NewDepositInstructionBuilder().
		SetTokenAmount(token_amount).
		SetMinimumLpTokenAmount(minimum_lp_token_amount).
		SetVaultAccount(vault).
		SetTokenVaultAccount(tokenVault).
		SetLpMintAccount(lpMint).
		SetUserTokenAccount(userToken).
		SetUserLpAccount(userLp).
		SetUserAccount(user).
		SetTokenProgramAccount(tokenProgram)
}

// NewSimpleDepositInstruction declares a new Deposit instruction with the provided parameters and accounts.
func NewSimpleDepositInstruction(
	// Parameters:
	token_amount uint64,
	minimum_lp_token_amount uint64,
	// Accounts:
	vault ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	userToken ag_solanago.PublicKey,
	userLp ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Deposit {
	return NewDepositInstructionBuilder().
		SetTokenAmount(token_amount).
		SetMinimumLpTokenAmount(minimum_lp_token_amount).
		SetVaultAccount(vault).
		SetTokenVaultAccount(tokenVault).
		SetLpMintAccount(lpMint).
		SetUserTokenAccount(userToken).
		SetUserLpAccount(userLp).
		SetUserAccount(user).
		SetTokenProgramAccount(tokenProgram)
}
