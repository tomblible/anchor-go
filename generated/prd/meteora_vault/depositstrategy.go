// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// deposit liquidity to a strategy
type DepositStrategy struct {
	Amount *uint64

	// [0] = [WRITE] vault
	// ··········· vault
	//
	// [1] = [WRITE] strategy
	// ··········· strategy
	//
	// [2] = [WRITE] token_vault
	// ··········· token_vault
	//
	// [3] = [WRITE] fee_vault
	// ··········· fee_vault
	//
	// [4] = [WRITE] lp_mint
	// ··········· lp_mint
	//
	// [5] = [] strategy_program
	//
	// [6] = [WRITE] collateral_vault
	// ··········· collateral_vault
	//
	// [7] = [WRITE] reserve
	//
	// [8] = [] token_program
	// ··········· token_program
	//
	// [9] = [SIGNER] operator
	// ··········· operator
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositStrategyInstructionBuilder creates a new `DepositStrategy` instruction builder.
func NewDepositStrategyInstructionBuilder() *DepositStrategy {
	nd := &DepositStrategy{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *DepositStrategy) SetAmount(amount uint64) *DepositStrategy {
	inst.Amount = &amount
	return inst
}

// SetVaultAccount sets the "vault" account.
// vault
func (inst *DepositStrategy) SetVaultAccount(vault ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
// vault
func (inst *DepositStrategy) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStrategyAccount sets the "strategy" account.
// strategy
func (inst *DepositStrategy) SetStrategyAccount(strategy ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(strategy).WRITE()
	return inst
}

// GetStrategyAccount gets the "strategy" account.
// strategy
func (inst *DepositStrategy) GetStrategyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenVaultAccount sets the "token_vault" account.
// token_vault
func (inst *DepositStrategy) SetTokenVaultAccount(tokenVault ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenVault).WRITE()
	return inst
}

// GetTokenVaultAccount gets the "token_vault" account.
// token_vault
func (inst *DepositStrategy) GetTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFeeVaultAccount sets the "fee_vault" account.
// fee_vault
func (inst *DepositStrategy) SetFeeVaultAccount(feeVault ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(feeVault).WRITE()
	return inst
}

// GetFeeVaultAccount gets the "fee_vault" account.
// fee_vault
func (inst *DepositStrategy) GetFeeVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLpMintAccount sets the "lp_mint" account.
// lp_mint
func (inst *DepositStrategy) SetLpMintAccount(lpMint ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
// lp_mint
func (inst *DepositStrategy) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStrategyProgramAccount sets the "strategy_program" account.
func (inst *DepositStrategy) SetStrategyProgramAccount(strategyProgram ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(strategyProgram)
	return inst
}

// GetStrategyProgramAccount gets the "strategy_program" account.
func (inst *DepositStrategy) GetStrategyProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCollateralVaultAccount sets the "collateral_vault" account.
// collateral_vault
func (inst *DepositStrategy) SetCollateralVaultAccount(collateralVault ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(collateralVault).WRITE()
	return inst
}

// GetCollateralVaultAccount gets the "collateral_vault" account.
// collateral_vault
func (inst *DepositStrategy) GetCollateralVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetReserveAccount sets the "reserve" account.
func (inst *DepositStrategy) SetReserveAccount(reserve ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(reserve).WRITE()
	return inst
}

// GetReserveAccount gets the "reserve" account.
func (inst *DepositStrategy) GetReserveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "token_program" account.
// token_program
func (inst *DepositStrategy) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// token_program
func (inst *DepositStrategy) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOperatorAccount sets the "operator" account.
// operator
func (inst *DepositStrategy) SetOperatorAccount(operator ag_solanago.PublicKey) *DepositStrategy {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(operator).SIGNER()
	return inst
}

// GetOperatorAccount gets the "operator" account.
// operator
func (inst *DepositStrategy) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *DepositStrategy) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *DepositStrategy) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *DepositStrategy {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *DepositStrategy) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst DepositStrategy) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DepositStrategy,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DepositStrategy) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DepositStrategy) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("amount parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Strategy is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FeeVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StrategyProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CollateralVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Reserve is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Operator is not set")
		}
	}
	return nil
}

func (inst *DepositStrategy) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DepositStrategy")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           vault", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        strategy", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     token_vault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       fee_vault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         lp_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("strategy_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("collateral_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         reserve", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        operator", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj DepositStrategy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DepositStrategy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositStrategyInstruction declares a new DepositStrategy instruction with the provided parameters and accounts.
func NewDepositStrategyInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	vault ag_solanago.PublicKey,
	strategy ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	feeVault ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	strategyProgram ag_solanago.PublicKey,
	collateralVault ag_solanago.PublicKey,
	reserve ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	operator ag_solanago.PublicKey) *DepositStrategy {
	return NewDepositStrategyInstructionBuilder().
		SetAmount(amount).
		SetVaultAccount(vault).
		SetStrategyAccount(strategy).
		SetTokenVaultAccount(tokenVault).
		SetFeeVaultAccount(feeVault).
		SetLpMintAccount(lpMint).
		SetStrategyProgramAccount(strategyProgram).
		SetCollateralVaultAccount(collateralVault).
		SetReserveAccount(reserve).
		SetTokenProgramAccount(tokenProgram).
		SetOperatorAccount(operator)
}

// NewSimpleDepositStrategyInstruction declares a new DepositStrategy instruction with the provided parameters and accounts.
func NewSimpleDepositStrategyInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	vault ag_solanago.PublicKey,
	strategy ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	feeVault ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	strategyProgram ag_solanago.PublicKey,
	collateralVault ag_solanago.PublicKey,
	reserve ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	operator ag_solanago.PublicKey) *DepositStrategy {
	return NewDepositStrategyInstructionBuilder().
		SetAmount(amount).
		SetVaultAccount(vault).
		SetStrategyAccount(strategy).
		SetTokenVaultAccount(tokenVault).
		SetFeeVaultAccount(feeVault).
		SetLpMintAccount(lpMint).
		SetStrategyProgramAccount(strategyProgram).
		SetCollateralVaultAccount(collateralVault).
		SetReserveAccount(reserve).
		SetTokenProgramAccount(tokenProgram).
		SetOperatorAccount(operator)
}
