// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_vault

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type VaultBumps struct {
	// vault_bump
	VaultBump uint8

	// token_vault_bump
	TokenVaultBump uint8
}

func (obj VaultBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VaultBump` param:
	err = encoder.Encode(obj.VaultBump)
	if err != nil {
		return err
	}
	// Serialize `TokenVaultBump` param:
	err = encoder.Encode(obj.TokenVaultBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VaultBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VaultBump`:
	err = decoder.Decode(&obj.VaultBump)
	if err != nil {
		return err
	}
	// Deserialize `TokenVaultBump`:
	err = decoder.Decode(&obj.TokenVaultBump)
	if err != nil {
		return err
	}
	return nil
}

type StrategyBumps struct {
	// strategy_index
	StrategyIndex uint8

	// Bumps of PDAs for the integrated protocol.
	OtherBumps [10]uint8
}

func (obj StrategyBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StrategyIndex` param:
	err = encoder.Encode(obj.StrategyIndex)
	if err != nil {
		return err
	}
	// Serialize `OtherBumps` param:
	err = encoder.Encode(obj.OtherBumps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StrategyBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StrategyIndex`:
	err = decoder.Decode(&obj.StrategyIndex)
	if err != nil {
		return err
	}
	// Deserialize `OtherBumps`:
	err = decoder.Decode(&obj.OtherBumps)
	if err != nil {
		return err
	}
	return nil
}

type LockedProfitTracker struct {
	// The total locked profit from the last report
	LastUpdatedLockedProfit uint64

	// The last timestamp (in seconds) rebalancing
	LastReport uint64

	// Rate per second of degradation
	LockedProfitDegradation uint64
}

func (obj LockedProfitTracker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LastUpdatedLockedProfit` param:
	err = encoder.Encode(obj.LastUpdatedLockedProfit)
	if err != nil {
		return err
	}
	// Serialize `LastReport` param:
	err = encoder.Encode(obj.LastReport)
	if err != nil {
		return err
	}
	// Serialize `LockedProfitDegradation` param:
	err = encoder.Encode(obj.LockedProfitDegradation)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockedProfitTracker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LastUpdatedLockedProfit`:
	err = decoder.Decode(&obj.LastUpdatedLockedProfit)
	if err != nil {
		return err
	}
	// Deserialize `LastReport`:
	err = decoder.Decode(&obj.LastReport)
	if err != nil {
		return err
	}
	// Deserialize `LockedProfitDegradation`:
	err = decoder.Decode(&obj.LockedProfitDegradation)
	if err != nil {
		return err
	}
	return nil
}

type StrategyType ag_binary.BorshEnum

const (
	StrategyTypePortFinanceWithoutLM StrategyType = iota
	StrategyTypePortFinanceWithLM
	StrategyTypeSolendWithoutLM
	StrategyTypeMango
	StrategyTypeSolendWithLM
	StrategyTypeApricotWithoutLM
	StrategyTypeFrancium
	StrategyTypeTulip
	StrategyTypeVault
	StrategyTypeDrift
	StrategyTypeFrakt
	StrategyTypeMarginfi
)

func (value StrategyType) String() string {
	switch value {
	case StrategyTypePortFinanceWithoutLM:
		return "PortFinanceWithoutLM"
	case StrategyTypePortFinanceWithLM:
		return "PortFinanceWithLM"
	case StrategyTypeSolendWithoutLM:
		return "SolendWithoutLM"
	case StrategyTypeMango:
		return "Mango"
	case StrategyTypeSolendWithLM:
		return "SolendWithLM"
	case StrategyTypeApricotWithoutLM:
		return "ApricotWithoutLM"
	case StrategyTypeFrancium:
		return "Francium"
	case StrategyTypeTulip:
		return "Tulip"
	case StrategyTypeVault:
		return "Vault"
	case StrategyTypeDrift:
		return "Drift"
	case StrategyTypeFrakt:
		return "Frakt"
	case StrategyTypeMarginfi:
		return "Marginfi"
	default:
		return ""
	}
}

type Vault struct {
	// The flag, if admin set enable = false, then the user can only withdraw and cannot deposit in the vault.
	Enabled uint8

	// Vault nonce, to create vault seeds
	Bumps VaultBumps

	// The total liquidity of the vault, including remaining tokens in token_vault and the liquidity in all strategies.
	TotalAmount uint64

	// Token account, hold liquidity in vault reserve
	TokenVault ag_solanago.PublicKey

	// Hold lp token of vault, each time rebalance crank is called, vault calculate performance fee and mint corresponding lp token amount to fee_vault. fee_vault is owned by treasury address
	FeeVault ag_solanago.PublicKey

	// Token mint that vault supports
	TokenMint ag_solanago.PublicKey

	// Lp mint of vault
	LpMint ag_solanago.PublicKey

	// The list of strategy addresses that vault supports, vault can support up to MAX_STRATEGY strategies at the same time.
	Strategies [30]ag_solanago.PublicKey

	// The base address to create vault seeds
	Base ag_solanago.PublicKey

	// Admin of vault
	Admin ag_solanago.PublicKey

	// Person who can send the crank. Operator can only send liquidity to strategies that admin defined, and claim reward to account of treasury address
	Operator ag_solanago.PublicKey

	// Stores information for locked profit.
	LockedProfitTracker LockedProfitTracker
}

func (obj Vault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Bumps` param:
	err = encoder.Encode(obj.Bumps)
	if err != nil {
		return err
	}
	// Serialize `TotalAmount` param:
	err = encoder.Encode(obj.TotalAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenVault` param:
	err = encoder.Encode(obj.TokenVault)
	if err != nil {
		return err
	}
	// Serialize `FeeVault` param:
	err = encoder.Encode(obj.FeeVault)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `Strategies` param:
	err = encoder.Encode(obj.Strategies)
	if err != nil {
		return err
	}
	// Serialize `Base` param:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `LockedProfitTracker` param:
	err = encoder.Encode(obj.LockedProfitTracker)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Vault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Bumps`:
	err = decoder.Decode(&obj.Bumps)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmount`:
	err = decoder.Decode(&obj.TotalAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenVault`:
	err = decoder.Decode(&obj.TokenVault)
	if err != nil {
		return err
	}
	// Deserialize `FeeVault`:
	err = decoder.Decode(&obj.FeeVault)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `Strategies`:
	err = decoder.Decode(&obj.Strategies)
	if err != nil {
		return err
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `LockedProfitTracker`:
	err = decoder.Decode(&obj.LockedProfitTracker)
	if err != nil {
		return err
	}
	return nil
}

type Strategy struct {
	// Lending pool address, that the strategy will deposit/withdraw balance
	Reserve ag_solanago.PublicKey

	// The token account, that holds the collateral token
	CollateralVault ag_solanago.PublicKey

	// Specify type of strategy
	StrategyType StrategyType

	// The liquidity in strategy at the time vault deposit/withdraw from a lending protocol
	CurrentLiquidity uint64

	// Hold some bumps, in case the strategy needs to use other seeds to sign a CPI call.
	Bumps [10]uint8

	// Vault address, that the strategy belongs
	Vault ag_solanago.PublicKey

	// If we remove strategy by remove_strategy2 endpoint, this account will be never added again
	IsDisable uint8
}

func (obj Strategy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Reserve` param:
	err = encoder.Encode(obj.Reserve)
	if err != nil {
		return err
	}
	// Serialize `CollateralVault` param:
	err = encoder.Encode(obj.CollateralVault)
	if err != nil {
		return err
	}
	// Serialize `StrategyType` param:
	err = encoder.Encode(obj.StrategyType)
	if err != nil {
		return err
	}
	// Serialize `CurrentLiquidity` param:
	err = encoder.Encode(obj.CurrentLiquidity)
	if err != nil {
		return err
	}
	// Serialize `Bumps` param:
	err = encoder.Encode(obj.Bumps)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `IsDisable` param:
	err = encoder.Encode(obj.IsDisable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Strategy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Reserve`:
	err = decoder.Decode(&obj.Reserve)
	if err != nil {
		return err
	}
	// Deserialize `CollateralVault`:
	err = decoder.Decode(&obj.CollateralVault)
	if err != nil {
		return err
	}
	// Deserialize `StrategyType`:
	err = decoder.Decode(&obj.StrategyType)
	if err != nil {
		return err
	}
	// Deserialize `CurrentLiquidity`:
	err = decoder.Decode(&obj.CurrentLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `Bumps`:
	err = decoder.Decode(&obj.Bumps)
	if err != nil {
		return err
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `IsDisable`:
	err = decoder.Decode(&obj.IsDisable)
	if err != nil {
		return err
	}
	return nil
}

type AddLiquidity struct {
	LpMintAmount uint64
	TokenAmount  uint64
}

func (obj AddLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpMintAmount` param:
	err = encoder.Encode(obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AddLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpMintAmount`:
	err = decoder.Decode(&obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type RemoveLiquidity struct {
	LpUnmintAmount uint64
	TokenAmount    uint64
}

func (obj RemoveLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpUnmintAmount` param:
	err = encoder.Encode(obj.LpUnmintAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoveLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpUnmintAmount`:
	err = decoder.Decode(&obj.LpUnmintAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type StrategyDeposit struct {
	StrategyType StrategyType
	TokenAmount  uint64
}

func (obj StrategyDeposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StrategyType` param:
	err = encoder.Encode(obj.StrategyType)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StrategyDeposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StrategyType`:
	err = decoder.Decode(&obj.StrategyType)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type StrategyWithdraw struct {
	StrategyType         StrategyType
	CollateralAmount     uint64
	EstimatedTokenAmount uint64
}

func (obj StrategyWithdraw) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StrategyType` param:
	err = encoder.Encode(obj.StrategyType)
	if err != nil {
		return err
	}
	// Serialize `CollateralAmount` param:
	err = encoder.Encode(obj.CollateralAmount)
	if err != nil {
		return err
	}
	// Serialize `EstimatedTokenAmount` param:
	err = encoder.Encode(obj.EstimatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StrategyWithdraw) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StrategyType`:
	err = decoder.Decode(&obj.StrategyType)
	if err != nil {
		return err
	}
	// Deserialize `CollateralAmount`:
	err = decoder.Decode(&obj.CollateralAmount)
	if err != nil {
		return err
	}
	// Deserialize `EstimatedTokenAmount`:
	err = decoder.Decode(&obj.EstimatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type ClaimReward struct {
	StrategyType StrategyType
	TokenAmount  uint64
	MintAccount  ag_solanago.PublicKey
}

func (obj ClaimReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StrategyType` param:
	err = encoder.Encode(obj.StrategyType)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MintAccount` param:
	err = encoder.Encode(obj.MintAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StrategyType`:
	err = decoder.Decode(&obj.StrategyType)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintAccount`:
	err = decoder.Decode(&obj.MintAccount)
	if err != nil {
		return err
	}
	return nil
}

type PerformanceFee struct {
	LpMintMore uint64
}

func (obj PerformanceFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpMintMore` param:
	err = encoder.Encode(obj.LpMintMore)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PerformanceFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpMintMore`:
	err = decoder.Decode(&obj.LpMintMore)
	if err != nil {
		return err
	}
	return nil
}

type ReportLoss struct {
	Strategy ag_solanago.PublicKey
	Loss     uint64
}

func (obj ReportLoss) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Strategy` param:
	err = encoder.Encode(obj.Strategy)
	if err != nil {
		return err
	}
	// Serialize `Loss` param:
	err = encoder.Encode(obj.Loss)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ReportLoss) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Strategy`:
	err = decoder.Decode(&obj.Strategy)
	if err != nil {
		return err
	}
	// Deserialize `Loss`:
	err = decoder.Decode(&obj.Loss)
	if err != nil {
		return err
	}
	return nil
}

type TotalAmount struct {
	TotalAmount uint64
}

func (obj TotalAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalAmount` param:
	err = encoder.Encode(obj.TotalAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TotalAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalAmount`:
	err = decoder.Decode(&obj.TotalAmount)
	if err != nil {
		return err
	}
	return nil
}
