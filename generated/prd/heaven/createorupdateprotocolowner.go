// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateOrUpdateProtocolOwner is the `create_or_update_protocol_owner` instruction.
type CreateOrUpdateProtocolOwner struct {

	// [0] = [] system_program
	//
	// [1] = [WRITE, SIGNER] payer
	//
	// [2] = [SIGNER] current_owner
	//
	// [3] = [SIGNER] new_owner
	//
	// [4] = [WRITE] protocol_owner_state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateOrUpdateProtocolOwnerInstructionBuilder creates a new `CreateOrUpdateProtocolOwner` instruction builder.
func NewCreateOrUpdateProtocolOwnerInstructionBuilder() *CreateOrUpdateProtocolOwner {
	nd := &CreateOrUpdateProtocolOwner{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ProtocolOwnerStatePDA).WRITE()
	return nd
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateOrUpdateProtocolOwner) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateOrUpdateProtocolOwner {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateOrUpdateProtocolOwner) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateOrUpdateProtocolOwner) SetPayerAccount(payer ag_solanago.PublicKey) *CreateOrUpdateProtocolOwner {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateOrUpdateProtocolOwner) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCurrentOwnerAccount sets the "current_owner" account.
func (inst *CreateOrUpdateProtocolOwner) SetCurrentOwnerAccount(currentOwner ag_solanago.PublicKey) *CreateOrUpdateProtocolOwner {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(currentOwner).SIGNER()
	return inst
}

// GetCurrentOwnerAccount gets the "current_owner" account.
func (inst *CreateOrUpdateProtocolOwner) GetCurrentOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewOwnerAccount sets the "new_owner" account.
func (inst *CreateOrUpdateProtocolOwner) SetNewOwnerAccount(newOwner ag_solanago.PublicKey) *CreateOrUpdateProtocolOwner {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newOwner).SIGNER()
	return inst
}

// GetNewOwnerAccount gets the "new_owner" account.
func (inst *CreateOrUpdateProtocolOwner) GetNewOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProtocolOwnerStateAccount sets the "protocol_owner_state" account.
func (inst *CreateOrUpdateProtocolOwner) SetProtocolOwnerStateAccount(protocolOwnerState ag_solanago.PublicKey) *CreateOrUpdateProtocolOwner {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(protocolOwnerState).WRITE()
	return inst
}

// GetProtocolOwnerStateAccount gets the "protocol_owner_state" account.
func (inst *CreateOrUpdateProtocolOwner) GetProtocolOwnerStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *CreateOrUpdateProtocolOwner) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateOrUpdateProtocolOwner) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateOrUpdateProtocolOwner {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *CreateOrUpdateProtocolOwner) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst CreateOrUpdateProtocolOwner) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateOrUpdateProtocolOwner,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateOrUpdateProtocolOwner) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateOrUpdateProtocolOwner) Validate() error {
	if len(inst.AccountMetaSlice) < 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CurrentOwner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewOwner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProtocolOwnerState is not set")
		}
	}
	return nil
}

func (inst *CreateOrUpdateProtocolOwner) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateOrUpdateProtocolOwner")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      system_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       current_owner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           new_owner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("protocol_owner_state", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateOrUpdateProtocolOwner) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateOrUpdateProtocolOwner) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateOrUpdateProtocolOwnerInstruction declares a new CreateOrUpdateProtocolOwner instruction with the provided parameters and accounts.
func NewCreateOrUpdateProtocolOwnerInstruction(
	payer ag_solanago.PublicKey,
	currentOwner ag_solanago.PublicKey,
	newOwner ag_solanago.PublicKey) *CreateOrUpdateProtocolOwner {
	return NewCreateOrUpdateProtocolOwnerInstructionBuilder().
		SetPayerAccount(payer).
		SetCurrentOwnerAccount(currentOwner).
		SetNewOwnerAccount(newOwner)
}

// NewSimpleCreateOrUpdateProtocolOwnerInstruction declares a new CreateOrUpdateProtocolOwner instruction with the provided parameters and accounts.
func NewSimpleCreateOrUpdateProtocolOwnerInstruction(
	payer ag_solanago.PublicKey,
	currentOwner ag_solanago.PublicKey,
	newOwner ag_solanago.PublicKey) *CreateOrUpdateProtocolOwner {
	return NewCreateOrUpdateProtocolOwnerInstructionBuilder().
		SetPayerAccount(payer).
		SetCurrentOwnerAccount(currentOwner).
		SetNewOwnerAccount(newOwner)
}
