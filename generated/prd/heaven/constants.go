// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"encoding/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

func FindProtocolConfigStateAddress(version uint16) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x70726f746f636f6c5f636f6e6669675f7374617465
	seeds = append(seeds, []byte{byte(0x70), byte(0x72), byte(0x6f), byte(0x74), byte(0x6f), byte(0x63), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67), byte(0x5f), byte(0x73), byte(0x74), byte(0x61), byte(0x74), byte(0x65)})
	// path: version
	argBytes1 := make([]byte, 2)
	binary.LittleEndian.PutUint16(argBytes1, uint16(version))
	seeds = append(seeds, argBytes1)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindProtocolConfigStateAddress(version uint16) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindProtocolConfigStateAddress(version)
	return
}

func FindTempSolHolderAddress(version uint16) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x74656d705f736f6c5f686f6c646572
	seeds = append(seeds, []byte{byte(0x74), byte(0x65), byte(0x6d), byte(0x70), byte(0x5f), byte(0x73), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x68), byte(0x6f), byte(0x6c), byte(0x64), byte(0x65), byte(0x72)})
	// path: version
	argBytes1 := make([]byte, 2)
	binary.LittleEndian.PutUint16(argBytes1, uint16(version))
	seeds = append(seeds, argBytes1)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindTempSolHolderAddress(version uint16) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindTempSolHolderAddress(version)
	return
}

func FindMsolTicketAddress(protocolConfigState ag_solanago.PublicKey, ticketNumber uint32) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x6d736f6c5f7469636b65745f616363
	seeds = append(seeds, []byte{byte(0x6d), byte(0x73), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x74), byte(0x69), byte(0x63), byte(0x6b), byte(0x65), byte(0x74), byte(0x5f), byte(0x61), byte(0x63), byte(0x63)})
	// path: protocolConfigState
	seeds = append(seeds, protocolConfigState.Bytes())
	// path: ticketNumber
	argBytes2 := make([]byte, 4)
	binary.LittleEndian.PutUint32(argBytes2, uint32(ticketNumber))
	seeds = append(seeds, argBytes2)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindMsolTicketAddress(protocolConfigState ag_solanago.PublicKey, ticketNumber uint32) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindMsolTicketAddress(protocolConfigState, ticketNumber)
	return
}

func FindMsolTicketSolSpentAddress(protocolConfigState ag_solanago.PublicKey, ticketNumber uint32) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x6d736f6c5f7469636b65745f6163635f736f6c5f7370656e74
	seeds = append(seeds, []byte{byte(0x6d), byte(0x73), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x74), byte(0x69), byte(0x63), byte(0x6b), byte(0x65), byte(0x74), byte(0x5f), byte(0x61), byte(0x63), byte(0x63), byte(0x5f), byte(0x73), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x73), byte(0x70), byte(0x65), byte(0x6e), byte(0x74)})
	// path: protocolConfigState
	seeds = append(seeds, protocolConfigState.Bytes())
	// path: ticketNumber
	argBytes2 := make([]byte, 4)
	binary.LittleEndian.PutUint32(argBytes2, uint32(ticketNumber))
	seeds = append(seeds, argBytes2)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindMsolTicketSolSpentAddress(protocolConfigState ag_solanago.PublicKey, ticketNumber uint32) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindMsolTicketSolSpentAddress(protocolConfigState, ticketNumber)
	return
}

func FindProtocolConfigAddress(protocolConfigVersion uint16) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x70726f746f636f6c5f636f6e6669675f7374617465
	seeds = append(seeds, []byte{byte(0x70), byte(0x72), byte(0x6f), byte(0x74), byte(0x6f), byte(0x63), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67), byte(0x5f), byte(0x73), byte(0x74), byte(0x61), byte(0x74), byte(0x65)})
	// path: protocolConfigVersion
	argBytes1 := make([]byte, 2)
	binary.LittleEndian.PutUint16(argBytes1, uint16(protocolConfigVersion))
	seeds = append(seeds, argBytes1)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindProtocolConfigAddress(protocolConfigVersion uint16) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindProtocolConfigAddress(protocolConfigVersion)
	return
}

func FindLiquidityPoolStateAddress(tokenAMint ag_solanago.PublicKey, tokenBMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x6c69717569646974795f706f6f6c5f7374617465
	seeds = append(seeds, []byte{byte(0x6c), byte(0x69), byte(0x71), byte(0x75), byte(0x69), byte(0x64), byte(0x69), byte(0x74), byte(0x79), byte(0x5f), byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x73), byte(0x74), byte(0x61), byte(0x74), byte(0x65)})
	// path: tokenAMint
	seeds = append(seeds, tokenAMint.Bytes())
	// path: tokenBMint
	seeds = append(seeds, tokenBMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindLiquidityPoolStateAddress(tokenAMint ag_solanago.PublicKey, tokenBMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindLiquidityPoolStateAddress(tokenAMint, tokenBMint)
	return
}
