// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminUnstakeMsol is the `admin_unstake_msol` instruction.
type AdminUnstakeMsol struct {
	Version      *uint16
	TicketNumber *uint32
	Amount       *uint64

	// [0] = [] token_program
	//
	// [1] = [] associated_token_program
	//
	// [2] = [WRITE, SIGNER] payer
	//
	// [3] = [SIGNER] admin
	//
	// [4] = [WRITE] protocol_config_state
	//
	// [5] = [] system_program
	//
	// [6] = [] protocol_staking_admin_state
	//
	// [7] = [WRITE] msol_ticket
	// ··········· CHECK
	//
	// [8] = [] msol_mint
	//
	// [9] = [WRITE] msol_ticket_sol_spent
	// ··········· CHECK
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminUnstakeMsolInstructionBuilder creates a new `AdminUnstakeMsol` instruction builder.
func NewAdminUnstakeMsolInstructionBuilder() *AdminUnstakeMsol {
	nd := &AdminUnstakeMsol{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[1] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[5] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[6] = ag_solanago.Meta(ProtocolStakingAdminStatePDA)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(MsolMint)
	return nd
}

// SetVersion sets the "version" parameter.
func (inst *AdminUnstakeMsol) SetVersion(version uint16) *AdminUnstakeMsol {
	inst.Version = &version
	return inst
}

// SetTicketNumber sets the "ticket_number" parameter.
func (inst *AdminUnstakeMsol) SetTicketNumber(ticket_number uint32) *AdminUnstakeMsol {
	inst.TicketNumber = &ticket_number
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *AdminUnstakeMsol) SetAmount(amount uint64) *AdminUnstakeMsol {
	inst.Amount = &amount
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *AdminUnstakeMsol) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *AdminUnstakeMsol) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *AdminUnstakeMsol) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *AdminUnstakeMsol) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
func (inst *AdminUnstakeMsol) SetPayerAccount(payer ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *AdminUnstakeMsol) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAdminAccount sets the "admin" account.
func (inst *AdminUnstakeMsol) SetAdminAccount(admin ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AdminUnstakeMsol) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProtocolConfigStateAccount sets the "protocol_config_state" account.
func (inst *AdminUnstakeMsol) SetProtocolConfigStateAccount(protocolConfigState ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(protocolConfigState).WRITE()
	return inst
}

// GetProtocolConfigStateAccount gets the "protocol_config_state" account.
func (inst *AdminUnstakeMsol) GetProtocolConfigStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AdminUnstakeMsol) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AdminUnstakeMsol) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetProtocolStakingAdminStateAccount sets the "protocol_staking_admin_state" account.
func (inst *AdminUnstakeMsol) SetProtocolStakingAdminStateAccount(protocolStakingAdminState ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(protocolStakingAdminState)
	return inst
}

// GetProtocolStakingAdminStateAccount gets the "protocol_staking_admin_state" account.
func (inst *AdminUnstakeMsol) GetProtocolStakingAdminStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMsolTicketAccount sets the "msol_ticket" account.
// CHECK
func (inst *AdminUnstakeMsol) SetMsolTicketAccount(msolTicket ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(msolTicket).WRITE()
	return inst
}

// GetMsolTicketAccount gets the "msol_ticket" account.
// CHECK
func (inst *AdminUnstakeMsol) GetMsolTicketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMsolMintAccount sets the "msol_mint" account.
func (inst *AdminUnstakeMsol) SetMsolMintAccount(msolMint ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(msolMint)
	return inst
}

// GetMsolMintAccount gets the "msol_mint" account.
func (inst *AdminUnstakeMsol) GetMsolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMsolTicketSolSpentAccount sets the "msol_ticket_sol_spent" account.
// CHECK
func (inst *AdminUnstakeMsol) SetMsolTicketSolSpentAccount(msolTicketSolSpent ag_solanago.PublicKey) *AdminUnstakeMsol {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(msolTicketSolSpent).WRITE()
	return inst
}

// GetMsolTicketSolSpentAccount gets the "msol_ticket_sol_spent" account.
// CHECK
func (inst *AdminUnstakeMsol) GetMsolTicketSolSpentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *AdminUnstakeMsol) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AdminUnstakeMsol) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AdminUnstakeMsol {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *AdminUnstakeMsol) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst AdminUnstakeMsol) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminUnstakeMsol,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminUnstakeMsol) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminUnstakeMsol) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Version == nil {
			return errors.New("version parameter is not set")
		}
		if inst.TicketNumber == nil {
			return errors.New("ticketNumber parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("amount parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProtocolConfigState is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ProtocolStakingAdminState is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MsolTicket is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MsolMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MsolTicketSolSpent is not set")
		}
	}
	return nil
}

func (inst *AdminUnstakeMsol) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminUnstakeMsol")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      Version", *inst.Version))
						paramsBranch.Child(ag_format.Param(" TicketNumber", *inst.TicketNumber))
						paramsBranch.Child(ag_format.Param("       Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    associated_token_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                       payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                       admin", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       protocol_config_state", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              system_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("protocol_staking_admin_state", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                 msol_ticket", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                   msol_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       msol_ticket_sol_spent", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj AdminUnstakeMsol) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `TicketNumber` param:
	err = encoder.Encode(obj.TicketNumber)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AdminUnstakeMsol) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `TicketNumber`:
	err = decoder.Decode(&obj.TicketNumber)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewAdminUnstakeMsolInstruction declares a new AdminUnstakeMsol instruction with the provided parameters and accounts.
func NewAdminUnstakeMsolInstruction(
	// Parameters:
	version uint16,
	ticket_number uint32,
	amount uint64,
	payer ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	protocolConfigState ag_solanago.PublicKey,
	msolTicket ag_solanago.PublicKey,
	msolTicketSolSpent ag_solanago.PublicKey) *AdminUnstakeMsol {
	return NewAdminUnstakeMsolInstructionBuilder().
		SetVersion(version).
		SetTicketNumber(ticket_number).
		SetAmount(amount).
		SetPayerAccount(payer).
		SetAdminAccount(admin).
		SetProtocolConfigStateAccount(protocolConfigState).
		SetMsolTicketAccount(msolTicket).
		SetMsolTicketSolSpentAccount(msolTicketSolSpent)
}

// NewSimpleAdminUnstakeMsolInstruction declares a new AdminUnstakeMsol instruction with the provided parameters and accounts.
func NewSimpleAdminUnstakeMsolInstruction(
	// Parameters:
	version uint16,
	ticket_number uint32,
	amount uint64,
	payer ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *AdminUnstakeMsol {
	protocolConfigState := MustFindProtocolConfigStateAddress(version)
	msolTicket := MustFindMsolTicketAddress(protocolConfigState, ticket_number)
	msolTicketSolSpent := MustFindMsolTicketSolSpentAddress(protocolConfigState, ticket_number)
	return NewAdminUnstakeMsolInstructionBuilder().
		SetVersion(version).
		SetTicketNumber(ticket_number).
		SetAmount(amount).
		SetPayerAccount(payer).
		SetAdminAccount(admin).
		SetProtocolConfigStateAccount(protocolConfigState).
		SetMsolTicketAccount(msolTicket).
		SetMsolTicketSolSpentAccount(msolTicketSolSpent)
}
