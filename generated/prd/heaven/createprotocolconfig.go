// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateProtocolConfig is the `create_protocol_config` instruction.
type CreateProtocolConfig struct {
	Version *uint16
	Params  *ProtocolConfigParams

	// [0] = [] token_program
	//
	// [1] = [] associated_token_program
	//
	// [2] = [WRITE, SIGNER] payer
	//
	// [3] = [SIGNER] owner
	//
	// [4] = [WRITE] protocol_config_state
	//
	// [5] = [] system_program
	//
	// [6] = [] protocol_owner_state
	//
	// [7] = [WRITE] msol_token_vault
	//
	// [8] = [] msol_mint
	// ··········· CHECK
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateProtocolConfigInstructionBuilder creates a new `CreateProtocolConfig` instruction builder.
func NewCreateProtocolConfigInstructionBuilder() *CreateProtocolConfig {
	nd := &CreateProtocolConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[1] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[5] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[6] = ag_solanago.Meta(ProtocolOwnerStatePDA)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(MsolMint)
	return nd
}

// SetVersion sets the "version" parameter.
func (inst *CreateProtocolConfig) SetVersion(version uint16) *CreateProtocolConfig {
	inst.Version = &version
	return inst
}

// SetParams sets the "params" parameter.
func (inst *CreateProtocolConfig) SetParams(params ProtocolConfigParams) *CreateProtocolConfig {
	inst.Params = &params
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *CreateProtocolConfig) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *CreateProtocolConfig) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *CreateProtocolConfig) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *CreateProtocolConfig) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateProtocolConfig) SetPayerAccount(payer ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateProtocolConfig) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOwnerAccount sets the "owner" account.
func (inst *CreateProtocolConfig) SetOwnerAccount(owner ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CreateProtocolConfig) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProtocolConfigStateAccount sets the "protocol_config_state" account.
func (inst *CreateProtocolConfig) SetProtocolConfigStateAccount(protocolConfigState ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(protocolConfigState).WRITE()
	return inst
}

// GetProtocolConfigStateAccount gets the "protocol_config_state" account.
func (inst *CreateProtocolConfig) GetProtocolConfigStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateProtocolConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateProtocolConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetProtocolOwnerStateAccount sets the "protocol_owner_state" account.
func (inst *CreateProtocolConfig) SetProtocolOwnerStateAccount(protocolOwnerState ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(protocolOwnerState)
	return inst
}

// GetProtocolOwnerStateAccount gets the "protocol_owner_state" account.
func (inst *CreateProtocolConfig) GetProtocolOwnerStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMsolTokenVaultAccount sets the "msol_token_vault" account.
func (inst *CreateProtocolConfig) SetMsolTokenVaultAccount(msolTokenVault ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(msolTokenVault).WRITE()
	return inst
}

// GetMsolTokenVaultAccount gets the "msol_token_vault" account.
func (inst *CreateProtocolConfig) GetMsolTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMsolMintAccount sets the "msol_mint" account.
// CHECK
func (inst *CreateProtocolConfig) SetMsolMintAccount(msolMint ag_solanago.PublicKey) *CreateProtocolConfig {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(msolMint)
	return inst
}

// GetMsolMintAccount gets the "msol_mint" account.
// CHECK
func (inst *CreateProtocolConfig) GetMsolMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst *CreateProtocolConfig) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateProtocolConfig) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateProtocolConfig {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:9], metas...)
	return inst
}

func (inst *CreateProtocolConfig) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9:]
}

func (inst CreateProtocolConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateProtocolConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateProtocolConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateProtocolConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Version == nil {
			return errors.New("version parameter is not set")
		}
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 9 {
		return errors.New("accounts slice has wrong length: expected 9 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProtocolConfigState is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ProtocolOwnerState is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.MsolTokenVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MsolMint is not set")
		}
	}
	return nil
}

func (inst *CreateProtocolConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateProtocolConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Version", *inst.Version))
						paramsBranch.Child(ag_format.Param(" Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                   owner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   protocol_config_state", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    protocol_owner_state", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        msol_token_vault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("               msol_mint", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj CreateProtocolConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateProtocolConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateProtocolConfigInstruction declares a new CreateProtocolConfig instruction with the provided parameters and accounts.
func NewCreateProtocolConfigInstruction(
	// Parameters:
	version uint16,
	params ProtocolConfigParams,
	payer ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	protocolConfigState ag_solanago.PublicKey,
	msolTokenVault ag_solanago.PublicKey) *CreateProtocolConfig {
	return NewCreateProtocolConfigInstructionBuilder().
		SetVersion(version).
		SetParams(params).
		SetPayerAccount(payer).
		SetOwnerAccount(owner).
		SetProtocolConfigStateAccount(protocolConfigState).
		SetMsolTokenVaultAccount(msolTokenVault)
}

// NewSimpleCreateProtocolConfigInstruction declares a new CreateProtocolConfig instruction with the provided parameters and accounts.
func NewSimpleCreateProtocolConfigInstruction(
	// Parameters:
	version uint16,
	params ProtocolConfigParams,
	payer ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	msolTokenVault ag_solanago.PublicKey) *CreateProtocolConfig {
	protocolConfigState := MustFindProtocolConfigStateAddress(version)
	return NewCreateProtocolConfigInstructionBuilder().
		SetVersion(version).
		SetParams(params).
		SetPayerAccount(payer).
		SetOwnerAccount(owner).
		SetProtocolConfigStateAccount(protocolConfigState).
		SetMsolTokenVaultAccount(msolTokenVault)
}
