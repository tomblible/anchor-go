// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminUpdateStandardLiquidityPoolState is the `admin_update_standard_liquidity_pool_state` instruction.
type AdminUpdateStandardLiquidityPoolState struct {
	Update AdminUpdateLiquidityPoolState

	// [0] = [WRITE] liquidity_pool_state
	//
	// [1] = [WRITE] protocol_config
	//
	// [2] = [SIGNER] protocol_admin
	//
	// [3] = [] protocol_admin_state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminUpdateStandardLiquidityPoolStateInstructionBuilder creates a new `AdminUpdateStandardLiquidityPoolState` instruction builder.
func NewAdminUpdateStandardLiquidityPoolStateInstructionBuilder() *AdminUpdateStandardLiquidityPoolState {
	nd := &AdminUpdateStandardLiquidityPoolState{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(ProtocolAdminStatePDA)
	return nd
}

// SetUpdate sets the "update" parameter.
func (inst *AdminUpdateStandardLiquidityPoolState) SetUpdate(update AdminUpdateLiquidityPoolState) *AdminUpdateStandardLiquidityPoolState {
	inst.Update = update
	return inst
}

// SetLiquidityPoolStateAccount sets the "liquidity_pool_state" account.
func (inst *AdminUpdateStandardLiquidityPoolState) SetLiquidityPoolStateAccount(liquidityPoolState ag_solanago.PublicKey) *AdminUpdateStandardLiquidityPoolState {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(liquidityPoolState).WRITE()
	return inst
}

// GetLiquidityPoolStateAccount gets the "liquidity_pool_state" account.
func (inst *AdminUpdateStandardLiquidityPoolState) GetLiquidityPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProtocolConfigAccount sets the "protocol_config" account.
func (inst *AdminUpdateStandardLiquidityPoolState) SetProtocolConfigAccount(protocolConfig ag_solanago.PublicKey) *AdminUpdateStandardLiquidityPoolState {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(protocolConfig).WRITE()
	return inst
}

// GetProtocolConfigAccount gets the "protocol_config" account.
func (inst *AdminUpdateStandardLiquidityPoolState) GetProtocolConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProtocolAdminAccount sets the "protocol_admin" account.
func (inst *AdminUpdateStandardLiquidityPoolState) SetProtocolAdminAccount(protocolAdmin ag_solanago.PublicKey) *AdminUpdateStandardLiquidityPoolState {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(protocolAdmin).SIGNER()
	return inst
}

// GetProtocolAdminAccount gets the "protocol_admin" account.
func (inst *AdminUpdateStandardLiquidityPoolState) GetProtocolAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProtocolAdminStateAccount sets the "protocol_admin_state" account.
func (inst *AdminUpdateStandardLiquidityPoolState) SetProtocolAdminStateAccount(protocolAdminState ag_solanago.PublicKey) *AdminUpdateStandardLiquidityPoolState {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(protocolAdminState)
	return inst
}

// GetProtocolAdminStateAccount gets the "protocol_admin_state" account.
func (inst *AdminUpdateStandardLiquidityPoolState) GetProtocolAdminStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *AdminUpdateStandardLiquidityPoolState) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AdminUpdateStandardLiquidityPoolState) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AdminUpdateStandardLiquidityPoolState {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *AdminUpdateStandardLiquidityPoolState) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst AdminUpdateStandardLiquidityPoolState) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminUpdateStandardLiquidityPoolState,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminUpdateStandardLiquidityPoolState) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminUpdateStandardLiquidityPoolState) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Update == nil {
			return errors.New("update parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LiquidityPoolState is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProtocolConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ProtocolAdmin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProtocolAdminState is not set")
		}
	}
	return nil
}

func (inst *AdminUpdateStandardLiquidityPoolState) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminUpdateStandardLiquidityPoolState")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Update", inst.Update))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("liquidity_pool_state", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     protocol_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      protocol_admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("protocol_admin_state", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj AdminUpdateStandardLiquidityPoolState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Update` param:
	{
		tmp := adminUpdateLiquidityPoolStateContainer{}
		switch realvalue := obj.Update.(type) {
		case *AdminUpdateLiquidityPoolStateCreatorTradingFeeClaimStatusTuple:
			tmp.Enum = 0
			tmp.CreatorTradingFeeClaimStatus = *realvalue
		case *AdminUpdateLiquidityPoolStateCreatorTradingFeeDistributionTuple:
			tmp.Enum = 1
			tmp.CreatorTradingFeeDistribution = *realvalue
		case *AdminUpdateLiquidityPoolStateCreatorTradingFeeReceiverTuple:
			tmp.Enum = 2
			tmp.CreatorTradingFeeReceiver = *realvalue
		case *AdminUpdateLiquidityPoolStateFeeConfigurationModeTuple:
			tmp.Enum = 3
			tmp.FeeConfigurationMode = *realvalue
		case *AdminUpdateLiquidityPoolStateSlotOffsetBasedFeesTuple:
			tmp.Enum = 4
			tmp.SlotOffsetBasedFees = *realvalue
		case *AdminUpdateLiquidityPoolStateMarketCapBasedFeesTuple:
			tmp.Enum = 5
			tmp.MarketCapBasedFees = *realvalue
		case *AdminUpdateLiquidityPoolStateToggleSwapPermissionTuple:
			tmp.Enum = 6
			tmp.ToggleSwapPermission = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *AdminUpdateStandardLiquidityPoolState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Update`:
	{
		tmp := new(adminUpdateLiquidityPoolStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Update = &tmp.CreatorTradingFeeClaimStatus
		case 1:
			obj.Update = &tmp.CreatorTradingFeeDistribution
		case 2:
			obj.Update = &tmp.CreatorTradingFeeReceiver
		case 3:
			obj.Update = &tmp.FeeConfigurationMode
		case 4:
			obj.Update = &tmp.SlotOffsetBasedFees
		case 5:
			obj.Update = &tmp.MarketCapBasedFees
		case 6:
			obj.Update = &tmp.ToggleSwapPermission
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewAdminUpdateStandardLiquidityPoolStateInstruction declares a new AdminUpdateStandardLiquidityPoolState instruction with the provided parameters and accounts.
func NewAdminUpdateStandardLiquidityPoolStateInstruction(
	// Parameters:
	update AdminUpdateLiquidityPoolState,
	// Accounts:
	liquidityPoolState ag_solanago.PublicKey,
	protocolConfig ag_solanago.PublicKey,
	protocolAdmin ag_solanago.PublicKey) *AdminUpdateStandardLiquidityPoolState {
	return NewAdminUpdateStandardLiquidityPoolStateInstructionBuilder().
		SetUpdate(update).
		SetLiquidityPoolStateAccount(liquidityPoolState).
		SetProtocolConfigAccount(protocolConfig).
		SetProtocolAdminAccount(protocolAdmin)
}

// NewSimpleAdminUpdateStandardLiquidityPoolStateInstruction declares a new AdminUpdateStandardLiquidityPoolState instruction with the provided parameters and accounts.
func NewSimpleAdminUpdateStandardLiquidityPoolStateInstruction(
	// Parameters:
	update AdminUpdateLiquidityPoolState,
	// Accounts:
	liquidityPoolState ag_solanago.PublicKey,
	protocolConfig ag_solanago.PublicKey,
	protocolAdmin ag_solanago.PublicKey) *AdminUpdateStandardLiquidityPoolState {
	return NewAdminUpdateStandardLiquidityPoolStateInstructionBuilder().
		SetUpdate(update).
		SetLiquidityPoolStateAccount(liquidityPoolState).
		SetProtocolConfigAccount(protocolConfig).
		SetProtocolAdminAccount(protocolAdmin)
}
