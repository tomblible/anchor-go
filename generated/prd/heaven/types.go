// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AdminUpdateLiquidityPoolState interface {
	isAdminUpdateLiquidityPoolState()
}

type adminUpdateLiquidityPoolStateContainer struct {
	Enum                          ag_binary.BorshEnum `borsh_enum:"true"`
	CreatorTradingFeeClaimStatus  AdminUpdateLiquidityPoolStateCreatorTradingFeeClaimStatusTuple
	CreatorTradingFeeDistribution AdminUpdateLiquidityPoolStateCreatorTradingFeeDistributionTuple
	CreatorTradingFeeReceiver     AdminUpdateLiquidityPoolStateCreatorTradingFeeReceiverTuple
	FeeConfigurationMode          AdminUpdateLiquidityPoolStateFeeConfigurationModeTuple
	SlotOffsetBasedFees           AdminUpdateLiquidityPoolStateSlotOffsetBasedFeesTuple
	MarketCapBasedFees            AdminUpdateLiquidityPoolStateMarketCapBasedFeesTuple
	ToggleSwapPermission          AdminUpdateLiquidityPoolStateToggleSwapPermissionTuple
}

type AdminUpdateLiquidityPoolStateCreatorTradingFeeClaimStatusTuple struct {
	Elem0 CreatorTradingFeeClaimStatus
}

func (_ AdminUpdateLiquidityPoolStateCreatorTradingFeeClaimStatusTuple) isAdminUpdateLiquidityPoolState() {
}

type AdminUpdateLiquidityPoolStateCreatorTradingFeeDistributionTuple struct {
	Elem0 CreatorTradingFeeDistribution
}

func (_ AdminUpdateLiquidityPoolStateCreatorTradingFeeDistributionTuple) isAdminUpdateLiquidityPoolState() {
}

type AdminUpdateLiquidityPoolStateCreatorTradingFeeReceiverTuple struct {
	Elem0 ag_solanago.PublicKey
}

func (_ AdminUpdateLiquidityPoolStateCreatorTradingFeeReceiverTuple) isAdminUpdateLiquidityPoolState() {
}

type AdminUpdateLiquidityPoolStateFeeConfigurationModeTuple struct {
	Elem0 FeeConfigurationMode
}

func (_ AdminUpdateLiquidityPoolStateFeeConfigurationModeTuple) isAdminUpdateLiquidityPoolState() {}

type AdminUpdateLiquidityPoolStateSlotOffsetBasedFeesTuple struct {
	FeeType FeeType
	Fees    SlotFeeBrackets
}

func (obj AdminUpdateLiquidityPoolStateSlotOffsetBasedFeesTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeType` param:
	err = encoder.Encode(obj.FeeType)
	if err != nil {
		return err
	}
	// Serialize `Fees` param:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdminUpdateLiquidityPoolStateSlotOffsetBasedFeesTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeType`:
	err = decoder.Decode(&obj.FeeType)
	if err != nil {
		return err
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return err
	}
	return nil
}

func (_ AdminUpdateLiquidityPoolStateSlotOffsetBasedFeesTuple) isAdminUpdateLiquidityPoolState() {}

type AdminUpdateLiquidityPoolStateMarketCapBasedFeesTuple struct {
	FeeType FeeType
	Fees    FeeBrackets
}

func (obj AdminUpdateLiquidityPoolStateMarketCapBasedFeesTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeType` param:
	err = encoder.Encode(obj.FeeType)
	if err != nil {
		return err
	}
	// Serialize `Fees` param:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdminUpdateLiquidityPoolStateMarketCapBasedFeesTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeType`:
	err = decoder.Decode(&obj.FeeType)
	if err != nil {
		return err
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return err
	}
	return nil
}

func (_ AdminUpdateLiquidityPoolStateMarketCapBasedFeesTuple) isAdminUpdateLiquidityPoolState() {}

type AdminUpdateLiquidityPoolStateToggleSwapPermissionTuple struct {
	Elem0 bool
}

func (_ AdminUpdateLiquidityPoolStateToggleSwapPermissionTuple) isAdminUpdateLiquidityPoolState() {}

type BuyParams struct {
	MaxSolSpend                 uint64
	MinimumAmountOut            uint64
	EncodedUserDefinedEventData string
}

func (obj BuyParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxSolSpend` param:
	err = encoder.Encode(obj.MaxSolSpend)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	// Serialize `EncodedUserDefinedEventData` param:
	err = encoder.Encode(obj.EncodedUserDefinedEventData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BuyParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxSolSpend`:
	err = decoder.Decode(&obj.MaxSolSpend)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `EncodedUserDefinedEventData`:
	err = decoder.Decode(&obj.EncodedUserDefinedEventData)
	if err != nil {
		return err
	}
	return nil
}

type CreateLiquidityPoolEvent struct {
	LiquidityPoolId                  ag_solanago.PublicKey
	User                             ag_solanago.PublicKey
	BaseTokenInputTransferFeeAmount  uint64
	QuoteTokenInputTransferFeeAmount uint64
	BaseTokenInputAmount             uint64
	QuoteTokenInputAmount            uint64
	LpTokenOutputAmount              uint64
	LockedLp                         bool
}

func (obj CreateLiquidityPoolEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LiquidityPoolId` param:
	err = encoder.Encode(obj.LiquidityPoolId)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `BaseTokenInputTransferFeeAmount` param:
	err = encoder.Encode(obj.BaseTokenInputTransferFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteTokenInputTransferFeeAmount` param:
	err = encoder.Encode(obj.QuoteTokenInputTransferFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `BaseTokenInputAmount` param:
	err = encoder.Encode(obj.BaseTokenInputAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteTokenInputAmount` param:
	err = encoder.Encode(obj.QuoteTokenInputAmount)
	if err != nil {
		return err
	}
	// Serialize `LpTokenOutputAmount` param:
	err = encoder.Encode(obj.LpTokenOutputAmount)
	if err != nil {
		return err
	}
	// Serialize `LockedLp` param:
	err = encoder.Encode(obj.LockedLp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateLiquidityPoolEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LiquidityPoolId`:
	err = decoder.Decode(&obj.LiquidityPoolId)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `BaseTokenInputTransferFeeAmount`:
	err = decoder.Decode(&obj.BaseTokenInputTransferFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteTokenInputTransferFeeAmount`:
	err = decoder.Decode(&obj.QuoteTokenInputTransferFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `BaseTokenInputAmount`:
	err = decoder.Decode(&obj.BaseTokenInputAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteTokenInputAmount`:
	err = decoder.Decode(&obj.QuoteTokenInputAmount)
	if err != nil {
		return err
	}
	// Deserialize `LpTokenOutputAmount`:
	err = decoder.Decode(&obj.LpTokenOutputAmount)
	if err != nil {
		return err
	}
	// Deserialize `LockedLp`:
	err = decoder.Decode(&obj.LockedLp)
	if err != nil {
		return err
	}
	return nil
}

type CreateStandardLiquidityPoolEvent struct {
	PoolId                    ag_solanago.PublicKey
	Payer                     ag_solanago.PublicKey
	Creator                   ag_solanago.PublicKey
	Mint                      ag_solanago.PublicKey
	ConfigVersion             uint16
	InitialTokenReserve       uint64
	InitialVirtualWsolReserve uint64
}

func (obj CreateStandardLiquidityPoolEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolId` param:
	err = encoder.Encode(obj.PoolId)
	if err != nil {
		return err
	}
	// Serialize `Payer` param:
	err = encoder.Encode(obj.Payer)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `ConfigVersion` param:
	err = encoder.Encode(obj.ConfigVersion)
	if err != nil {
		return err
	}
	// Serialize `InitialTokenReserve` param:
	err = encoder.Encode(obj.InitialTokenReserve)
	if err != nil {
		return err
	}
	// Serialize `InitialVirtualWsolReserve` param:
	err = encoder.Encode(obj.InitialVirtualWsolReserve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateStandardLiquidityPoolEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolId`:
	err = decoder.Decode(&obj.PoolId)
	if err != nil {
		return err
	}
	// Deserialize `Payer`:
	err = decoder.Decode(&obj.Payer)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `ConfigVersion`:
	err = decoder.Decode(&obj.ConfigVersion)
	if err != nil {
		return err
	}
	// Deserialize `InitialTokenReserve`:
	err = decoder.Decode(&obj.InitialTokenReserve)
	if err != nil {
		return err
	}
	// Deserialize `InitialVirtualWsolReserve`:
	err = decoder.Decode(&obj.InitialVirtualWsolReserve)
	if err != nil {
		return err
	}
	return nil
}

type CreateStandardLiquidityPoolParams struct {
	EncodedUserDefinedEventData string
	InitialPurchaseAmount       uint64
	MaxSolSpend                 uint64
}

func (obj CreateStandardLiquidityPoolParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EncodedUserDefinedEventData` param:
	err = encoder.Encode(obj.EncodedUserDefinedEventData)
	if err != nil {
		return err
	}
	// Serialize `InitialPurchaseAmount` param:
	err = encoder.Encode(obj.InitialPurchaseAmount)
	if err != nil {
		return err
	}
	// Serialize `MaxSolSpend` param:
	err = encoder.Encode(obj.MaxSolSpend)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateStandardLiquidityPoolParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EncodedUserDefinedEventData`:
	err = decoder.Decode(&obj.EncodedUserDefinedEventData)
	if err != nil {
		return err
	}
	// Deserialize `InitialPurchaseAmount`:
	err = decoder.Decode(&obj.InitialPurchaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `MaxSolSpend`:
	err = decoder.Decode(&obj.MaxSolSpend)
	if err != nil {
		return err
	}
	return nil
}

type CreatingLiquidityPoolEvent struct {
	Id          ag_solanago.PublicKey
	Base        ag_solanago.PublicKey
	Quote       ag_solanago.PublicKey
	BaseAmount  uint64
	QuoteAmount uint64
}

func (obj CreatingLiquidityPoolEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Base` param:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return err
	}
	// Serialize `Quote` param:
	err = encoder.Encode(obj.Quote)
	if err != nil {
		return err
	}
	// Serialize `BaseAmount` param:
	err = encoder.Encode(obj.BaseAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmount` param:
	err = encoder.Encode(obj.QuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreatingLiquidityPoolEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return err
	}
	// Deserialize `Quote`:
	err = decoder.Decode(&obj.Quote)
	if err != nil {
		return err
	}
	// Deserialize `BaseAmount`:
	err = decoder.Decode(&obj.BaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmount`:
	err = decoder.Decode(&obj.QuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

type CreatorTradingFeeClaimStatus ag_binary.BorshEnum

const (
	CreatorTradingFeeClaimStatusUnclaimed CreatorTradingFeeClaimStatus = iota
	CreatorTradingFeeClaimStatusSubmitted
	CreatorTradingFeeClaimStatusProcessed
)

func (value CreatorTradingFeeClaimStatus) String() string {
	switch value {
	case CreatorTradingFeeClaimStatusUnclaimed:
		return "Unclaimed"
	case CreatorTradingFeeClaimStatusSubmitted:
		return "Submitted"
	case CreatorTradingFeeClaimStatusProcessed:
		return "Processed"
	default:
		return ""
	}
}

type CreatorTradingFeeDistribution ag_binary.BorshEnum

const (
	CreatorTradingFeeDistributionCommunity CreatorTradingFeeDistribution = iota
	CreatorTradingFeeDistributionCreator
	CreatorTradingFeeDistributionBlocked
	CreatorTradingFeeDistributionShared
)

func (value CreatorTradingFeeDistribution) String() string {
	switch value {
	case CreatorTradingFeeDistributionCommunity:
		return "Community"
	case CreatorTradingFeeDistributionCreator:
		return "Creator"
	case CreatorTradingFeeDistributionBlocked:
		return "Blocked"
	case CreatorTradingFeeDistributionShared:
		return "Shared"
	default:
		return ""
	}
}

type FeeBracket struct {
	MarketCapUpperBound uint64
	BuyFeeBps           uint32
	SellFeeBps          uint32
}

func (obj FeeBracket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketCapUpperBound` param:
	err = encoder.Encode(obj.MarketCapUpperBound)
	if err != nil {
		return err
	}
	// Serialize `BuyFeeBps` param:
	err = encoder.Encode(obj.BuyFeeBps)
	if err != nil {
		return err
	}
	// Serialize `SellFeeBps` param:
	err = encoder.Encode(obj.SellFeeBps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeBracket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketCapUpperBound`:
	err = decoder.Decode(&obj.MarketCapUpperBound)
	if err != nil {
		return err
	}
	// Deserialize `BuyFeeBps`:
	err = decoder.Decode(&obj.BuyFeeBps)
	if err != nil {
		return err
	}
	// Deserialize `SellFeeBps`:
	err = decoder.Decode(&obj.SellFeeBps)
	if err != nil {
		return err
	}
	return nil
}

type FeeBrackets struct {
	Brackets [4]FeeBracket
	Count    uint8
	_padding [7]uint8
}

func (obj FeeBrackets) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Brackets` param:
	err = encoder.Encode(obj.Brackets)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeBrackets) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Brackets`:
	err = decoder.Decode(&obj.Brackets)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type FeeConfigurationMode ag_binary.BorshEnum

const (
	FeeConfigurationModeGlobal FeeConfigurationMode = iota
	FeeConfigurationModeLocal
)

func (value FeeConfigurationMode) String() string {
	switch value {
	case FeeConfigurationModeGlobal:
		return "Global"
	case FeeConfigurationModeLocal:
		return "Local"
	default:
		return ""
	}
}

type FeeType ag_binary.BorshEnum

const (
	FeeTypeProtocolFee FeeType = iota
	FeeTypeLiquidityProviderFee
	FeeTypeCreatorFee
	FeeTypeCreatorFeeProtocolFee
	FeeTypeReflectionFee
)

func (value FeeType) String() string {
	switch value {
	case FeeTypeProtocolFee:
		return "ProtocolFee"
	case FeeTypeLiquidityProviderFee:
		return "LiquidityProviderFee"
	case FeeTypeCreatorFee:
		return "CreatorFee"
	case FeeTypeCreatorFeeProtocolFee:
		return "CreatorFeeProtocolFee"
	case FeeTypeReflectionFee:
		return "ReflectionFee"
	default:
		return ""
	}
}

type LiquidityPoolAllowlist struct {
	Swap                    uint8
	RemoveLiquidity         uint8
	DepositLiquidity        uint8
	SameSlotTrading         uint8
	UpdateCreatorTradingFee uint8
	padding1                [2]uint8
}

func (obj LiquidityPoolAllowlist) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Swap` param:
	err = encoder.Encode(obj.Swap)
	if err != nil {
		return err
	}
	// Serialize `RemoveLiquidity` param:
	err = encoder.Encode(obj.RemoveLiquidity)
	if err != nil {
		return err
	}
	// Serialize `DepositLiquidity` param:
	err = encoder.Encode(obj.DepositLiquidity)
	if err != nil {
		return err
	}
	// Serialize `SameSlotTrading` param:
	err = encoder.Encode(obj.SameSlotTrading)
	if err != nil {
		return err
	}
	// Serialize `UpdateCreatorTradingFee` param:
	err = encoder.Encode(obj.UpdateCreatorTradingFee)
	if err != nil {
		return err
	}
	// Serialize `padding1` param:
	err = encoder.Encode(obj.padding1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolAllowlist) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Swap`:
	err = decoder.Decode(&obj.Swap)
	if err != nil {
		return err
	}
	// Deserialize `RemoveLiquidity`:
	err = decoder.Decode(&obj.RemoveLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `DepositLiquidity`:
	err = decoder.Decode(&obj.DepositLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `SameSlotTrading`:
	err = decoder.Decode(&obj.SameSlotTrading)
	if err != nil {
		return err
	}
	// Deserialize `UpdateCreatorTradingFee`:
	err = decoder.Decode(&obj.UpdateCreatorTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `padding1`:
	err = decoder.Decode(&obj.padding1)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolFeatureFlags struct {
	SandwichResistantMode uint8
	padding1              [7]uint8
}

func (obj LiquidityPoolFeatureFlags) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SandwichResistantMode` param:
	err = encoder.Encode(obj.SandwichResistantMode)
	if err != nil {
		return err
	}
	// Serialize `padding1` param:
	err = encoder.Encode(obj.padding1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolFeatureFlags) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SandwichResistantMode`:
	err = decoder.Decode(&obj.SandwichResistantMode)
	if err != nil {
		return err
	}
	// Deserialize `padding1`:
	err = decoder.Decode(&obj.padding1)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolInfo struct {
	Creator               ag_solanago.PublicKey
	UpdateAuthority       ag_solanago.PublicKey
	OpenAt                uint64
	CreatedAt             uint64
	ProtocolConfigVersion uint16
	Rtype                 uint8
	PoolAuthorityBump     uint8
	TempSolHolderBump     uint8
	Pad                   [3]uint8
}

func (obj LiquidityPoolInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `UpdateAuthority` param:
	err = encoder.Encode(obj.UpdateAuthority)
	if err != nil {
		return err
	}
	// Serialize `OpenAt` param:
	err = encoder.Encode(obj.OpenAt)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `ProtocolConfigVersion` param:
	err = encoder.Encode(obj.ProtocolConfigVersion)
	if err != nil {
		return err
	}
	// Serialize `Rtype` param:
	err = encoder.Encode(obj.Rtype)
	if err != nil {
		return err
	}
	// Serialize `PoolAuthorityBump` param:
	err = encoder.Encode(obj.PoolAuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `TempSolHolderBump` param:
	err = encoder.Encode(obj.TempSolHolderBump)
	if err != nil {
		return err
	}
	// Serialize `Pad` param:
	err = encoder.Encode(obj.Pad)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `UpdateAuthority`:
	err = decoder.Decode(&obj.UpdateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `OpenAt`:
	err = decoder.Decode(&obj.OpenAt)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolConfigVersion`:
	err = decoder.Decode(&obj.ProtocolConfigVersion)
	if err != nil {
		return err
	}
	// Deserialize `Rtype`:
	err = decoder.Decode(&obj.Rtype)
	if err != nil {
		return err
	}
	// Deserialize `PoolAuthorityBump`:
	err = decoder.Decode(&obj.PoolAuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `TempSolHolderBump`:
	err = decoder.Decode(&obj.TempSolHolderBump)
	if err != nil {
		return err
	}
	// Deserialize `Pad`:
	err = decoder.Decode(&obj.Pad)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolLpTokenInfo struct {
	Supply   LiquidityPoolLpTokenSupply
	Decimals uint8
	Pad      [7]uint8
}

func (obj LiquidityPoolLpTokenInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Pad` param:
	err = encoder.Encode(obj.Pad)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolLpTokenInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Pad`:
	err = decoder.Decode(&obj.Pad)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolLpTokenSupply struct {
	Initial  uint64
	Total    uint64
	Unlocked uint64
	Locked   uint64
	Burnt    uint64
}

func (obj LiquidityPoolLpTokenSupply) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initial` param:
	err = encoder.Encode(obj.Initial)
	if err != nil {
		return err
	}
	// Serialize `Total` param:
	err = encoder.Encode(obj.Total)
	if err != nil {
		return err
	}
	// Serialize `Unlocked` param:
	err = encoder.Encode(obj.Unlocked)
	if err != nil {
		return err
	}
	// Serialize `Locked` param:
	err = encoder.Encode(obj.Locked)
	if err != nil {
		return err
	}
	// Serialize `Burnt` param:
	err = encoder.Encode(obj.Burnt)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolLpTokenSupply) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initial`:
	err = decoder.Decode(&obj.Initial)
	if err != nil {
		return err
	}
	// Deserialize `Total`:
	err = decoder.Decode(&obj.Total)
	if err != nil {
		return err
	}
	// Deserialize `Unlocked`:
	err = decoder.Decode(&obj.Unlocked)
	if err != nil {
		return err
	}
	// Deserialize `Locked`:
	err = decoder.Decode(&obj.Locked)
	if err != nil {
		return err
	}
	// Deserialize `Burnt`:
	err = decoder.Decode(&obj.Burnt)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolMarketCapBasedFees struct {
	ProtocolTradingFee           FeeBrackets
	LiquidityProviderTradingFee  FeeBrackets
	CreatorTradingFee            FeeBrackets
	CreatorTradingFeeProtocolFee FeeBrackets
	ReflectionTradingFee         FeeBrackets
}

func (obj LiquidityPoolMarketCapBasedFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProtocolTradingFee` param:
	err = encoder.Encode(obj.ProtocolTradingFee)
	if err != nil {
		return err
	}
	// Serialize `LiquidityProviderTradingFee` param:
	err = encoder.Encode(obj.LiquidityProviderTradingFee)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFee` param:
	err = encoder.Encode(obj.CreatorTradingFee)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeProtocolFee` param:
	err = encoder.Encode(obj.CreatorTradingFeeProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `ReflectionTradingFee` param:
	err = encoder.Encode(obj.ReflectionTradingFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolMarketCapBasedFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProtocolTradingFee`:
	err = decoder.Decode(&obj.ProtocolTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityProviderTradingFee`:
	err = decoder.Decode(&obj.LiquidityProviderTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFee`:
	err = decoder.Decode(&obj.CreatorTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeProtocolFee`:
	err = decoder.Decode(&obj.CreatorTradingFeeProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `ReflectionTradingFee`:
	err = decoder.Decode(&obj.ReflectionTradingFee)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolReserve struct {
	TokenA           uint64
	TokenB           uint64
	SnapshotSlot     uint64
	SnapshotA        uint64
	SnapshotB        uint64
	padding          uint64
	InitialA         uint64
	InitialB         uint64
	LeaderSlotWindow uint8
	Pad              [7]uint8
}

func (obj LiquidityPoolReserve) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenA` param:
	err = encoder.Encode(obj.TokenA)
	if err != nil {
		return err
	}
	// Serialize `TokenB` param:
	err = encoder.Encode(obj.TokenB)
	if err != nil {
		return err
	}
	// Serialize `SnapshotSlot` param:
	err = encoder.Encode(obj.SnapshotSlot)
	if err != nil {
		return err
	}
	// Serialize `SnapshotA` param:
	err = encoder.Encode(obj.SnapshotA)
	if err != nil {
		return err
	}
	// Serialize `SnapshotB` param:
	err = encoder.Encode(obj.SnapshotB)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `InitialA` param:
	err = encoder.Encode(obj.InitialA)
	if err != nil {
		return err
	}
	// Serialize `InitialB` param:
	err = encoder.Encode(obj.InitialB)
	if err != nil {
		return err
	}
	// Serialize `LeaderSlotWindow` param:
	err = encoder.Encode(obj.LeaderSlotWindow)
	if err != nil {
		return err
	}
	// Serialize `Pad` param:
	err = encoder.Encode(obj.Pad)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolReserve) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenA`:
	err = decoder.Decode(&obj.TokenA)
	if err != nil {
		return err
	}
	// Deserialize `TokenB`:
	err = decoder.Decode(&obj.TokenB)
	if err != nil {
		return err
	}
	// Deserialize `SnapshotSlot`:
	err = decoder.Decode(&obj.SnapshotSlot)
	if err != nil {
		return err
	}
	// Deserialize `SnapshotA`:
	err = decoder.Decode(&obj.SnapshotA)
	if err != nil {
		return err
	}
	// Deserialize `SnapshotB`:
	err = decoder.Decode(&obj.SnapshotB)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `InitialA`:
	err = decoder.Decode(&obj.InitialA)
	if err != nil {
		return err
	}
	// Deserialize `InitialB`:
	err = decoder.Decode(&obj.InitialB)
	if err != nil {
		return err
	}
	// Deserialize `LeaderSlotWindow`:
	err = decoder.Decode(&obj.LeaderSlotWindow)
	if err != nil {
		return err
	}
	// Deserialize `Pad`:
	err = decoder.Decode(&obj.Pad)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolSlotOffsetBasedFees struct {
	ProtocolTradingFee           SlotFeeBrackets
	LiquidityProviderTradingFee  SlotFeeBrackets
	CreatorTradingFee            SlotFeeBrackets
	CreatorTradingFeeProtocolFee SlotFeeBrackets
	ReflectionTradingFee         SlotFeeBrackets
	Pad                          [6]uint8
}

func (obj LiquidityPoolSlotOffsetBasedFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProtocolTradingFee` param:
	err = encoder.Encode(obj.ProtocolTradingFee)
	if err != nil {
		return err
	}
	// Serialize `LiquidityProviderTradingFee` param:
	err = encoder.Encode(obj.LiquidityProviderTradingFee)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFee` param:
	err = encoder.Encode(obj.CreatorTradingFee)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeProtocolFee` param:
	err = encoder.Encode(obj.CreatorTradingFeeProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `ReflectionTradingFee` param:
	err = encoder.Encode(obj.ReflectionTradingFee)
	if err != nil {
		return err
	}
	// Serialize `Pad` param:
	err = encoder.Encode(obj.Pad)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolSlotOffsetBasedFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProtocolTradingFee`:
	err = decoder.Decode(&obj.ProtocolTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityProviderTradingFee`:
	err = decoder.Decode(&obj.LiquidityProviderTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFee`:
	err = decoder.Decode(&obj.CreatorTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeProtocolFee`:
	err = decoder.Decode(&obj.CreatorTradingFeeProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `ReflectionTradingFee`:
	err = decoder.Decode(&obj.ReflectionTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `Pad`:
	err = decoder.Decode(&obj.Pad)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolState struct {
	Info                                                        LiquidityPoolInfo
	MarketCapBasedFees                                          LiquidityPoolMarketCapBasedFees
	Reserve                                                     LiquidityPoolReserve
	LpToken                                                     LiquidityPoolLpTokenInfo
	ProtocolTradingFees                                         uint64
	CreatorTradingFees                                          uint64
	CreatorTradingFeesClaimedByCreator                          uint64
	CreatorTradingFeesClaimedByOthers                           uint64
	LiquidityProviderTradingFees                                uint64
	CreatorTradingFeeProtocolFees                               uint64
	ReflectionTradingFees                                       uint64
	CreatedAtSlot                                               uint64
	TradingVolumeUsd                                            float64
	CreatorTradingFeeTradingVolumeThreshold                     float64
	CreatorTradingFeeTradingVolumeThresholdReachedUnixTimestamp uint64
	TokenAVault                                                 ag_solanago.PublicKey
	TokenBVault                                                 ag_solanago.PublicKey
	ProtocolConfig                                              ag_solanago.PublicKey
	Key                                                         ag_solanago.PublicKey
	TokenA                                                      LiquidityPoolTokenInfo
	TokenB                                                      LiquidityPoolTokenInfo
	Allowlist                                                   LiquidityPoolAllowlist
	FeatureFlags                                                LiquidityPoolFeatureFlags
	TaxableSide                                                 uint8
	TaxableSideType                                             uint8
	CreatorTradingFeeDistribution                               uint8
	CreatorTradingFeeClaimStatus                                uint8
	FeeConfigurationMode                                        uint8
	IsMigrated                                                  uint8
	Pad                                                         [13]uint8
	SlotOffsetBasedFees                                         LiquidityPoolSlotOffsetBasedFees
	CreatorTradingFeeReceiver                                   ag_solanago.PublicKey
}

func (obj LiquidityPoolState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Info` param:
	err = encoder.Encode(obj.Info)
	if err != nil {
		return err
	}
	// Serialize `MarketCapBasedFees` param:
	err = encoder.Encode(obj.MarketCapBasedFees)
	if err != nil {
		return err
	}
	// Serialize `Reserve` param:
	err = encoder.Encode(obj.Reserve)
	if err != nil {
		return err
	}
	// Serialize `LpToken` param:
	err = encoder.Encode(obj.LpToken)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradingFees` param:
	err = encoder.Encode(obj.ProtocolTradingFees)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFees` param:
	err = encoder.Encode(obj.CreatorTradingFees)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeesClaimedByCreator` param:
	err = encoder.Encode(obj.CreatorTradingFeesClaimedByCreator)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeesClaimedByOthers` param:
	err = encoder.Encode(obj.CreatorTradingFeesClaimedByOthers)
	if err != nil {
		return err
	}
	// Serialize `LiquidityProviderTradingFees` param:
	err = encoder.Encode(obj.LiquidityProviderTradingFees)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeProtocolFees` param:
	err = encoder.Encode(obj.CreatorTradingFeeProtocolFees)
	if err != nil {
		return err
	}
	// Serialize `ReflectionTradingFees` param:
	err = encoder.Encode(obj.ReflectionTradingFees)
	if err != nil {
		return err
	}
	// Serialize `CreatedAtSlot` param:
	err = encoder.Encode(obj.CreatedAtSlot)
	if err != nil {
		return err
	}
	// Serialize `TradingVolumeUsd` param:
	err = encoder.Encode(obj.TradingVolumeUsd)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeTradingVolumeThreshold` param:
	err = encoder.Encode(obj.CreatorTradingFeeTradingVolumeThreshold)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeTradingVolumeThresholdReachedUnixTimestamp` param:
	err = encoder.Encode(obj.CreatorTradingFeeTradingVolumeThresholdReachedUnixTimestamp)
	if err != nil {
		return err
	}
	// Serialize `TokenAVault` param:
	err = encoder.Encode(obj.TokenAVault)
	if err != nil {
		return err
	}
	// Serialize `TokenBVault` param:
	err = encoder.Encode(obj.TokenBVault)
	if err != nil {
		return err
	}
	// Serialize `ProtocolConfig` param:
	err = encoder.Encode(obj.ProtocolConfig)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `TokenA` param:
	err = encoder.Encode(obj.TokenA)
	if err != nil {
		return err
	}
	// Serialize `TokenB` param:
	err = encoder.Encode(obj.TokenB)
	if err != nil {
		return err
	}
	// Serialize `Allowlist` param:
	err = encoder.Encode(obj.Allowlist)
	if err != nil {
		return err
	}
	// Serialize `FeatureFlags` param:
	err = encoder.Encode(obj.FeatureFlags)
	if err != nil {
		return err
	}
	// Serialize `TaxableSide` param:
	err = encoder.Encode(obj.TaxableSide)
	if err != nil {
		return err
	}
	// Serialize `TaxableSideType` param:
	err = encoder.Encode(obj.TaxableSideType)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeDistribution` param:
	err = encoder.Encode(obj.CreatorTradingFeeDistribution)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeClaimStatus` param:
	err = encoder.Encode(obj.CreatorTradingFeeClaimStatus)
	if err != nil {
		return err
	}
	// Serialize `FeeConfigurationMode` param:
	err = encoder.Encode(obj.FeeConfigurationMode)
	if err != nil {
		return err
	}
	// Serialize `IsMigrated` param:
	err = encoder.Encode(obj.IsMigrated)
	if err != nil {
		return err
	}
	// Serialize `Pad` param:
	err = encoder.Encode(obj.Pad)
	if err != nil {
		return err
	}
	// Serialize `SlotOffsetBasedFees` param:
	err = encoder.Encode(obj.SlotOffsetBasedFees)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeReceiver` param:
	err = encoder.Encode(obj.CreatorTradingFeeReceiver)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Info`:
	err = decoder.Decode(&obj.Info)
	if err != nil {
		return err
	}
	// Deserialize `MarketCapBasedFees`:
	err = decoder.Decode(&obj.MarketCapBasedFees)
	if err != nil {
		return err
	}
	// Deserialize `Reserve`:
	err = decoder.Decode(&obj.Reserve)
	if err != nil {
		return err
	}
	// Deserialize `LpToken`:
	err = decoder.Decode(&obj.LpToken)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradingFees`:
	err = decoder.Decode(&obj.ProtocolTradingFees)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFees`:
	err = decoder.Decode(&obj.CreatorTradingFees)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeesClaimedByCreator`:
	err = decoder.Decode(&obj.CreatorTradingFeesClaimedByCreator)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeesClaimedByOthers`:
	err = decoder.Decode(&obj.CreatorTradingFeesClaimedByOthers)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityProviderTradingFees`:
	err = decoder.Decode(&obj.LiquidityProviderTradingFees)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeProtocolFees`:
	err = decoder.Decode(&obj.CreatorTradingFeeProtocolFees)
	if err != nil {
		return err
	}
	// Deserialize `ReflectionTradingFees`:
	err = decoder.Decode(&obj.ReflectionTradingFees)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAtSlot`:
	err = decoder.Decode(&obj.CreatedAtSlot)
	if err != nil {
		return err
	}
	// Deserialize `TradingVolumeUsd`:
	err = decoder.Decode(&obj.TradingVolumeUsd)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeTradingVolumeThreshold`:
	err = decoder.Decode(&obj.CreatorTradingFeeTradingVolumeThreshold)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeTradingVolumeThresholdReachedUnixTimestamp`:
	err = decoder.Decode(&obj.CreatorTradingFeeTradingVolumeThresholdReachedUnixTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `TokenAVault`:
	err = decoder.Decode(&obj.TokenAVault)
	if err != nil {
		return err
	}
	// Deserialize `TokenBVault`:
	err = decoder.Decode(&obj.TokenBVault)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolConfig`:
	err = decoder.Decode(&obj.ProtocolConfig)
	if err != nil {
		return err
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `TokenA`:
	err = decoder.Decode(&obj.TokenA)
	if err != nil {
		return err
	}
	// Deserialize `TokenB`:
	err = decoder.Decode(&obj.TokenB)
	if err != nil {
		return err
	}
	// Deserialize `Allowlist`:
	err = decoder.Decode(&obj.Allowlist)
	if err != nil {
		return err
	}
	// Deserialize `FeatureFlags`:
	err = decoder.Decode(&obj.FeatureFlags)
	if err != nil {
		return err
	}
	// Deserialize `TaxableSide`:
	err = decoder.Decode(&obj.TaxableSide)
	if err != nil {
		return err
	}
	// Deserialize `TaxableSideType`:
	err = decoder.Decode(&obj.TaxableSideType)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeDistribution`:
	err = decoder.Decode(&obj.CreatorTradingFeeDistribution)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeClaimStatus`:
	err = decoder.Decode(&obj.CreatorTradingFeeClaimStatus)
	if err != nil {
		return err
	}
	// Deserialize `FeeConfigurationMode`:
	err = decoder.Decode(&obj.FeeConfigurationMode)
	if err != nil {
		return err
	}
	// Deserialize `IsMigrated`:
	err = decoder.Decode(&obj.IsMigrated)
	if err != nil {
		return err
	}
	// Deserialize `Pad`:
	err = decoder.Decode(&obj.Pad)
	if err != nil {
		return err
	}
	// Deserialize `SlotOffsetBasedFees`:
	err = decoder.Decode(&obj.SlotOffsetBasedFees)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeReceiver`:
	err = decoder.Decode(&obj.CreatorTradingFeeReceiver)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolTokenInfo struct {
	Mint     ag_solanago.PublicKey
	Decimals uint8
	Owner    ag_solanago.PublicKey
}

func (obj LiquidityPoolTokenInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityPoolTokenInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityPoolType ag_binary.BorshEnum

const (
	LiquidityPoolTypeNone LiquidityPoolType = iota
	LiquidityPoolTypePro
	LiquidityPoolTypeStandard
)

func (value LiquidityPoolType) String() string {
	switch value {
	case LiquidityPoolTypeNone:
		return "None"
	case LiquidityPoolTypePro:
		return "Pro"
	case LiquidityPoolTypeStandard:
		return "Standard"
	default:
		return ""
	}
}

type MsolTicketSolSpent struct {
	CostBasis    uint64
	MsolUnstaked uint64
}

func (obj MsolTicketSolSpent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CostBasis` param:
	err = encoder.Encode(obj.CostBasis)
	if err != nil {
		return err
	}
	// Serialize `MsolUnstaked` param:
	err = encoder.Encode(obj.MsolUnstaked)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MsolTicketSolSpent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CostBasis`:
	err = decoder.Decode(&obj.CostBasis)
	if err != nil {
		return err
	}
	// Deserialize `MsolUnstaked`:
	err = decoder.Decode(&obj.MsolUnstaked)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolAdminState struct {
	CurrentProtocolAdmin ag_solanago.PublicKey
}

func (obj ProtocolAdminState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CurrentProtocolAdmin` param:
	err = encoder.Encode(obj.CurrentProtocolAdmin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolAdminState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CurrentProtocolAdmin`:
	err = decoder.Decode(&obj.CurrentProtocolAdmin)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolConfig struct {
	CreatePoolFee                           uint64
	InitialTokenBAmount                     float64
	InitialTokenAAmount                     uint64
	UnstakedWsolReserve                     uint64
	TotalSolSpent                           uint64
	TotalMsolReceived                       uint64
	TotalRealizedProfit                     uint64
	PoolCount                               uint64
	MaxSupplyPerWallet                      uint64
	CreatorTradingFeeTradingVolumeThreshold float64
	MarketCapBasedFees                      LiquidityPoolMarketCapBasedFees
	BufferBps                               uint16
	AutoStakingThresholdBps                 uint16
	Version                                 uint16
	ProtocolConfigStateBump                 uint8
	AllowCreatePool                         uint8
	SupportedPoolType                       uint8
	DefaultLeaderSlotWindow                 uint8
	AutoStakingEnabled                      uint8
	LeaderSlotWindow                        uint8
	SandwichResistenceEnabled               uint8
	TokenADecimals                          uint8
	MigrationMarketCapThreshold             uint16
	Pad                                     [8]uint8
	MaxCreatorTradingFee                    uint32
	SlotOffsetBasedFees                     LiquidityPoolSlotOffsetBasedFees
}

func (obj ProtocolConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CreatePoolFee` param:
	err = encoder.Encode(obj.CreatePoolFee)
	if err != nil {
		return err
	}
	// Serialize `InitialTokenBAmount` param:
	err = encoder.Encode(obj.InitialTokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `InitialTokenAAmount` param:
	err = encoder.Encode(obj.InitialTokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `UnstakedWsolReserve` param:
	err = encoder.Encode(obj.UnstakedWsolReserve)
	if err != nil {
		return err
	}
	// Serialize `TotalSolSpent` param:
	err = encoder.Encode(obj.TotalSolSpent)
	if err != nil {
		return err
	}
	// Serialize `TotalMsolReceived` param:
	err = encoder.Encode(obj.TotalMsolReceived)
	if err != nil {
		return err
	}
	// Serialize `TotalRealizedProfit` param:
	err = encoder.Encode(obj.TotalRealizedProfit)
	if err != nil {
		return err
	}
	// Serialize `PoolCount` param:
	err = encoder.Encode(obj.PoolCount)
	if err != nil {
		return err
	}
	// Serialize `MaxSupplyPerWallet` param:
	err = encoder.Encode(obj.MaxSupplyPerWallet)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeTradingVolumeThreshold` param:
	err = encoder.Encode(obj.CreatorTradingFeeTradingVolumeThreshold)
	if err != nil {
		return err
	}
	// Serialize `MarketCapBasedFees` param:
	err = encoder.Encode(obj.MarketCapBasedFees)
	if err != nil {
		return err
	}
	// Serialize `BufferBps` param:
	err = encoder.Encode(obj.BufferBps)
	if err != nil {
		return err
	}
	// Serialize `AutoStakingThresholdBps` param:
	err = encoder.Encode(obj.AutoStakingThresholdBps)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `ProtocolConfigStateBump` param:
	err = encoder.Encode(obj.ProtocolConfigStateBump)
	if err != nil {
		return err
	}
	// Serialize `AllowCreatePool` param:
	err = encoder.Encode(obj.AllowCreatePool)
	if err != nil {
		return err
	}
	// Serialize `SupportedPoolType` param:
	err = encoder.Encode(obj.SupportedPoolType)
	if err != nil {
		return err
	}
	// Serialize `DefaultLeaderSlotWindow` param:
	err = encoder.Encode(obj.DefaultLeaderSlotWindow)
	if err != nil {
		return err
	}
	// Serialize `AutoStakingEnabled` param:
	err = encoder.Encode(obj.AutoStakingEnabled)
	if err != nil {
		return err
	}
	// Serialize `LeaderSlotWindow` param:
	err = encoder.Encode(obj.LeaderSlotWindow)
	if err != nil {
		return err
	}
	// Serialize `SandwichResistenceEnabled` param:
	err = encoder.Encode(obj.SandwichResistenceEnabled)
	if err != nil {
		return err
	}
	// Serialize `TokenADecimals` param:
	err = encoder.Encode(obj.TokenADecimals)
	if err != nil {
		return err
	}
	// Serialize `MigrationMarketCapThreshold` param:
	err = encoder.Encode(obj.MigrationMarketCapThreshold)
	if err != nil {
		return err
	}
	// Serialize `Pad` param:
	err = encoder.Encode(obj.Pad)
	if err != nil {
		return err
	}
	// Serialize `MaxCreatorTradingFee` param:
	err = encoder.Encode(obj.MaxCreatorTradingFee)
	if err != nil {
		return err
	}
	// Serialize `SlotOffsetBasedFees` param:
	err = encoder.Encode(obj.SlotOffsetBasedFees)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CreatePoolFee`:
	err = decoder.Decode(&obj.CreatePoolFee)
	if err != nil {
		return err
	}
	// Deserialize `InitialTokenBAmount`:
	err = decoder.Decode(&obj.InitialTokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `InitialTokenAAmount`:
	err = decoder.Decode(&obj.InitialTokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `UnstakedWsolReserve`:
	err = decoder.Decode(&obj.UnstakedWsolReserve)
	if err != nil {
		return err
	}
	// Deserialize `TotalSolSpent`:
	err = decoder.Decode(&obj.TotalSolSpent)
	if err != nil {
		return err
	}
	// Deserialize `TotalMsolReceived`:
	err = decoder.Decode(&obj.TotalMsolReceived)
	if err != nil {
		return err
	}
	// Deserialize `TotalRealizedProfit`:
	err = decoder.Decode(&obj.TotalRealizedProfit)
	if err != nil {
		return err
	}
	// Deserialize `PoolCount`:
	err = decoder.Decode(&obj.PoolCount)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupplyPerWallet`:
	err = decoder.Decode(&obj.MaxSupplyPerWallet)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeTradingVolumeThreshold`:
	err = decoder.Decode(&obj.CreatorTradingFeeTradingVolumeThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MarketCapBasedFees`:
	err = decoder.Decode(&obj.MarketCapBasedFees)
	if err != nil {
		return err
	}
	// Deserialize `BufferBps`:
	err = decoder.Decode(&obj.BufferBps)
	if err != nil {
		return err
	}
	// Deserialize `AutoStakingThresholdBps`:
	err = decoder.Decode(&obj.AutoStakingThresholdBps)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolConfigStateBump`:
	err = decoder.Decode(&obj.ProtocolConfigStateBump)
	if err != nil {
		return err
	}
	// Deserialize `AllowCreatePool`:
	err = decoder.Decode(&obj.AllowCreatePool)
	if err != nil {
		return err
	}
	// Deserialize `SupportedPoolType`:
	err = decoder.Decode(&obj.SupportedPoolType)
	if err != nil {
		return err
	}
	// Deserialize `DefaultLeaderSlotWindow`:
	err = decoder.Decode(&obj.DefaultLeaderSlotWindow)
	if err != nil {
		return err
	}
	// Deserialize `AutoStakingEnabled`:
	err = decoder.Decode(&obj.AutoStakingEnabled)
	if err != nil {
		return err
	}
	// Deserialize `LeaderSlotWindow`:
	err = decoder.Decode(&obj.LeaderSlotWindow)
	if err != nil {
		return err
	}
	// Deserialize `SandwichResistenceEnabled`:
	err = decoder.Decode(&obj.SandwichResistenceEnabled)
	if err != nil {
		return err
	}
	// Deserialize `TokenADecimals`:
	err = decoder.Decode(&obj.TokenADecimals)
	if err != nil {
		return err
	}
	// Deserialize `MigrationMarketCapThreshold`:
	err = decoder.Decode(&obj.MigrationMarketCapThreshold)
	if err != nil {
		return err
	}
	// Deserialize `Pad`:
	err = decoder.Decode(&obj.Pad)
	if err != nil {
		return err
	}
	// Deserialize `MaxCreatorTradingFee`:
	err = decoder.Decode(&obj.MaxCreatorTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `SlotOffsetBasedFees`:
	err = decoder.Decode(&obj.SlotOffsetBasedFees)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolConfigParams struct {
	CreatePoolFee                           uint64
	AllowCreatePool                         bool
	SupportedPoolType                       LiquidityPoolType
	MarketCapBasedFees                      LiquidityPoolMarketCapBasedFees
	InitialTokenBAmount                     float64
	InitialTokenAAmount                     uint64
	DefaultLeaderSlotWindow                 uint8
	AutoStakingEnabled                      bool
	SandwichResistenceEnabled               bool
	BufferBps                               uint16
	AutoStakingThresholdBps                 uint16
	TokenADecimals                          uint8
	MaxCreatorTradingFee                    uint32
	MaxSupplyPerWallet                      uint64
	CreatorTradingFeeTradingVolumeThreshold float64
	MigrationMarketCapThreshold             uint16
}

func (obj ProtocolConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CreatePoolFee` param:
	err = encoder.Encode(obj.CreatePoolFee)
	if err != nil {
		return err
	}
	// Serialize `AllowCreatePool` param:
	err = encoder.Encode(obj.AllowCreatePool)
	if err != nil {
		return err
	}
	// Serialize `SupportedPoolType` param:
	err = encoder.Encode(obj.SupportedPoolType)
	if err != nil {
		return err
	}
	// Serialize `MarketCapBasedFees` param:
	err = encoder.Encode(obj.MarketCapBasedFees)
	if err != nil {
		return err
	}
	// Serialize `InitialTokenBAmount` param:
	err = encoder.Encode(obj.InitialTokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `InitialTokenAAmount` param:
	err = encoder.Encode(obj.InitialTokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `DefaultLeaderSlotWindow` param:
	err = encoder.Encode(obj.DefaultLeaderSlotWindow)
	if err != nil {
		return err
	}
	// Serialize `AutoStakingEnabled` param:
	err = encoder.Encode(obj.AutoStakingEnabled)
	if err != nil {
		return err
	}
	// Serialize `SandwichResistenceEnabled` param:
	err = encoder.Encode(obj.SandwichResistenceEnabled)
	if err != nil {
		return err
	}
	// Serialize `BufferBps` param:
	err = encoder.Encode(obj.BufferBps)
	if err != nil {
		return err
	}
	// Serialize `AutoStakingThresholdBps` param:
	err = encoder.Encode(obj.AutoStakingThresholdBps)
	if err != nil {
		return err
	}
	// Serialize `TokenADecimals` param:
	err = encoder.Encode(obj.TokenADecimals)
	if err != nil {
		return err
	}
	// Serialize `MaxCreatorTradingFee` param:
	err = encoder.Encode(obj.MaxCreatorTradingFee)
	if err != nil {
		return err
	}
	// Serialize `MaxSupplyPerWallet` param:
	err = encoder.Encode(obj.MaxSupplyPerWallet)
	if err != nil {
		return err
	}
	// Serialize `CreatorTradingFeeTradingVolumeThreshold` param:
	err = encoder.Encode(obj.CreatorTradingFeeTradingVolumeThreshold)
	if err != nil {
		return err
	}
	// Serialize `MigrationMarketCapThreshold` param:
	err = encoder.Encode(obj.MigrationMarketCapThreshold)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CreatePoolFee`:
	err = decoder.Decode(&obj.CreatePoolFee)
	if err != nil {
		return err
	}
	// Deserialize `AllowCreatePool`:
	err = decoder.Decode(&obj.AllowCreatePool)
	if err != nil {
		return err
	}
	// Deserialize `SupportedPoolType`:
	err = decoder.Decode(&obj.SupportedPoolType)
	if err != nil {
		return err
	}
	// Deserialize `MarketCapBasedFees`:
	err = decoder.Decode(&obj.MarketCapBasedFees)
	if err != nil {
		return err
	}
	// Deserialize `InitialTokenBAmount`:
	err = decoder.Decode(&obj.InitialTokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `InitialTokenAAmount`:
	err = decoder.Decode(&obj.InitialTokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `DefaultLeaderSlotWindow`:
	err = decoder.Decode(&obj.DefaultLeaderSlotWindow)
	if err != nil {
		return err
	}
	// Deserialize `AutoStakingEnabled`:
	err = decoder.Decode(&obj.AutoStakingEnabled)
	if err != nil {
		return err
	}
	// Deserialize `SandwichResistenceEnabled`:
	err = decoder.Decode(&obj.SandwichResistenceEnabled)
	if err != nil {
		return err
	}
	// Deserialize `BufferBps`:
	err = decoder.Decode(&obj.BufferBps)
	if err != nil {
		return err
	}
	// Deserialize `AutoStakingThresholdBps`:
	err = decoder.Decode(&obj.AutoStakingThresholdBps)
	if err != nil {
		return err
	}
	// Deserialize `TokenADecimals`:
	err = decoder.Decode(&obj.TokenADecimals)
	if err != nil {
		return err
	}
	// Deserialize `MaxCreatorTradingFee`:
	err = decoder.Decode(&obj.MaxCreatorTradingFee)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupplyPerWallet`:
	err = decoder.Decode(&obj.MaxSupplyPerWallet)
	if err != nil {
		return err
	}
	// Deserialize `CreatorTradingFeeTradingVolumeThreshold`:
	err = decoder.Decode(&obj.CreatorTradingFeeTradingVolumeThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MigrationMarketCapThreshold`:
	err = decoder.Decode(&obj.MigrationMarketCapThreshold)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolOwnerState struct {
	CurrentProtocolOwner ag_solanago.PublicKey
}

func (obj ProtocolOwnerState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CurrentProtocolOwner` param:
	err = encoder.Encode(obj.CurrentProtocolOwner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolOwnerState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CurrentProtocolOwner`:
	err = decoder.Decode(&obj.CurrentProtocolOwner)
	if err != nil {
		return err
	}
	return nil
}

type SellParams struct {
	AmountIn                    uint64
	MinimumAmountOut            uint64
	EncodedUserDefinedEventData string
}

func (obj SellParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	// Serialize `EncodedUserDefinedEventData` param:
	err = encoder.Encode(obj.EncodedUserDefinedEventData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SellParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	// Deserialize `EncodedUserDefinedEventData`:
	err = decoder.Decode(&obj.EncodedUserDefinedEventData)
	if err != nil {
		return err
	}
	return nil
}

type SlotFeeBracket struct {
	BuyFeeBps            uint16
	SellFeeBps           uint16
	SlotOffsetUpperbound uint16
}

func (obj SlotFeeBracket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BuyFeeBps` param:
	err = encoder.Encode(obj.BuyFeeBps)
	if err != nil {
		return err
	}
	// Serialize `SellFeeBps` param:
	err = encoder.Encode(obj.SellFeeBps)
	if err != nil {
		return err
	}
	// Serialize `SlotOffsetUpperbound` param:
	err = encoder.Encode(obj.SlotOffsetUpperbound)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SlotFeeBracket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BuyFeeBps`:
	err = decoder.Decode(&obj.BuyFeeBps)
	if err != nil {
		return err
	}
	// Deserialize `SellFeeBps`:
	err = decoder.Decode(&obj.SellFeeBps)
	if err != nil {
		return err
	}
	// Deserialize `SlotOffsetUpperbound`:
	err = decoder.Decode(&obj.SlotOffsetUpperbound)
	if err != nil {
		return err
	}
	return nil
}

type SlotFeeBrackets struct {
	Brackets      [42]SlotFeeBracket
	MaxSlotOffset uint16
	MaxFeeBps     uint16
	Count         uint8
	Enabled       uint8
	_padding      [4]uint8
}

func (obj SlotFeeBrackets) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Brackets` param:
	err = encoder.Encode(obj.Brackets)
	if err != nil {
		return err
	}
	// Serialize `MaxSlotOffset` param:
	err = encoder.Encode(obj.MaxSlotOffset)
	if err != nil {
		return err
	}
	// Serialize `MaxFeeBps` param:
	err = encoder.Encode(obj.MaxFeeBps)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SlotFeeBrackets) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Brackets`:
	err = decoder.Decode(&obj.Brackets)
	if err != nil {
		return err
	}
	// Deserialize `MaxSlotOffset`:
	err = decoder.Decode(&obj.MaxSlotOffset)
	if err != nil {
		return err
	}
	// Deserialize `MaxFeeBps`:
	err = decoder.Decode(&obj.MaxFeeBps)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type SlotFeeBracketsParams struct {
	Brackets      []SlotFeeBracket
	MaxSlotOffset uint16
	MaxFeeBps     uint16
	Count         uint8
	Enabled       uint8
}

func (obj SlotFeeBracketsParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Brackets` param:
	err = encoder.Encode(obj.Brackets)
	if err != nil {
		return err
	}
	// Serialize `MaxSlotOffset` param:
	err = encoder.Encode(obj.MaxSlotOffset)
	if err != nil {
		return err
	}
	// Serialize `MaxFeeBps` param:
	err = encoder.Encode(obj.MaxFeeBps)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SlotFeeBracketsParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Brackets`:
	err = decoder.Decode(&obj.Brackets)
	if err != nil {
		return err
	}
	// Deserialize `MaxSlotOffset`:
	err = decoder.Decode(&obj.MaxSlotOffset)
	if err != nil {
		return err
	}
	// Deserialize `MaxFeeBps`:
	err = decoder.Decode(&obj.MaxFeeBps)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

type TradeEvent struct {
	BaseReserve             uint64
	QuoteReserve            uint64
	TotalCreatorTradingFees uint64
	TotalFeePaid            uint64
}

func (obj TradeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseReserve` param:
	err = encoder.Encode(obj.BaseReserve)
	if err != nil {
		return err
	}
	// Serialize `QuoteReserve` param:
	err = encoder.Encode(obj.QuoteReserve)
	if err != nil {
		return err
	}
	// Serialize `TotalCreatorTradingFees` param:
	err = encoder.Encode(obj.TotalCreatorTradingFees)
	if err != nil {
		return err
	}
	// Serialize `TotalFeePaid` param:
	err = encoder.Encode(obj.TotalFeePaid)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TradeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseReserve`:
	err = decoder.Decode(&obj.BaseReserve)
	if err != nil {
		return err
	}
	// Deserialize `QuoteReserve`:
	err = decoder.Decode(&obj.QuoteReserve)
	if err != nil {
		return err
	}
	// Deserialize `TotalCreatorTradingFees`:
	err = decoder.Decode(&obj.TotalCreatorTradingFees)
	if err != nil {
		return err
	}
	// Deserialize `TotalFeePaid`:
	err = decoder.Decode(&obj.TotalFeePaid)
	if err != nil {
		return err
	}
	return nil
}

type UserDefinedEvent struct {
	LiquidityPoolId ag_solanago.PublicKey
	InstructionName string
	Base64Data      string
}

func (obj UserDefinedEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LiquidityPoolId` param:
	err = encoder.Encode(obj.LiquidityPoolId)
	if err != nil {
		return err
	}
	// Serialize `InstructionName` param:
	err = encoder.Encode(obj.InstructionName)
	if err != nil {
		return err
	}
	// Serialize `Base64Data` param:
	err = encoder.Encode(obj.Base64Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserDefinedEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LiquidityPoolId`:
	err = decoder.Decode(&obj.LiquidityPoolId)
	if err != nil {
		return err
	}
	// Deserialize `InstructionName`:
	err = decoder.Decode(&obj.InstructionName)
	if err != nil {
		return err
	}
	// Deserialize `Base64Data`:
	err = decoder.Decode(&obj.Base64Data)
	if err != nil {
		return err
	}
	return nil
}
