// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

const ProgramName = "Heaven"

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("HEAVENoP2qxoeuF8Dj2oT1GHEnu49U5mJYkdeC8BAX2o")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	AddressLookupProgram = ag_solanago.MustPublicKeyFromBase58("AddressLookupTab1e1111111111111111111111111")

	AssociatedTokenProgram = ag_solanago.MustPublicKeyFromBase58("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")

	AuthorityPDA = ag_solanago.MustPublicKeyFromBase58("6Uds6gQ6jhfwyE38ppCz8PzKAdUtXmRsjZZn91997gVC")

	ClockProgram = ag_solanago.MustPublicKeyFromBase58("SysvarC1ock11111111111111111111111111111111")

	InstructionsProgram = ag_solanago.MustPublicKeyFromBase58("Sysvar1nstructions1111111111111111111111111")

	MsolMint = ag_solanago.MustPublicKeyFromBase58("mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So")

	PriceState = ag_solanago.MustPublicKeyFromBase58("CH31Xns5z3M1cTAbKW34jcxPPciazARpijcHj9rxtemt")

	ProtocolAdminStatePDA = ag_solanago.MustPublicKeyFromBase58("37pDkDVzj12KCtLNnv3HWQ2Qr9vqm6srkoixKueedDQr")

	ProtocolFeeAdminStatePDA = ag_solanago.MustPublicKeyFromBase58("37pDkDVzj12KCtLNnv3HWQ2Qr9vqm6srkoixKueedDQr")

	ProtocolOwnerStatePDA = ag_solanago.MustPublicKeyFromBase58("HWeJGxe7q4reX5p5reX9MMpjgDZQyLgBY91nHnNbnZLk")

	ProtocolStakingAdminStatePDA = ag_solanago.MustPublicKeyFromBase58("61FEzZcWKPkVLvWasAGDfhABHqsyYD54q4zJhmHRTYya")

	RentProgram = ag_solanago.MustPublicKeyFromBase58("SysvarRent111111111111111111111111111111111")

	SystemProgram = ag_solanago.MustPublicKeyFromBase58("11111111111111111111111111111111")

	TokenProgram = ag_solanago.MustPublicKeyFromBase58("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")

	WSOL = ag_solanago.MustPublicKeyFromBase58("So11111111111111111111111111111111111111112")
)

var (
	Instruction_AdminBorrowSol = ag_binary.TypeID([8]byte{204, 72, 95, 215, 172, 192, 137, 252})

	Instruction_AdminClaimMsol = ag_binary.TypeID([8]byte{124, 48, 60, 199, 203, 49, 36, 41})

	Instruction_AdminClaimStakingRewards = ag_binary.TypeID([8]byte{24, 163, 220, 171, 225, 222, 166, 248})

	Instruction_AdminClaimStandardCreatorTradingFees = ag_binary.TypeID([8]byte{182, 39, 168, 25, 96, 63, 76, 17})

	Instruction_AdminDepositMsol = ag_binary.TypeID([8]byte{206, 189, 208, 166, 19, 81, 202, 48})

	Instruction_AdminMintMsol = ag_binary.TypeID([8]byte{140, 202, 57, 195, 97, 213, 168, 19})

	Instruction_AdminRepaySol = ag_binary.TypeID([8]byte{136, 61, 48, 232, 166, 26, 207, 46})

	Instruction_AdminUnstakeMsol = ag_binary.TypeID([8]byte{253, 218, 141, 252, 40, 9, 7, 154})

	Instruction_AdminUpdateStandardLiquidityPoolState = ag_binary.TypeID([8]byte{99, 228, 41, 63, 221, 244, 200, 199})

	Instruction_AdminWithdrawMsol = ag_binary.TypeID([8]byte{249, 219, 141, 72, 210, 110, 216, 99})

	Instruction_AdminWithdrawTransferFee = ag_binary.TypeID([8]byte{117, 79, 164, 203, 126, 72, 22, 246})

	Instruction_Buy = ag_binary.TypeID([8]byte{102, 6, 61, 18, 1, 218, 235, 234})

	Instruction_ClaimStandardCreatorTradingFeeProtocolFees = ag_binary.TypeID([8]byte{0, 201, 226, 228, 127, 45, 69, 110})

	Instruction_ClaimStandardCreatorTradingFees = ag_binary.TypeID([8]byte{165, 89, 221, 52, 170, 249, 34, 111})

	Instruction_ClaimStandardProtocolTradingFees = ag_binary.TypeID([8]byte{84, 206, 140, 245, 63, 212, 64, 237})

	Instruction_ClaimStandardReflectionTradingFees = ag_binary.TypeID([8]byte{70, 148, 37, 147, 102, 20, 30, 23})

	Instruction_CloseProtocolLookupTable = ag_binary.TypeID([8]byte{79, 72, 48, 39, 119, 3, 42, 116})

	Instruction_CreateOrUpdateProtocolFeeAdmin = ag_binary.TypeID([8]byte{21, 126, 176, 20, 85, 111, 53, 31})

	Instruction_CreateOrUpdateProtocolOwner = ag_binary.TypeID([8]byte{170, 124, 128, 40, 48, 105, 139, 148})

	Instruction_CreateOrUpdateProtocolStakingAdmin = ag_binary.TypeID([8]byte{4, 172, 196, 213, 120, 50, 30, 137})

	Instruction_CreateProtocolConfig = ag_binary.TypeID([8]byte{115, 114, 24, 111, 14, 53, 113, 254})

	Instruction_CreateProtocolLookupTable = ag_binary.TypeID([8]byte{249, 3, 99, 153, 168, 241, 243, 228})

	Instruction_CreateStandardLiquidityPool = ag_binary.TypeID([8]byte{42, 43, 126, 56, 231, 10, 208, 53})

	Instruction_DeactivateProtocolLookupTable = ag_binary.TypeID([8]byte{218, 12, 88, 58, 150, 44, 152, 72})

	Instruction_ExtendProtocolLookupTable = ag_binary.TypeID([8]byte{7, 227, 198, 1, 107, 113, 31, 88})

	Instruction_InitializeProtocolLending = ag_binary.TypeID([8]byte{0, 205, 237, 240, 27, 79, 27, 59})

	Instruction_RemainingAccountsStub = ag_binary.TypeID([8]byte{32, 143, 83, 94, 23, 34, 59, 239})

	Instruction_Sell = ag_binary.TypeID([8]byte{51, 230, 133, 164, 1, 127, 131, 173})

	Instruction_SetProtocolSlotFees = ag_binary.TypeID([8]byte{181, 82, 19, 15, 126, 205, 152, 242})

	Instruction_UpdateAllowCreatePool = ag_binary.TypeID([8]byte{223, 252, 231, 62, 96, 219, 241, 214})

	Instruction_UpdateCreatorTradingFeeReceiver = ag_binary.TypeID([8]byte{246, 229, 200, 79, 31, 21, 120, 25})

	Instruction_UpdateProtocolConfig = ag_binary.TypeID([8]byte{197, 97, 123, 54, 221, 168, 11, 135})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AdminBorrowSol:
		return "AdminBorrowSol"
	case Instruction_AdminClaimMsol:
		return "AdminClaimMsol"
	case Instruction_AdminClaimStakingRewards:
		return "AdminClaimStakingRewards"
	case Instruction_AdminClaimStandardCreatorTradingFees:
		return "AdminClaimStandardCreatorTradingFees"
	case Instruction_AdminDepositMsol:
		return "AdminDepositMsol"
	case Instruction_AdminMintMsol:
		return "AdminMintMsol"
	case Instruction_AdminRepaySol:
		return "AdminRepaySol"
	case Instruction_AdminUnstakeMsol:
		return "AdminUnstakeMsol"
	case Instruction_AdminUpdateStandardLiquidityPoolState:
		return "AdminUpdateStandardLiquidityPoolState"
	case Instruction_AdminWithdrawMsol:
		return "AdminWithdrawMsol"
	case Instruction_AdminWithdrawTransferFee:
		return "AdminWithdrawTransferFee"
	case Instruction_Buy:
		return "Buy"
	case Instruction_ClaimStandardCreatorTradingFeeProtocolFees:
		return "ClaimStandardCreatorTradingFeeProtocolFees"
	case Instruction_ClaimStandardCreatorTradingFees:
		return "ClaimStandardCreatorTradingFees"
	case Instruction_ClaimStandardProtocolTradingFees:
		return "ClaimStandardProtocolTradingFees"
	case Instruction_ClaimStandardReflectionTradingFees:
		return "ClaimStandardReflectionTradingFees"
	case Instruction_CloseProtocolLookupTable:
		return "CloseProtocolLookupTable"
	case Instruction_CreateOrUpdateProtocolFeeAdmin:
		return "CreateOrUpdateProtocolFeeAdmin"
	case Instruction_CreateOrUpdateProtocolOwner:
		return "CreateOrUpdateProtocolOwner"
	case Instruction_CreateOrUpdateProtocolStakingAdmin:
		return "CreateOrUpdateProtocolStakingAdmin"
	case Instruction_CreateProtocolConfig:
		return "CreateProtocolConfig"
	case Instruction_CreateProtocolLookupTable:
		return "CreateProtocolLookupTable"
	case Instruction_CreateStandardLiquidityPool:
		return "CreateStandardLiquidityPool"
	case Instruction_DeactivateProtocolLookupTable:
		return "DeactivateProtocolLookupTable"
	case Instruction_ExtendProtocolLookupTable:
		return "ExtendProtocolLookupTable"
	case Instruction_InitializeProtocolLending:
		return "InitializeProtocolLending"
	case Instruction_RemainingAccountsStub:
		return "RemainingAccountsStub"
	case Instruction_Sell:
		return "Sell"
	case Instruction_SetProtocolSlotFees:
		return "SetProtocolSlotFees"
	case Instruction_UpdateAllowCreatePool:
		return "UpdateAllowCreatePool"
	case Instruction_UpdateCreatorTradingFeeReceiver:
		return "UpdateCreatorTradingFeeReceiver"
	case Instruction_UpdateProtocolConfig:
		return "UpdateProtocolConfig"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "admin_borrow_sol", Type: (*AdminBorrowSol)(nil),
		},
		{
			Name: "admin_claim_msol", Type: (*AdminClaimMsol)(nil),
		},
		{
			Name: "admin_claim_staking_rewards", Type: (*AdminClaimStakingRewards)(nil),
		},
		{
			Name: "admin_claim_standard_creator_trading_fees", Type: (*AdminClaimStandardCreatorTradingFees)(nil),
		},
		{
			Name: "admin_deposit_msol", Type: (*AdminDepositMsol)(nil),
		},
		{
			Name: "admin_mint_msol", Type: (*AdminMintMsol)(nil),
		},
		{
			Name: "admin_repay_sol", Type: (*AdminRepaySol)(nil),
		},
		{
			Name: "admin_unstake_msol", Type: (*AdminUnstakeMsol)(nil),
		},
		{
			Name: "admin_update_standard_liquidity_pool_state", Type: (*AdminUpdateStandardLiquidityPoolState)(nil),
		},
		{
			Name: "admin_withdraw_msol", Type: (*AdminWithdrawMsol)(nil),
		},
		{
			Name: "admin_withdraw_transfer_fee", Type: (*AdminWithdrawTransferFee)(nil),
		},
		{
			Name: "buy", Type: (*Buy)(nil),
		},
		{
			Name: "claim_standard_creator_trading_fee_protocol_fees", Type: (*ClaimStandardCreatorTradingFeeProtocolFees)(nil),
		},
		{
			Name: "claim_standard_creator_trading_fees", Type: (*ClaimStandardCreatorTradingFees)(nil),
		},
		{
			Name: "claim_standard_protocol_trading_fees", Type: (*ClaimStandardProtocolTradingFees)(nil),
		},
		{
			Name: "claim_standard_reflection_trading_fees", Type: (*ClaimStandardReflectionTradingFees)(nil),
		},
		{
			Name: "close_protocol_lookup_table", Type: (*CloseProtocolLookupTable)(nil),
		},
		{
			Name: "create_or_update_protocol_fee_admin", Type: (*CreateOrUpdateProtocolFeeAdmin)(nil),
		},
		{
			Name: "create_or_update_protocol_owner", Type: (*CreateOrUpdateProtocolOwner)(nil),
		},
		{
			Name: "create_or_update_protocol_staking_admin", Type: (*CreateOrUpdateProtocolStakingAdmin)(nil),
		},
		{
			Name: "create_protocol_config", Type: (*CreateProtocolConfig)(nil),
		},
		{
			Name: "create_protocol_lookup_table", Type: (*CreateProtocolLookupTable)(nil),
		},
		{
			Name: "create_standard_liquidity_pool", Type: (*CreateStandardLiquidityPool)(nil),
		},
		{
			Name: "deactivate_protocol_lookup_table", Type: (*DeactivateProtocolLookupTable)(nil),
		},
		{
			Name: "extend_protocol_lookup_table", Type: (*ExtendProtocolLookupTable)(nil),
		},
		{
			Name: "initialize_protocol_lending", Type: (*InitializeProtocolLending)(nil),
		},
		{
			Name: "sell", Type: (*Sell)(nil),
		},
		{
			Name: "set_protocol_slot_fees", Type: (*SetProtocolSlotFees)(nil),
		},
		{
			Name: "update_allow_create_pool", Type: (*UpdateAllowCreatePool)(nil),
		},
		{
			Name: "update_creator_trading_fee_receiver", Type: (*UpdateCreatorTradingFeeReceiver)(nil),
		},
		{
			Name: "update_protocol_config", Type: (*UpdateProtocolConfig)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
