// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateStandardLiquidityPool is the `create_standard_liquidity_pool` instruction.
type CreateStandardLiquidityPool struct {
	ProtocolConfigVersion *uint16
	Params                *CreateStandardLiquidityPoolParams

	// [0] = [] token_program
	//
	// [1] = [] associated_token_program
	//
	// [2] = [] system_program
	//
	// [3] = [SIGNER] user
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [] token_a_mint
	//
	// [6] = [] token_b_mint
	//
	// [7] = [WRITE] user_token_a_vault
	//
	// [8] = [WRITE] token_a_vault
	//
	// [9] = [WRITE] token_b_vault
	//
	// [10] = [WRITE] liquidity_pool_state
	//
	// [11] = [WRITE] protocol_config
	//
	// [12] = [] token_a_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateStandardLiquidityPoolInstructionBuilder creates a new `CreateStandardLiquidityPool` instruction builder.
func NewCreateStandardLiquidityPoolInstructionBuilder() *CreateStandardLiquidityPool {
	nd := &CreateStandardLiquidityPool{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(TokenProgram)
	nd.AccountMetaSlice[1] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[2] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[6] = ag_solanago.Meta(WSOL)
	return nd
}

// SetProtocolConfigVersion sets the "protocol_config_version" parameter.
func (inst *CreateStandardLiquidityPool) SetProtocolConfigVersion(protocol_config_version uint16) *CreateStandardLiquidityPool {
	inst.ProtocolConfigVersion = &protocol_config_version
	return inst
}

// SetParams sets the "params" parameter.
func (inst *CreateStandardLiquidityPool) SetParams(params CreateStandardLiquidityPoolParams) *CreateStandardLiquidityPool {
	inst.Params = &params
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *CreateStandardLiquidityPool) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *CreateStandardLiquidityPool) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *CreateStandardLiquidityPool) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *CreateStandardLiquidityPool) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateStandardLiquidityPool) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateStandardLiquidityPool) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserAccount sets the "user" account.
func (inst *CreateStandardLiquidityPool) SetUserAccount(user ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *CreateStandardLiquidityPool) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateStandardLiquidityPool) SetPayerAccount(payer ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateStandardLiquidityPool) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenAMintAccount sets the "token_a_mint" account.
func (inst *CreateStandardLiquidityPool) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "token_a_mint" account.
func (inst *CreateStandardLiquidityPool) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenBMintAccount sets the "token_b_mint" account.
func (inst *CreateStandardLiquidityPool) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "token_b_mint" account.
func (inst *CreateStandardLiquidityPool) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUserTokenAVaultAccount sets the "user_token_a_vault" account.
func (inst *CreateStandardLiquidityPool) SetUserTokenAVaultAccount(userTokenAVault ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userTokenAVault).WRITE()
	return inst
}

// GetUserTokenAVaultAccount gets the "user_token_a_vault" account.
func (inst *CreateStandardLiquidityPool) GetUserTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenAVaultAccount sets the "token_a_vault" account.
func (inst *CreateStandardLiquidityPool) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

// GetTokenAVaultAccount gets the "token_a_vault" account.
func (inst *CreateStandardLiquidityPool) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenBVaultAccount sets the "token_b_vault" account.
func (inst *CreateStandardLiquidityPool) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

// GetTokenBVaultAccount gets the "token_b_vault" account.
func (inst *CreateStandardLiquidityPool) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetLiquidityPoolStateAccount sets the "liquidity_pool_state" account.
func (inst *CreateStandardLiquidityPool) SetLiquidityPoolStateAccount(liquidityPoolState ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(liquidityPoolState).WRITE()
	return inst
}

// GetLiquidityPoolStateAccount gets the "liquidity_pool_state" account.
func (inst *CreateStandardLiquidityPool) GetLiquidityPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetProtocolConfigAccount sets the "protocol_config" account.
func (inst *CreateStandardLiquidityPool) SetProtocolConfigAccount(protocolConfig ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(protocolConfig).WRITE()
	return inst
}

// GetProtocolConfigAccount gets the "protocol_config" account.
func (inst *CreateStandardLiquidityPool) GetProtocolConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenAProgramAccount sets the "token_a_program" account.
func (inst *CreateStandardLiquidityPool) SetTokenAProgramAccount(tokenAProgram ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenAProgram)
	return inst
}

// GetTokenAProgramAccount gets the "token_a_program" account.
func (inst *CreateStandardLiquidityPool) GetTokenAProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst *CreateStandardLiquidityPool) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateStandardLiquidityPool) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateStandardLiquidityPool {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:13], metas...)
	return inst
}

func (inst *CreateStandardLiquidityPool) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13:]
}

func (inst CreateStandardLiquidityPool) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateStandardLiquidityPool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateStandardLiquidityPool) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateStandardLiquidityPool) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ProtocolConfigVersion == nil {
			return errors.New("protocolConfigVersion parameter is not set")
		}
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 13 {
		return errors.New("accounts slice has wrong length: expected 13 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserTokenAVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.LiquidityPoolState is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.ProtocolConfig is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenAProgram is not set")
		}
	}
	return nil
}

func (inst *CreateStandardLiquidityPool) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateStandardLiquidityPool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  ProtocolConfigVersion", *inst.ProtocolConfigVersion))
						paramsBranch.Child(ag_format.Param("                 Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                    user", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            token_a_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            token_b_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      user_token_a_vault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("           token_a_vault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           token_b_vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    liquidity_pool_state", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("         protocol_config", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         token_a_program", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj CreateStandardLiquidityPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProtocolConfigVersion` param:
	err = encoder.Encode(obj.ProtocolConfigVersion)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateStandardLiquidityPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProtocolConfigVersion`:
	err = decoder.Decode(&obj.ProtocolConfigVersion)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateStandardLiquidityPoolInstruction declares a new CreateStandardLiquidityPool instruction with the provided parameters and accounts.
func NewCreateStandardLiquidityPoolInstruction(
	// Parameters:
	protocol_config_version uint16,
	params CreateStandardLiquidityPoolParams,
	user ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	userTokenAVault ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	liquidityPoolState ag_solanago.PublicKey,
	protocolConfig ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	return NewCreateStandardLiquidityPoolInstructionBuilder().
		SetProtocolConfigVersion(protocol_config_version).
		SetParams(params).
		SetUserAccount(user).
		SetPayerAccount(payer).
		SetTokenAMintAccount(tokenAMint).
		SetUserTokenAVaultAccount(userTokenAVault).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetLiquidityPoolStateAccount(liquidityPoolState).
		SetProtocolConfigAccount(protocolConfig).
		SetTokenAProgramAccount(tokenAProgram)
}

// NewSimpleCreateStandardLiquidityPoolInstruction declares a new CreateStandardLiquidityPool instruction with the provided parameters and accounts.
func NewSimpleCreateStandardLiquidityPoolInstruction(
	// Parameters:
	protocol_config_version uint16,
	params CreateStandardLiquidityPoolParams,
	user ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	userTokenAVault ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	liquidityPoolState ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey) *CreateStandardLiquidityPool {
	protocolConfig := MustFindProtocolConfigAddress(protocol_config_version)
	return NewCreateStandardLiquidityPoolInstructionBuilder().
		SetProtocolConfigVersion(protocol_config_version).
		SetParams(params).
		SetUserAccount(user).
		SetPayerAccount(payer).
		SetTokenAMintAccount(tokenAMint).
		SetUserTokenAVaultAccount(userTokenAVault).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetLiquidityPoolStateAccount(liquidityPoolState).
		SetProtocolConfigAccount(protocolConfig).
		SetTokenAProgramAccount(tokenAProgram)
}
