// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetProtocolSlotFees is the `set_protocol_slot_fees` instruction.
type SetProtocolSlotFees struct {
	Version  *uint16
	FeeType  *FeeType
	SlotFees *SlotFeeBracketsParams

	// [0] = [SIGNER] owner
	//
	// [1] = [WRITE] protocol_config_state
	//
	// [2] = [] protocol_owner_state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetProtocolSlotFeesInstructionBuilder creates a new `SetProtocolSlotFees` instruction builder.
func NewSetProtocolSlotFeesInstructionBuilder() *SetProtocolSlotFees {
	nd := &SetProtocolSlotFees{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(ProtocolOwnerStatePDA)
	return nd
}

// SetVersion sets the "version" parameter.
func (inst *SetProtocolSlotFees) SetVersion(version uint16) *SetProtocolSlotFees {
	inst.Version = &version
	return inst
}

// SetFeeType sets the "fee_type" parameter.
func (inst *SetProtocolSlotFees) SetFeeType(fee_type FeeType) *SetProtocolSlotFees {
	inst.FeeType = &fee_type
	return inst
}

// SetSlotFees sets the "slot_fees" parameter.
func (inst *SetProtocolSlotFees) SetSlotFees(slot_fees SlotFeeBracketsParams) *SetProtocolSlotFees {
	inst.SlotFees = &slot_fees
	return inst
}

// SetOwnerAccount sets the "owner" account.
func (inst *SetProtocolSlotFees) SetOwnerAccount(owner ag_solanago.PublicKey) *SetProtocolSlotFees {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *SetProtocolSlotFees) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProtocolConfigStateAccount sets the "protocol_config_state" account.
func (inst *SetProtocolSlotFees) SetProtocolConfigStateAccount(protocolConfigState ag_solanago.PublicKey) *SetProtocolSlotFees {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(protocolConfigState).WRITE()
	return inst
}

// GetProtocolConfigStateAccount gets the "protocol_config_state" account.
func (inst *SetProtocolSlotFees) GetProtocolConfigStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProtocolOwnerStateAccount sets the "protocol_owner_state" account.
func (inst *SetProtocolSlotFees) SetProtocolOwnerStateAccount(protocolOwnerState ag_solanago.PublicKey) *SetProtocolSlotFees {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(protocolOwnerState)
	return inst
}

// GetProtocolOwnerStateAccount gets the "protocol_owner_state" account.
func (inst *SetProtocolSlotFees) GetProtocolOwnerStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *SetProtocolSlotFees) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetProtocolSlotFees) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetProtocolSlotFees {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *SetProtocolSlotFees) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst SetProtocolSlotFees) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetProtocolSlotFees,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetProtocolSlotFees) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetProtocolSlotFees) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Version == nil {
			return errors.New("version parameter is not set")
		}
		if inst.FeeType == nil {
			return errors.New("feeType parameter is not set")
		}
		if inst.SlotFees == nil {
			return errors.New("slotFees parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProtocolConfigState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ProtocolOwnerState is not set")
		}
	}
	return nil
}

func (inst *SetProtocolSlotFees) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetProtocolSlotFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Version", *inst.Version))
						paramsBranch.Child(ag_format.Param("  FeeType", *inst.FeeType))
						paramsBranch.Child(ag_format.Param(" SlotFees", *inst.SlotFees))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("protocol_config_state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" protocol_owner_state", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetProtocolSlotFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `FeeType` param:
	err = encoder.Encode(obj.FeeType)
	if err != nil {
		return err
	}
	// Serialize `SlotFees` param:
	err = encoder.Encode(obj.SlotFees)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetProtocolSlotFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `FeeType`:
	err = decoder.Decode(&obj.FeeType)
	if err != nil {
		return err
	}
	// Deserialize `SlotFees`:
	err = decoder.Decode(&obj.SlotFees)
	if err != nil {
		return err
	}
	return nil
}

// NewSetProtocolSlotFeesInstruction declares a new SetProtocolSlotFees instruction with the provided parameters and accounts.
func NewSetProtocolSlotFeesInstruction(
	// Parameters:
	version uint16,
	fee_type FeeType,
	slot_fees SlotFeeBracketsParams,
	// Accounts:
	owner ag_solanago.PublicKey,
	protocolConfigState ag_solanago.PublicKey) *SetProtocolSlotFees {
	return NewSetProtocolSlotFeesInstructionBuilder().
		SetVersion(version).
		SetFeeType(fee_type).
		SetSlotFees(slot_fees).
		SetOwnerAccount(owner).
		SetProtocolConfigStateAccount(protocolConfigState)
}

// NewSimpleSetProtocolSlotFeesInstruction declares a new SetProtocolSlotFees instruction with the provided parameters and accounts.
func NewSimpleSetProtocolSlotFeesInstruction(
	// Parameters:
	version uint16,
	fee_type FeeType,
	slot_fees SlotFeeBracketsParams,
	// Accounts:
	owner ag_solanago.PublicKey) *SetProtocolSlotFees {
	protocolConfigState := MustFindProtocolConfigStateAddress(version)
	return NewSetProtocolSlotFeesInstructionBuilder().
		SetVersion(version).
		SetFeeType(fee_type).
		SetSlotFees(slot_fees).
		SetOwnerAccount(owner).
		SetProtocolConfigStateAccount(protocolConfigState)
}
