// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminWithdrawTransferFee is the `admin_withdraw_transfer_fee` instruction.
type AdminWithdrawTransferFee struct {
	ProtocolConfigVersion *uint16

	// [0] = [] token_program
	//
	// [1] = [] mint
	//
	// [2] = [WRITE] receiver
	//
	// [3] = [] protocol_fee_admin_state
	//
	// [4] = [SIGNER] admin
	//
	// [5] = [WRITE] protocol_config
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminWithdrawTransferFeeInstructionBuilder creates a new `AdminWithdrawTransferFee` instruction builder.
func NewAdminWithdrawTransferFeeInstructionBuilder() *AdminWithdrawTransferFee {
	nd := &AdminWithdrawTransferFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(ProtocolFeeAdminStatePDA)
	return nd
}

// SetProtocolConfigVersion sets the "protocol_config_version" parameter.
func (inst *AdminWithdrawTransferFee) SetProtocolConfigVersion(protocol_config_version uint16) *AdminWithdrawTransferFee {
	inst.ProtocolConfigVersion = &protocol_config_version
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *AdminWithdrawTransferFee) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AdminWithdrawTransferFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *AdminWithdrawTransferFee) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *AdminWithdrawTransferFee) SetMintAccount(mint ag_solanago.PublicKey) *AdminWithdrawTransferFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *AdminWithdrawTransferFee) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetReceiverAccount sets the "receiver" account.
func (inst *AdminWithdrawTransferFee) SetReceiverAccount(receiver ag_solanago.PublicKey) *AdminWithdrawTransferFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(receiver).WRITE()
	return inst
}

// GetReceiverAccount gets the "receiver" account.
func (inst *AdminWithdrawTransferFee) GetReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProtocolFeeAdminStateAccount sets the "protocol_fee_admin_state" account.
func (inst *AdminWithdrawTransferFee) SetProtocolFeeAdminStateAccount(protocolFeeAdminState ag_solanago.PublicKey) *AdminWithdrawTransferFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(protocolFeeAdminState)
	return inst
}

// GetProtocolFeeAdminStateAccount gets the "protocol_fee_admin_state" account.
func (inst *AdminWithdrawTransferFee) GetProtocolFeeAdminStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAdminAccount sets the "admin" account.
func (inst *AdminWithdrawTransferFee) SetAdminAccount(admin ag_solanago.PublicKey) *AdminWithdrawTransferFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AdminWithdrawTransferFee) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProtocolConfigAccount sets the "protocol_config" account.
func (inst *AdminWithdrawTransferFee) SetProtocolConfigAccount(protocolConfig ag_solanago.PublicKey) *AdminWithdrawTransferFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(protocolConfig).WRITE()
	return inst
}

// GetProtocolConfigAccount gets the "protocol_config" account.
func (inst *AdminWithdrawTransferFee) GetProtocolConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst *AdminWithdrawTransferFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AdminWithdrawTransferFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AdminWithdrawTransferFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:6], metas...)
	return inst
}

func (inst *AdminWithdrawTransferFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6:]
}

func (inst AdminWithdrawTransferFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminWithdrawTransferFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminWithdrawTransferFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminWithdrawTransferFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ProtocolConfigVersion == nil {
			return errors.New("protocolConfigVersion parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 6 {
		return errors.New("accounts slice has wrong length: expected 6 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Receiver is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProtocolFeeAdminState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProtocolConfig is not set")
		}
	}
	return nil
}

func (inst *AdminWithdrawTransferFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminWithdrawTransferFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  ProtocolConfigVersion", *inst.ProtocolConfigVersion))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                    mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                receiver", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("protocol_fee_admin_state", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                   admin", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         protocol_config", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj AdminWithdrawTransferFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProtocolConfigVersion` param:
	err = encoder.Encode(obj.ProtocolConfigVersion)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AdminWithdrawTransferFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProtocolConfigVersion`:
	err = decoder.Decode(&obj.ProtocolConfigVersion)
	if err != nil {
		return err
	}
	return nil
}

// NewAdminWithdrawTransferFeeInstruction declares a new AdminWithdrawTransferFee instruction with the provided parameters and accounts.
func NewAdminWithdrawTransferFeeInstruction(
	// Parameters:
	protocol_config_version uint16,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	protocolConfig ag_solanago.PublicKey) *AdminWithdrawTransferFee {
	return NewAdminWithdrawTransferFeeInstructionBuilder().
		SetProtocolConfigVersion(protocol_config_version).
		SetTokenProgramAccount(tokenProgram).
		SetMintAccount(mint).
		SetReceiverAccount(receiver).
		SetAdminAccount(admin).
		SetProtocolConfigAccount(protocolConfig)
}

// NewSimpleAdminWithdrawTransferFeeInstruction declares a new AdminWithdrawTransferFee instruction with the provided parameters and accounts.
func NewSimpleAdminWithdrawTransferFeeInstruction(
	// Parameters:
	protocol_config_version uint16,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	receiver ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *AdminWithdrawTransferFee {
	protocolConfig := MustFindProtocolConfigAddress(protocol_config_version)
	return NewAdminWithdrawTransferFeeInstructionBuilder().
		SetProtocolConfigVersion(protocol_config_version).
		SetTokenProgramAccount(tokenProgram).
		SetMintAccount(mint).
		SetReceiverAccount(receiver).
		SetAdminAccount(admin).
		SetProtocolConfigAccount(protocolConfig)
}
