// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Buy is the `buy` instruction.
type Buy struct {
	Params *BuyParams

	// [0] = [] token_a_program
	//
	// [1] = [] token_b_program
	//
	// [2] = [] associated_token_program
	//
	// [3] = [] system_program
	//
	// [4] = [WRITE] liquidity_pool_state
	//
	// [5] = [WRITE, SIGNER] user
	// ··········· CHECK
	//
	// [6] = [] token_a_mint
	// ··········· CHECK
	//
	// [7] = [] token_b_mint
	// ··········· CHECK
	//
	// [8] = [WRITE] user_token_a_vault
	//
	// [9] = [WRITE] user_token_b_vault
	//
	// [10] = [WRITE] token_a_vault
	//
	// [11] = [WRITE] token_b_vault
	//
	// [12] = [WRITE] protocol_config
	//
	// [13] = [] instruction_sysvar_account_info
	// ··········· CHECK
	//
	// [14] = [] program
	//
	// [15] = [] price_state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBuyInstructionBuilder creates a new `Buy` instruction builder.
func NewBuyInstructionBuilder() *Buy {
	nd := &Buy{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(InstructionsProgram)
	nd.AccountMetaSlice[14] = ag_solanago.Meta(ProgramID)
	nd.AccountMetaSlice[15] = ag_solanago.Meta(PriceState)
	return nd
}

// SetParams sets the "params" parameter.
func (inst *Buy) SetParams(params BuyParams) *Buy {
	inst.Params = &params
	return inst
}

// SetTokenAProgramAccount sets the "token_a_program" account.
func (inst *Buy) SetTokenAProgramAccount(tokenAProgram ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenAProgram)
	return inst
}

// GetTokenAProgramAccount gets the "token_a_program" account.
func (inst *Buy) GetTokenAProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenBProgramAccount sets the "token_b_program" account.
func (inst *Buy) SetTokenBProgramAccount(tokenBProgram ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenBProgram)
	return inst
}

// GetTokenBProgramAccount gets the "token_b_program" account.
func (inst *Buy) GetTokenBProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *Buy) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *Buy) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Buy) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Buy) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLiquidityPoolStateAccount sets the "liquidity_pool_state" account.
func (inst *Buy) SetLiquidityPoolStateAccount(liquidityPoolState ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(liquidityPoolState).WRITE()
	return inst
}

// GetLiquidityPoolStateAccount gets the "liquidity_pool_state" account.
func (inst *Buy) GetLiquidityPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserAccount sets the "user" account.
// CHECK
func (inst *Buy) SetUserAccount(user ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
// CHECK
func (inst *Buy) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenAMintAccount sets the "token_a_mint" account.
// CHECK
func (inst *Buy) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "token_a_mint" account.
// CHECK
func (inst *Buy) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenBMintAccount sets the "token_b_mint" account.
// CHECK
func (inst *Buy) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "token_b_mint" account.
// CHECK
func (inst *Buy) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetUserTokenAVaultAccount sets the "user_token_a_vault" account.
func (inst *Buy) SetUserTokenAVaultAccount(userTokenAVault ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(userTokenAVault).WRITE()
	return inst
}

// GetUserTokenAVaultAccount gets the "user_token_a_vault" account.
func (inst *Buy) GetUserTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserTokenBVaultAccount sets the "user_token_b_vault" account.
func (inst *Buy) SetUserTokenBVaultAccount(userTokenBVault ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(userTokenBVault).WRITE()
	return inst
}

// GetUserTokenBVaultAccount gets the "user_token_b_vault" account.
func (inst *Buy) GetUserTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenAVaultAccount sets the "token_a_vault" account.
func (inst *Buy) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

// GetTokenAVaultAccount gets the "token_a_vault" account.
func (inst *Buy) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenBVaultAccount sets the "token_b_vault" account.
func (inst *Buy) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

// GetTokenBVaultAccount gets the "token_b_vault" account.
func (inst *Buy) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetProtocolConfigAccount sets the "protocol_config" account.
func (inst *Buy) SetProtocolConfigAccount(protocolConfig ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(protocolConfig).WRITE()
	return inst
}

// GetProtocolConfigAccount gets the "protocol_config" account.
func (inst *Buy) GetProtocolConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetInstructionSysvarAccountInfoAccount sets the "instruction_sysvar_account_info" account.
// CHECK
func (inst *Buy) SetInstructionSysvarAccountInfoAccount(instructionSysvarAccountInfo ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(instructionSysvarAccountInfo)
	return inst
}

// GetInstructionSysvarAccountInfoAccount gets the "instruction_sysvar_account_info" account.
// CHECK
func (inst *Buy) GetInstructionSysvarAccountInfoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetProgramAccount sets the "program" account.
func (inst *Buy) SetProgramAccount(program ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Buy) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetPriceStateAccount sets the "price_state" account.
func (inst *Buy) SetPriceStateAccount(priceState ag_solanago.PublicKey) *Buy {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(priceState)
	return inst
}

// GetPriceStateAccount gets the "price_state" account.
func (inst *Buy) GetPriceStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst *Buy) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Buy) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Buy {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:16], metas...)
	return inst
}

func (inst *Buy) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[16:]
}

func (inst Buy) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Buy,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Buy) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Buy) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 16 {
		return errors.New("accounts slice has wrong length: expected 16 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenAProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenBProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LiquidityPoolState is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.UserTokenAVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.UserTokenBVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.ProtocolConfig is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.InstructionSysvarAccountInfo is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.PriceState is not set")
		}
	}
	return nil
}

func (inst *Buy) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Buy")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                token_a_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                token_b_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       associated_token_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 system_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           liquidity_pool_state", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                           user", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                   token_a_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                   token_b_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("             user_token_a_vault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("             user_token_b_vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  token_a_vault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                  token_b_vault", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                protocol_config", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("instruction_sysvar_account_info", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                        program", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                    price_state", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj Buy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Buy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewBuyInstruction declares a new Buy instruction with the provided parameters and accounts.
func NewBuyInstruction(
	// Parameters:
	params BuyParams,
	// Accounts:
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey,
	liquidityPoolState ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	userTokenAVault ag_solanago.PublicKey,
	userTokenBVault ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	protocolConfig ag_solanago.PublicKey) *Buy {
	return NewBuyInstructionBuilder().
		SetParams(params).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram).
		SetLiquidityPoolStateAccount(liquidityPoolState).
		SetUserAccount(user).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetUserTokenAVaultAccount(userTokenAVault).
		SetUserTokenBVaultAccount(userTokenBVault).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetProtocolConfigAccount(protocolConfig)
}

// NewSimpleBuyInstruction declares a new Buy instruction with the provided parameters and accounts.
func NewSimpleBuyInstruction(
	// Parameters:
	params BuyParams,
	// Accounts:
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey,
	liquidityPoolState ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	userTokenAVault ag_solanago.PublicKey,
	userTokenBVault ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	protocolConfig ag_solanago.PublicKey) *Buy {
	return NewBuyInstructionBuilder().
		SetParams(params).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram).
		SetLiquidityPoolStateAccount(liquidityPoolState).
		SetUserAccount(user).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetUserTokenAVaultAccount(userTokenAVault).
		SetUserTokenBVaultAccount(userTokenBVault).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetProtocolConfigAccount(protocolConfig)
}
