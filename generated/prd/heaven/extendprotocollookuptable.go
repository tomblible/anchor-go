// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ExtendProtocolLookupTable is the `extend_protocol_lookup_table` instruction.
type ExtendProtocolLookupTable struct {
	Version   *uint64
	Addresses *[]ag_solanago.PublicKey

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [] system_program
	//
	// [2] = [] address_lookup_program
	// ··········· CHECK
	//
	// [3] = [] authority
	//
	// [4] = [WRITE] lookup_table
	//
	// [5] = [] protocol_owner_state
	//
	// [6] = [SIGNER] current_owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExtendProtocolLookupTableInstructionBuilder creates a new `ExtendProtocolLookupTable` instruction builder.
func NewExtendProtocolLookupTableInstructionBuilder() *ExtendProtocolLookupTable {
	nd := &ExtendProtocolLookupTable{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[2] = ag_solanago.Meta(AddressLookupProgram)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(AuthorityPDA)
	nd.AccountMetaSlice[5] = ag_solanago.Meta(ProtocolOwnerStatePDA)
	return nd
}

// SetVersion sets the "version" parameter.
func (inst *ExtendProtocolLookupTable) SetVersion(version uint64) *ExtendProtocolLookupTable {
	inst.Version = &version
	return inst
}

// SetAddresses sets the "addresses" parameter.
func (inst *ExtendProtocolLookupTable) SetAddresses(addresses []ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	inst.Addresses = &addresses
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *ExtendProtocolLookupTable) SetPayerAccount(payer ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ExtendProtocolLookupTable) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *ExtendProtocolLookupTable) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *ExtendProtocolLookupTable) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAddressLookupProgramAccount sets the "address_lookup_program" account.
// CHECK
func (inst *ExtendProtocolLookupTable) SetAddressLookupProgramAccount(addressLookupProgram ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(addressLookupProgram)
	return inst
}

// GetAddressLookupProgramAccount gets the "address_lookup_program" account.
// CHECK
func (inst *ExtendProtocolLookupTable) GetAddressLookupProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ExtendProtocolLookupTable) SetAuthorityAccount(authority ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ExtendProtocolLookupTable) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLookupTableAccount sets the "lookup_table" account.
func (inst *ExtendProtocolLookupTable) SetLookupTableAccount(lookupTable ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(lookupTable).WRITE()
	return inst
}

// GetLookupTableAccount gets the "lookup_table" account.
func (inst *ExtendProtocolLookupTable) GetLookupTableAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProtocolOwnerStateAccount sets the "protocol_owner_state" account.
func (inst *ExtendProtocolLookupTable) SetProtocolOwnerStateAccount(protocolOwnerState ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(protocolOwnerState)
	return inst
}

// GetProtocolOwnerStateAccount gets the "protocol_owner_state" account.
func (inst *ExtendProtocolLookupTable) GetProtocolOwnerStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCurrentOwnerAccount sets the "current_owner" account.
func (inst *ExtendProtocolLookupTable) SetCurrentOwnerAccount(currentOwner ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(currentOwner).SIGNER()
	return inst
}

// GetCurrentOwnerAccount gets the "current_owner" account.
func (inst *ExtendProtocolLookupTable) GetCurrentOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst *ExtendProtocolLookupTable) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ExtendProtocolLookupTable) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ExtendProtocolLookupTable {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:7], metas...)
	return inst
}

func (inst *ExtendProtocolLookupTable) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7:]
}

func (inst ExtendProtocolLookupTable) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ExtendProtocolLookupTable,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ExtendProtocolLookupTable) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ExtendProtocolLookupTable) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Version == nil {
			return errors.New("version parameter is not set")
		}
		if inst.Addresses == nil {
			return errors.New("addresses parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 7 {
		return errors.New("accounts slice has wrong length: expected 7 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AddressLookupProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LookupTable is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProtocolOwnerState is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CurrentOwner is not set")
		}
	}
	return nil
}

func (inst *ExtendProtocolLookupTable) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ExtendProtocolLookupTable")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Version", *inst.Version))
						paramsBranch.Child(ag_format.Param("Addresses", *inst.Addresses))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        system_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("address_lookup_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          lookup_table", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  protocol_owner_state", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         current_owner", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj ExtendProtocolLookupTable) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Addresses` param:
	err = encoder.Encode(obj.Addresses)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ExtendProtocolLookupTable) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Addresses`:
	err = decoder.Decode(&obj.Addresses)
	if err != nil {
		return err
	}
	return nil
}

// NewExtendProtocolLookupTableInstruction declares a new ExtendProtocolLookupTable instruction with the provided parameters and accounts.
func NewExtendProtocolLookupTableInstruction(
	// Parameters:
	version uint64,
	addresses []ag_solanago.PublicKey,
	// Accounts:
	payer ag_solanago.PublicKey,
	lookupTable ag_solanago.PublicKey,
	currentOwner ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	return NewExtendProtocolLookupTableInstructionBuilder().
		SetVersion(version).
		SetAddresses(addresses).
		SetPayerAccount(payer).
		SetLookupTableAccount(lookupTable).
		SetCurrentOwnerAccount(currentOwner)
}

// NewSimpleExtendProtocolLookupTableInstruction declares a new ExtendProtocolLookupTable instruction with the provided parameters and accounts.
func NewSimpleExtendProtocolLookupTableInstruction(
	// Parameters:
	version uint64,
	addresses []ag_solanago.PublicKey,
	// Accounts:
	payer ag_solanago.PublicKey,
	lookupTable ag_solanago.PublicKey,
	currentOwner ag_solanago.PublicKey) *ExtendProtocolLookupTable {
	return NewExtendProtocolLookupTableInstructionBuilder().
		SetVersion(version).
		SetAddresses(addresses).
		SetPayerAccount(payer).
		SetLookupTableAccount(lookupTable).
		SetCurrentOwnerAccount(currentOwner)
}
