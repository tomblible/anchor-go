// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateOrUpdateProtocolFeeAdmin is the `create_or_update_protocol_fee_admin` instruction.
type CreateOrUpdateProtocolFeeAdmin struct {

	// [0] = [] system_program
	//
	// [1] = [WRITE, SIGNER] payer
	//
	// [2] = [SIGNER] current_owner
	//
	// [3] = [] protocol_owner_state
	//
	// [4] = [SIGNER] new_admin
	//
	// [5] = [WRITE] protocol_fee_admin_state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateOrUpdateProtocolFeeAdminInstructionBuilder creates a new `CreateOrUpdateProtocolFeeAdmin` instruction builder.
func NewCreateOrUpdateProtocolFeeAdminInstructionBuilder() *CreateOrUpdateProtocolFeeAdmin {
	nd := &CreateOrUpdateProtocolFeeAdmin{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(ProtocolOwnerStatePDA)
	nd.AccountMetaSlice[5] = ag_solanago.Meta(ProtocolFeeAdminStatePDA).WRITE()
	return nd
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateOrUpdateProtocolFeeAdmin {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) SetPayerAccount(payer ag_solanago.PublicKey) *CreateOrUpdateProtocolFeeAdmin {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCurrentOwnerAccount sets the "current_owner" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) SetCurrentOwnerAccount(currentOwner ag_solanago.PublicKey) *CreateOrUpdateProtocolFeeAdmin {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(currentOwner).SIGNER()
	return inst
}

// GetCurrentOwnerAccount gets the "current_owner" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) GetCurrentOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProtocolOwnerStateAccount sets the "protocol_owner_state" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) SetProtocolOwnerStateAccount(protocolOwnerState ag_solanago.PublicKey) *CreateOrUpdateProtocolFeeAdmin {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(protocolOwnerState)
	return inst
}

// GetProtocolOwnerStateAccount gets the "protocol_owner_state" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) GetProtocolOwnerStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetNewAdminAccount sets the "new_admin" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) SetNewAdminAccount(newAdmin ag_solanago.PublicKey) *CreateOrUpdateProtocolFeeAdmin {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(newAdmin).SIGNER()
	return inst
}

// GetNewAdminAccount gets the "new_admin" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) GetNewAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProtocolFeeAdminStateAccount sets the "protocol_fee_admin_state" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) SetProtocolFeeAdminStateAccount(protocolFeeAdminState ag_solanago.PublicKey) *CreateOrUpdateProtocolFeeAdmin {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(protocolFeeAdminState).WRITE()
	return inst
}

// GetProtocolFeeAdminStateAccount gets the "protocol_fee_admin_state" account.
func (inst *CreateOrUpdateProtocolFeeAdmin) GetProtocolFeeAdminStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst *CreateOrUpdateProtocolFeeAdmin) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateOrUpdateProtocolFeeAdmin) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateOrUpdateProtocolFeeAdmin {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:6], metas...)
	return inst
}

func (inst *CreateOrUpdateProtocolFeeAdmin) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6:]
}

func (inst CreateOrUpdateProtocolFeeAdmin) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateOrUpdateProtocolFeeAdmin,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateOrUpdateProtocolFeeAdmin) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateOrUpdateProtocolFeeAdmin) Validate() error {
	if len(inst.AccountMetaSlice) < 6 {
		return errors.New("accounts slice has wrong length: expected 6 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CurrentOwner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProtocolOwnerState is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.NewAdmin is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ProtocolFeeAdminState is not set")
		}
	}
	return nil
}

func (inst *CreateOrUpdateProtocolFeeAdmin) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateOrUpdateProtocolFeeAdmin")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           current_owner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    protocol_owner_state", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               new_admin", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("protocol_fee_admin_state", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CreateOrUpdateProtocolFeeAdmin) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateOrUpdateProtocolFeeAdmin) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateOrUpdateProtocolFeeAdminInstruction declares a new CreateOrUpdateProtocolFeeAdmin instruction with the provided parameters and accounts.
func NewCreateOrUpdateProtocolFeeAdminInstruction(
	payer ag_solanago.PublicKey,
	currentOwner ag_solanago.PublicKey,
	newAdmin ag_solanago.PublicKey) *CreateOrUpdateProtocolFeeAdmin {
	return NewCreateOrUpdateProtocolFeeAdminInstructionBuilder().
		SetPayerAccount(payer).
		SetCurrentOwnerAccount(currentOwner).
		SetNewAdminAccount(newAdmin)
}

// NewSimpleCreateOrUpdateProtocolFeeAdminInstruction declares a new CreateOrUpdateProtocolFeeAdmin instruction with the provided parameters and accounts.
func NewSimpleCreateOrUpdateProtocolFeeAdminInstruction(
	payer ag_solanago.PublicKey,
	currentOwner ag_solanago.PublicKey,
	newAdmin ag_solanago.PublicKey) *CreateOrUpdateProtocolFeeAdmin {
	return NewCreateOrUpdateProtocolFeeAdminInstructionBuilder().
		SetPayerAccount(payer).
		SetCurrentOwnerAccount(currentOwner).
		SetNewAdminAccount(newAdmin)
}
