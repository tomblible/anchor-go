// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package heaven

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateAllowCreatePool is the `update_allow_create_pool` instruction.
type UpdateAllowCreatePool struct {
	Version         *uint16
	AllowCreatePool *bool

	// [0] = [SIGNER] admin
	//
	// [1] = [WRITE] protocol_config_state
	//
	// [2] = [] protocol_admin_state
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateAllowCreatePoolInstructionBuilder creates a new `UpdateAllowCreatePool` instruction builder.
func NewUpdateAllowCreatePoolInstructionBuilder() *UpdateAllowCreatePool {
	nd := &UpdateAllowCreatePool{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(ProtocolAdminStatePDA)
	return nd
}

// SetVersion sets the "version" parameter.
func (inst *UpdateAllowCreatePool) SetVersion(version uint16) *UpdateAllowCreatePool {
	inst.Version = &version
	return inst
}

// SetAllowCreatePool sets the "allow_create_pool" parameter.
func (inst *UpdateAllowCreatePool) SetAllowCreatePool(allow_create_pool bool) *UpdateAllowCreatePool {
	inst.AllowCreatePool = &allow_create_pool
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateAllowCreatePool) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateAllowCreatePool {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateAllowCreatePool) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProtocolConfigStateAccount sets the "protocol_config_state" account.
func (inst *UpdateAllowCreatePool) SetProtocolConfigStateAccount(protocolConfigState ag_solanago.PublicKey) *UpdateAllowCreatePool {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(protocolConfigState).WRITE()
	return inst
}

// GetProtocolConfigStateAccount gets the "protocol_config_state" account.
func (inst *UpdateAllowCreatePool) GetProtocolConfigStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProtocolAdminStateAccount sets the "protocol_admin_state" account.
func (inst *UpdateAllowCreatePool) SetProtocolAdminStateAccount(protocolAdminState ag_solanago.PublicKey) *UpdateAllowCreatePool {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(protocolAdminState)
	return inst
}

// GetProtocolAdminStateAccount gets the "protocol_admin_state" account.
func (inst *UpdateAllowCreatePool) GetProtocolAdminStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *UpdateAllowCreatePool) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *UpdateAllowCreatePool) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *UpdateAllowCreatePool {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *UpdateAllowCreatePool) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst UpdateAllowCreatePool) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateAllowCreatePool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateAllowCreatePool) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateAllowCreatePool) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Version == nil {
			return errors.New("version parameter is not set")
		}
		if inst.AllowCreatePool == nil {
			return errors.New("allowCreatePool parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ProtocolConfigState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ProtocolAdminState is not set")
		}
	}
	return nil
}

func (inst *UpdateAllowCreatePool) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateAllowCreatePool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          Version", *inst.Version))
						paramsBranch.Child(ag_format.Param("  AllowCreatePool", *inst.AllowCreatePool))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("protocol_config_state", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" protocol_admin_state", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateAllowCreatePool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `AllowCreatePool` param:
	err = encoder.Encode(obj.AllowCreatePool)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateAllowCreatePool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `AllowCreatePool`:
	err = decoder.Decode(&obj.AllowCreatePool)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateAllowCreatePoolInstruction declares a new UpdateAllowCreatePool instruction with the provided parameters and accounts.
func NewUpdateAllowCreatePoolInstruction(
	// Parameters:
	version uint16,
	allow_create_pool bool,
	// Accounts:
	admin ag_solanago.PublicKey,
	protocolConfigState ag_solanago.PublicKey) *UpdateAllowCreatePool {
	return NewUpdateAllowCreatePoolInstructionBuilder().
		SetVersion(version).
		SetAllowCreatePool(allow_create_pool).
		SetAdminAccount(admin).
		SetProtocolConfigStateAccount(protocolConfigState)
}

// NewSimpleUpdateAllowCreatePoolInstruction declares a new UpdateAllowCreatePool instruction with the provided parameters and accounts.
func NewSimpleUpdateAllowCreatePoolInstruction(
	// Parameters:
	version uint16,
	allow_create_pool bool,
	// Accounts:
	admin ag_solanago.PublicKey,
	protocolConfigState ag_solanago.PublicKey) *UpdateAllowCreatePool {
	return NewUpdateAllowCreatePoolInstructionBuilder().
		SetVersion(version).
		SetAllowCreatePool(allow_create_pool).
		SetAdminAccount(admin).
		SetProtocolConfigStateAccount(protocolConfigState)
}
