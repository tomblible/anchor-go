// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetTokenBadgeAuthority is the `set_token_badge_authority` instruction.
type SetTokenBadgeAuthority struct {

	// [0] = [] whirlpools_config
	//
	// [1] = [WRITE] whirlpools_config_extension
	//
	// [2] = [SIGNER] config_extension_authority
	//
	// [3] = [] new_token_badge_authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetTokenBadgeAuthorityInstructionBuilder creates a new `SetTokenBadgeAuthority` instruction builder.
func NewSetTokenBadgeAuthorityInstructionBuilder() *SetTokenBadgeAuthority {
	nd := &SetTokenBadgeAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *SetTokenBadgeAuthority) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *SetTokenBadgeAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *SetTokenBadgeAuthority) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhirlpoolsConfigExtensionAccount sets the "whirlpools_config_extension" account.
func (inst *SetTokenBadgeAuthority) SetWhirlpoolsConfigExtensionAccount(whirlpoolsConfigExtension ag_solanago.PublicKey) *SetTokenBadgeAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whirlpoolsConfigExtension).WRITE()
	return inst
}

// GetWhirlpoolsConfigExtensionAccount gets the "whirlpools_config_extension" account.
func (inst *SetTokenBadgeAuthority) GetWhirlpoolsConfigExtensionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetConfigExtensionAuthorityAccount sets the "config_extension_authority" account.
func (inst *SetTokenBadgeAuthority) SetConfigExtensionAuthorityAccount(configExtensionAuthority ag_solanago.PublicKey) *SetTokenBadgeAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(configExtensionAuthority).SIGNER()
	return inst
}

// GetConfigExtensionAuthorityAccount gets the "config_extension_authority" account.
func (inst *SetTokenBadgeAuthority) GetConfigExtensionAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewTokenBadgeAuthorityAccount sets the "new_token_badge_authority" account.
func (inst *SetTokenBadgeAuthority) SetNewTokenBadgeAuthorityAccount(newTokenBadgeAuthority ag_solanago.PublicKey) *SetTokenBadgeAuthority {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newTokenBadgeAuthority)
	return inst
}

// GetNewTokenBadgeAuthorityAccount gets the "new_token_badge_authority" account.
func (inst *SetTokenBadgeAuthority) GetNewTokenBadgeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *SetTokenBadgeAuthority) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetTokenBadgeAuthority) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetTokenBadgeAuthority {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *SetTokenBadgeAuthority) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst SetTokenBadgeAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetTokenBadgeAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetTokenBadgeAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetTokenBadgeAuthority) Validate() error {
	if len(inst.AccountMetaSlice) != 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.WhirlpoolsConfigExtension is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ConfigExtensionAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewTokenBadgeAuthority is not set")
		}
	}
	return nil
}

func (inst *SetTokenBadgeAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetTokenBadgeAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("whirlpools_config_extension", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" config_extension_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  new_token_badge_authority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetTokenBadgeAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SetTokenBadgeAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSetTokenBadgeAuthorityInstruction declares a new SetTokenBadgeAuthority instruction with the provided parameters and accounts.
func NewSetTokenBadgeAuthorityInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpoolsConfigExtension ag_solanago.PublicKey,
	configExtensionAuthority ag_solanago.PublicKey,
	newTokenBadgeAuthority ag_solanago.PublicKey) *SetTokenBadgeAuthority {
	return NewSetTokenBadgeAuthorityInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolsConfigExtensionAccount(whirlpoolsConfigExtension).
		SetConfigExtensionAuthorityAccount(configExtensionAuthority).
		SetNewTokenBadgeAuthorityAccount(newTokenBadgeAuthority)
}

// NewSimpleSetTokenBadgeAuthorityInstruction declares a new SetTokenBadgeAuthority instruction with the provided parameters and accounts.
func NewSimpleSetTokenBadgeAuthorityInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpoolsConfigExtension ag_solanago.PublicKey,
	configExtensionAuthority ag_solanago.PublicKey,
	newTokenBadgeAuthority ag_solanago.PublicKey) *SetTokenBadgeAuthority {
	return NewSetTokenBadgeAuthorityInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolsConfigExtensionAccount(whirlpoolsConfigExtension).
		SetConfigExtensionAuthorityAccount(configExtensionAuthority).
		SetNewTokenBadgeAuthorityAccount(newTokenBadgeAuthority)
}
