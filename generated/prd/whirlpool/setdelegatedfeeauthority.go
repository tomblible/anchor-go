// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sets the delegated fee authority for an AdaptiveFeeTier.
// The delegated fee authority can set the fee rate for individual pools initialized with the adaptive fee-tier.
// Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction.
//
// ### Authority
// - "fee_authority" - Set authority in the WhirlpoolConfig
type SetDelegatedFeeAuthority struct {

	// [0] = [] whirlpools_config
	//
	// [1] = [WRITE] adaptive_fee_tier
	//
	// [2] = [SIGNER] fee_authority
	//
	// [3] = [] new_delegated_fee_authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetDelegatedFeeAuthorityInstructionBuilder creates a new `SetDelegatedFeeAuthority` instruction builder.
func NewSetDelegatedFeeAuthorityInstructionBuilder() *SetDelegatedFeeAuthority {
	nd := &SetDelegatedFeeAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *SetDelegatedFeeAuthority) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *SetDelegatedFeeAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *SetDelegatedFeeAuthority) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdaptiveFeeTierAccount sets the "adaptive_fee_tier" account.
func (inst *SetDelegatedFeeAuthority) SetAdaptiveFeeTierAccount(adaptiveFeeTier ag_solanago.PublicKey) *SetDelegatedFeeAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(adaptiveFeeTier).WRITE()
	return inst
}

// GetAdaptiveFeeTierAccount gets the "adaptive_fee_tier" account.
func (inst *SetDelegatedFeeAuthority) GetAdaptiveFeeTierAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFeeAuthorityAccount sets the "fee_authority" account.
func (inst *SetDelegatedFeeAuthority) SetFeeAuthorityAccount(feeAuthority ag_solanago.PublicKey) *SetDelegatedFeeAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(feeAuthority).SIGNER()
	return inst
}

// GetFeeAuthorityAccount gets the "fee_authority" account.
func (inst *SetDelegatedFeeAuthority) GetFeeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewDelegatedFeeAuthorityAccount sets the "new_delegated_fee_authority" account.
func (inst *SetDelegatedFeeAuthority) SetNewDelegatedFeeAuthorityAccount(newDelegatedFeeAuthority ag_solanago.PublicKey) *SetDelegatedFeeAuthority {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newDelegatedFeeAuthority)
	return inst
}

// GetNewDelegatedFeeAuthorityAccount gets the "new_delegated_fee_authority" account.
func (inst *SetDelegatedFeeAuthority) GetNewDelegatedFeeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *SetDelegatedFeeAuthority) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetDelegatedFeeAuthority) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetDelegatedFeeAuthority {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *SetDelegatedFeeAuthority) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst SetDelegatedFeeAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetDelegatedFeeAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetDelegatedFeeAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetDelegatedFeeAuthority) Validate() error {
	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AdaptiveFeeTier is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FeeAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewDelegatedFeeAuthority is not set")
		}
	}
	return nil
}

func (inst *SetDelegatedFeeAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetDelegatedFeeAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          adaptive_fee_tier", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              fee_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("new_delegated_fee_authority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetDelegatedFeeAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SetDelegatedFeeAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSetDelegatedFeeAuthorityInstruction declares a new SetDelegatedFeeAuthority instruction with the provided parameters and accounts.
func NewSetDelegatedFeeAuthorityInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey,
	newDelegatedFeeAuthority ag_solanago.PublicKey) *SetDelegatedFeeAuthority {
	return NewSetDelegatedFeeAuthorityInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetFeeAuthorityAccount(feeAuthority).
		SetNewDelegatedFeeAuthorityAccount(newDelegatedFeeAuthority)
}

// NewSimpleSetDelegatedFeeAuthorityInstruction declares a new SetDelegatedFeeAuthority instruction with the provided parameters and accounts.
func NewSimpleSetDelegatedFeeAuthorityInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey,
	newDelegatedFeeAuthority ag_solanago.PublicKey) *SetDelegatedFeeAuthority {
	return NewSetDelegatedFeeAuthorityInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetFeeAuthorityAccount(feeAuthority).
		SetNewDelegatedFeeAuthorityAccount(newDelegatedFeeAuthority)
}
