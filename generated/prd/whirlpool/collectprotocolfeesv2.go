// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CollectProtocolFeesV2 is the `collect_protocol_fees_v2` instruction.
type CollectProtocolFeesV2 struct {
	RemainingAccountsInfo *RemainingAccountsInfo `bin:"optional"`

	// [0] = [] whirlpools_config
	//
	// [1] = [WRITE] whirlpool
	//
	// [2] = [SIGNER] collect_protocol_fees_authority
	//
	// [3] = [] token_mint_a
	//
	// [4] = [] token_mint_b
	//
	// [5] = [WRITE] token_vault_a
	//
	// [6] = [WRITE] token_vault_b
	//
	// [7] = [WRITE] token_destination_a
	//
	// [8] = [WRITE] token_destination_b
	//
	// [9] = [] token_program_a
	//
	// [10] = [] token_program_b
	//
	// [11] = [] memo_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectProtocolFeesV2InstructionBuilder creates a new `CollectProtocolFeesV2` instruction builder.
func NewCollectProtocolFeesV2InstructionBuilder() *CollectProtocolFeesV2 {
	nd := &CollectProtocolFeesV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetRemainingAccountsInfo sets the "remaining_accounts_info" parameter.
func (inst *CollectProtocolFeesV2) SetRemainingAccountsInfo(remaining_accounts_info RemainingAccountsInfo) *CollectProtocolFeesV2 {
	inst.RemainingAccountsInfo = &remaining_accounts_info
	return inst
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *CollectProtocolFeesV2) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *CollectProtocolFeesV2) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *CollectProtocolFeesV2) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *CollectProtocolFeesV2) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCollectProtocolFeesAuthorityAccount sets the "collect_protocol_fees_authority" account.
func (inst *CollectProtocolFeesV2) SetCollectProtocolFeesAuthorityAccount(collectProtocolFeesAuthority ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(collectProtocolFeesAuthority).SIGNER()
	return inst
}

// GetCollectProtocolFeesAuthorityAccount gets the "collect_protocol_fees_authority" account.
func (inst *CollectProtocolFeesV2) GetCollectProtocolFeesAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenMintAAccount sets the "token_mint_a" account.
func (inst *CollectProtocolFeesV2) SetTokenMintAAccount(tokenMintA ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenMintA)
	return inst
}

// GetTokenMintAAccount gets the "token_mint_a" account.
func (inst *CollectProtocolFeesV2) GetTokenMintAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenMintBAccount sets the "token_mint_b" account.
func (inst *CollectProtocolFeesV2) SetTokenMintBAccount(tokenMintB ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenMintB)
	return inst
}

// GetTokenMintBAccount gets the "token_mint_b" account.
func (inst *CollectProtocolFeesV2) GetTokenMintBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenVaultAAccount sets the "token_vault_a" account.
func (inst *CollectProtocolFeesV2) SetTokenVaultAAccount(tokenVaultA ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenVaultA).WRITE()
	return inst
}

// GetTokenVaultAAccount gets the "token_vault_a" account.
func (inst *CollectProtocolFeesV2) GetTokenVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenVaultBAccount sets the "token_vault_b" account.
func (inst *CollectProtocolFeesV2) SetTokenVaultBAccount(tokenVaultB ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenVaultB).WRITE()
	return inst
}

// GetTokenVaultBAccount gets the "token_vault_b" account.
func (inst *CollectProtocolFeesV2) GetTokenVaultBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenDestinationAAccount sets the "token_destination_a" account.
func (inst *CollectProtocolFeesV2) SetTokenDestinationAAccount(tokenDestinationA ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenDestinationA).WRITE()
	return inst
}

// GetTokenDestinationAAccount gets the "token_destination_a" account.
func (inst *CollectProtocolFeesV2) GetTokenDestinationAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenDestinationBAccount sets the "token_destination_b" account.
func (inst *CollectProtocolFeesV2) SetTokenDestinationBAccount(tokenDestinationB ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenDestinationB).WRITE()
	return inst
}

// GetTokenDestinationBAccount gets the "token_destination_b" account.
func (inst *CollectProtocolFeesV2) GetTokenDestinationBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAAccount sets the "token_program_a" account.
func (inst *CollectProtocolFeesV2) SetTokenProgramAAccount(tokenProgramA ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgramA)
	return inst
}

// GetTokenProgramAAccount gets the "token_program_a" account.
func (inst *CollectProtocolFeesV2) GetTokenProgramAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramBAccount sets the "token_program_b" account.
func (inst *CollectProtocolFeesV2) SetTokenProgramBAccount(tokenProgramB ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgramB)
	return inst
}

// GetTokenProgramBAccount gets the "token_program_b" account.
func (inst *CollectProtocolFeesV2) GetTokenProgramBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMemoProgramAccount sets the "memo_program" account.
func (inst *CollectProtocolFeesV2) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memo_program" account.
func (inst *CollectProtocolFeesV2) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst *CollectProtocolFeesV2) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CollectProtocolFeesV2) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CollectProtocolFeesV2 {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:12], metas...)
	return inst
}

func (inst *CollectProtocolFeesV2) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12:]
}

func (inst CollectProtocolFeesV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectProtocolFeesV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectProtocolFeesV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectProtocolFeesV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	if len(inst.AccountMetaSlice) != 12 {
		return errors.New("accounts slice has wrong length: expected 12 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CollectProtocolFeesAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenMintA is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenMintB is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenVaultA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenVaultB is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenDestinationA is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenDestinationB is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgramA is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgramB is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
	}
	return nil
}

func (inst *CollectProtocolFeesV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectProtocolFeesV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  RemainingAccountsInfo (OPT)", inst.RemainingAccountsInfo))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                      whirlpool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("collect_protocol_fees_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                   token_mint_a", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                   token_mint_b", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                  token_vault_a", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                  token_vault_b", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            token_destination_a", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            token_destination_b", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                token_program_a", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                token_program_b", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                   memo_program", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj CollectProtocolFeesV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RemainingAccountsInfo` param (optional):
	{
		if obj.RemainingAccountsInfo == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *CollectProtocolFeesV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RemainingAccountsInfo` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RemainingAccountsInfo)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewCollectProtocolFeesV2Instruction declares a new CollectProtocolFeesV2 instruction with the provided parameters and accounts.
func NewCollectProtocolFeesV2Instruction(
	// Parameters:
	remaining_accounts_info RemainingAccountsInfo,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	collectProtocolFeesAuthority ag_solanago.PublicKey,
	tokenMintA ag_solanago.PublicKey,
	tokenMintB ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	tokenDestinationA ag_solanago.PublicKey,
	tokenDestinationB ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	return NewCollectProtocolFeesV2InstructionBuilder().
		SetRemainingAccountsInfo(remaining_accounts_info).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolAccount(whirlpool).
		SetCollectProtocolFeesAuthorityAccount(collectProtocolFeesAuthority).
		SetTokenMintAAccount(tokenMintA).
		SetTokenMintBAccount(tokenMintB).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenVaultBAccount(tokenVaultB).
		SetTokenDestinationAAccount(tokenDestinationA).
		SetTokenDestinationBAccount(tokenDestinationB).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB).
		SetMemoProgramAccount(memoProgram)
}

// NewSimpleCollectProtocolFeesV2Instruction declares a new CollectProtocolFeesV2 instruction with the provided parameters and accounts.
func NewSimpleCollectProtocolFeesV2Instruction(
	// Parameters:
	remaining_accounts_info RemainingAccountsInfo,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	collectProtocolFeesAuthority ag_solanago.PublicKey,
	tokenMintA ag_solanago.PublicKey,
	tokenMintB ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	tokenDestinationA ag_solanago.PublicKey,
	tokenDestinationB ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey) *CollectProtocolFeesV2 {
	return NewCollectProtocolFeesV2InstructionBuilder().
		SetRemainingAccountsInfo(remaining_accounts_info).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolAccount(whirlpool).
		SetCollectProtocolFeesAuthorityAccount(collectProtocolFeesAuthority).
		SetTokenMintAAccount(tokenMintA).
		SetTokenMintBAccount(tokenMintB).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenVaultBAccount(tokenVaultB).
		SetTokenDestinationAAccount(tokenDestinationA).
		SetTokenDestinationBAccount(tokenDestinationB).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB).
		SetMemoProgramAccount(memoProgram)
}
