// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeTokenBadge is the `initialize_token_badge` instruction.
type InitializeTokenBadge struct {

	// [0] = [] whirlpools_config
	//
	// [1] = [] whirlpools_config_extension
	//
	// [2] = [SIGNER] token_badge_authority
	//
	// [3] = [] token_mint
	//
	// [4] = [WRITE] token_badge
	//
	// [5] = [WRITE, SIGNER] funder
	//
	// [6] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeTokenBadgeInstructionBuilder creates a new `InitializeTokenBadge` instruction builder.
func NewInitializeTokenBadgeInstructionBuilder() *InitializeTokenBadge {
	nd := &InitializeTokenBadge{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *InitializeTokenBadge) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *InitializeTokenBadge {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *InitializeTokenBadge) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhirlpoolsConfigExtensionAccount sets the "whirlpools_config_extension" account.
func (inst *InitializeTokenBadge) SetWhirlpoolsConfigExtensionAccount(whirlpoolsConfigExtension ag_solanago.PublicKey) *InitializeTokenBadge {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whirlpoolsConfigExtension)
	return inst
}

// GetWhirlpoolsConfigExtensionAccount gets the "whirlpools_config_extension" account.
func (inst *InitializeTokenBadge) GetWhirlpoolsConfigExtensionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenBadgeAuthorityAccount sets the "token_badge_authority" account.
func (inst *InitializeTokenBadge) SetTokenBadgeAuthorityAccount(tokenBadgeAuthority ag_solanago.PublicKey) *InitializeTokenBadge {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenBadgeAuthority).SIGNER()
	return inst
}

// GetTokenBadgeAuthorityAccount gets the "token_badge_authority" account.
func (inst *InitializeTokenBadge) GetTokenBadgeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenMintAccount sets the "token_mint" account.
func (inst *InitializeTokenBadge) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *InitializeTokenBadge {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "token_mint" account.
func (inst *InitializeTokenBadge) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenBadgeAccount sets the "token_badge" account.
func (inst *InitializeTokenBadge) SetTokenBadgeAccount(tokenBadge ag_solanago.PublicKey) *InitializeTokenBadge {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenBadge).WRITE()
	return inst
}

// GetTokenBadgeAccount gets the "token_badge" account.
func (inst *InitializeTokenBadge) GetTokenBadgeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFunderAccount sets the "funder" account.
func (inst *InitializeTokenBadge) SetFunderAccount(funder ag_solanago.PublicKey) *InitializeTokenBadge {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *InitializeTokenBadge) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeTokenBadge) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeTokenBadge {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeTokenBadge) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst *InitializeTokenBadge) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeTokenBadge) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeTokenBadge {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:7], metas...)
	return inst
}

func (inst *InitializeTokenBadge) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7:]
}

func (inst InitializeTokenBadge) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeTokenBadge,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeTokenBadge) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeTokenBadge) Validate() error {
	if len(inst.AccountMetaSlice) != 7 {
		return errors.New("accounts slice has wrong length: expected 7 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.WhirlpoolsConfigExtension is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenBadgeAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenBadge is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeTokenBadge) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeTokenBadge")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("whirlpools_config_extension", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      token_badge_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 token_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                token_badge", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                     funder", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             system_program", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj InitializeTokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *InitializeTokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewInitializeTokenBadgeInstruction declares a new InitializeTokenBadge instruction with the provided parameters and accounts.
func NewInitializeTokenBadgeInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpoolsConfigExtension ag_solanago.PublicKey,
	tokenBadgeAuthority ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	tokenBadge ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeTokenBadge {
	return NewInitializeTokenBadgeInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolsConfigExtensionAccount(whirlpoolsConfigExtension).
		SetTokenBadgeAuthorityAccount(tokenBadgeAuthority).
		SetTokenMintAccount(tokenMint).
		SetTokenBadgeAccount(tokenBadge).
		SetFunderAccount(funder).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleInitializeTokenBadgeInstruction declares a new InitializeTokenBadge instruction with the provided parameters and accounts.
func NewSimpleInitializeTokenBadgeInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	whirlpoolsConfigExtension ag_solanago.PublicKey,
	tokenBadgeAuthority ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	tokenBadge ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeTokenBadge {
	return NewInitializeTokenBadgeInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetWhirlpoolsConfigExtensionAccount(whirlpoolsConfigExtension).
		SetTokenBadgeAuthorityAccount(tokenBadgeAuthority).
		SetTokenMintAccount(tokenMint).
		SetTokenBadgeAccount(tokenBadge).
		SetFunderAccount(funder).
		SetSystemProgramAccount(systemProgram)
}
