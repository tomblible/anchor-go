// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initializes an adaptive_fee_tier account usable by Whirlpools in a WhirlpoolConfig space.
//
// ### Authority
// - "fee_authority" - Set authority in the WhirlpoolConfig
//
// ### Parameters
// - `fee_tier_index` - The index of the fee-tier that this adaptive fee tier will be initialized.
// - `tick_spacing` - The tick-spacing that this fee-tier suggests the default_fee_rate for.
// - `initialize_pool_authority` - The authority that can initialize pools with this adaptive fee-tier.
// - `delegated_fee_authority` - The authority that can set the base fee rate for pools using this adaptive fee-tier.
// - `default_fee_rate` - The default fee rate that a pool will use if the pool uses this
// fee tier during initialization.
// - `filter_period` - Period determine high frequency trading time window. (seconds)
// - `decay_period` - Period determine when the adaptive fee start decrease. (seconds)
// - `reduction_factor` - Adaptive fee rate decrement rate.
// - `adaptive_fee_control_factor` - Adaptive fee control factor.
// - `max_volatility_accumulator` - Max volatility accumulator.
// - `tick_group_size` - Tick group size to define tick group index.
// - `major_swap_threshold_ticks` - Major swap threshold ticks to define major swap.
//
// #### Special Errors
// - `InvalidTickSpacing` - If the provided tick_spacing is 0.
// - `InvalidFeeTierIndex` - If the provided fee_tier_index is same to tick_spacing.
// - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE.
// - `InvalidAdaptiveFeeConstants` - If the provided adaptive fee constants are invalid.
type InitializeAdaptiveFeeTier struct {
	FeeTierIndex             *uint16
	TickSpacing              *uint16
	InitializePoolAuthority  *ag_solanago.PublicKey
	DelegatedFeeAuthority    *ag_solanago.PublicKey
	DefaultBaseFeeRate       *uint16
	FilterPeriod             *uint16
	DecayPeriod              *uint16
	ReductionFactor          *uint16
	AdaptiveFeeControlFactor *uint32
	MaxVolatilityAccumulator *uint32
	TickGroupSize            *uint16
	MajorSwapThresholdTicks  *uint16

	// [0] = [] whirlpools_config
	//
	// [1] = [WRITE] adaptive_fee_tier
	//
	// [2] = [WRITE, SIGNER] funder
	//
	// [3] = [SIGNER] fee_authority
	//
	// [4] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeAdaptiveFeeTierInstructionBuilder creates a new `InitializeAdaptiveFeeTier` instruction builder.
func NewInitializeAdaptiveFeeTierInstructionBuilder() *InitializeAdaptiveFeeTier {
	nd := &InitializeAdaptiveFeeTier{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetFeeTierIndex sets the "fee_tier_index" parameter.
func (inst *InitializeAdaptiveFeeTier) SetFeeTierIndex(fee_tier_index uint16) *InitializeAdaptiveFeeTier {
	inst.FeeTierIndex = &fee_tier_index
	return inst
}

// SetTickSpacing sets the "tick_spacing" parameter.
func (inst *InitializeAdaptiveFeeTier) SetTickSpacing(tick_spacing uint16) *InitializeAdaptiveFeeTier {
	inst.TickSpacing = &tick_spacing
	return inst
}

// SetInitializePoolAuthority sets the "initialize_pool_authority" parameter.
func (inst *InitializeAdaptiveFeeTier) SetInitializePoolAuthority(initialize_pool_authority ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	inst.InitializePoolAuthority = &initialize_pool_authority
	return inst
}

// SetDelegatedFeeAuthority sets the "delegated_fee_authority" parameter.
func (inst *InitializeAdaptiveFeeTier) SetDelegatedFeeAuthority(delegated_fee_authority ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	inst.DelegatedFeeAuthority = &delegated_fee_authority
	return inst
}

// SetDefaultBaseFeeRate sets the "default_base_fee_rate" parameter.
func (inst *InitializeAdaptiveFeeTier) SetDefaultBaseFeeRate(default_base_fee_rate uint16) *InitializeAdaptiveFeeTier {
	inst.DefaultBaseFeeRate = &default_base_fee_rate
	return inst
}

// SetFilterPeriod sets the "filter_period" parameter.
func (inst *InitializeAdaptiveFeeTier) SetFilterPeriod(filter_period uint16) *InitializeAdaptiveFeeTier {
	inst.FilterPeriod = &filter_period
	return inst
}

// SetDecayPeriod sets the "decay_period" parameter.
func (inst *InitializeAdaptiveFeeTier) SetDecayPeriod(decay_period uint16) *InitializeAdaptiveFeeTier {
	inst.DecayPeriod = &decay_period
	return inst
}

// SetReductionFactor sets the "reduction_factor" parameter.
func (inst *InitializeAdaptiveFeeTier) SetReductionFactor(reduction_factor uint16) *InitializeAdaptiveFeeTier {
	inst.ReductionFactor = &reduction_factor
	return inst
}

// SetAdaptiveFeeControlFactor sets the "adaptive_fee_control_factor" parameter.
func (inst *InitializeAdaptiveFeeTier) SetAdaptiveFeeControlFactor(adaptive_fee_control_factor uint32) *InitializeAdaptiveFeeTier {
	inst.AdaptiveFeeControlFactor = &adaptive_fee_control_factor
	return inst
}

// SetMaxVolatilityAccumulator sets the "max_volatility_accumulator" parameter.
func (inst *InitializeAdaptiveFeeTier) SetMaxVolatilityAccumulator(max_volatility_accumulator uint32) *InitializeAdaptiveFeeTier {
	inst.MaxVolatilityAccumulator = &max_volatility_accumulator
	return inst
}

// SetTickGroupSize sets the "tick_group_size" parameter.
func (inst *InitializeAdaptiveFeeTier) SetTickGroupSize(tick_group_size uint16) *InitializeAdaptiveFeeTier {
	inst.TickGroupSize = &tick_group_size
	return inst
}

// SetMajorSwapThresholdTicks sets the "major_swap_threshold_ticks" parameter.
func (inst *InitializeAdaptiveFeeTier) SetMajorSwapThresholdTicks(major_swap_threshold_ticks uint16) *InitializeAdaptiveFeeTier {
	inst.MajorSwapThresholdTicks = &major_swap_threshold_ticks
	return inst
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *InitializeAdaptiveFeeTier) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *InitializeAdaptiveFeeTier) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdaptiveFeeTierAccount sets the "adaptive_fee_tier" account.
func (inst *InitializeAdaptiveFeeTier) SetAdaptiveFeeTierAccount(adaptiveFeeTier ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(adaptiveFeeTier).WRITE()
	return inst
}

// GetAdaptiveFeeTierAccount gets the "adaptive_fee_tier" account.
func (inst *InitializeAdaptiveFeeTier) GetAdaptiveFeeTierAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFunderAccount sets the "funder" account.
func (inst *InitializeAdaptiveFeeTier) SetFunderAccount(funder ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *InitializeAdaptiveFeeTier) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFeeAuthorityAccount sets the "fee_authority" account.
func (inst *InitializeAdaptiveFeeTier) SetFeeAuthorityAccount(feeAuthority ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(feeAuthority).SIGNER()
	return inst
}

// GetFeeAuthorityAccount gets the "fee_authority" account.
func (inst *InitializeAdaptiveFeeTier) GetFeeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeAdaptiveFeeTier) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeAdaptiveFeeTier) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *InitializeAdaptiveFeeTier) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeAdaptiveFeeTier) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeAdaptiveFeeTier {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *InitializeAdaptiveFeeTier) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst InitializeAdaptiveFeeTier) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeAdaptiveFeeTier,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeAdaptiveFeeTier) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeAdaptiveFeeTier) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.FeeTierIndex == nil {
			return errors.New("feeTierIndex parameter is not set")
		}
		if inst.TickSpacing == nil {
			return errors.New("tickSpacing parameter is not set")
		}
		if inst.InitializePoolAuthority == nil {
			return errors.New("initializePoolAuthority parameter is not set")
		}
		if inst.DelegatedFeeAuthority == nil {
			return errors.New("delegatedFeeAuthority parameter is not set")
		}
		if inst.DefaultBaseFeeRate == nil {
			return errors.New("defaultBaseFeeRate parameter is not set")
		}
		if inst.FilterPeriod == nil {
			return errors.New("filterPeriod parameter is not set")
		}
		if inst.DecayPeriod == nil {
			return errors.New("decayPeriod parameter is not set")
		}
		if inst.ReductionFactor == nil {
			return errors.New("reductionFactor parameter is not set")
		}
		if inst.AdaptiveFeeControlFactor == nil {
			return errors.New("adaptiveFeeControlFactor parameter is not set")
		}
		if inst.MaxVolatilityAccumulator == nil {
			return errors.New("maxVolatilityAccumulator parameter is not set")
		}
		if inst.TickGroupSize == nil {
			return errors.New("tickGroupSize parameter is not set")
		}
		if inst.MajorSwapThresholdTicks == nil {
			return errors.New("majorSwapThresholdTicks parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AdaptiveFeeTier is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FeeAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeAdaptiveFeeTier) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeAdaptiveFeeTier")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=12]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("               FeeTierIndex", *inst.FeeTierIndex))
						paramsBranch.Child(ag_format.Param("                TickSpacing", *inst.TickSpacing))
						paramsBranch.Child(ag_format.Param("    InitializePoolAuthority", *inst.InitializePoolAuthority))
						paramsBranch.Child(ag_format.Param("      DelegatedFeeAuthority", *inst.DelegatedFeeAuthority))
						paramsBranch.Child(ag_format.Param("         DefaultBaseFeeRate", *inst.DefaultBaseFeeRate))
						paramsBranch.Child(ag_format.Param("               FilterPeriod", *inst.FilterPeriod))
						paramsBranch.Child(ag_format.Param("                DecayPeriod", *inst.DecayPeriod))
						paramsBranch.Child(ag_format.Param("            ReductionFactor", *inst.ReductionFactor))
						paramsBranch.Child(ag_format.Param("   AdaptiveFeeControlFactor", *inst.AdaptiveFeeControlFactor))
						paramsBranch.Child(ag_format.Param("   MaxVolatilityAccumulator", *inst.MaxVolatilityAccumulator))
						paramsBranch.Child(ag_format.Param("              TickGroupSize", *inst.TickGroupSize))
						paramsBranch.Child(ag_format.Param("    MajorSwapThresholdTicks", *inst.MajorSwapThresholdTicks))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("adaptive_fee_tier", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           funder", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    fee_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   system_program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj InitializeAdaptiveFeeTier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeTierIndex` param:
	err = encoder.Encode(obj.FeeTierIndex)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `InitializePoolAuthority` param:
	err = encoder.Encode(obj.InitializePoolAuthority)
	if err != nil {
		return err
	}
	// Serialize `DelegatedFeeAuthority` param:
	err = encoder.Encode(obj.DelegatedFeeAuthority)
	if err != nil {
		return err
	}
	// Serialize `DefaultBaseFeeRate` param:
	err = encoder.Encode(obj.DefaultBaseFeeRate)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `AdaptiveFeeControlFactor` param:
	err = encoder.Encode(obj.AdaptiveFeeControlFactor)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `TickGroupSize` param:
	err = encoder.Encode(obj.TickGroupSize)
	if err != nil {
		return err
	}
	// Serialize `MajorSwapThresholdTicks` param:
	err = encoder.Encode(obj.MajorSwapThresholdTicks)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeAdaptiveFeeTier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeTierIndex`:
	err = decoder.Decode(&obj.FeeTierIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `InitializePoolAuthority`:
	err = decoder.Decode(&obj.InitializePoolAuthority)
	if err != nil {
		return err
	}
	// Deserialize `DelegatedFeeAuthority`:
	err = decoder.Decode(&obj.DelegatedFeeAuthority)
	if err != nil {
		return err
	}
	// Deserialize `DefaultBaseFeeRate`:
	err = decoder.Decode(&obj.DefaultBaseFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `AdaptiveFeeControlFactor`:
	err = decoder.Decode(&obj.AdaptiveFeeControlFactor)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `TickGroupSize`:
	err = decoder.Decode(&obj.TickGroupSize)
	if err != nil {
		return err
	}
	// Deserialize `MajorSwapThresholdTicks`:
	err = decoder.Decode(&obj.MajorSwapThresholdTicks)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeAdaptiveFeeTierInstruction declares a new InitializeAdaptiveFeeTier instruction with the provided parameters and accounts.
func NewInitializeAdaptiveFeeTierInstruction(
	// Parameters:
	fee_tier_index uint16,
	tick_spacing uint16,
	initialize_pool_authority ag_solanago.PublicKey,
	delegated_fee_authority ag_solanago.PublicKey,
	default_base_fee_rate uint16,
	filter_period uint16,
	decay_period uint16,
	reduction_factor uint16,
	adaptive_fee_control_factor uint32,
	max_volatility_accumulator uint32,
	tick_group_size uint16,
	major_swap_threshold_ticks uint16,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	return NewInitializeAdaptiveFeeTierInstructionBuilder().
		SetFeeTierIndex(fee_tier_index).
		SetTickSpacing(tick_spacing).
		SetInitializePoolAuthority(initialize_pool_authority).
		SetDelegatedFeeAuthority(delegated_fee_authority).
		SetDefaultBaseFeeRate(default_base_fee_rate).
		SetFilterPeriod(filter_period).
		SetDecayPeriod(decay_period).
		SetReductionFactor(reduction_factor).
		SetAdaptiveFeeControlFactor(adaptive_fee_control_factor).
		SetMaxVolatilityAccumulator(max_volatility_accumulator).
		SetTickGroupSize(tick_group_size).
		SetMajorSwapThresholdTicks(major_swap_threshold_ticks).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetFunderAccount(funder).
		SetFeeAuthorityAccount(feeAuthority).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleInitializeAdaptiveFeeTierInstruction declares a new InitializeAdaptiveFeeTier instruction with the provided parameters and accounts.
func NewSimpleInitializeAdaptiveFeeTierInstruction(
	// Parameters:
	fee_tier_index uint16,
	tick_spacing uint16,
	initialize_pool_authority ag_solanago.PublicKey,
	delegated_fee_authority ag_solanago.PublicKey,
	default_base_fee_rate uint16,
	filter_period uint16,
	decay_period uint16,
	reduction_factor uint16,
	adaptive_fee_control_factor uint32,
	max_volatility_accumulator uint32,
	tick_group_size uint16,
	major_swap_threshold_ticks uint16,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeAdaptiveFeeTier {
	return NewInitializeAdaptiveFeeTierInstructionBuilder().
		SetFeeTierIndex(fee_tier_index).
		SetTickSpacing(tick_spacing).
		SetInitializePoolAuthority(initialize_pool_authority).
		SetDelegatedFeeAuthority(delegated_fee_authority).
		SetDefaultBaseFeeRate(default_base_fee_rate).
		SetFilterPeriod(filter_period).
		SetDecayPeriod(decay_period).
		SetReductionFactor(reduction_factor).
		SetAdaptiveFeeControlFactor(adaptive_fee_control_factor).
		SetMaxVolatilityAccumulator(max_volatility_accumulator).
		SetTickGroupSize(tick_group_size).
		SetMajorSwapThresholdTicks(major_swap_threshold_ticks).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetFunderAccount(funder).
		SetFeeAuthorityAccount(feeAuthority).
		SetSystemProgramAccount(systemProgram)
}
