// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Reset the position range to a new range.
//
// ### Authority
// - `position_authority` - The authority that owns the position token.
//
// ### Parameters
// - `new_tick_lower_index` - The new tick specifying the lower end of the position range.
// - `new_tick_upper_index` - The new tick specifying the upper end of the position range.
//
// #### Special Errors
// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
// the tick-spacing in this pool.
// - `ClosePositionNotEmpty` - The provided position account is not empty.
// - `SameTickRangeNotAllowed` - The provided tick range is the same as the current tick range.
type ResetPositionRange struct {
	NewTickLowerIndex *int32
	NewTickUpperIndex *int32

	// [0] = [WRITE, SIGNER] funder
	//
	// [1] = [SIGNER] position_authority
	//
	// [2] = [] whirlpool
	//
	// [3] = [WRITE] position
	//
	// [4] = [] position_token_account
	//
	// [5] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewResetPositionRangeInstructionBuilder creates a new `ResetPositionRange` instruction builder.
func NewResetPositionRangeInstructionBuilder() *ResetPositionRange {
	nd := &ResetPositionRange{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetNewTickLowerIndex sets the "new_tick_lower_index" parameter.
func (inst *ResetPositionRange) SetNewTickLowerIndex(new_tick_lower_index int32) *ResetPositionRange {
	inst.NewTickLowerIndex = &new_tick_lower_index
	return inst
}

// SetNewTickUpperIndex sets the "new_tick_upper_index" parameter.
func (inst *ResetPositionRange) SetNewTickUpperIndex(new_tick_upper_index int32) *ResetPositionRange {
	inst.NewTickUpperIndex = &new_tick_upper_index
	return inst
}

// SetFunderAccount sets the "funder" account.
func (inst *ResetPositionRange) SetFunderAccount(funder ag_solanago.PublicKey) *ResetPositionRange {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *ResetPositionRange) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAuthorityAccount sets the "position_authority" account.
func (inst *ResetPositionRange) SetPositionAuthorityAccount(positionAuthority ag_solanago.PublicKey) *ResetPositionRange {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionAuthority).SIGNER()
	return inst
}

// GetPositionAuthorityAccount gets the "position_authority" account.
func (inst *ResetPositionRange) GetPositionAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *ResetPositionRange) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *ResetPositionRange {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(whirlpool)
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *ResetPositionRange) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionAccount sets the "position" account.
func (inst *ResetPositionRange) SetPositionAccount(position ag_solanago.PublicKey) *ResetPositionRange {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *ResetPositionRange) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPositionTokenAccountAccount sets the "position_token_account" account.
func (inst *ResetPositionRange) SetPositionTokenAccountAccount(positionTokenAccount ag_solanago.PublicKey) *ResetPositionRange {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(positionTokenAccount)
	return inst
}

// GetPositionTokenAccountAccount gets the "position_token_account" account.
func (inst *ResetPositionRange) GetPositionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *ResetPositionRange) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ResetPositionRange {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *ResetPositionRange) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst *ResetPositionRange) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ResetPositionRange) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ResetPositionRange {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:6], metas...)
	return inst
}

func (inst *ResetPositionRange) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6:]
}

func (inst ResetPositionRange) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ResetPositionRange,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ResetPositionRange) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ResetPositionRange) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewTickLowerIndex == nil {
			return errors.New("newTickLowerIndex parameter is not set")
		}
		if inst.NewTickUpperIndex == nil {
			return errors.New("newTickUpperIndex parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 6 {
		return errors.New("accounts slice has wrong length: expected 6 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PositionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ResetPositionRange) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ResetPositionRange")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   NewTickLowerIndex", *inst.NewTickLowerIndex))
						paramsBranch.Child(ag_format.Param("   NewTickUpperIndex", *inst.NewTickUpperIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            funder", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("position_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         whirlpool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          position", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   position_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    system_program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj ResetPositionRange) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewTickLowerIndex` param:
	err = encoder.Encode(obj.NewTickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `NewTickUpperIndex` param:
	err = encoder.Encode(obj.NewTickUpperIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ResetPositionRange) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewTickLowerIndex`:
	err = decoder.Decode(&obj.NewTickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `NewTickUpperIndex`:
	err = decoder.Decode(&obj.NewTickUpperIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewResetPositionRangeInstruction declares a new ResetPositionRange instruction with the provided parameters and accounts.
func NewResetPositionRangeInstruction(
	// Parameters:
	new_tick_lower_index int32,
	new_tick_upper_index int32,
	// Accounts:
	funder ag_solanago.PublicKey,
	positionAuthority ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ResetPositionRange {
	return NewResetPositionRangeInstructionBuilder().
		SetNewTickLowerIndex(new_tick_lower_index).
		SetNewTickUpperIndex(new_tick_upper_index).
		SetFunderAccount(funder).
		SetPositionAuthorityAccount(positionAuthority).
		SetWhirlpoolAccount(whirlpool).
		SetPositionAccount(position).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleResetPositionRangeInstruction declares a new ResetPositionRange instruction with the provided parameters and accounts.
func NewSimpleResetPositionRangeInstruction(
	// Parameters:
	new_tick_lower_index int32,
	new_tick_upper_index int32,
	// Accounts:
	funder ag_solanago.PublicKey,
	positionAuthority ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ResetPositionRange {
	return NewResetPositionRangeInstructionBuilder().
		SetNewTickLowerIndex(new_tick_lower_index).
		SetNewTickUpperIndex(new_tick_upper_index).
		SetFunderAccount(funder).
		SetPositionAuthorityAccount(positionAuthority).
		SetWhirlpoolAccount(whirlpool).
		SetPositionAccount(position).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetSystemProgramAccount(systemProgram)
}
