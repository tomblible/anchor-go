// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sets the fee rate for a Whirlpool by the delegated fee authority in AdaptiveFeeTier.
// Fee rate is represented as hundredths of a basis point.
//
// ### Authority
// - "delegated_fee_authority" - Set authority that can modify pool fees in the AdaptiveFeeTier
//
// ### Parameters
// - `fee_rate` - The rate that the pool will use to calculate fees going onwards.
//
// #### Special Errors
// - `FeeRateMaxExceeded` - If the provided fee_rate exceeds MAX_FEE_RATE.
type SetFeeRateByDelegatedFeeAuthority struct {
	FeeRate *uint16

	// [0] = [WRITE] whirlpool
	//
	// [1] = [] adaptive_fee_tier
	//
	// [2] = [SIGNER] delegated_fee_authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetFeeRateByDelegatedFeeAuthorityInstructionBuilder creates a new `SetFeeRateByDelegatedFeeAuthority` instruction builder.
func NewSetFeeRateByDelegatedFeeAuthorityInstructionBuilder() *SetFeeRateByDelegatedFeeAuthority {
	nd := &SetFeeRateByDelegatedFeeAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetFeeRate sets the "fee_rate" parameter.
func (inst *SetFeeRateByDelegatedFeeAuthority) SetFeeRate(fee_rate uint16) *SetFeeRateByDelegatedFeeAuthority {
	inst.FeeRate = &fee_rate
	return inst
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *SetFeeRateByDelegatedFeeAuthority) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *SetFeeRateByDelegatedFeeAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *SetFeeRateByDelegatedFeeAuthority) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdaptiveFeeTierAccount sets the "adaptive_fee_tier" account.
func (inst *SetFeeRateByDelegatedFeeAuthority) SetAdaptiveFeeTierAccount(adaptiveFeeTier ag_solanago.PublicKey) *SetFeeRateByDelegatedFeeAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(adaptiveFeeTier)
	return inst
}

// GetAdaptiveFeeTierAccount gets the "adaptive_fee_tier" account.
func (inst *SetFeeRateByDelegatedFeeAuthority) GetAdaptiveFeeTierAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDelegatedFeeAuthorityAccount sets the "delegated_fee_authority" account.
func (inst *SetFeeRateByDelegatedFeeAuthority) SetDelegatedFeeAuthorityAccount(delegatedFeeAuthority ag_solanago.PublicKey) *SetFeeRateByDelegatedFeeAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(delegatedFeeAuthority).SIGNER()
	return inst
}

// GetDelegatedFeeAuthorityAccount gets the "delegated_fee_authority" account.
func (inst *SetFeeRateByDelegatedFeeAuthority) GetDelegatedFeeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *SetFeeRateByDelegatedFeeAuthority) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetFeeRateByDelegatedFeeAuthority) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetFeeRateByDelegatedFeeAuthority {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *SetFeeRateByDelegatedFeeAuthority) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst SetFeeRateByDelegatedFeeAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetFeeRateByDelegatedFeeAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetFeeRateByDelegatedFeeAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetFeeRateByDelegatedFeeAuthority) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.FeeRate == nil {
			return errors.New("feeRate parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AdaptiveFeeTier is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DelegatedFeeAuthority is not set")
		}
	}
	return nil
}

func (inst *SetFeeRateByDelegatedFeeAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetFeeRateByDelegatedFeeAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" FeeRate", *inst.FeeRate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              whirlpool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      adaptive_fee_tier", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("delegated_fee_authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetFeeRateByDelegatedFeeAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeRate` param:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetFeeRateByDelegatedFeeAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return err
	}
	return nil
}

// NewSetFeeRateByDelegatedFeeAuthorityInstruction declares a new SetFeeRateByDelegatedFeeAuthority instruction with the provided parameters and accounts.
func NewSetFeeRateByDelegatedFeeAuthorityInstruction(
	// Parameters:
	fee_rate uint16,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	delegatedFeeAuthority ag_solanago.PublicKey) *SetFeeRateByDelegatedFeeAuthority {
	return NewSetFeeRateByDelegatedFeeAuthorityInstructionBuilder().
		SetFeeRate(fee_rate).
		SetWhirlpoolAccount(whirlpool).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetDelegatedFeeAuthorityAccount(delegatedFeeAuthority)
}

// NewSimpleSetFeeRateByDelegatedFeeAuthorityInstruction declares a new SetFeeRateByDelegatedFeeAuthority instruction with the provided parameters and accounts.
func NewSimpleSetFeeRateByDelegatedFeeAuthorityInstruction(
	// Parameters:
	fee_rate uint16,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	delegatedFeeAuthority ag_solanago.PublicKey) *SetFeeRateByDelegatedFeeAuthority {
	return NewSetFeeRateByDelegatedFeeAuthorityInstructionBuilder().
		SetFeeRate(fee_rate).
		SetWhirlpoolAccount(whirlpool).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetDelegatedFeeAuthorityAccount(delegatedFeeAuthority)
}
