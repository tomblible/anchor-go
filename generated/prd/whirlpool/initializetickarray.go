// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initializes a tick_array account to represent a tick-range in a Whirlpool.
//
// ### Parameters
// - `start_tick_index` - The starting tick index for this tick-array.
// Has to be a multiple of TickArray size & the tick spacing of this pool.
//
// #### Special Errors
// - `InvalidStartTick` - if the provided start tick is out of bounds or is not a multiple of
// TICK_ARRAY_SIZE * tick spacing.
type InitializeTickArray struct {
	StartTickIndex *int32

	// [0] = [] whirlpool
	//
	// [1] = [WRITE, SIGNER] funder
	//
	// [2] = [WRITE] tick_array
	//
	// [3] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeTickArrayInstructionBuilder creates a new `InitializeTickArray` instruction builder.
func NewInitializeTickArrayInstructionBuilder() *InitializeTickArray {
	nd := &InitializeTickArray{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetStartTickIndex sets the "start_tick_index" parameter.
func (inst *InitializeTickArray) SetStartTickIndex(start_tick_index int32) *InitializeTickArray {
	inst.StartTickIndex = &start_tick_index
	return inst
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *InitializeTickArray) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *InitializeTickArray {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpool)
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *InitializeTickArray) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFunderAccount sets the "funder" account.
func (inst *InitializeTickArray) SetFunderAccount(funder ag_solanago.PublicKey) *InitializeTickArray {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *InitializeTickArray) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTickArrayAccount sets the "tick_array" account.
func (inst *InitializeTickArray) SetTickArrayAccount(tickArray ag_solanago.PublicKey) *InitializeTickArray {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tickArray).WRITE()
	return inst
}

// GetTickArrayAccount gets the "tick_array" account.
func (inst *InitializeTickArray) GetTickArrayAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeTickArray) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeTickArray {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeTickArray) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *InitializeTickArray) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeTickArray) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeTickArray {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *InitializeTickArray) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst InitializeTickArray) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeTickArray,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeTickArray) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeTickArray) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.StartTickIndex == nil {
			return errors.New("startTickIndex parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TickArray is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeTickArray) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeTickArray")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  StartTickIndex", *inst.StartTickIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     whirlpool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        funder", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    tick_array", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj InitializeTickArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StartTickIndex` param:
	err = encoder.Encode(obj.StartTickIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeTickArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StartTickIndex`:
	err = decoder.Decode(&obj.StartTickIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeTickArrayInstruction declares a new InitializeTickArray instruction with the provided parameters and accounts.
func NewInitializeTickArrayInstruction(
	// Parameters:
	start_tick_index int32,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	tickArray ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeTickArray {
	return NewInitializeTickArrayInstructionBuilder().
		SetStartTickIndex(start_tick_index).
		SetWhirlpoolAccount(whirlpool).
		SetFunderAccount(funder).
		SetTickArrayAccount(tickArray).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleInitializeTickArrayInstruction declares a new InitializeTickArray instruction with the provided parameters and accounts.
func NewSimpleInitializeTickArrayInstruction(
	// Parameters:
	start_tick_index int32,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	tickArray ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeTickArray {
	return NewInitializeTickArrayInstructionBuilder().
		SetStartTickIndex(start_tick_index).
		SetWhirlpoolAccount(whirlpool).
		SetFunderAccount(funder).
		SetTickArrayAccount(tickArray).
		SetSystemProgramAccount(systemProgram)
}
