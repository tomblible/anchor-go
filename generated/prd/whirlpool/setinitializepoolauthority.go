// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sets the initialize pool authority for an AdaptiveFeeTier.
// Only the initialize pool authority can initialize pools with the adaptive fee-tier.
// Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction.
//
// ### Authority
// - "fee_authority" - Set authority in the WhirlpoolConfig
type SetInitializePoolAuthority struct {

	// [0] = [] whirlpools_config
	//
	// [1] = [WRITE] adaptive_fee_tier
	//
	// [2] = [SIGNER] fee_authority
	//
	// [3] = [] new_initialize_pool_authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetInitializePoolAuthorityInstructionBuilder creates a new `SetInitializePoolAuthority` instruction builder.
func NewSetInitializePoolAuthorityInstructionBuilder() *SetInitializePoolAuthority {
	nd := &SetInitializePoolAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *SetInitializePoolAuthority) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *SetInitializePoolAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *SetInitializePoolAuthority) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdaptiveFeeTierAccount sets the "adaptive_fee_tier" account.
func (inst *SetInitializePoolAuthority) SetAdaptiveFeeTierAccount(adaptiveFeeTier ag_solanago.PublicKey) *SetInitializePoolAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(adaptiveFeeTier).WRITE()
	return inst
}

// GetAdaptiveFeeTierAccount gets the "adaptive_fee_tier" account.
func (inst *SetInitializePoolAuthority) GetAdaptiveFeeTierAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFeeAuthorityAccount sets the "fee_authority" account.
func (inst *SetInitializePoolAuthority) SetFeeAuthorityAccount(feeAuthority ag_solanago.PublicKey) *SetInitializePoolAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(feeAuthority).SIGNER()
	return inst
}

// GetFeeAuthorityAccount gets the "fee_authority" account.
func (inst *SetInitializePoolAuthority) GetFeeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewInitializePoolAuthorityAccount sets the "new_initialize_pool_authority" account.
func (inst *SetInitializePoolAuthority) SetNewInitializePoolAuthorityAccount(newInitializePoolAuthority ag_solanago.PublicKey) *SetInitializePoolAuthority {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newInitializePoolAuthority)
	return inst
}

// GetNewInitializePoolAuthorityAccount gets the "new_initialize_pool_authority" account.
func (inst *SetInitializePoolAuthority) GetNewInitializePoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *SetInitializePoolAuthority) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetInitializePoolAuthority) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetInitializePoolAuthority {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *SetInitializePoolAuthority) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst SetInitializePoolAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetInitializePoolAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetInitializePoolAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetInitializePoolAuthority) Validate() error {
	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AdaptiveFeeTier is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FeeAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewInitializePoolAuthority is not set")
		}
	}
	return nil
}

func (inst *SetInitializePoolAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetInitializePoolAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            adaptive_fee_tier", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                fee_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("new_initialize_pool_authority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetInitializePoolAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SetInitializePoolAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSetInitializePoolAuthorityInstruction declares a new SetInitializePoolAuthority instruction with the provided parameters and accounts.
func NewSetInitializePoolAuthorityInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey,
	newInitializePoolAuthority ag_solanago.PublicKey) *SetInitializePoolAuthority {
	return NewSetInitializePoolAuthorityInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetFeeAuthorityAccount(feeAuthority).
		SetNewInitializePoolAuthorityAccount(newInitializePoolAuthority)
}

// NewSimpleSetInitializePoolAuthorityInstruction declares a new SetInitializePoolAuthority instruction with the provided parameters and accounts.
func NewSimpleSetInitializePoolAuthorityInstruction(
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey,
	newInitializePoolAuthority ag_solanago.PublicKey) *SetInitializePoolAuthority {
	return NewSetInitializePoolAuthorityInstructionBuilder().
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetFeeAuthorityAccount(feeAuthority).
		SetNewInitializePoolAuthorityAccount(newInitializePoolAuthority)
}
