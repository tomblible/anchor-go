// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Set the default_fee_rate for a FeeTier
// Only the current fee authority has permission to invoke this instruction.
//
// ### Authority
// - "fee_authority" - Set authority in the WhirlpoolConfig
//
// ### Parameters
// - `default_fee_rate` - The default fee rate that a pool will use if the pool uses this
// fee tier during initialization.
//
// #### Special Errors
// - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE.
type SetDefaultFeeRate struct {
	DefaultFeeRate *uint16

	// [0] = [] whirlpools_config
	//
	// [1] = [WRITE] fee_tier
	//
	// [2] = [SIGNER] fee_authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetDefaultFeeRateInstructionBuilder creates a new `SetDefaultFeeRate` instruction builder.
func NewSetDefaultFeeRateInstructionBuilder() *SetDefaultFeeRate {
	nd := &SetDefaultFeeRate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetDefaultFeeRate sets the "default_fee_rate" parameter.
func (inst *SetDefaultFeeRate) SetDefaultFeeRate(default_fee_rate uint16) *SetDefaultFeeRate {
	inst.DefaultFeeRate = &default_fee_rate
	return inst
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *SetDefaultFeeRate) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *SetDefaultFeeRate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *SetDefaultFeeRate) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFeeTierAccount sets the "fee_tier" account.
func (inst *SetDefaultFeeRate) SetFeeTierAccount(feeTier ag_solanago.PublicKey) *SetDefaultFeeRate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(feeTier).WRITE()
	return inst
}

// GetFeeTierAccount gets the "fee_tier" account.
func (inst *SetDefaultFeeRate) GetFeeTierAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFeeAuthorityAccount sets the "fee_authority" account.
func (inst *SetDefaultFeeRate) SetFeeAuthorityAccount(feeAuthority ag_solanago.PublicKey) *SetDefaultFeeRate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(feeAuthority).SIGNER()
	return inst
}

// GetFeeAuthorityAccount gets the "fee_authority" account.
func (inst *SetDefaultFeeRate) GetFeeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *SetDefaultFeeRate) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetDefaultFeeRate) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetDefaultFeeRate {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *SetDefaultFeeRate) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst SetDefaultFeeRate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetDefaultFeeRate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetDefaultFeeRate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetDefaultFeeRate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DefaultFeeRate == nil {
			return errors.New("defaultFeeRate parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FeeTier is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FeeAuthority is not set")
		}
	}
	return nil
}

func (inst *SetDefaultFeeRate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetDefaultFeeRate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  DefaultFeeRate", *inst.DefaultFeeRate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         fee_tier", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    fee_authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetDefaultFeeRate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DefaultFeeRate` param:
	err = encoder.Encode(obj.DefaultFeeRate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetDefaultFeeRate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DefaultFeeRate`:
	err = decoder.Decode(&obj.DefaultFeeRate)
	if err != nil {
		return err
	}
	return nil
}

// NewSetDefaultFeeRateInstruction declares a new SetDefaultFeeRate instruction with the provided parameters and accounts.
func NewSetDefaultFeeRateInstruction(
	// Parameters:
	default_fee_rate uint16,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	feeTier ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey) *SetDefaultFeeRate {
	return NewSetDefaultFeeRateInstructionBuilder().
		SetDefaultFeeRate(default_fee_rate).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetFeeTierAccount(feeTier).
		SetFeeAuthorityAccount(feeAuthority)
}

// NewSimpleSetDefaultFeeRateInstruction declares a new SetDefaultFeeRate instruction with the provided parameters and accounts.
func NewSimpleSetDefaultFeeRateInstruction(
	// Parameters:
	default_fee_rate uint16,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	feeTier ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey) *SetDefaultFeeRate {
	return NewSetDefaultFeeRateInstructionBuilder().
		SetDefaultFeeRate(default_fee_rate).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetFeeTierAccount(feeTier).
		SetFeeAuthorityAccount(feeAuthority)
}
