// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

const ProgramName = "Whirlpool"

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var ()

var (
	Instruction_InitializeConfig = ag_binary.TypeID([8]byte{208, 127, 21, 1, 194, 190, 196, 70})

	Instruction_InitializePool = ag_binary.TypeID([8]byte{95, 180, 10, 172, 84, 174, 232, 40})

	Instruction_InitializeTickArray = ag_binary.TypeID([8]byte{11, 188, 193, 214, 141, 91, 149, 184})

	Instruction_InitializeFeeTier = ag_binary.TypeID([8]byte{183, 74, 156, 160, 112, 2, 42, 30})

	Instruction_InitializeReward = ag_binary.TypeID([8]byte{95, 135, 192, 196, 242, 129, 230, 68})

	Instruction_SetRewardEmissions = ag_binary.TypeID([8]byte{13, 197, 86, 168, 109, 176, 27, 244})

	Instruction_OpenPosition = ag_binary.TypeID([8]byte{135, 128, 47, 77, 15, 152, 240, 49})

	Instruction_OpenPositionWithMetadata = ag_binary.TypeID([8]byte{242, 29, 134, 48, 58, 110, 14, 60})

	Instruction_IncreaseLiquidity = ag_binary.TypeID([8]byte{46, 156, 243, 118, 13, 205, 251, 178})

	Instruction_DecreaseLiquidity = ag_binary.TypeID([8]byte{160, 38, 208, 111, 104, 91, 44, 1})

	Instruction_UpdateFeesAndRewards = ag_binary.TypeID([8]byte{154, 230, 250, 13, 236, 209, 75, 223})

	Instruction_CollectFees = ag_binary.TypeID([8]byte{164, 152, 207, 99, 30, 186, 19, 182})

	Instruction_CollectReward = ag_binary.TypeID([8]byte{70, 5, 132, 87, 86, 235, 177, 34})

	Instruction_CollectProtocolFees = ag_binary.TypeID([8]byte{22, 67, 23, 98, 150, 178, 70, 220})

	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})

	Instruction_ClosePosition = ag_binary.TypeID([8]byte{123, 134, 81, 0, 49, 68, 98, 98})

	Instruction_SetDefaultFeeRate = ag_binary.TypeID([8]byte{118, 215, 214, 157, 182, 229, 208, 228})

	Instruction_SetDefaultProtocolFeeRate = ag_binary.TypeID([8]byte{107, 205, 249, 226, 151, 35, 86, 0})

	Instruction_SetFeeRate = ag_binary.TypeID([8]byte{53, 243, 137, 65, 8, 140, 158, 6})

	Instruction_SetProtocolFeeRate = ag_binary.TypeID([8]byte{95, 7, 4, 50, 154, 79, 156, 131})

	Instruction_SetFeeAuthority = ag_binary.TypeID([8]byte{31, 1, 50, 87, 237, 101, 97, 132})

	Instruction_SetCollectProtocolFeesAuthority = ag_binary.TypeID([8]byte{34, 150, 93, 244, 139, 225, 233, 67})

	Instruction_SetRewardAuthority = ag_binary.TypeID([8]byte{34, 39, 183, 252, 83, 28, 85, 127})

	Instruction_SetRewardAuthorityBySuperAuthority = ag_binary.TypeID([8]byte{240, 154, 201, 198, 148, 93, 56, 25})

	Instruction_SetRewardEmissionsSuperAuthority = ag_binary.TypeID([8]byte{207, 5, 200, 209, 122, 56, 82, 183})

	Instruction_TwoHopSwap = ag_binary.TypeID([8]byte{195, 96, 237, 108, 68, 162, 219, 230})

	Instruction_InitializePositionBundle = ag_binary.TypeID([8]byte{117, 45, 241, 149, 24, 18, 194, 65})

	Instruction_InitializePositionBundleWithMetadata = ag_binary.TypeID([8]byte{93, 124, 16, 179, 249, 131, 115, 245})

	Instruction_DeletePositionBundle = ag_binary.TypeID([8]byte{100, 25, 99, 2, 217, 239, 124, 173})

	Instruction_OpenBundledPosition = ag_binary.TypeID([8]byte{169, 113, 126, 171, 213, 172, 212, 49})

	Instruction_CloseBundledPosition = ag_binary.TypeID([8]byte{41, 36, 216, 245, 27, 85, 103, 67})

	Instruction_OpenPositionWithTokenExtensions = ag_binary.TypeID([8]byte{212, 47, 95, 92, 114, 102, 131, 250})

	Instruction_ClosePositionWithTokenExtensions = ag_binary.TypeID([8]byte{1, 182, 135, 59, 155, 25, 99, 223})

	Instruction_LockPosition = ag_binary.TypeID([8]byte{227, 62, 2, 252, 247, 10, 171, 185})

	Instruction_CollectFeesV2 = ag_binary.TypeID([8]byte{207, 117, 95, 191, 229, 180, 226, 15})

	Instruction_CollectProtocolFeesV2 = ag_binary.TypeID([8]byte{103, 128, 222, 134, 114, 200, 22, 200})

	Instruction_CollectRewardV2 = ag_binary.TypeID([8]byte{177, 107, 37, 180, 160, 19, 49, 209})

	Instruction_DecreaseLiquidityV2 = ag_binary.TypeID([8]byte{58, 127, 188, 62, 79, 82, 196, 96})

	Instruction_IncreaseLiquidityV2 = ag_binary.TypeID([8]byte{133, 29, 89, 223, 69, 238, 176, 10})

	Instruction_InitializePoolV2 = ag_binary.TypeID([8]byte{207, 45, 87, 242, 27, 63, 204, 67})

	Instruction_InitializeRewardV2 = ag_binary.TypeID([8]byte{91, 1, 77, 50, 235, 229, 133, 49})

	Instruction_SetRewardEmissionsV2 = ag_binary.TypeID([8]byte{114, 228, 72, 32, 193, 48, 160, 102})

	Instruction_SwapV2 = ag_binary.TypeID([8]byte{43, 4, 237, 11, 26, 201, 30, 98})

	Instruction_TwoHopSwapV2 = ag_binary.TypeID([8]byte{186, 143, 209, 29, 254, 2, 194, 117})

	Instruction_InitializeConfigExtension = ag_binary.TypeID([8]byte{55, 9, 53, 9, 114, 57, 209, 52})

	Instruction_SetConfigExtensionAuthority = ag_binary.TypeID([8]byte{44, 94, 241, 116, 24, 188, 60, 143})

	Instruction_SetTokenBadgeAuthority = ag_binary.TypeID([8]byte{207, 202, 4, 32, 205, 79, 13, 178})

	Instruction_InitializeTokenBadge = ag_binary.TypeID([8]byte{253, 77, 205, 95, 27, 224, 89, 223})

	Instruction_DeleteTokenBadge = ag_binary.TypeID([8]byte{53, 146, 68, 8, 18, 117, 17, 185})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeConfig:
		return "InitializeConfig"
	case Instruction_InitializePool:
		return "InitializePool"
	case Instruction_InitializeTickArray:
		return "InitializeTickArray"
	case Instruction_InitializeFeeTier:
		return "InitializeFeeTier"
	case Instruction_InitializeReward:
		return "InitializeReward"
	case Instruction_SetRewardEmissions:
		return "SetRewardEmissions"
	case Instruction_OpenPosition:
		return "OpenPosition"
	case Instruction_OpenPositionWithMetadata:
		return "OpenPositionWithMetadata"
	case Instruction_IncreaseLiquidity:
		return "IncreaseLiquidity"
	case Instruction_DecreaseLiquidity:
		return "DecreaseLiquidity"
	case Instruction_UpdateFeesAndRewards:
		return "UpdateFeesAndRewards"
	case Instruction_CollectFees:
		return "CollectFees"
	case Instruction_CollectReward:
		return "CollectReward"
	case Instruction_CollectProtocolFees:
		return "CollectProtocolFees"
	case Instruction_Swap:
		return "Swap"
	case Instruction_ClosePosition:
		return "ClosePosition"
	case Instruction_SetDefaultFeeRate:
		return "SetDefaultFeeRate"
	case Instruction_SetDefaultProtocolFeeRate:
		return "SetDefaultProtocolFeeRate"
	case Instruction_SetFeeRate:
		return "SetFeeRate"
	case Instruction_SetProtocolFeeRate:
		return "SetProtocolFeeRate"
	case Instruction_SetFeeAuthority:
		return "SetFeeAuthority"
	case Instruction_SetCollectProtocolFeesAuthority:
		return "SetCollectProtocolFeesAuthority"
	case Instruction_SetRewardAuthority:
		return "SetRewardAuthority"
	case Instruction_SetRewardAuthorityBySuperAuthority:
		return "SetRewardAuthorityBySuperAuthority"
	case Instruction_SetRewardEmissionsSuperAuthority:
		return "SetRewardEmissionsSuperAuthority"
	case Instruction_TwoHopSwap:
		return "TwoHopSwap"
	case Instruction_InitializePositionBundle:
		return "InitializePositionBundle"
	case Instruction_InitializePositionBundleWithMetadata:
		return "InitializePositionBundleWithMetadata"
	case Instruction_DeletePositionBundle:
		return "DeletePositionBundle"
	case Instruction_OpenBundledPosition:
		return "OpenBundledPosition"
	case Instruction_CloseBundledPosition:
		return "CloseBundledPosition"
	case Instruction_OpenPositionWithTokenExtensions:
		return "OpenPositionWithTokenExtensions"
	case Instruction_ClosePositionWithTokenExtensions:
		return "ClosePositionWithTokenExtensions"
	case Instruction_LockPosition:
		return "LockPosition"
	case Instruction_CollectFeesV2:
		return "CollectFeesV2"
	case Instruction_CollectProtocolFeesV2:
		return "CollectProtocolFeesV2"
	case Instruction_CollectRewardV2:
		return "CollectRewardV2"
	case Instruction_DecreaseLiquidityV2:
		return "DecreaseLiquidityV2"
	case Instruction_IncreaseLiquidityV2:
		return "IncreaseLiquidityV2"
	case Instruction_InitializePoolV2:
		return "InitializePoolV2"
	case Instruction_InitializeRewardV2:
		return "InitializeRewardV2"
	case Instruction_SetRewardEmissionsV2:
		return "SetRewardEmissionsV2"
	case Instruction_SwapV2:
		return "SwapV2"
	case Instruction_TwoHopSwapV2:
		return "TwoHopSwapV2"
	case Instruction_InitializeConfigExtension:
		return "InitializeConfigExtension"
	case Instruction_SetConfigExtensionAuthority:
		return "SetConfigExtensionAuthority"
	case Instruction_SetTokenBadgeAuthority:
		return "SetTokenBadgeAuthority"
	case Instruction_InitializeTokenBadge:
		return "InitializeTokenBadge"
	case Instruction_DeleteTokenBadge:
		return "DeleteTokenBadge"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "initialize_config", Type: (*InitializeConfig)(nil),
		},
		{
			Name: "initialize_pool", Type: (*InitializePool)(nil),
		},
		{
			Name: "initialize_tick_array", Type: (*InitializeTickArray)(nil),
		},
		{
			Name: "initialize_fee_tier", Type: (*InitializeFeeTier)(nil),
		},
		{
			Name: "initialize_reward", Type: (*InitializeReward)(nil),
		},
		{
			Name: "set_reward_emissions", Type: (*SetRewardEmissions)(nil),
		},
		{
			Name: "open_position", Type: (*OpenPosition)(nil),
		},
		{
			Name: "open_position_with_metadata", Type: (*OpenPositionWithMetadata)(nil),
		},
		{
			Name: "increase_liquidity", Type: (*IncreaseLiquidity)(nil),
		},
		{
			Name: "decrease_liquidity", Type: (*DecreaseLiquidity)(nil),
		},
		{
			Name: "update_fees_and_rewards", Type: (*UpdateFeesAndRewards)(nil),
		},
		{
			Name: "collect_fees", Type: (*CollectFees)(nil),
		},
		{
			Name: "collect_reward", Type: (*CollectReward)(nil),
		},
		{
			Name: "collect_protocol_fees", Type: (*CollectProtocolFees)(nil),
		},
		{
			Name: "swap", Type: (*Swap)(nil),
		},
		{
			Name: "close_position", Type: (*ClosePosition)(nil),
		},
		{
			Name: "set_default_fee_rate", Type: (*SetDefaultFeeRate)(nil),
		},
		{
			Name: "set_default_protocol_fee_rate", Type: (*SetDefaultProtocolFeeRate)(nil),
		},
		{
			Name: "set_fee_rate", Type: (*SetFeeRate)(nil),
		},
		{
			Name: "set_protocol_fee_rate", Type: (*SetProtocolFeeRate)(nil),
		},
		{
			Name: "set_fee_authority", Type: (*SetFeeAuthority)(nil),
		},
		{
			Name: "set_collect_protocol_fees_authority", Type: (*SetCollectProtocolFeesAuthority)(nil),
		},
		{
			Name: "set_reward_authority", Type: (*SetRewardAuthority)(nil),
		},
		{
			Name: "set_reward_authority_by_super_authority", Type: (*SetRewardAuthorityBySuperAuthority)(nil),
		},
		{
			Name: "set_reward_emissions_super_authority", Type: (*SetRewardEmissionsSuperAuthority)(nil),
		},
		{
			Name: "two_hop_swap", Type: (*TwoHopSwap)(nil),
		},
		{
			Name: "initialize_position_bundle", Type: (*InitializePositionBundle)(nil),
		},
		{
			Name: "initialize_position_bundle_with_metadata", Type: (*InitializePositionBundleWithMetadata)(nil),
		},
		{
			Name: "delete_position_bundle", Type: (*DeletePositionBundle)(nil),
		},
		{
			Name: "open_bundled_position", Type: (*OpenBundledPosition)(nil),
		},
		{
			Name: "close_bundled_position", Type: (*CloseBundledPosition)(nil),
		},
		{
			Name: "open_position_with_token_extensions", Type: (*OpenPositionWithTokenExtensions)(nil),
		},
		{
			Name: "close_position_with_token_extensions", Type: (*ClosePositionWithTokenExtensions)(nil),
		},
		{
			Name: "lock_position", Type: (*LockPosition)(nil),
		},
		{
			Name: "collect_fees_v2", Type: (*CollectFeesV2)(nil),
		},
		{
			Name: "collect_protocol_fees_v2", Type: (*CollectProtocolFeesV2)(nil),
		},
		{
			Name: "collect_reward_v2", Type: (*CollectRewardV2)(nil),
		},
		{
			Name: "decrease_liquidity_v2", Type: (*DecreaseLiquidityV2)(nil),
		},
		{
			Name: "increase_liquidity_v2", Type: (*IncreaseLiquidityV2)(nil),
		},
		{
			Name: "initialize_pool_v2", Type: (*InitializePoolV2)(nil),
		},
		{
			Name: "initialize_reward_v2", Type: (*InitializeRewardV2)(nil),
		},
		{
			Name: "set_reward_emissions_v2", Type: (*SetRewardEmissionsV2)(nil),
		},
		{
			Name: "swap_v2", Type: (*SwapV2)(nil),
		},
		{
			Name: "two_hop_swap_v2", Type: (*TwoHopSwapV2)(nil),
		},
		{
			Name: "initialize_config_extension", Type: (*InitializeConfigExtension)(nil),
		},
		{
			Name: "set_config_extension_authority", Type: (*SetConfigExtensionAuthority)(nil),
		},
		{
			Name: "set_token_badge_authority", Type: (*SetTokenBadgeAuthority)(nil),
		},
		{
			Name: "initialize_token_badge", Type: (*InitializeTokenBadge)(nil),
		},
		{
			Name: "delete_token_badge", Type: (*DeleteTokenBadge)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
