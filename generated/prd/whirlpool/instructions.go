// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

const ProgramName = "OrcaWhirlpool"

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var ()

var (
	// Initializes a WhirlpoolsConfig account that hosts info & authorities
	// required to govern a set of Whirlpools.
	//
	// ### Parameters
	// - `fee_authority` - Authority authorized to initialize fee-tiers and set customs fees.
	// - `collect_protocol_fees_authority` - Authority authorized to collect protocol fees.
	// - `reward_emissions_super_authority` - Authority authorized to set reward authorities in pools.
	Instruction_InitializeConfig = ag_binary.TypeID([8]byte{208, 127, 21, 1, 194, 190, 196, 70})

	// Initializes a Whirlpool account.
	// Fee rate is set to the default values on the config and supplied fee_tier.
	//
	// ### Parameters
	// - `bumps` - The bump value when deriving the PDA of the Whirlpool address.
	// - `tick_spacing` - The desired tick spacing for this pool.
	// - `initial_sqrt_price` - The desired initial sqrt-price for this pool
	//
	// #### Special Errors
	// `InvalidTokenMintOrder` - The order of mints have to be ordered by
	// `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64
	//
	Instruction_InitializePool = ag_binary.TypeID([8]byte{95, 180, 10, 172, 84, 174, 232, 40})

	// Initializes a tick_array account to represent a tick-range in a Whirlpool.
	//
	// ### Parameters
	// - `start_tick_index` - The starting tick index for this tick-array.
	// Has to be a multiple of TickArray size & the tick spacing of this pool.
	//
	// #### Special Errors
	// - `InvalidStartTick` - if the provided start tick is out of bounds or is not a multiple of
	// TICK_ARRAY_SIZE * tick spacing.
	Instruction_InitializeTickArray = ag_binary.TypeID([8]byte{11, 188, 193, 214, 141, 91, 149, 184})

	// Initializes a fee_tier account usable by Whirlpools in a WhirlpoolConfig space.
	//
	// ### Authority
	// - "fee_authority" - Set authority in the WhirlpoolConfig
	//
	// ### Parameters
	// - `tick_spacing` - The tick-spacing that this fee-tier suggests the default_fee_rate for.
	// - `default_fee_rate` - The default fee rate that a pool will use if the pool uses this
	// fee tier during initialization.
	//
	// #### Special Errors
	// - `InvalidTickSpacing` - If the provided tick_spacing is 0.
	// - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE.
	Instruction_InitializeFeeTier = ag_binary.TypeID([8]byte{183, 74, 156, 160, 112, 2, 42, 30})

	// Initialize reward for a Whirlpool. A pool can only support up to a set number of rewards.
	//
	// ### Authority
	// - "reward_authority" - assigned authority by the reward_super_authority for the specified
	// reward-index in this Whirlpool
	//
	// ### Parameters
	// - `reward_index` - The reward index that we'd like to initialize. (0 <= index <= NUM_REWARDS)
	//
	// #### Special Errors
	// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
	// index in this pool, or exceeds NUM_REWARDS, or
	// all reward slots for this pool has been initialized.
	Instruction_InitializeReward = ag_binary.TypeID([8]byte{95, 135, 192, 196, 242, 129, 230, 68})

	// Set the reward emissions for a reward in a Whirlpool.
	//
	// ### Authority
	// - "reward_authority" - assigned authority by the reward_super_authority for the specified
	// reward-index in this Whirlpool
	//
	// ### Parameters
	// - `reward_index` - The reward index (0 <= index <= NUM_REWARDS) that we'd like to modify.
	// - `emissions_per_second_x64` - The amount of rewards emitted in this pool.
	//
	// #### Special Errors
	// - `RewardVaultAmountInsufficient` - The amount of rewards in the reward vault cannot emit
	// more than a day of desired emissions.
	// - `InvalidTimestamp` - Provided timestamp is not in order with the previous timestamp.
	// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
	// index in this pool, or exceeds NUM_REWARDS, or
	// all reward slots for this pool has been initialized.
	Instruction_SetRewardEmissions = ag_binary.TypeID([8]byte{13, 197, 86, 168, 109, 176, 27, 244})

	// Open a position in a Whirlpool. A unique token will be minted to represent the position
	// in the users wallet. The position will start off with 0 liquidity.
	//
	// ### Parameters
	// - `tick_lower_index` - The tick specifying the lower end of the position range.
	// - `tick_upper_index` - The tick specifying the upper end of the position range.
	//
	// #### Special Errors
	// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
	// the tick-spacing in this pool.
	Instruction_OpenPosition = ag_binary.TypeID([8]byte{135, 128, 47, 77, 15, 152, 240, 49})

	// Open a position in a Whirlpool. A unique token will be minted to represent the position
	// in the users wallet. Additional Metaplex metadata is appended to identify the token.
	// The position will start off with 0 liquidity.
	//
	// ### Parameters
	// - `tick_lower_index` - The tick specifying the lower end of the position range.
	// - `tick_upper_index` - The tick specifying the upper end of the position range.
	//
	// #### Special Errors
	// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
	// the tick-spacing in this pool.
	Instruction_OpenPositionWithMetadata = ag_binary.TypeID([8]byte{242, 29, 134, 48, 58, 110, 14, 60})

	// Add liquidity to a position in the Whirlpool. This call also updates the position's accrued fees and rewards.
	//
	// ### Authority
	// - `position_authority` - authority that owns the token corresponding to this desired position.
	//
	// ### Parameters
	// - `liquidity_amount` - The total amount of Liquidity the user is willing to deposit.
	// - `token_max_a` - The maximum amount of tokenA the user is willing to deposit.
	// - `token_max_b` - The maximum amount of tokenB the user is willing to deposit.
	//
	// #### Special Errors
	// - `LiquidityZero` - Provided liquidity amount is zero.
	// - `LiquidityTooHigh` - Provided liquidity exceeds u128::max.
	// - `TokenMaxExceeded` - The required token to perform this operation exceeds the user defined amount.
	Instruction_IncreaseLiquidity = ag_binary.TypeID([8]byte{46, 156, 243, 118, 13, 205, 251, 178})

	// Withdraw liquidity from a position in the Whirlpool. This call also updates the position's accrued fees and rewards.
	//
	// ### Authority
	// - `position_authority` - authority that owns the token corresponding to this desired position.
	//
	// ### Parameters
	// - `liquidity_amount` - The total amount of Liquidity the user desires to withdraw.
	// - `token_min_a` - The minimum amount of tokenA the user is willing to withdraw.
	// - `token_min_b` - The minimum amount of tokenB the user is willing to withdraw.
	//
	// #### Special Errors
	// - `LiquidityZero` - Provided liquidity amount is zero.
	// - `LiquidityTooHigh` - Provided liquidity exceeds u128::max.
	// - `TokenMinSubceeded` - The required token to perform this operation subceeds the user defined amount.
	Instruction_DecreaseLiquidity = ag_binary.TypeID([8]byte{160, 38, 208, 111, 104, 91, 44, 1})

	// Update the accrued fees and rewards for a position.
	//
	// #### Special Errors
	// - `TickNotFound` - Provided tick array account does not contain the tick for this position.
	// - `LiquidityZero` - Position has zero liquidity and therefore already has the most updated fees and reward values.
	Instruction_UpdateFeesAndRewards = ag_binary.TypeID([8]byte{154, 230, 250, 13, 236, 209, 75, 223})

	// Collect fees accrued for this position.
	//
	// ### Authority
	// - `position_authority` - authority that owns the token corresponding to this desired position.
	Instruction_CollectFees = ag_binary.TypeID([8]byte{164, 152, 207, 99, 30, 186, 19, 182})

	// Collect rewards accrued for this position.
	//
	// ### Authority
	// - `position_authority` - authority that owns the token corresponding to this desired position.
	Instruction_CollectReward = ag_binary.TypeID([8]byte{70, 5, 132, 87, 86, 235, 177, 34})

	// Collect the protocol fees accrued in this Whirlpool
	//
	// ### Authority
	// - `collect_protocol_fees_authority` - assigned authority in the WhirlpoolConfig that can collect protocol fees
	Instruction_CollectProtocolFees = ag_binary.TypeID([8]byte{22, 67, 23, 98, 150, 178, 70, 220})

	// Perform a swap in this Whirlpool
	//
	// ### Authority
	// - "token_authority" - The authority to withdraw tokens from the input token account.
	//
	// ### Parameters
	// - `amount` - The amount of input or output token to swap from (depending on amount_specified_is_input).
	// - `other_amount_threshold` - The maximum/minimum of input/output token to swap into (depending on amount_specified_is_input).
	// - `sqrt_price_limit` - The maximum/minimum price the swap will swap to.
	// - `amount_specified_is_input` - Specifies the token the parameter `amount`represents. If true, the amount represents the input token of the swap.
	// - `a_to_b` - The direction of the swap. True if swapping from A to B. False if swapping from B to A.
	//
	// #### Special Errors
	// - `ZeroTradableAmount` - User provided parameter `amount` is 0.
	// - `InvalidSqrtPriceLimitDirection` - User provided parameter `sqrt_price_limit` does not match the direction of the trade.
	// - `SqrtPriceOutOfBounds` - User provided parameter `sqrt_price_limit` is over Whirlppool's max/min bounds for sqrt-price.
	// - `InvalidTickArraySequence` - User provided tick-arrays are not in sequential order required to proceed in this trade direction.
	// - `TickArraySequenceInvalidIndex` - The swap loop attempted to access an invalid array index during the query of the next initialized tick.
	// - `TickArrayIndexOutofBounds` - The swap loop attempted to access an invalid array index during tick crossing.
	// - `LiquidityOverflow` - Liquidity value overflowed 128bits during tick crossing.
	// - `InvalidTickSpacing` - The swap pool was initialized with tick-spacing of 0.
	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})

	// Close a position in a Whirlpool. Burns the position token in the owner's wallet.
	//
	// ### Authority
	// - "position_authority" - The authority that owns the position token.
	//
	// #### Special Errors
	// - `ClosePositionNotEmpty` - The provided position account is not empty.
	Instruction_ClosePosition = ag_binary.TypeID([8]byte{123, 134, 81, 0, 49, 68, 98, 98})

	// Set the default_fee_rate for a FeeTier
	// Only the current fee authority has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority in the WhirlpoolConfig
	//
	// ### Parameters
	// - `default_fee_rate` - The default fee rate that a pool will use if the pool uses this
	// fee tier during initialization.
	//
	// #### Special Errors
	// - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE.
	Instruction_SetDefaultFeeRate = ag_binary.TypeID([8]byte{118, 215, 214, 157, 182, 229, 208, 228})

	// Sets the default protocol fee rate for a WhirlpoolConfig
	// Protocol fee rate is represented as a basis point.
	// Only the current fee authority has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority that can modify pool fees in the WhirlpoolConfig
	//
	// ### Parameters
	// - `default_protocol_fee_rate` - Rate that is referenced during the initialization of a Whirlpool using this config.
	//
	// #### Special Errors
	// - `ProtocolFeeRateMaxExceeded` - If the provided default_protocol_fee_rate exceeds MAX_PROTOCOL_FEE_RATE.
	Instruction_SetDefaultProtocolFeeRate = ag_binary.TypeID([8]byte{107, 205, 249, 226, 151, 35, 86, 0})

	// Sets the fee rate for a Whirlpool.
	// Fee rate is represented as hundredths of a basis point.
	// Only the current fee authority has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority that can modify pool fees in the WhirlpoolConfig
	//
	// ### Parameters
	// - `fee_rate` - The rate that the pool will use to calculate fees going onwards.
	//
	// #### Special Errors
	// - `FeeRateMaxExceeded` - If the provided fee_rate exceeds MAX_FEE_RATE.
	Instruction_SetFeeRate = ag_binary.TypeID([8]byte{53, 243, 137, 65, 8, 140, 158, 6})

	// Sets the protocol fee rate for a Whirlpool.
	// Protocol fee rate is represented as a basis point.
	// Only the current fee authority has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority that can modify pool fees in the WhirlpoolConfig
	//
	// ### Parameters
	// - `protocol_fee_rate` - The rate that the pool will use to calculate protocol fees going onwards.
	//
	// #### Special Errors
	// - `ProtocolFeeRateMaxExceeded` - If the provided default_protocol_fee_rate exceeds MAX_PROTOCOL_FEE_RATE.
	Instruction_SetProtocolFeeRate = ag_binary.TypeID([8]byte{95, 7, 4, 50, 154, 79, 156, 131})

	// Sets the fee authority for a WhirlpoolConfig.
	// The fee authority can set the fee & protocol fee rate for individual pools or
	// set the default fee rate for newly minted pools.
	// Only the current fee authority has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority that can modify pool fees in the WhirlpoolConfig
	Instruction_SetFeeAuthority = ag_binary.TypeID([8]byte{31, 1, 50, 87, 237, 101, 97, 132})

	// Sets the fee authority to collect protocol fees for a WhirlpoolConfig.
	// Only the current collect protocol fee authority has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority that can collect protocol fees in the WhirlpoolConfig
	Instruction_SetCollectProtocolFeesAuthority = ag_binary.TypeID([8]byte{34, 150, 93, 244, 139, 225, 233, 67})

	// Set the whirlpool reward authority at the provided `reward_index`.
	// Only the current reward authority for this reward index has permission to invoke this instruction.
	//
	// ### Authority
	// - "reward_authority" - Set authority that can control reward emission for this particular reward.
	//
	// #### Special Errors
	// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
	// index in this pool, or exceeds NUM_REWARDS, or
	// all reward slots for this pool has been initialized.
	Instruction_SetRewardAuthority = ag_binary.TypeID([8]byte{34, 39, 183, 252, 83, 28, 85, 127})

	// Set the whirlpool reward authority at the provided `reward_index`.
	// Only the current reward super authority has permission to invoke this instruction.
	//
	// ### Authority
	// - "reward_authority" - Set authority that can control reward emission for this particular reward.
	//
	// #### Special Errors
	// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
	// index in this pool, or exceeds NUM_REWARDS, or
	// all reward slots for this pool has been initialized.
	Instruction_SetRewardAuthorityBySuperAuthority = ag_binary.TypeID([8]byte{240, 154, 201, 198, 148, 93, 56, 25})

	// Set the whirlpool reward super authority for a WhirlpoolConfig
	// Only the current reward super authority has permission to invoke this instruction.
	// This instruction will not change the authority on any `WhirlpoolRewardInfo` whirlpool rewards.
	//
	// ### Authority
	// - "reward_emissions_super_authority" - Set authority that can control reward authorities for all pools in this config space.
	Instruction_SetRewardEmissionsSuperAuthority = ag_binary.TypeID([8]byte{207, 5, 200, 209, 122, 56, 82, 183})

	// Perform a two-hop swap in this Whirlpool
	//
	// ### Authority
	// - "token_authority" - The authority to withdraw tokens from the input token account.
	//
	// ### Parameters
	// - `amount` - The amount of input or output token to swap from (depending on amount_specified_is_input).
	// - `other_amount_threshold` - The maximum/minimum of input/output token to swap into (depending on amount_specified_is_input).
	// - `amount_specified_is_input` - Specifies the token the parameter `amount`represents. If true, the amount represents the input token of the swap.
	// - `a_to_b_one` - The direction of the swap of hop one. True if swapping from A to B. False if swapping from B to A.
	// - `a_to_b_two` - The direction of the swap of hop two. True if swapping from A to B. False if swapping from B to A.
	// - `sqrt_price_limit_one` - The maximum/minimum price the swap will swap to in the first hop.
	// - `sqrt_price_limit_two` - The maximum/minimum price the swap will swap to in the second hop.
	//
	// #### Special Errors
	// - `ZeroTradableAmount` - User provided parameter `amount` is 0.
	// - `InvalidSqrtPriceLimitDirection` - User provided parameter `sqrt_price_limit` does not match the direction of the trade.
	// - `SqrtPriceOutOfBounds` - User provided parameter `sqrt_price_limit` is over Whirlppool's max/min bounds for sqrt-price.
	// - `InvalidTickArraySequence` - User provided tick-arrays are not in sequential order required to proceed in this trade direction.
	// - `TickArraySequenceInvalidIndex` - The swap loop attempted to access an invalid array index during the query of the next initialized tick.
	// - `TickArrayIndexOutofBounds` - The swap loop attempted to access an invalid array index during tick crossing.
	// - `LiquidityOverflow` - Liquidity value overflowed 128bits during tick crossing.
	// - `InvalidTickSpacing` - The swap pool was initialized with tick-spacing of 0.
	// - `InvalidIntermediaryMint` - Error if the intermediary mint between hop one and two do not equal.
	// - `DuplicateTwoHopPool` - Error if whirlpool one & two are the same pool.
	Instruction_TwoHopSwap = ag_binary.TypeID([8]byte{195, 96, 237, 108, 68, 162, 219, 230})

	// Initializes a PositionBundle account that bundles several positions.
	// A unique token will be minted to represent the position bundle in the users wallet.
	Instruction_InitializePositionBundle = ag_binary.TypeID([8]byte{117, 45, 241, 149, 24, 18, 194, 65})

	// Initializes a PositionBundle account that bundles several positions.
	// A unique token will be minted to represent the position bundle in the users wallet.
	// Additional Metaplex metadata is appended to identify the token.
	Instruction_InitializePositionBundleWithMetadata = ag_binary.TypeID([8]byte{93, 124, 16, 179, 249, 131, 115, 245})

	// Delete a PositionBundle account. Burns the position bundle token in the owner's wallet.
	//
	// ### Authority
	// - `position_bundle_owner` - The owner that owns the position bundle token.
	//
	// ### Special Errors
	// - `PositionBundleNotDeletable` - The provided position bundle has open positions.
	Instruction_DeletePositionBundle = ag_binary.TypeID([8]byte{100, 25, 99, 2, 217, 239, 124, 173})

	// Open a bundled position in a Whirlpool. No new tokens are issued
	// because the owner of the position bundle becomes the owner of the position.
	// The position will start off with 0 liquidity.
	//
	// ### Authority
	// - `position_bundle_authority` - authority that owns the token corresponding to this desired position bundle.
	//
	// ### Parameters
	// - `bundle_index` - The bundle index that we'd like to open.
	// - `tick_lower_index` - The tick specifying the lower end of the position range.
	// - `tick_upper_index` - The tick specifying the upper end of the position range.
	//
	// #### Special Errors
	// - `InvalidBundleIndex` - If the provided bundle index is out of bounds.
	// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
	// the tick-spacing in this pool.
	Instruction_OpenBundledPosition = ag_binary.TypeID([8]byte{169, 113, 126, 171, 213, 172, 212, 49})

	// Close a bundled position in a Whirlpool.
	//
	// ### Authority
	// - `position_bundle_authority` - authority that owns the token corresponding to this desired position bundle.
	//
	// ### Parameters
	// - `bundle_index` - The bundle index that we'd like to close.
	//
	// #### Special Errors
	// - `InvalidBundleIndex` - If the provided bundle index is out of bounds.
	// - `ClosePositionNotEmpty` - The provided position account is not empty.
	Instruction_CloseBundledPosition = ag_binary.TypeID([8]byte{41, 36, 216, 245, 27, 85, 103, 67})

	// Open a position in a Whirlpool. A unique token will be minted to represent the position
	// in the users wallet. Additional TokenMetadata extension is initialized to identify the token.
	// Mint and TokenAccount are based on Token-2022.
	// The position will start off with 0 liquidity.
	//
	// ### Parameters
	// - `tick_lower_index` - The tick specifying the lower end of the position range.
	// - `tick_upper_index` - The tick specifying the upper end of the position range.
	// - `with_token_metadata_extension` - If true, the token metadata extension will be initialized.
	//
	// #### Special Errors
	// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
	// the tick-spacing in this pool.
	Instruction_OpenPositionWithTokenExtensions = ag_binary.TypeID([8]byte{212, 47, 95, 92, 114, 102, 131, 250})

	// Close a position in a Whirlpool. Burns the position token in the owner's wallet.
	// Mint and TokenAccount are based on Token-2022. And Mint accout will be also closed.
	//
	// ### Authority
	// - "position_authority" - The authority that owns the position token.
	//
	// #### Special Errors
	// - `ClosePositionNotEmpty` - The provided position account is not empty.
	Instruction_ClosePositionWithTokenExtensions = ag_binary.TypeID([8]byte{1, 182, 135, 59, 155, 25, 99, 223})

	// Lock the position to prevent any liquidity changes.
	//
	// ### Authority
	// - `position_authority` - The authority that owns the position token.
	//
	// #### Special Errors
	// - `PositionAlreadyLocked` - The provided position is already locked.
	// - `PositionNotLockable` - The provided position is not lockable (e.g. An empty position).
	Instruction_LockPosition = ag_binary.TypeID([8]byte{227, 62, 2, 252, 247, 10, 171, 185})

	// Reset the position range to a new range.
	//
	// ### Authority
	// - `position_authority` - The authority that owns the position token.
	//
	// ### Parameters
	// - `new_tick_lower_index` - The new tick specifying the lower end of the position range.
	// - `new_tick_upper_index` - The new tick specifying the upper end of the position range.
	//
	// #### Special Errors
	// - `InvalidTickIndex` - If a provided tick is out of bounds, out of order or not a multiple of
	// the tick-spacing in this pool.
	// - `ClosePositionNotEmpty` - The provided position account is not empty.
	// - `SameTickRangeNotAllowed` - The provided tick range is the same as the current tick range.
	Instruction_ResetPositionRange = ag_binary.TypeID([8]byte{164, 123, 180, 141, 194, 100, 160, 175})

	// Transfer a locked position to to a different token account.
	//
	// ### Authority
	// - `position_authority` - The authority that owns the position token.
	Instruction_TransferLockedPosition = ag_binary.TypeID([8]byte{179, 121, 229, 46, 67, 138, 194, 138})

	// Initializes an adaptive_fee_tier account usable by Whirlpools in a WhirlpoolConfig space.
	//
	// ### Authority
	// - "fee_authority" - Set authority in the WhirlpoolConfig
	//
	// ### Parameters
	// - `fee_tier_index` - The index of the fee-tier that this adaptive fee tier will be initialized.
	// - `tick_spacing` - The tick-spacing that this fee-tier suggests the default_fee_rate for.
	// - `initialize_pool_authority` - The authority that can initialize pools with this adaptive fee-tier.
	// - `delegated_fee_authority` - The authority that can set the base fee rate for pools using this adaptive fee-tier.
	// - `default_fee_rate` - The default fee rate that a pool will use if the pool uses this
	// fee tier during initialization.
	// - `filter_period` - Period determine high frequency trading time window. (seconds)
	// - `decay_period` - Period determine when the adaptive fee start decrease. (seconds)
	// - `reduction_factor` - Adaptive fee rate decrement rate.
	// - `adaptive_fee_control_factor` - Adaptive fee control factor.
	// - `max_volatility_accumulator` - Max volatility accumulator.
	// - `tick_group_size` - Tick group size to define tick group index.
	// - `major_swap_threshold_ticks` - Major swap threshold ticks to define major swap.
	//
	// #### Special Errors
	// - `InvalidTickSpacing` - If the provided tick_spacing is 0.
	// - `InvalidFeeTierIndex` - If the provided fee_tier_index is same to tick_spacing.
	// - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE.
	// - `InvalidAdaptiveFeeConstants` - If the provided adaptive fee constants are invalid.
	Instruction_InitializeAdaptiveFeeTier = ag_binary.TypeID([8]byte{77, 99, 208, 200, 141, 123, 117, 48})

	// Set the default_base_fee_rate for an AdaptiveFeeTier
	// Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority in the WhirlpoolConfig
	//
	// ### Parameters
	// - `default_base_fee_rate` - The default base fee rate that a pool will use if the pool uses this
	// adaptive fee-tier during initialization.
	//
	// #### Special Errors
	// - `FeeRateMaxExceeded` - If the provided default_fee_rate exceeds MAX_FEE_RATE.
	Instruction_SetDefaultBaseFeeRate = ag_binary.TypeID([8]byte{229, 66, 84, 251, 164, 134, 183, 7})

	// Sets the delegated fee authority for an AdaptiveFeeTier.
	// The delegated fee authority can set the fee rate for individual pools initialized with the adaptive fee-tier.
	// Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority in the WhirlpoolConfig
	Instruction_SetDelegatedFeeAuthority = ag_binary.TypeID([8]byte{193, 234, 231, 147, 138, 57, 3, 122})

	// Sets the initialize pool authority for an AdaptiveFeeTier.
	// Only the initialize pool authority can initialize pools with the adaptive fee-tier.
	// Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority in the WhirlpoolConfig
	Instruction_SetInitializePoolAuthority = ag_binary.TypeID([8]byte{125, 43, 127, 235, 149, 26, 106, 236})

	// Sets the adaptive fee constants for an AdaptiveFeeTier.
	// Only the current fee authority in WhirlpoolsConfig has permission to invoke this instruction.
	//
	// ### Authority
	// - "fee_authority" - Set authority in the WhirlpoolConfig
	//
	// ### Parameters
	// - `filter_period` - Period determine high frequency trading time window. (seconds)
	// - `decay_period` - Period determine when the adaptive fee start decrease. (seconds)
	// - `reduction_factor` - Adaptive fee rate decrement rate.
	// - `adaptive_fee_control_factor` - Adaptive fee control factor.
	// - `max_volatility_accumulator` - Max volatility accumulator.
	// - `tick_group_size` - Tick group size to define tick group index.
	// - `major_swap_threshold_ticks` - Major swap threshold ticks to define major swap.
	Instruction_SetPresetAdaptiveFeeConstants = ag_binary.TypeID([8]byte{132, 185, 66, 148, 83, 88, 134, 198})

	// Initializes a Whirlpool account and Oracle account with adaptive fee.
	//
	// ### Parameters
	// - `initial_sqrt_price` - The desired initial sqrt-price for this pool
	// - `trade_enable_timestamp` - The timestamp when trading is enabled for this pool (within 72 hours)
	//
	// #### Special Errors
	// `InvalidTokenMintOrder` - The order of mints have to be ordered by
	// `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64
	// `InvalidTradeEnableTimestamp` - provided trade_enable_timestamp is not within 72 hours or the adaptive fee-tier is permission-less
	// `UnsupportedTokenMint` - The provided token mint is not supported by the program (e.g. it has risky token extensions)
	//
	Instruction_InitializePoolWithAdaptiveFee = ag_binary.TypeID([8]byte{143, 94, 96, 76, 172, 124, 119, 199})

	// Sets the fee rate for a Whirlpool by the delegated fee authority in AdaptiveFeeTier.
	// Fee rate is represented as hundredths of a basis point.
	//
	// ### Authority
	// - "delegated_fee_authority" - Set authority that can modify pool fees in the AdaptiveFeeTier
	//
	// ### Parameters
	// - `fee_rate` - The rate that the pool will use to calculate fees going onwards.
	//
	// #### Special Errors
	// - `FeeRateMaxExceeded` - If the provided fee_rate exceeds MAX_FEE_RATE.
	Instruction_SetFeeRateByDelegatedFeeAuthority = ag_binary.TypeID([8]byte{121, 121, 54, 114, 131, 230, 162, 104})

	// Collect fees accrued for this position.
	//
	// ### Authority
	// - `position_authority` - authority that owns the token corresponding to this desired position.
	Instruction_CollectFeesV2 = ag_binary.TypeID([8]byte{207, 117, 95, 191, 229, 180, 226, 15})

	// Collect the protocol fees accrued in this Whirlpool
	//
	// ### Authority
	// - `collect_protocol_fees_authority` - assigned authority in the WhirlpoolConfig that can collect protocol fees
	Instruction_CollectProtocolFeesV2 = ag_binary.TypeID([8]byte{103, 128, 222, 134, 114, 200, 22, 200})

	// Collect rewards accrued for this position.
	//
	// ### Authority
	// - `position_authority` - authority that owns the token corresponding to this desired position.
	Instruction_CollectRewardV2 = ag_binary.TypeID([8]byte{177, 107, 37, 180, 160, 19, 49, 209})

	// Withdraw liquidity from a position in the Whirlpool. This call also updates the position's accrued fees and rewards.
	//
	// ### Authority
	// - `position_authority` - authority that owns the token corresponding to this desired position.
	//
	// ### Parameters
	// - `liquidity_amount` - The total amount of Liquidity the user desires to withdraw.
	// - `token_min_a` - The minimum amount of tokenA the user is willing to withdraw.
	// - `token_min_b` - The minimum amount of tokenB the user is willing to withdraw.
	//
	// #### Special Errors
	// - `LiquidityZero` - Provided liquidity amount is zero.
	// - `LiquidityTooHigh` - Provided liquidity exceeds u128::max.
	// - `TokenMinSubceeded` - The required token to perform this operation subceeds the user defined amount.
	Instruction_DecreaseLiquidityV2 = ag_binary.TypeID([8]byte{58, 127, 188, 62, 79, 82, 196, 96})

	// Add liquidity to a position in the Whirlpool. This call also updates the position's accrued fees and rewards.
	//
	// ### Authority
	// - `position_authority` - authority that owns the token corresponding to this desired position.
	//
	// ### Parameters
	// - `liquidity_amount` - The total amount of Liquidity the user is willing to deposit.
	// - `token_max_a` - The maximum amount of tokenA the user is willing to deposit.
	// - `token_max_b` - The maximum amount of tokenB the user is willing to deposit.
	//
	// #### Special Errors
	// - `LiquidityZero` - Provided liquidity amount is zero.
	// - `LiquidityTooHigh` - Provided liquidity exceeds u128::max.
	// - `TokenMaxExceeded` - The required token to perform this operation exceeds the user defined amount.
	Instruction_IncreaseLiquidityV2 = ag_binary.TypeID([8]byte{133, 29, 89, 223, 69, 238, 176, 10})

	// Initializes a Whirlpool account.
	// Fee rate is set to the default values on the config and supplied fee_tier.
	//
	// ### Parameters
	// - `bumps` - The bump value when deriving the PDA of the Whirlpool address.
	// - `tick_spacing` - The desired tick spacing for this pool.
	// - `initial_sqrt_price` - The desired initial sqrt-price for this pool
	//
	// #### Special Errors
	// `InvalidTokenMintOrder` - The order of mints have to be ordered by
	// `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64
	//
	Instruction_InitializePoolV2 = ag_binary.TypeID([8]byte{207, 45, 87, 242, 27, 63, 204, 67})

	// Initialize reward for a Whirlpool. A pool can only support up to a set number of rewards.
	//
	// ### Authority
	// - "reward_authority" - assigned authority by the reward_super_authority for the specified
	// reward-index in this Whirlpool
	//
	// ### Parameters
	// - `reward_index` - The reward index that we'd like to initialize. (0 <= index <= NUM_REWARDS)
	//
	// #### Special Errors
	// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
	// index in this pool, or exceeds NUM_REWARDS, or
	// all reward slots for this pool has been initialized.
	Instruction_InitializeRewardV2 = ag_binary.TypeID([8]byte{91, 1, 77, 50, 235, 229, 133, 49})

	// Set the reward emissions for a reward in a Whirlpool.
	//
	// ### Authority
	// - "reward_authority" - assigned authority by the reward_super_authority for the specified
	// reward-index in this Whirlpool
	//
	// ### Parameters
	// - `reward_index` - The reward index (0 <= index <= NUM_REWARDS) that we'd like to modify.
	// - `emissions_per_second_x64` - The amount of rewards emitted in this pool.
	//
	// #### Special Errors
	// - `RewardVaultAmountInsufficient` - The amount of rewards in the reward vault cannot emit
	// more than a day of desired emissions.
	// - `InvalidTimestamp` - Provided timestamp is not in order with the previous timestamp.
	// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
	// index in this pool, or exceeds NUM_REWARDS, or
	// all reward slots for this pool has been initialized.
	Instruction_SetRewardEmissionsV2 = ag_binary.TypeID([8]byte{114, 228, 72, 32, 193, 48, 160, 102})

	// Perform a swap in this Whirlpool
	//
	// ### Authority
	// - "token_authority" - The authority to withdraw tokens from the input token account.
	//
	// ### Parameters
	// - `amount` - The amount of input or output token to swap from (depending on amount_specified_is_input).
	// - `other_amount_threshold` - The maximum/minimum of input/output token to swap into (depending on amount_specified_is_input).
	// - `sqrt_price_limit` - The maximum/minimum price the swap will swap to.
	// - `amount_specified_is_input` - Specifies the token the parameter `amount`represents. If true, the amount represents the input token of the swap.
	// - `a_to_b` - The direction of the swap. True if swapping from A to B. False if swapping from B to A.
	//
	// #### Special Errors
	// - `ZeroTradableAmount` - User provided parameter `amount` is 0.
	// - `InvalidSqrtPriceLimitDirection` - User provided parameter `sqrt_price_limit` does not match the direction of the trade.
	// - `SqrtPriceOutOfBounds` - User provided parameter `sqrt_price_limit` is over Whirlppool's max/min bounds for sqrt-price.
	// - `InvalidTickArraySequence` - User provided tick-arrays are not in sequential order required to proceed in this trade direction.
	// - `TickArraySequenceInvalidIndex` - The swap loop attempted to access an invalid array index during the query of the next initialized tick.
	// - `TickArrayIndexOutofBounds` - The swap loop attempted to access an invalid array index during tick crossing.
	// - `LiquidityOverflow` - Liquidity value overflowed 128bits during tick crossing.
	// - `InvalidTickSpacing` - The swap pool was initialized with tick-spacing of 0.
	Instruction_SwapV2 = ag_binary.TypeID([8]byte{43, 4, 237, 11, 26, 201, 30, 98})

	// Perform a two-hop swap in this Whirlpool
	//
	// ### Authority
	// - "token_authority" - The authority to withdraw tokens from the input token account.
	//
	// ### Parameters
	// - `amount` - The amount of input or output token to swap from (depending on amount_specified_is_input).
	// - `other_amount_threshold` - The maximum/minimum of input/output token to swap into (depending on amount_specified_is_input).
	// - `amount_specified_is_input` - Specifies the token the parameter `amount`represents. If true, the amount represents the input token of the swap.
	// - `a_to_b_one` - The direction of the swap of hop one. True if swapping from A to B. False if swapping from B to A.
	// - `a_to_b_two` - The direction of the swap of hop two. True if swapping from A to B. False if swapping from B to A.
	// - `sqrt_price_limit_one` - The maximum/minimum price the swap will swap to in the first hop.
	// - `sqrt_price_limit_two` - The maximum/minimum price the swap will swap to in the second hop.
	//
	// #### Special Errors
	// - `ZeroTradableAmount` - User provided parameter `amount` is 0.
	// - `InvalidSqrtPriceLimitDirection` - User provided parameter `sqrt_price_limit` does not match the direction of the trade.
	// - `SqrtPriceOutOfBounds` - User provided parameter `sqrt_price_limit` is over Whirlppool's max/min bounds for sqrt-price.
	// - `InvalidTickArraySequence` - User provided tick-arrays are not in sequential order required to proceed in this trade direction.
	// - `TickArraySequenceInvalidIndex` - The swap loop attempted to access an invalid array index during the query of the next initialized tick.
	// - `TickArrayIndexOutofBounds` - The swap loop attempted to access an invalid array index during tick crossing.
	// - `LiquidityOverflow` - Liquidity value overflowed 128bits during tick crossing.
	// - `InvalidTickSpacing` - The swap pool was initialized with tick-spacing of 0.
	// - `InvalidIntermediaryMint` - Error if the intermediary mint between hop one and two do not equal.
	// - `DuplicateTwoHopPool` - Error if whirlpool one & two are the same pool.
	Instruction_TwoHopSwapV2 = ag_binary.TypeID([8]byte{186, 143, 209, 29, 254, 2, 194, 117})

	Instruction_InitializeConfigExtension = ag_binary.TypeID([8]byte{55, 9, 53, 9, 114, 57, 209, 52})

	Instruction_SetConfigExtensionAuthority = ag_binary.TypeID([8]byte{44, 94, 241, 116, 24, 188, 60, 143})

	Instruction_SetTokenBadgeAuthority = ag_binary.TypeID([8]byte{207, 202, 4, 32, 205, 79, 13, 178})

	Instruction_InitializeTokenBadge = ag_binary.TypeID([8]byte{253, 77, 205, 95, 27, 224, 89, 223})

	Instruction_DeleteTokenBadge = ag_binary.TypeID([8]byte{53, 146, 68, 8, 18, 117, 17, 185})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_InitializeConfig:
		return "InitializeConfig"
	case Instruction_InitializePool:
		return "InitializePool"
	case Instruction_InitializeTickArray:
		return "InitializeTickArray"
	case Instruction_InitializeFeeTier:
		return "InitializeFeeTier"
	case Instruction_InitializeReward:
		return "InitializeReward"
	case Instruction_SetRewardEmissions:
		return "SetRewardEmissions"
	case Instruction_OpenPosition:
		return "OpenPosition"
	case Instruction_OpenPositionWithMetadata:
		return "OpenPositionWithMetadata"
	case Instruction_IncreaseLiquidity:
		return "IncreaseLiquidity"
	case Instruction_DecreaseLiquidity:
		return "DecreaseLiquidity"
	case Instruction_UpdateFeesAndRewards:
		return "UpdateFeesAndRewards"
	case Instruction_CollectFees:
		return "CollectFees"
	case Instruction_CollectReward:
		return "CollectReward"
	case Instruction_CollectProtocolFees:
		return "CollectProtocolFees"
	case Instruction_Swap:
		return "Swap"
	case Instruction_ClosePosition:
		return "ClosePosition"
	case Instruction_SetDefaultFeeRate:
		return "SetDefaultFeeRate"
	case Instruction_SetDefaultProtocolFeeRate:
		return "SetDefaultProtocolFeeRate"
	case Instruction_SetFeeRate:
		return "SetFeeRate"
	case Instruction_SetProtocolFeeRate:
		return "SetProtocolFeeRate"
	case Instruction_SetFeeAuthority:
		return "SetFeeAuthority"
	case Instruction_SetCollectProtocolFeesAuthority:
		return "SetCollectProtocolFeesAuthority"
	case Instruction_SetRewardAuthority:
		return "SetRewardAuthority"
	case Instruction_SetRewardAuthorityBySuperAuthority:
		return "SetRewardAuthorityBySuperAuthority"
	case Instruction_SetRewardEmissionsSuperAuthority:
		return "SetRewardEmissionsSuperAuthority"
	case Instruction_TwoHopSwap:
		return "TwoHopSwap"
	case Instruction_InitializePositionBundle:
		return "InitializePositionBundle"
	case Instruction_InitializePositionBundleWithMetadata:
		return "InitializePositionBundleWithMetadata"
	case Instruction_DeletePositionBundle:
		return "DeletePositionBundle"
	case Instruction_OpenBundledPosition:
		return "OpenBundledPosition"
	case Instruction_CloseBundledPosition:
		return "CloseBundledPosition"
	case Instruction_OpenPositionWithTokenExtensions:
		return "OpenPositionWithTokenExtensions"
	case Instruction_ClosePositionWithTokenExtensions:
		return "ClosePositionWithTokenExtensions"
	case Instruction_LockPosition:
		return "LockPosition"
	case Instruction_ResetPositionRange:
		return "ResetPositionRange"
	case Instruction_TransferLockedPosition:
		return "TransferLockedPosition"
	case Instruction_InitializeAdaptiveFeeTier:
		return "InitializeAdaptiveFeeTier"
	case Instruction_SetDefaultBaseFeeRate:
		return "SetDefaultBaseFeeRate"
	case Instruction_SetDelegatedFeeAuthority:
		return "SetDelegatedFeeAuthority"
	case Instruction_SetInitializePoolAuthority:
		return "SetInitializePoolAuthority"
	case Instruction_SetPresetAdaptiveFeeConstants:
		return "SetPresetAdaptiveFeeConstants"
	case Instruction_InitializePoolWithAdaptiveFee:
		return "InitializePoolWithAdaptiveFee"
	case Instruction_SetFeeRateByDelegatedFeeAuthority:
		return "SetFeeRateByDelegatedFeeAuthority"
	case Instruction_CollectFeesV2:
		return "CollectFeesV2"
	case Instruction_CollectProtocolFeesV2:
		return "CollectProtocolFeesV2"
	case Instruction_CollectRewardV2:
		return "CollectRewardV2"
	case Instruction_DecreaseLiquidityV2:
		return "DecreaseLiquidityV2"
	case Instruction_IncreaseLiquidityV2:
		return "IncreaseLiquidityV2"
	case Instruction_InitializePoolV2:
		return "InitializePoolV2"
	case Instruction_InitializeRewardV2:
		return "InitializeRewardV2"
	case Instruction_SetRewardEmissionsV2:
		return "SetRewardEmissionsV2"
	case Instruction_SwapV2:
		return "SwapV2"
	case Instruction_TwoHopSwapV2:
		return "TwoHopSwapV2"
	case Instruction_InitializeConfigExtension:
		return "InitializeConfigExtension"
	case Instruction_SetConfigExtensionAuthority:
		return "SetConfigExtensionAuthority"
	case Instruction_SetTokenBadgeAuthority:
		return "SetTokenBadgeAuthority"
	case Instruction_InitializeTokenBadge:
		return "InitializeTokenBadge"
	case Instruction_DeleteTokenBadge:
		return "DeleteTokenBadge"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "initialize_config", Type: (*InitializeConfig)(nil),
		},
		{
			Name: "initialize_pool", Type: (*InitializePool)(nil),
		},
		{
			Name: "initialize_tick_array", Type: (*InitializeTickArray)(nil),
		},
		{
			Name: "initialize_fee_tier", Type: (*InitializeFeeTier)(nil),
		},
		{
			Name: "initialize_reward", Type: (*InitializeReward)(nil),
		},
		{
			Name: "set_reward_emissions", Type: (*SetRewardEmissions)(nil),
		},
		{
			Name: "open_position", Type: (*OpenPosition)(nil),
		},
		{
			Name: "open_position_with_metadata", Type: (*OpenPositionWithMetadata)(nil),
		},
		{
			Name: "increase_liquidity", Type: (*IncreaseLiquidity)(nil),
		},
		{
			Name: "decrease_liquidity", Type: (*DecreaseLiquidity)(nil),
		},
		{
			Name: "update_fees_and_rewards", Type: (*UpdateFeesAndRewards)(nil),
		},
		{
			Name: "collect_fees", Type: (*CollectFees)(nil),
		},
		{
			Name: "collect_reward", Type: (*CollectReward)(nil),
		},
		{
			Name: "collect_protocol_fees", Type: (*CollectProtocolFees)(nil),
		},
		{
			Name: "swap", Type: (*Swap)(nil),
		},
		{
			Name: "close_position", Type: (*ClosePosition)(nil),
		},
		{
			Name: "set_default_fee_rate", Type: (*SetDefaultFeeRate)(nil),
		},
		{
			Name: "set_default_protocol_fee_rate", Type: (*SetDefaultProtocolFeeRate)(nil),
		},
		{
			Name: "set_fee_rate", Type: (*SetFeeRate)(nil),
		},
		{
			Name: "set_protocol_fee_rate", Type: (*SetProtocolFeeRate)(nil),
		},
		{
			Name: "set_fee_authority", Type: (*SetFeeAuthority)(nil),
		},
		{
			Name: "set_collect_protocol_fees_authority", Type: (*SetCollectProtocolFeesAuthority)(nil),
		},
		{
			Name: "set_reward_authority", Type: (*SetRewardAuthority)(nil),
		},
		{
			Name: "set_reward_authority_by_super_authority", Type: (*SetRewardAuthorityBySuperAuthority)(nil),
		},
		{
			Name: "set_reward_emissions_super_authority", Type: (*SetRewardEmissionsSuperAuthority)(nil),
		},
		{
			Name: "two_hop_swap", Type: (*TwoHopSwap)(nil),
		},
		{
			Name: "initialize_position_bundle", Type: (*InitializePositionBundle)(nil),
		},
		{
			Name: "initialize_position_bundle_with_metadata", Type: (*InitializePositionBundleWithMetadata)(nil),
		},
		{
			Name: "delete_position_bundle", Type: (*DeletePositionBundle)(nil),
		},
		{
			Name: "open_bundled_position", Type: (*OpenBundledPosition)(nil),
		},
		{
			Name: "close_bundled_position", Type: (*CloseBundledPosition)(nil),
		},
		{
			Name: "open_position_with_token_extensions", Type: (*OpenPositionWithTokenExtensions)(nil),
		},
		{
			Name: "close_position_with_token_extensions", Type: (*ClosePositionWithTokenExtensions)(nil),
		},
		{
			Name: "lock_position", Type: (*LockPosition)(nil),
		},
		{
			Name: "reset_position_range", Type: (*ResetPositionRange)(nil),
		},
		{
			Name: "transfer_locked_position", Type: (*TransferLockedPosition)(nil),
		},
		{
			Name: "initialize_adaptive_fee_tier", Type: (*InitializeAdaptiveFeeTier)(nil),
		},
		{
			Name: "set_default_base_fee_rate", Type: (*SetDefaultBaseFeeRate)(nil),
		},
		{
			Name: "set_delegated_fee_authority", Type: (*SetDelegatedFeeAuthority)(nil),
		},
		{
			Name: "set_initialize_pool_authority", Type: (*SetInitializePoolAuthority)(nil),
		},
		{
			Name: "set_preset_adaptive_fee_constants", Type: (*SetPresetAdaptiveFeeConstants)(nil),
		},
		{
			Name: "initialize_pool_with_adaptive_fee", Type: (*InitializePoolWithAdaptiveFee)(nil),
		},
		{
			Name: "set_fee_rate_by_delegated_fee_authority", Type: (*SetFeeRateByDelegatedFeeAuthority)(nil),
		},
		{
			Name: "collect_fees_v2", Type: (*CollectFeesV2)(nil),
		},
		{
			Name: "collect_protocol_fees_v2", Type: (*CollectProtocolFeesV2)(nil),
		},
		{
			Name: "collect_reward_v2", Type: (*CollectRewardV2)(nil),
		},
		{
			Name: "decrease_liquidity_v2", Type: (*DecreaseLiquidityV2)(nil),
		},
		{
			Name: "increase_liquidity_v2", Type: (*IncreaseLiquidityV2)(nil),
		},
		{
			Name: "initialize_pool_v2", Type: (*InitializePoolV2)(nil),
		},
		{
			Name: "initialize_reward_v2", Type: (*InitializeRewardV2)(nil),
		},
		{
			Name: "set_reward_emissions_v2", Type: (*SetRewardEmissionsV2)(nil),
		},
		{
			Name: "swap_v2", Type: (*SwapV2)(nil),
		},
		{
			Name: "two_hop_swap_v2", Type: (*TwoHopSwapV2)(nil),
		},
		{
			Name: "initialize_config_extension", Type: (*InitializeConfigExtension)(nil),
		},
		{
			Name: "set_config_extension_authority", Type: (*SetConfigExtensionAuthority)(nil),
		},
		{
			Name: "set_token_badge_authority", Type: (*SetTokenBadgeAuthority)(nil),
		},
		{
			Name: "initialize_token_badge", Type: (*InitializeTokenBadge)(nil),
		},
		{
			Name: "delete_token_badge", Type: (*DeleteTokenBadge)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
