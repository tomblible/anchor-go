// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TwoHopSwap is the `two_hop_swap` instruction.
type TwoHopSwap struct {
	Amount                 *uint64
	OtherAmountThreshold   *uint64
	AmountSpecifiedIsInput *bool
	AToBOne                *bool
	AToBTwo                *bool
	SqrtPriceLimitOne      *ag_binary.Uint128
	SqrtPriceLimitTwo      *ag_binary.Uint128

	// [0] = [] token_program
	//
	// [1] = [SIGNER] token_authority
	//
	// [2] = [WRITE] whirlpool_one
	//
	// [3] = [WRITE] whirlpool_two
	//
	// [4] = [WRITE] token_owner_account_one_a
	//
	// [5] = [WRITE] token_vault_one_a
	//
	// [6] = [WRITE] token_owner_account_one_b
	//
	// [7] = [WRITE] token_vault_one_b
	//
	// [8] = [WRITE] token_owner_account_two_a
	//
	// [9] = [WRITE] token_vault_two_a
	//
	// [10] = [WRITE] token_owner_account_two_b
	//
	// [11] = [WRITE] token_vault_two_b
	//
	// [12] = [WRITE] tick_array_one0
	//
	// [13] = [WRITE] tick_array_one1
	//
	// [14] = [WRITE] tick_array_one2
	//
	// [15] = [WRITE] tick_array_two0
	//
	// [16] = [WRITE] tick_array_two1
	//
	// [17] = [WRITE] tick_array_two2
	//
	// [18] = [] oracle_one
	//
	// [19] = [] oracle_two
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTwoHopSwapInstructionBuilder creates a new `TwoHopSwap` instruction builder.
func NewTwoHopSwapInstructionBuilder() *TwoHopSwap {
	nd := &TwoHopSwap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 20),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *TwoHopSwap) SetAmount(amount uint64) *TwoHopSwap {
	inst.Amount = &amount
	return inst
}

// SetOtherAmountThreshold sets the "other_amount_threshold" parameter.
func (inst *TwoHopSwap) SetOtherAmountThreshold(other_amount_threshold uint64) *TwoHopSwap {
	inst.OtherAmountThreshold = &other_amount_threshold
	return inst
}

// SetAmountSpecifiedIsInput sets the "amount_specified_is_input" parameter.
func (inst *TwoHopSwap) SetAmountSpecifiedIsInput(amount_specified_is_input bool) *TwoHopSwap {
	inst.AmountSpecifiedIsInput = &amount_specified_is_input
	return inst
}

// SetAToBOne sets the "a_to_b_one" parameter.
func (inst *TwoHopSwap) SetAToBOne(a_to_b_one bool) *TwoHopSwap {
	inst.AToBOne = &a_to_b_one
	return inst
}

// SetAToBTwo sets the "a_to_b_two" parameter.
func (inst *TwoHopSwap) SetAToBTwo(a_to_b_two bool) *TwoHopSwap {
	inst.AToBTwo = &a_to_b_two
	return inst
}

// SetSqrtPriceLimitOne sets the "sqrt_price_limit_one" parameter.
func (inst *TwoHopSwap) SetSqrtPriceLimitOne(sqrt_price_limit_one ag_binary.Uint128) *TwoHopSwap {
	inst.SqrtPriceLimitOne = &sqrt_price_limit_one
	return inst
}

// SetSqrtPriceLimitTwo sets the "sqrt_price_limit_two" parameter.
func (inst *TwoHopSwap) SetSqrtPriceLimitTwo(sqrt_price_limit_two ag_binary.Uint128) *TwoHopSwap {
	inst.SqrtPriceLimitTwo = &sqrt_price_limit_two
	return inst
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *TwoHopSwap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *TwoHopSwap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenAuthorityAccount sets the "token_authority" account.
func (inst *TwoHopSwap) SetTokenAuthorityAccount(tokenAuthority ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenAuthority).SIGNER()
	return inst
}

// GetTokenAuthorityAccount gets the "token_authority" account.
func (inst *TwoHopSwap) GetTokenAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWhirlpoolOneAccount sets the "whirlpool_one" account.
func (inst *TwoHopSwap) SetWhirlpoolOneAccount(whirlpoolOne ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(whirlpoolOne).WRITE()
	return inst
}

// GetWhirlpoolOneAccount gets the "whirlpool_one" account.
func (inst *TwoHopSwap) GetWhirlpoolOneAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetWhirlpoolTwoAccount sets the "whirlpool_two" account.
func (inst *TwoHopSwap) SetWhirlpoolTwoAccount(whirlpoolTwo ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(whirlpoolTwo).WRITE()
	return inst
}

// GetWhirlpoolTwoAccount gets the "whirlpool_two" account.
func (inst *TwoHopSwap) GetWhirlpoolTwoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenOwnerAccountOneAAccount sets the "token_owner_account_one_a" account.
func (inst *TwoHopSwap) SetTokenOwnerAccountOneAAccount(tokenOwnerAccountOneA ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenOwnerAccountOneA).WRITE()
	return inst
}

// GetTokenOwnerAccountOneAAccount gets the "token_owner_account_one_a" account.
func (inst *TwoHopSwap) GetTokenOwnerAccountOneAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenVaultOneAAccount sets the "token_vault_one_a" account.
func (inst *TwoHopSwap) SetTokenVaultOneAAccount(tokenVaultOneA ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenVaultOneA).WRITE()
	return inst
}

// GetTokenVaultOneAAccount gets the "token_vault_one_a" account.
func (inst *TwoHopSwap) GetTokenVaultOneAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenOwnerAccountOneBAccount sets the "token_owner_account_one_b" account.
func (inst *TwoHopSwap) SetTokenOwnerAccountOneBAccount(tokenOwnerAccountOneB ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenOwnerAccountOneB).WRITE()
	return inst
}

// GetTokenOwnerAccountOneBAccount gets the "token_owner_account_one_b" account.
func (inst *TwoHopSwap) GetTokenOwnerAccountOneBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenVaultOneBAccount sets the "token_vault_one_b" account.
func (inst *TwoHopSwap) SetTokenVaultOneBAccount(tokenVaultOneB ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenVaultOneB).WRITE()
	return inst
}

// GetTokenVaultOneBAccount gets the "token_vault_one_b" account.
func (inst *TwoHopSwap) GetTokenVaultOneBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenOwnerAccountTwoAAccount sets the "token_owner_account_two_a" account.
func (inst *TwoHopSwap) SetTokenOwnerAccountTwoAAccount(tokenOwnerAccountTwoA ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenOwnerAccountTwoA).WRITE()
	return inst
}

// GetTokenOwnerAccountTwoAAccount gets the "token_owner_account_two_a" account.
func (inst *TwoHopSwap) GetTokenOwnerAccountTwoAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenVaultTwoAAccount sets the "token_vault_two_a" account.
func (inst *TwoHopSwap) SetTokenVaultTwoAAccount(tokenVaultTwoA ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenVaultTwoA).WRITE()
	return inst
}

// GetTokenVaultTwoAAccount gets the "token_vault_two_a" account.
func (inst *TwoHopSwap) GetTokenVaultTwoAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenOwnerAccountTwoBAccount sets the "token_owner_account_two_b" account.
func (inst *TwoHopSwap) SetTokenOwnerAccountTwoBAccount(tokenOwnerAccountTwoB ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenOwnerAccountTwoB).WRITE()
	return inst
}

// GetTokenOwnerAccountTwoBAccount gets the "token_owner_account_two_b" account.
func (inst *TwoHopSwap) GetTokenOwnerAccountTwoBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenVaultTwoBAccount sets the "token_vault_two_b" account.
func (inst *TwoHopSwap) SetTokenVaultTwoBAccount(tokenVaultTwoB ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenVaultTwoB).WRITE()
	return inst
}

// GetTokenVaultTwoBAccount gets the "token_vault_two_b" account.
func (inst *TwoHopSwap) GetTokenVaultTwoBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTickArrayOne0Account sets the "tick_array_one0" account.
func (inst *TwoHopSwap) SetTickArrayOne0Account(tickArrayOne0 ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tickArrayOne0).WRITE()
	return inst
}

// GetTickArrayOne0Account gets the "tick_array_one0" account.
func (inst *TwoHopSwap) GetTickArrayOne0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTickArrayOne1Account sets the "tick_array_one1" account.
func (inst *TwoHopSwap) SetTickArrayOne1Account(tickArrayOne1 ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tickArrayOne1).WRITE()
	return inst
}

// GetTickArrayOne1Account gets the "tick_array_one1" account.
func (inst *TwoHopSwap) GetTickArrayOne1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTickArrayOne2Account sets the "tick_array_one2" account.
func (inst *TwoHopSwap) SetTickArrayOne2Account(tickArrayOne2 ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tickArrayOne2).WRITE()
	return inst
}

// GetTickArrayOne2Account gets the "tick_array_one2" account.
func (inst *TwoHopSwap) GetTickArrayOne2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTickArrayTwo0Account sets the "tick_array_two0" account.
func (inst *TwoHopSwap) SetTickArrayTwo0Account(tickArrayTwo0 ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tickArrayTwo0).WRITE()
	return inst
}

// GetTickArrayTwo0Account gets the "tick_array_two0" account.
func (inst *TwoHopSwap) GetTickArrayTwo0Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTickArrayTwo1Account sets the "tick_array_two1" account.
func (inst *TwoHopSwap) SetTickArrayTwo1Account(tickArrayTwo1 ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(tickArrayTwo1).WRITE()
	return inst
}

// GetTickArrayTwo1Account gets the "tick_array_two1" account.
func (inst *TwoHopSwap) GetTickArrayTwo1Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetTickArrayTwo2Account sets the "tick_array_two2" account.
func (inst *TwoHopSwap) SetTickArrayTwo2Account(tickArrayTwo2 ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(tickArrayTwo2).WRITE()
	return inst
}

// GetTickArrayTwo2Account gets the "tick_array_two2" account.
func (inst *TwoHopSwap) GetTickArrayTwo2Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetOracleOneAccount sets the "oracle_one" account.
func (inst *TwoHopSwap) SetOracleOneAccount(oracleOne ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(oracleOne)
	return inst
}

// GetOracleOneAccount gets the "oracle_one" account.
func (inst *TwoHopSwap) GetOracleOneAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetOracleTwoAccount sets the "oracle_two" account.
func (inst *TwoHopSwap) SetOracleTwoAccount(oracleTwo ag_solanago.PublicKey) *TwoHopSwap {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(oracleTwo)
	return inst
}

// GetOracleTwoAccount gets the "oracle_two" account.
func (inst *TwoHopSwap) GetOracleTwoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

func (inst *TwoHopSwap) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *TwoHopSwap) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *TwoHopSwap {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:20], metas...)
	return inst
}

func (inst *TwoHopSwap) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[20:]
}

func (inst TwoHopSwap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TwoHopSwap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TwoHopSwap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TwoHopSwap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("amount parameter is not set")
		}
		if inst.OtherAmountThreshold == nil {
			return errors.New("otherAmountThreshold parameter is not set")
		}
		if inst.AmountSpecifiedIsInput == nil {
			return errors.New("amountSpecifiedIsInput parameter is not set")
		}
		if inst.AToBOne == nil {
			return errors.New("aToBOne parameter is not set")
		}
		if inst.AToBTwo == nil {
			return errors.New("aToBTwo parameter is not set")
		}
		if inst.SqrtPriceLimitOne == nil {
			return errors.New("sqrtPriceLimitOne parameter is not set")
		}
		if inst.SqrtPriceLimitTwo == nil {
			return errors.New("sqrtPriceLimitTwo parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 20 {
		return errors.New("accounts slice has wrong length: expected 20 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.WhirlpoolOne is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.WhirlpoolTwo is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenOwnerAccountOneA is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenVaultOneA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenOwnerAccountOneB is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenVaultOneB is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenOwnerAccountTwoA is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenVaultTwoA is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenOwnerAccountTwoB is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenVaultTwoB is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TickArrayOne0 is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TickArrayOne1 is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TickArrayOne2 is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TickArrayTwo0 is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TickArrayTwo1 is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.TickArrayTwo2 is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.OracleOne is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.OracleTwo is not set")
		}
	}
	return nil
}

func (inst *TwoHopSwap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TwoHopSwap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=7]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                   Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("     OtherAmountThreshold", *inst.OtherAmountThreshold))
						paramsBranch.Child(ag_format.Param("   AmountSpecifiedIsInput", *inst.AmountSpecifiedIsInput))
						paramsBranch.Child(ag_format.Param("                  AToBOne", *inst.AToBOne))
						paramsBranch.Child(ag_format.Param("                  AToBTwo", *inst.AToBTwo))
						paramsBranch.Child(ag_format.Param("        SqrtPriceLimitOne", *inst.SqrtPriceLimitOne))
						paramsBranch.Child(ag_format.Param("        SqrtPriceLimitTwo", *inst.SqrtPriceLimitTwo))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=20]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            token_program", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          token_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            whirlpool_one", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            whirlpool_two", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("token_owner_account_one_a", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        token_vault_one_a", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("token_owner_account_one_b", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        token_vault_one_b", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("token_owner_account_two_a", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        token_vault_two_a", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("token_owner_account_two_b", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        token_vault_two_b", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          tick_array_one0", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("          tick_array_one1", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("          tick_array_one2", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("          tick_array_two0", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("          tick_array_two1", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("          tick_array_two2", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("               oracle_one", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("               oracle_two", inst.AccountMetaSlice.Get(19)))
					})
				})
		})
}

func (obj TwoHopSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `OtherAmountThreshold` param:
	err = encoder.Encode(obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Serialize `AmountSpecifiedIsInput` param:
	err = encoder.Encode(obj.AmountSpecifiedIsInput)
	if err != nil {
		return err
	}
	// Serialize `AToBOne` param:
	err = encoder.Encode(obj.AToBOne)
	if err != nil {
		return err
	}
	// Serialize `AToBTwo` param:
	err = encoder.Encode(obj.AToBTwo)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceLimitOne` param:
	err = encoder.Encode(obj.SqrtPriceLimitOne)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceLimitTwo` param:
	err = encoder.Encode(obj.SqrtPriceLimitTwo)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TwoHopSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `OtherAmountThreshold`:
	err = decoder.Decode(&obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Deserialize `AmountSpecifiedIsInput`:
	err = decoder.Decode(&obj.AmountSpecifiedIsInput)
	if err != nil {
		return err
	}
	// Deserialize `AToBOne`:
	err = decoder.Decode(&obj.AToBOne)
	if err != nil {
		return err
	}
	// Deserialize `AToBTwo`:
	err = decoder.Decode(&obj.AToBTwo)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceLimitOne`:
	err = decoder.Decode(&obj.SqrtPriceLimitOne)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceLimitTwo`:
	err = decoder.Decode(&obj.SqrtPriceLimitTwo)
	if err != nil {
		return err
	}
	return nil
}

// NewTwoHopSwapInstruction declares a new TwoHopSwap instruction with the provided parameters and accounts.
func NewTwoHopSwapInstruction(
	// Parameters:
	amount uint64,
	other_amount_threshold uint64,
	amount_specified_is_input bool,
	a_to_b_one bool,
	a_to_b_two bool,
	sqrt_price_limit_one ag_binary.Uint128,
	sqrt_price_limit_two ag_binary.Uint128,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	tokenAuthority ag_solanago.PublicKey,
	whirlpoolOne ag_solanago.PublicKey,
	whirlpoolTwo ag_solanago.PublicKey,
	tokenOwnerAccountOneA ag_solanago.PublicKey,
	tokenVaultOneA ag_solanago.PublicKey,
	tokenOwnerAccountOneB ag_solanago.PublicKey,
	tokenVaultOneB ag_solanago.PublicKey,
	tokenOwnerAccountTwoA ag_solanago.PublicKey,
	tokenVaultTwoA ag_solanago.PublicKey,
	tokenOwnerAccountTwoB ag_solanago.PublicKey,
	tokenVaultTwoB ag_solanago.PublicKey,
	tickArrayOne0 ag_solanago.PublicKey,
	tickArrayOne1 ag_solanago.PublicKey,
	tickArrayOne2 ag_solanago.PublicKey,
	tickArrayTwo0 ag_solanago.PublicKey,
	tickArrayTwo1 ag_solanago.PublicKey,
	tickArrayTwo2 ag_solanago.PublicKey,
	oracleOne ag_solanago.PublicKey,
	oracleTwo ag_solanago.PublicKey) *TwoHopSwap {
	return NewTwoHopSwapInstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(other_amount_threshold).
		SetAmountSpecifiedIsInput(amount_specified_is_input).
		SetAToBOne(a_to_b_one).
		SetAToBTwo(a_to_b_two).
		SetSqrtPriceLimitOne(sqrt_price_limit_one).
		SetSqrtPriceLimitTwo(sqrt_price_limit_two).
		SetTokenProgramAccount(tokenProgram).
		SetTokenAuthorityAccount(tokenAuthority).
		SetWhirlpoolOneAccount(whirlpoolOne).
		SetWhirlpoolTwoAccount(whirlpoolTwo).
		SetTokenOwnerAccountOneAAccount(tokenOwnerAccountOneA).
		SetTokenVaultOneAAccount(tokenVaultOneA).
		SetTokenOwnerAccountOneBAccount(tokenOwnerAccountOneB).
		SetTokenVaultOneBAccount(tokenVaultOneB).
		SetTokenOwnerAccountTwoAAccount(tokenOwnerAccountTwoA).
		SetTokenVaultTwoAAccount(tokenVaultTwoA).
		SetTokenOwnerAccountTwoBAccount(tokenOwnerAccountTwoB).
		SetTokenVaultTwoBAccount(tokenVaultTwoB).
		SetTickArrayOne0Account(tickArrayOne0).
		SetTickArrayOne1Account(tickArrayOne1).
		SetTickArrayOne2Account(tickArrayOne2).
		SetTickArrayTwo0Account(tickArrayTwo0).
		SetTickArrayTwo1Account(tickArrayTwo1).
		SetTickArrayTwo2Account(tickArrayTwo2).
		SetOracleOneAccount(oracleOne).
		SetOracleTwoAccount(oracleTwo)
}

// NewSimpleTwoHopSwapInstruction declares a new TwoHopSwap instruction with the provided parameters and accounts.
func NewSimpleTwoHopSwapInstruction(
	// Parameters:
	amount uint64,
	other_amount_threshold uint64,
	amount_specified_is_input bool,
	a_to_b_one bool,
	a_to_b_two bool,
	sqrt_price_limit_one ag_binary.Uint128,
	sqrt_price_limit_two ag_binary.Uint128,
	// Accounts:
	tokenProgram ag_solanago.PublicKey,
	tokenAuthority ag_solanago.PublicKey,
	whirlpoolOne ag_solanago.PublicKey,
	whirlpoolTwo ag_solanago.PublicKey,
	tokenOwnerAccountOneA ag_solanago.PublicKey,
	tokenVaultOneA ag_solanago.PublicKey,
	tokenOwnerAccountOneB ag_solanago.PublicKey,
	tokenVaultOneB ag_solanago.PublicKey,
	tokenOwnerAccountTwoA ag_solanago.PublicKey,
	tokenVaultTwoA ag_solanago.PublicKey,
	tokenOwnerAccountTwoB ag_solanago.PublicKey,
	tokenVaultTwoB ag_solanago.PublicKey,
	tickArrayOne0 ag_solanago.PublicKey,
	tickArrayOne1 ag_solanago.PublicKey,
	tickArrayOne2 ag_solanago.PublicKey,
	tickArrayTwo0 ag_solanago.PublicKey,
	tickArrayTwo1 ag_solanago.PublicKey,
	tickArrayTwo2 ag_solanago.PublicKey,
	oracleOne ag_solanago.PublicKey,
	oracleTwo ag_solanago.PublicKey) *TwoHopSwap {
	return NewTwoHopSwapInstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(other_amount_threshold).
		SetAmountSpecifiedIsInput(amount_specified_is_input).
		SetAToBOne(a_to_b_one).
		SetAToBTwo(a_to_b_two).
		SetSqrtPriceLimitOne(sqrt_price_limit_one).
		SetSqrtPriceLimitTwo(sqrt_price_limit_two).
		SetTokenProgramAccount(tokenProgram).
		SetTokenAuthorityAccount(tokenAuthority).
		SetWhirlpoolOneAccount(whirlpoolOne).
		SetWhirlpoolTwoAccount(whirlpoolTwo).
		SetTokenOwnerAccountOneAAccount(tokenOwnerAccountOneA).
		SetTokenVaultOneAAccount(tokenVaultOneA).
		SetTokenOwnerAccountOneBAccount(tokenOwnerAccountOneB).
		SetTokenVaultOneBAccount(tokenVaultOneB).
		SetTokenOwnerAccountTwoAAccount(tokenOwnerAccountTwoA).
		SetTokenVaultTwoAAccount(tokenVaultTwoA).
		SetTokenOwnerAccountTwoBAccount(tokenOwnerAccountTwoB).
		SetTokenVaultTwoBAccount(tokenVaultTwoB).
		SetTickArrayOne0Account(tickArrayOne0).
		SetTickArrayOne1Account(tickArrayOne1).
		SetTickArrayOne2Account(tickArrayOne2).
		SetTickArrayTwo0Account(tickArrayTwo0).
		SetTickArrayTwo1Account(tickArrayTwo1).
		SetTickArrayTwo2Account(tickArrayTwo2).
		SetOracleOneAccount(oracleOne).
		SetOracleTwoAccount(oracleTwo)
}
