// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AdaptiveFeeConstants struct {
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	AdaptiveFeeControlFactor uint32
	MaxVolatilityAccumulator uint32
	TickGroupSize            uint16
	MajorSwapThresholdTicks  uint16
	Reserved                 [16]uint8
}

func (obj AdaptiveFeeConstants) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `AdaptiveFeeControlFactor` param:
	err = encoder.Encode(obj.AdaptiveFeeControlFactor)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `TickGroupSize` param:
	err = encoder.Encode(obj.TickGroupSize)
	if err != nil {
		return err
	}
	// Serialize `MajorSwapThresholdTicks` param:
	err = encoder.Encode(obj.MajorSwapThresholdTicks)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdaptiveFeeConstants) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `AdaptiveFeeControlFactor`:
	err = decoder.Decode(&obj.AdaptiveFeeControlFactor)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `TickGroupSize`:
	err = decoder.Decode(&obj.TickGroupSize)
	if err != nil {
		return err
	}
	// Deserialize `MajorSwapThresholdTicks`:
	err = decoder.Decode(&obj.MajorSwapThresholdTicks)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type AdaptiveFeeVariables struct {
	LastReferenceUpdateTimestamp uint64
	LastMajorSwapTimestamp       uint64
	VolatilityReference          uint32
	TickGroupIndexReference      int32
	VolatilityAccumulator        uint32
	Reserved                     [16]uint8
}

func (obj AdaptiveFeeVariables) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LastReferenceUpdateTimestamp` param:
	err = encoder.Encode(obj.LastReferenceUpdateTimestamp)
	if err != nil {
		return err
	}
	// Serialize `LastMajorSwapTimestamp` param:
	err = encoder.Encode(obj.LastMajorSwapTimestamp)
	if err != nil {
		return err
	}
	// Serialize `VolatilityReference` param:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return err
	}
	// Serialize `TickGroupIndexReference` param:
	err = encoder.Encode(obj.TickGroupIndexReference)
	if err != nil {
		return err
	}
	// Serialize `VolatilityAccumulator` param:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdaptiveFeeVariables) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LastReferenceUpdateTimestamp`:
	err = decoder.Decode(&obj.LastReferenceUpdateTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `LastMajorSwapTimestamp`:
	err = decoder.Decode(&obj.LastMajorSwapTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return err
	}
	// Deserialize `TickGroupIndexReference`:
	err = decoder.Decode(&obj.TickGroupIndexReference)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OpenPositionBumps struct {
	PositionBump uint8
}

func (obj OpenPositionBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionBump` param:
	err = encoder.Encode(obj.PositionBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenPositionBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionBump`:
	err = decoder.Decode(&obj.PositionBump)
	if err != nil {
		return err
	}
	return nil
}

type OpenPositionWithMetadataBumps struct {
	PositionBump uint8
	MetadataBump uint8
}

func (obj OpenPositionWithMetadataBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionBump` param:
	err = encoder.Encode(obj.PositionBump)
	if err != nil {
		return err
	}
	// Serialize `MetadataBump` param:
	err = encoder.Encode(obj.MetadataBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenPositionWithMetadataBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionBump`:
	err = decoder.Decode(&obj.PositionBump)
	if err != nil {
		return err
	}
	// Deserialize `MetadataBump`:
	err = decoder.Decode(&obj.MetadataBump)
	if err != nil {
		return err
	}
	return nil
}

type PositionRewardInfo struct {
	GrowthInsideCheckpoint ag_binary.Uint128
	AmountOwed             uint64
}

func (obj PositionRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `GrowthInsideCheckpoint` param:
	err = encoder.Encode(obj.GrowthInsideCheckpoint)
	if err != nil {
		return err
	}
	// Serialize `AmountOwed` param:
	err = encoder.Encode(obj.AmountOwed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `GrowthInsideCheckpoint`:
	err = decoder.Decode(&obj.GrowthInsideCheckpoint)
	if err != nil {
		return err
	}
	// Deserialize `AmountOwed`:
	err = decoder.Decode(&obj.AmountOwed)
	if err != nil {
		return err
	}
	return nil
}

type Tick struct {
	Initialized          bool
	LiquidityNet         ag_binary.Int128
	LiquidityGross       ag_binary.Uint128
	FeeGrowthOutsideA    ag_binary.Uint128
	FeeGrowthOutsideB    ag_binary.Uint128
	RewardGrowthsOutside [3]ag_binary.Uint128
}

func (obj Tick) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `LiquidityNet` param:
	err = encoder.Encode(obj.LiquidityNet)
	if err != nil {
		return err
	}
	// Serialize `LiquidityGross` param:
	err = encoder.Encode(obj.LiquidityGross)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthOutsideA` param:
	err = encoder.Encode(obj.FeeGrowthOutsideA)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthOutsideB` param:
	err = encoder.Encode(obj.FeeGrowthOutsideB)
	if err != nil {
		return err
	}
	// Serialize `RewardGrowthsOutside` param:
	err = encoder.Encode(obj.RewardGrowthsOutside)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Tick) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityNet`:
	err = decoder.Decode(&obj.LiquidityNet)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityGross`:
	err = decoder.Decode(&obj.LiquidityGross)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthOutsideA`:
	err = decoder.Decode(&obj.FeeGrowthOutsideA)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthOutsideB`:
	err = decoder.Decode(&obj.FeeGrowthOutsideB)
	if err != nil {
		return err
	}
	// Deserialize `RewardGrowthsOutside`:
	err = decoder.Decode(&obj.RewardGrowthsOutside)
	if err != nil {
		return err
	}
	return nil
}

type WhirlpoolRewardInfo struct {
	// Reward token mint.
	Mint ag_solanago.PublicKey

	// Reward vault token account.
	Vault ag_solanago.PublicKey

	// Authority account that has permission to initialize the reward and set emissions.
	Authority ag_solanago.PublicKey

	// Q64.64 number that indicates how many tokens per second are earned per unit of liquidity.
	EmissionsPerSecondX64 ag_binary.Uint128

	// Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward
	// emissions were turned on.
	GrowthGlobalX64 ag_binary.Uint128
}

func (obj WhirlpoolRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `EmissionsPerSecondX64` param:
	err = encoder.Encode(obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Serialize `GrowthGlobalX64` param:
	err = encoder.Encode(obj.GrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `EmissionsPerSecondX64`:
	err = decoder.Decode(&obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Deserialize `GrowthGlobalX64`:
	err = decoder.Decode(&obj.GrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

type WhirlpoolBumps struct {
	WhirlpoolBump uint8
}

func (obj WhirlpoolBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolBump` param:
	err = encoder.Encode(obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolBump`:
	err = decoder.Decode(&obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	return nil
}

type RemainingAccountsSlice struct {
	AccountsType AccountsType
	Length       uint8
}

func (obj RemainingAccountsSlice) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountsType` param:
	err = encoder.Encode(obj.AccountsType)
	if err != nil {
		return err
	}
	// Serialize `Length` param:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemainingAccountsSlice) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountsType`:
	err = decoder.Decode(&obj.AccountsType)
	if err != nil {
		return err
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return err
	}
	return nil
}

type RemainingAccountsInfo struct {
	Slices []RemainingAccountsSlice
}

func (obj RemainingAccountsInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Slices` param:
	err = encoder.Encode(obj.Slices)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemainingAccountsInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Slices`:
	err = decoder.Decode(&obj.Slices)
	if err != nil {
		return err
	}
	return nil
}

type FeeRateManager interface {
	isFeeRateManager()
}

type feeRateManagerContainer struct {
	Enum     ag_binary.BorshEnum `borsh_enum:"true"`
	Adaptive FeeRateManagerAdaptiveTuple
	Static   FeeRateManagerStaticTuple
}

type FeeRateManagerAdaptiveTuple struct {
	AToB                         bool
	TickGroupIndex               int32
	StaticFeeRate                uint16
	AdaptiveFeeConstants         AdaptiveFeeConstants
	AdaptiveFeeVariables         AdaptiveFeeVariables
	CoreTickGroupRangeLowerBound *i32u128 `bin:"optional"`
	CoreTickGroupRangeUpperBound *i32u128 `bin:"optional"`
}

func (obj FeeRateManagerAdaptiveTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	// Serialize `TickGroupIndex` param:
	err = encoder.Encode(obj.TickGroupIndex)
	if err != nil {
		return err
	}
	// Serialize `StaticFeeRate` param:
	err = encoder.Encode(obj.StaticFeeRate)
	if err != nil {
		return err
	}
	// Serialize `AdaptiveFeeConstants` param:
	err = encoder.Encode(obj.AdaptiveFeeConstants)
	if err != nil {
		return err
	}
	// Serialize `AdaptiveFeeVariables` param:
	err = encoder.Encode(obj.AdaptiveFeeVariables)
	if err != nil {
		return err
	}
	// Serialize `CoreTickGroupRangeLowerBound` param (optional):
	{
		if obj.CoreTickGroupRangeLowerBound == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CoreTickGroupRangeLowerBound)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CoreTickGroupRangeUpperBound` param (optional):
	{
		if obj.CoreTickGroupRangeUpperBound == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CoreTickGroupRangeUpperBound)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *FeeRateManagerAdaptiveTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	// Deserialize `TickGroupIndex`:
	err = decoder.Decode(&obj.TickGroupIndex)
	if err != nil {
		return err
	}
	// Deserialize `StaticFeeRate`:
	err = decoder.Decode(&obj.StaticFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `AdaptiveFeeConstants`:
	err = decoder.Decode(&obj.AdaptiveFeeConstants)
	if err != nil {
		return err
	}
	// Deserialize `AdaptiveFeeVariables`:
	err = decoder.Decode(&obj.AdaptiveFeeVariables)
	if err != nil {
		return err
	}
	// Deserialize `CoreTickGroupRangeLowerBound` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CoreTickGroupRangeLowerBound)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CoreTickGroupRangeUpperBound` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CoreTickGroupRangeUpperBound)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ FeeRateManagerAdaptiveTuple) isFeeRateManager() {}

type FeeRateManagerStaticTuple struct {
	StaticFeeRate uint16
}

func (obj FeeRateManagerStaticTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StaticFeeRate` param:
	err = encoder.Encode(obj.StaticFeeRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeRateManagerStaticTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StaticFeeRate`:
	err = decoder.Decode(&obj.StaticFeeRate)
	if err != nil {
		return err
	}
	return nil
}

func (_ FeeRateManagerStaticTuple) isFeeRateManager() {}

type AmountDeltaU64 interface {
	isAmountDeltaU64()
}

type amountDeltaU64Container struct {
	Enum       ag_binary.BorshEnum `borsh_enum:"true"`
	Valid      AmountDeltaU64ValidTuple
	ExceedsMax AmountDeltaU64ExceedsMaxTuple
}

type AmountDeltaU64ValidTuple struct {
	Elem0 uint64
}

func (_ AmountDeltaU64ValidTuple) isAmountDeltaU64() {}

type AmountDeltaU64ExceedsMaxTuple struct {
	Elem0 ErrorCode
}

func (_ AmountDeltaU64ExceedsMaxTuple) isAmountDeltaU64() {}

type LockType ag_binary.BorshEnum

const (
	LockTypePermanent LockType = iota
)

func (value LockType) String() string {
	switch value {
	case LockTypePermanent:
		return "Permanent"
	default:
		return ""
	}
}

type LockTypeLabel ag_binary.BorshEnum

const (
	LockTypeLabelPermanent LockTypeLabel = iota
)

func (value LockTypeLabel) String() string {
	switch value {
	case LockTypeLabelPermanent:
		return "Permanent"
	default:
		return ""
	}
}

type CurrIndex ag_binary.BorshEnum

const (
	CurrIndexBelow CurrIndex = iota
	CurrIndexInside
	CurrIndexAbove
)

func (value CurrIndex) String() string {
	switch value {
	case CurrIndexBelow:
		return "Below"
	case CurrIndexInside:
		return "Inside"
	case CurrIndexAbove:
		return "Above"
	default:
		return ""
	}
}

type TickLabel ag_binary.BorshEnum

const (
	TickLabelUpper TickLabel = iota
	TickLabelLower
)

func (value TickLabel) String() string {
	switch value {
	case TickLabelUpper:
		return "Upper"
	case TickLabelLower:
		return "Lower"
	default:
		return ""
	}
}

type Direction ag_binary.BorshEnum

const (
	DirectionLeft Direction = iota
	DirectionRight
)

func (value Direction) String() string {
	switch value {
	case DirectionLeft:
		return "Left"
	case DirectionRight:
		return "Right"
	default:
		return ""
	}
}

type AccountsType ag_binary.BorshEnum

const (
	AccountsTypeTransferHookA AccountsType = iota
	AccountsTypeTransferHookB
	AccountsTypeTransferHookReward
	AccountsTypeTransferHookInput
	AccountsTypeTransferHookIntermediate
	AccountsTypeTransferHookOutput
	AccountsTypeSupplementalTickArrays
	AccountsTypeSupplementalTickArraysOne
	AccountsTypeSupplementalTickArraysTwo
)

func (value AccountsType) String() string {
	switch value {
	case AccountsTypeTransferHookA:
		return "TransferHookA"
	case AccountsTypeTransferHookB:
		return "TransferHookB"
	case AccountsTypeTransferHookReward:
		return "TransferHookReward"
	case AccountsTypeTransferHookInput:
		return "TransferHookInput"
	case AccountsTypeTransferHookIntermediate:
		return "TransferHookIntermediate"
	case AccountsTypeTransferHookOutput:
		return "TransferHookOutput"
	case AccountsTypeSupplementalTickArrays:
		return "SupplementalTickArrays"
	case AccountsTypeSupplementalTickArraysOne:
		return "SupplementalTickArraysOne"
	case AccountsTypeSupplementalTickArraysTwo:
		return "SupplementalTickArraysTwo"
	default:
		return ""
	}
}

type AdaptiveFeeTier struct {
	WhirlpoolsConfig         ag_solanago.PublicKey
	FeeTierIndex             uint16
	TickSpacing              uint16
	InitializePoolAuthority  ag_solanago.PublicKey
	DelegatedFeeAuthority    ag_solanago.PublicKey
	DefaultBaseFeeRate       uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	AdaptiveFeeControlFactor uint32
	MaxVolatilityAccumulator uint32
	TickGroupSize            uint16
	MajorSwapThresholdTicks  uint16
}

func (obj AdaptiveFeeTier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `FeeTierIndex` param:
	err = encoder.Encode(obj.FeeTierIndex)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `InitializePoolAuthority` param:
	err = encoder.Encode(obj.InitializePoolAuthority)
	if err != nil {
		return err
	}
	// Serialize `DelegatedFeeAuthority` param:
	err = encoder.Encode(obj.DelegatedFeeAuthority)
	if err != nil {
		return err
	}
	// Serialize `DefaultBaseFeeRate` param:
	err = encoder.Encode(obj.DefaultBaseFeeRate)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `AdaptiveFeeControlFactor` param:
	err = encoder.Encode(obj.AdaptiveFeeControlFactor)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `TickGroupSize` param:
	err = encoder.Encode(obj.TickGroupSize)
	if err != nil {
		return err
	}
	// Serialize `MajorSwapThresholdTicks` param:
	err = encoder.Encode(obj.MajorSwapThresholdTicks)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AdaptiveFeeTier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `FeeTierIndex`:
	err = decoder.Decode(&obj.FeeTierIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `InitializePoolAuthority`:
	err = decoder.Decode(&obj.InitializePoolAuthority)
	if err != nil {
		return err
	}
	// Deserialize `DelegatedFeeAuthority`:
	err = decoder.Decode(&obj.DelegatedFeeAuthority)
	if err != nil {
		return err
	}
	// Deserialize `DefaultBaseFeeRate`:
	err = decoder.Decode(&obj.DefaultBaseFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `AdaptiveFeeControlFactor`:
	err = decoder.Decode(&obj.AdaptiveFeeControlFactor)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `TickGroupSize`:
	err = decoder.Decode(&obj.TickGroupSize)
	if err != nil {
		return err
	}
	// Deserialize `MajorSwapThresholdTicks`:
	err = decoder.Decode(&obj.MajorSwapThresholdTicks)
	if err != nil {
		return err
	}
	return nil
}

type WhirlpoolsConfigExtension struct {
	WhirlpoolsConfig         ag_solanago.PublicKey
	ConfigExtensionAuthority ag_solanago.PublicKey
	TokenBadgeAuthority      ag_solanago.PublicKey
}

func (obj WhirlpoolsConfigExtension) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `ConfigExtensionAuthority` param:
	err = encoder.Encode(obj.ConfigExtensionAuthority)
	if err != nil {
		return err
	}
	// Serialize `TokenBadgeAuthority` param:
	err = encoder.Encode(obj.TokenBadgeAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolsConfigExtension) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `ConfigExtensionAuthority`:
	err = decoder.Decode(&obj.ConfigExtensionAuthority)
	if err != nil {
		return err
	}
	// Deserialize `TokenBadgeAuthority`:
	err = decoder.Decode(&obj.TokenBadgeAuthority)
	if err != nil {
		return err
	}
	return nil
}

type WhirlpoolsConfig struct {
	FeeAuthority                  ag_solanago.PublicKey
	CollectProtocolFeesAuthority  ag_solanago.PublicKey
	RewardEmissionsSuperAuthority ag_solanago.PublicKey
	DefaultProtocolFeeRate        uint16
}

func (obj WhirlpoolsConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeAuthority` param:
	err = encoder.Encode(obj.FeeAuthority)
	if err != nil {
		return err
	}
	// Serialize `CollectProtocolFeesAuthority` param:
	err = encoder.Encode(obj.CollectProtocolFeesAuthority)
	if err != nil {
		return err
	}
	// Serialize `RewardEmissionsSuperAuthority` param:
	err = encoder.Encode(obj.RewardEmissionsSuperAuthority)
	if err != nil {
		return err
	}
	// Serialize `DefaultProtocolFeeRate` param:
	err = encoder.Encode(obj.DefaultProtocolFeeRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolsConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeAuthority`:
	err = decoder.Decode(&obj.FeeAuthority)
	if err != nil {
		return err
	}
	// Deserialize `CollectProtocolFeesAuthority`:
	err = decoder.Decode(&obj.CollectProtocolFeesAuthority)
	if err != nil {
		return err
	}
	// Deserialize `RewardEmissionsSuperAuthority`:
	err = decoder.Decode(&obj.RewardEmissionsSuperAuthority)
	if err != nil {
		return err
	}
	// Deserialize `DefaultProtocolFeeRate`:
	err = decoder.Decode(&obj.DefaultProtocolFeeRate)
	if err != nil {
		return err
	}
	return nil
}

type FeeTier struct {
	WhirlpoolsConfig ag_solanago.PublicKey
	TickSpacing      uint16
	DefaultFeeRate   uint16
}

func (obj FeeTier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `DefaultFeeRate` param:
	err = encoder.Encode(obj.DefaultFeeRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `DefaultFeeRate`:
	err = decoder.Decode(&obj.DefaultFeeRate)
	if err != nil {
		return err
	}
	return nil
}

type LockConfig struct {
	Position        ag_solanago.PublicKey
	PositionOwner   ag_solanago.PublicKey
	Whirlpool       ag_solanago.PublicKey
	LockedTimestamp uint64
	LockType        LockTypeLabel
}

func (obj LockConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `PositionOwner` param:
	err = encoder.Encode(obj.PositionOwner)
	if err != nil {
		return err
	}
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `LockedTimestamp` param:
	err = encoder.Encode(obj.LockedTimestamp)
	if err != nil {
		return err
	}
	// Serialize `LockType` param:
	err = encoder.Encode(obj.LockType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `PositionOwner`:
	err = decoder.Decode(&obj.PositionOwner)
	if err != nil {
		return err
	}
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `LockedTimestamp`:
	err = decoder.Decode(&obj.LockedTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `LockType`:
	err = decoder.Decode(&obj.LockType)
	if err != nil {
		return err
	}
	return nil
}

type Oracle struct {
	Whirlpool            ag_solanago.PublicKey
	TradeEnableTimestamp uint64
	AdaptiveFeeConstants AdaptiveFeeConstants
	AdaptiveFeeVariables AdaptiveFeeVariables
	Reserved             [128]uint8
}

func (obj Oracle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `TradeEnableTimestamp` param:
	err = encoder.Encode(obj.TradeEnableTimestamp)
	if err != nil {
		return err
	}
	// Serialize `AdaptiveFeeConstants` param:
	err = encoder.Encode(obj.AdaptiveFeeConstants)
	if err != nil {
		return err
	}
	// Serialize `AdaptiveFeeVariables` param:
	err = encoder.Encode(obj.AdaptiveFeeVariables)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Oracle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `TradeEnableTimestamp`:
	err = decoder.Decode(&obj.TradeEnableTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `AdaptiveFeeConstants`:
	err = decoder.Decode(&obj.AdaptiveFeeConstants)
	if err != nil {
		return err
	}
	// Deserialize `AdaptiveFeeVariables`:
	err = decoder.Decode(&obj.AdaptiveFeeVariables)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type PositionBundle struct {
	PositionBundleMint ag_solanago.PublicKey
	PositionBitmap     [32]uint8
}

func (obj PositionBundle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionBundleMint` param:
	err = encoder.Encode(obj.PositionBundleMint)
	if err != nil {
		return err
	}
	// Serialize `PositionBitmap` param:
	err = encoder.Encode(obj.PositionBitmap)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionBundle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionBundleMint`:
	err = decoder.Decode(&obj.PositionBundleMint)
	if err != nil {
		return err
	}
	// Deserialize `PositionBitmap`:
	err = decoder.Decode(&obj.PositionBitmap)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	Whirlpool            ag_solanago.PublicKey
	PositionMint         ag_solanago.PublicKey
	Liquidity            ag_binary.Uint128
	TickLowerIndex       int32
	TickUpperIndex       int32
	FeeGrowthCheckpointA ag_binary.Uint128
	FeeOwedA             uint64
	FeeGrowthCheckpointB ag_binary.Uint128
	FeeOwedB             uint64
	RewardInfos          [3]PositionRewardInfo
}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `PositionMint` param:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthCheckpointA` param:
	err = encoder.Encode(obj.FeeGrowthCheckpointA)
	if err != nil {
		return err
	}
	// Serialize `FeeOwedA` param:
	err = encoder.Encode(obj.FeeOwedA)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthCheckpointB` param:
	err = encoder.Encode(obj.FeeGrowthCheckpointB)
	if err != nil {
		return err
	}
	// Serialize `FeeOwedB` param:
	err = encoder.Encode(obj.FeeOwedB)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthCheckpointA`:
	err = decoder.Decode(&obj.FeeGrowthCheckpointA)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwedA`:
	err = decoder.Decode(&obj.FeeOwedA)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthCheckpointB`:
	err = decoder.Decode(&obj.FeeGrowthCheckpointB)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwedB`:
	err = decoder.Decode(&obj.FeeOwedB)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

type TickArray struct {
	StartTickIndex int32
	Ticks          [88]Tick
	Whirlpool      ag_solanago.PublicKey
}

func (obj TickArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StartTickIndex` param:
	err = encoder.Encode(obj.StartTickIndex)
	if err != nil {
		return err
	}
	// Serialize `Ticks` param:
	err = encoder.Encode(obj.Ticks)
	if err != nil {
		return err
	}
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TickArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StartTickIndex`:
	err = decoder.Decode(&obj.StartTickIndex)
	if err != nil {
		return err
	}
	// Deserialize `Ticks`:
	err = decoder.Decode(&obj.Ticks)
	if err != nil {
		return err
	}
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	return nil
}

type TokenBadge struct {
	WhirlpoolsConfig ag_solanago.PublicKey
	TokenMint        ag_solanago.PublicKey
}

func (obj TokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

type Whirlpool struct {
	WhirlpoolsConfig           ag_solanago.PublicKey
	WhirlpoolBump              [1]uint8
	TickSpacing                uint16
	FeeTierIndexSeed           [2]uint8
	FeeRate                    uint16
	ProtocolFeeRate            uint16
	Liquidity                  ag_binary.Uint128
	SqrtPrice                  ag_binary.Uint128
	TickCurrentIndex           int32
	ProtocolFeeOwedA           uint64
	ProtocolFeeOwedB           uint64
	TokenMintA                 ag_solanago.PublicKey
	TokenVaultA                ag_solanago.PublicKey
	FeeGrowthGlobalA           ag_binary.Uint128
	TokenMintB                 ag_solanago.PublicKey
	TokenVaultB                ag_solanago.PublicKey
	FeeGrowthGlobalB           ag_binary.Uint128
	RewardLastUpdatedTimestamp uint64
	RewardInfos                [3]WhirlpoolRewardInfo
}

func (obj Whirlpool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `WhirlpoolBump` param:
	err = encoder.Encode(obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `FeeTierIndexSeed` param:
	err = encoder.Encode(obj.FeeTierIndexSeed)
	if err != nil {
		return err
	}
	// Serialize `FeeRate` param:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `TickCurrentIndex` param:
	err = encoder.Encode(obj.TickCurrentIndex)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeOwedA` param:
	err = encoder.Encode(obj.ProtocolFeeOwedA)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeOwedB` param:
	err = encoder.Encode(obj.ProtocolFeeOwedB)
	if err != nil {
		return err
	}
	// Serialize `TokenMintA` param:
	err = encoder.Encode(obj.TokenMintA)
	if err != nil {
		return err
	}
	// Serialize `TokenVaultA` param:
	err = encoder.Encode(obj.TokenVaultA)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthGlobalA` param:
	err = encoder.Encode(obj.FeeGrowthGlobalA)
	if err != nil {
		return err
	}
	// Serialize `TokenMintB` param:
	err = encoder.Encode(obj.TokenMintB)
	if err != nil {
		return err
	}
	// Serialize `TokenVaultB` param:
	err = encoder.Encode(obj.TokenVaultB)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthGlobalB` param:
	err = encoder.Encode(obj.FeeGrowthGlobalB)
	if err != nil {
		return err
	}
	// Serialize `RewardLastUpdatedTimestamp` param:
	err = encoder.Encode(obj.RewardLastUpdatedTimestamp)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Whirlpool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `WhirlpoolBump`:
	err = decoder.Decode(&obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `FeeTierIndexSeed`:
	err = decoder.Decode(&obj.FeeTierIndexSeed)
	if err != nil {
		return err
	}
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `TickCurrentIndex`:
	err = decoder.Decode(&obj.TickCurrentIndex)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeOwedA`:
	err = decoder.Decode(&obj.ProtocolFeeOwedA)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeOwedB`:
	err = decoder.Decode(&obj.ProtocolFeeOwedB)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintA`:
	err = decoder.Decode(&obj.TokenMintA)
	if err != nil {
		return err
	}
	// Deserialize `TokenVaultA`:
	err = decoder.Decode(&obj.TokenVaultA)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthGlobalA`:
	err = decoder.Decode(&obj.FeeGrowthGlobalA)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintB`:
	err = decoder.Decode(&obj.TokenMintB)
	if err != nil {
		return err
	}
	// Deserialize `TokenVaultB`:
	err = decoder.Decode(&obj.TokenVaultB)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthGlobalB`:
	err = decoder.Decode(&obj.FeeGrowthGlobalB)
	if err != nil {
		return err
	}
	// Deserialize `RewardLastUpdatedTimestamp`:
	err = decoder.Decode(&obj.RewardLastUpdatedTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

type PoolInitialized struct {
	Whirlpool        ag_solanago.PublicKey
	WhirlpoolsConfig ag_solanago.PublicKey
	TokenMintA       ag_solanago.PublicKey
	TokenMintB       ag_solanago.PublicKey
	TickSpacing      uint16
	TokenProgramA    ag_solanago.PublicKey
	TokenProgramB    ag_solanago.PublicKey
	DecimalsA        uint8
	DecimalsB        uint8
	InitialSqrtPrice ag_binary.Uint128
}

func (obj PoolInitialized) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `TokenMintA` param:
	err = encoder.Encode(obj.TokenMintA)
	if err != nil {
		return err
	}
	// Serialize `TokenMintB` param:
	err = encoder.Encode(obj.TokenMintB)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `TokenProgramA` param:
	err = encoder.Encode(obj.TokenProgramA)
	if err != nil {
		return err
	}
	// Serialize `TokenProgramB` param:
	err = encoder.Encode(obj.TokenProgramB)
	if err != nil {
		return err
	}
	// Serialize `DecimalsA` param:
	err = encoder.Encode(obj.DecimalsA)
	if err != nil {
		return err
	}
	// Serialize `DecimalsB` param:
	err = encoder.Encode(obj.DecimalsB)
	if err != nil {
		return err
	}
	// Serialize `InitialSqrtPrice` param:
	err = encoder.Encode(obj.InitialSqrtPrice)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolInitialized) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintA`:
	err = decoder.Decode(&obj.TokenMintA)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintB`:
	err = decoder.Decode(&obj.TokenMintB)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgramA`:
	err = decoder.Decode(&obj.TokenProgramA)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgramB`:
	err = decoder.Decode(&obj.TokenProgramB)
	if err != nil {
		return err
	}
	// Deserialize `DecimalsA`:
	err = decoder.Decode(&obj.DecimalsA)
	if err != nil {
		return err
	}
	// Deserialize `DecimalsB`:
	err = decoder.Decode(&obj.DecimalsB)
	if err != nil {
		return err
	}
	// Deserialize `InitialSqrtPrice`:
	err = decoder.Decode(&obj.InitialSqrtPrice)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityIncreased struct {
	Whirlpool         ag_solanago.PublicKey
	Position          ag_solanago.PublicKey
	TickLowerIndex    int32
	TickUpperIndex    int32
	Liquidity         ag_binary.Uint128
	TokenAAmount      uint64
	TokenBAmount      uint64
	TokenATransferFee uint64
	TokenBTransferFee uint64
}

func (obj LiquidityIncreased) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenATransferFee` param:
	err = encoder.Encode(obj.TokenATransferFee)
	if err != nil {
		return err
	}
	// Serialize `TokenBTransferFee` param:
	err = encoder.Encode(obj.TokenBTransferFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityIncreased) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenATransferFee`:
	err = decoder.Decode(&obj.TokenATransferFee)
	if err != nil {
		return err
	}
	// Deserialize `TokenBTransferFee`:
	err = decoder.Decode(&obj.TokenBTransferFee)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityDecreased struct {
	Whirlpool         ag_solanago.PublicKey
	Position          ag_solanago.PublicKey
	TickLowerIndex    int32
	TickUpperIndex    int32
	Liquidity         ag_binary.Uint128
	TokenAAmount      uint64
	TokenBAmount      uint64
	TokenATransferFee uint64
	TokenBTransferFee uint64
}

func (obj LiquidityDecreased) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenATransferFee` param:
	err = encoder.Encode(obj.TokenATransferFee)
	if err != nil {
		return err
	}
	// Serialize `TokenBTransferFee` param:
	err = encoder.Encode(obj.TokenBTransferFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityDecreased) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenATransferFee`:
	err = decoder.Decode(&obj.TokenATransferFee)
	if err != nil {
		return err
	}
	// Deserialize `TokenBTransferFee`:
	err = decoder.Decode(&obj.TokenBTransferFee)
	if err != nil {
		return err
	}
	return nil
}

type Traded struct {
	Whirlpool         ag_solanago.PublicKey
	AToB              bool
	PreSqrtPrice      ag_binary.Uint128
	PostSqrtPrice     ag_binary.Uint128
	InputAmount       uint64
	OutputAmount      uint64
	InputTransferFee  uint64
	OutputTransferFee uint64
	LpFee             uint64
	ProtocolFee       uint64
}

func (obj Traded) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	// Serialize `PreSqrtPrice` param:
	err = encoder.Encode(obj.PreSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `PostSqrtPrice` param:
	err = encoder.Encode(obj.PostSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `InputAmount` param:
	err = encoder.Encode(obj.InputAmount)
	if err != nil {
		return err
	}
	// Serialize `OutputAmount` param:
	err = encoder.Encode(obj.OutputAmount)
	if err != nil {
		return err
	}
	// Serialize `InputTransferFee` param:
	err = encoder.Encode(obj.InputTransferFee)
	if err != nil {
		return err
	}
	// Serialize `OutputTransferFee` param:
	err = encoder.Encode(obj.OutputTransferFee)
	if err != nil {
		return err
	}
	// Serialize `LpFee` param:
	err = encoder.Encode(obj.LpFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Traded) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	// Deserialize `PreSqrtPrice`:
	err = decoder.Decode(&obj.PreSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `PostSqrtPrice`:
	err = decoder.Decode(&obj.PostSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `InputAmount`:
	err = decoder.Decode(&obj.InputAmount)
	if err != nil {
		return err
	}
	// Deserialize `OutputAmount`:
	err = decoder.Decode(&obj.OutputAmount)
	if err != nil {
		return err
	}
	// Deserialize `InputTransferFee`:
	err = decoder.Decode(&obj.InputTransferFee)
	if err != nil {
		return err
	}
	// Deserialize `OutputTransferFee`:
	err = decoder.Decode(&obj.OutputTransferFee)
	if err != nil {
		return err
	}
	// Deserialize `LpFee`:
	err = decoder.Decode(&obj.LpFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	return nil
}
