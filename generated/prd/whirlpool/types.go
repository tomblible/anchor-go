// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package whirlpool

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type LockType ag_binary.BorshEnum

const (
	LockTypePermanent LockType = iota
)

func (value LockType) String() string {
	switch value {
	case LockTypePermanent:
		return "Permanent"
	default:
		return ""
	}
}

type LockTypeLabel ag_binary.BorshEnum

const (
	LockTypeLabelPermanent LockTypeLabel = iota
)

func (value LockTypeLabel) String() string {
	switch value {
	case LockTypeLabelPermanent:
		return "Permanent"
	default:
		return ""
	}
}

type OpenPositionBumps struct {
	PositionBump uint8
}

func (obj OpenPositionBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionBump` param:
	err = encoder.Encode(obj.PositionBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenPositionBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionBump`:
	err = decoder.Decode(&obj.PositionBump)
	if err != nil {
		return err
	}
	return nil
}

type OpenPositionWithMetadataBumps struct {
	PositionBump uint8
	MetadataBump uint8
}

func (obj OpenPositionWithMetadataBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionBump` param:
	err = encoder.Encode(obj.PositionBump)
	if err != nil {
		return err
	}
	// Serialize `MetadataBump` param:
	err = encoder.Encode(obj.MetadataBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenPositionWithMetadataBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionBump`:
	err = decoder.Decode(&obj.PositionBump)
	if err != nil {
		return err
	}
	// Deserialize `MetadataBump`:
	err = decoder.Decode(&obj.MetadataBump)
	if err != nil {
		return err
	}
	return nil
}

type PositionRewardInfo struct {
	GrowthInsideCheckpoint ag_binary.Uint128
	AmountOwed             uint64
}

func (obj PositionRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `GrowthInsideCheckpoint` param:
	err = encoder.Encode(obj.GrowthInsideCheckpoint)
	if err != nil {
		return err
	}
	// Serialize `AmountOwed` param:
	err = encoder.Encode(obj.AmountOwed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `GrowthInsideCheckpoint`:
	err = decoder.Decode(&obj.GrowthInsideCheckpoint)
	if err != nil {
		return err
	}
	// Deserialize `AmountOwed`:
	err = decoder.Decode(&obj.AmountOwed)
	if err != nil {
		return err
	}
	return nil
}

type Tick struct {
	Initialized          bool
	LiquidityNet         ag_binary.Int128
	LiquidityGross       ag_binary.Uint128
	FeeGrowthOutsideA    ag_binary.Uint128
	FeeGrowthOutsideB    ag_binary.Uint128
	RewardGrowthsOutside [3]ag_binary.Uint128
}

func (obj Tick) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `LiquidityNet` param:
	err = encoder.Encode(obj.LiquidityNet)
	if err != nil {
		return err
	}
	// Serialize `LiquidityGross` param:
	err = encoder.Encode(obj.LiquidityGross)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthOutsideA` param:
	err = encoder.Encode(obj.FeeGrowthOutsideA)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthOutsideB` param:
	err = encoder.Encode(obj.FeeGrowthOutsideB)
	if err != nil {
		return err
	}
	// Serialize `RewardGrowthsOutside` param:
	err = encoder.Encode(obj.RewardGrowthsOutside)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Tick) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityNet`:
	err = decoder.Decode(&obj.LiquidityNet)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityGross`:
	err = decoder.Decode(&obj.LiquidityGross)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthOutsideA`:
	err = decoder.Decode(&obj.FeeGrowthOutsideA)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthOutsideB`:
	err = decoder.Decode(&obj.FeeGrowthOutsideB)
	if err != nil {
		return err
	}
	// Deserialize `RewardGrowthsOutside`:
	err = decoder.Decode(&obj.RewardGrowthsOutside)
	if err != nil {
		return err
	}
	return nil
}

type WhirlpoolBumps struct {
	WhirlpoolBump uint8
}

func (obj WhirlpoolBumps) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolBump` param:
	err = encoder.Encode(obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolBumps) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolBump`:
	err = decoder.Decode(&obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	return nil
}

type WhirlpoolRewardInfo struct {
	Mint                  ag_solanago.PublicKey
	Vault                 ag_solanago.PublicKey
	Authority             ag_solanago.PublicKey
	EmissionsPerSecondX64 ag_binary.Uint128
	GrowthGlobalX64       ag_binary.Uint128
}

func (obj WhirlpoolRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `EmissionsPerSecondX64` param:
	err = encoder.Encode(obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Serialize `GrowthGlobalX64` param:
	err = encoder.Encode(obj.GrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `EmissionsPerSecondX64`:
	err = decoder.Decode(&obj.EmissionsPerSecondX64)
	if err != nil {
		return err
	}
	// Deserialize `GrowthGlobalX64`:
	err = decoder.Decode(&obj.GrowthGlobalX64)
	if err != nil {
		return err
	}
	return nil
}

type AccountsType ag_binary.BorshEnum

const (
	AccountsTypeTransferHookA AccountsType = iota
	AccountsTypeTransferHookB
	AccountsTypeTransferHookReward
	AccountsTypeTransferHookInput
	AccountsTypeTransferHookIntermediate
	AccountsTypeTransferHookOutput
	AccountsTypeSupplementalTickArrays
	AccountsTypeSupplementalTickArraysOne
	AccountsTypeSupplementalTickArraysTwo
)

func (value AccountsType) String() string {
	switch value {
	case AccountsTypeTransferHookA:
		return "TransferHookA"
	case AccountsTypeTransferHookB:
		return "TransferHookB"
	case AccountsTypeTransferHookReward:
		return "TransferHookReward"
	case AccountsTypeTransferHookInput:
		return "TransferHookInput"
	case AccountsTypeTransferHookIntermediate:
		return "TransferHookIntermediate"
	case AccountsTypeTransferHookOutput:
		return "TransferHookOutput"
	case AccountsTypeSupplementalTickArrays:
		return "SupplementalTickArrays"
	case AccountsTypeSupplementalTickArraysOne:
		return "SupplementalTickArraysOne"
	case AccountsTypeSupplementalTickArraysTwo:
		return "SupplementalTickArraysTwo"
	default:
		return ""
	}
}

type RemainingAccountsInfo struct {
	Slices []RemainingAccountsSlice
}

func (obj RemainingAccountsInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Slices` param:
	err = encoder.Encode(obj.Slices)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemainingAccountsInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Slices`:
	err = decoder.Decode(&obj.Slices)
	if err != nil {
		return err
	}
	return nil
}

type RemainingAccountsSlice struct {
	AccountsType AccountsType
	Length       uint8
}

func (obj RemainingAccountsSlice) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountsType` param:
	err = encoder.Encode(obj.AccountsType)
	if err != nil {
		return err
	}
	// Serialize `Length` param:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemainingAccountsSlice) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountsType`:
	err = decoder.Decode(&obj.AccountsType)
	if err != nil {
		return err
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return err
	}
	return nil
}

type WhirlpoolsConfig struct {
	FeeAuthority                  ag_solanago.PublicKey
	CollectProtocolFeesAuthority  ag_solanago.PublicKey
	RewardEmissionsSuperAuthority ag_solanago.PublicKey
	DefaultProtocolFeeRate        uint16
}

func (obj WhirlpoolsConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeAuthority` param:
	err = encoder.Encode(obj.FeeAuthority)
	if err != nil {
		return err
	}
	// Serialize `CollectProtocolFeesAuthority` param:
	err = encoder.Encode(obj.CollectProtocolFeesAuthority)
	if err != nil {
		return err
	}
	// Serialize `RewardEmissionsSuperAuthority` param:
	err = encoder.Encode(obj.RewardEmissionsSuperAuthority)
	if err != nil {
		return err
	}
	// Serialize `DefaultProtocolFeeRate` param:
	err = encoder.Encode(obj.DefaultProtocolFeeRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolsConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeAuthority`:
	err = decoder.Decode(&obj.FeeAuthority)
	if err != nil {
		return err
	}
	// Deserialize `CollectProtocolFeesAuthority`:
	err = decoder.Decode(&obj.CollectProtocolFeesAuthority)
	if err != nil {
		return err
	}
	// Deserialize `RewardEmissionsSuperAuthority`:
	err = decoder.Decode(&obj.RewardEmissionsSuperAuthority)
	if err != nil {
		return err
	}
	// Deserialize `DefaultProtocolFeeRate`:
	err = decoder.Decode(&obj.DefaultProtocolFeeRate)
	if err != nil {
		return err
	}
	return nil
}

type WhirlpoolsConfigExtension struct {
	WhirlpoolsConfig         ag_solanago.PublicKey
	ConfigExtensionAuthority ag_solanago.PublicKey
	TokenBadgeAuthority      ag_solanago.PublicKey
}

func (obj WhirlpoolsConfigExtension) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `ConfigExtensionAuthority` param:
	err = encoder.Encode(obj.ConfigExtensionAuthority)
	if err != nil {
		return err
	}
	// Serialize `TokenBadgeAuthority` param:
	err = encoder.Encode(obj.TokenBadgeAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WhirlpoolsConfigExtension) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `ConfigExtensionAuthority`:
	err = decoder.Decode(&obj.ConfigExtensionAuthority)
	if err != nil {
		return err
	}
	// Deserialize `TokenBadgeAuthority`:
	err = decoder.Decode(&obj.TokenBadgeAuthority)
	if err != nil {
		return err
	}
	return nil
}

type FeeTier struct {
	WhirlpoolsConfig ag_solanago.PublicKey
	TickSpacing      uint16
	DefaultFeeRate   uint16
}

func (obj FeeTier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `DefaultFeeRate` param:
	err = encoder.Encode(obj.DefaultFeeRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeTier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `DefaultFeeRate`:
	err = decoder.Decode(&obj.DefaultFeeRate)
	if err != nil {
		return err
	}
	return nil
}

type LockConfig struct {
	Position        ag_solanago.PublicKey
	PositionOwner   ag_solanago.PublicKey
	Whirlpool       ag_solanago.PublicKey
	LockedTimestamp uint64
	LockType        LockTypeLabel
}

func (obj LockConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `PositionOwner` param:
	err = encoder.Encode(obj.PositionOwner)
	if err != nil {
		return err
	}
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `LockedTimestamp` param:
	err = encoder.Encode(obj.LockedTimestamp)
	if err != nil {
		return err
	}
	// Serialize `LockType` param:
	err = encoder.Encode(obj.LockType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `PositionOwner`:
	err = decoder.Decode(&obj.PositionOwner)
	if err != nil {
		return err
	}
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `LockedTimestamp`:
	err = decoder.Decode(&obj.LockedTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `LockType`:
	err = decoder.Decode(&obj.LockType)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	Whirlpool            ag_solanago.PublicKey
	PositionMint         ag_solanago.PublicKey
	Liquidity            ag_binary.Uint128
	TickLowerIndex       int32
	TickUpperIndex       int32
	FeeGrowthCheckpointA ag_binary.Uint128
	FeeOwedA             uint64
	FeeGrowthCheckpointB ag_binary.Uint128
	FeeOwedB             uint64
	RewardInfos          [3]PositionRewardInfo
}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `PositionMint` param:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthCheckpointA` param:
	err = encoder.Encode(obj.FeeGrowthCheckpointA)
	if err != nil {
		return err
	}
	// Serialize `FeeOwedA` param:
	err = encoder.Encode(obj.FeeOwedA)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthCheckpointB` param:
	err = encoder.Encode(obj.FeeGrowthCheckpointB)
	if err != nil {
		return err
	}
	// Serialize `FeeOwedB` param:
	err = encoder.Encode(obj.FeeOwedB)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthCheckpointA`:
	err = decoder.Decode(&obj.FeeGrowthCheckpointA)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwedA`:
	err = decoder.Decode(&obj.FeeOwedA)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthCheckpointB`:
	err = decoder.Decode(&obj.FeeGrowthCheckpointB)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwedB`:
	err = decoder.Decode(&obj.FeeOwedB)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

type PositionBundle struct {
	PositionBundleMint ag_solanago.PublicKey
	PositionBitmap     [32]uint8
}

func (obj PositionBundle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PositionBundleMint` param:
	err = encoder.Encode(obj.PositionBundleMint)
	if err != nil {
		return err
	}
	// Serialize `PositionBitmap` param:
	err = encoder.Encode(obj.PositionBitmap)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionBundle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PositionBundleMint`:
	err = decoder.Decode(&obj.PositionBundleMint)
	if err != nil {
		return err
	}
	// Deserialize `PositionBitmap`:
	err = decoder.Decode(&obj.PositionBitmap)
	if err != nil {
		return err
	}
	return nil
}

type TickArray struct {
	StartTickIndex int32
	Ticks          [88]Tick
	Whirlpool      ag_solanago.PublicKey
}

func (obj TickArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StartTickIndex` param:
	err = encoder.Encode(obj.StartTickIndex)
	if err != nil {
		return err
	}
	// Serialize `Ticks` param:
	err = encoder.Encode(obj.Ticks)
	if err != nil {
		return err
	}
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TickArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StartTickIndex`:
	err = decoder.Decode(&obj.StartTickIndex)
	if err != nil {
		return err
	}
	// Deserialize `Ticks`:
	err = decoder.Decode(&obj.Ticks)
	if err != nil {
		return err
	}
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	return nil
}

type TokenBadge struct {
	WhirlpoolsConfig ag_solanago.PublicKey
	TokenMint        ag_solanago.PublicKey
}

func (obj TokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

type Whirlpool struct {
	WhirlpoolsConfig           ag_solanago.PublicKey
	WhirlpoolBump              [1]uint8
	TickSpacing                uint16
	TickSpacingSeed            [2]uint8
	FeeRate                    uint16
	ProtocolFeeRate            uint16
	Liquidity                  ag_binary.Uint128
	SqrtPrice                  ag_binary.Uint128
	TickCurrentIndex           int32
	ProtocolFeeOwedA           uint64
	ProtocolFeeOwedB           uint64
	TokenMintA                 ag_solanago.PublicKey
	TokenVaultA                ag_solanago.PublicKey
	FeeGrowthGlobalA           ag_binary.Uint128
	TokenMintB                 ag_solanago.PublicKey
	TokenVaultB                ag_solanago.PublicKey
	FeeGrowthGlobalB           ag_binary.Uint128
	RewardLastUpdatedTimestamp uint64
	RewardInfos                [3]WhirlpoolRewardInfo
}

func (obj Whirlpool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `WhirlpoolBump` param:
	err = encoder.Encode(obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `TickSpacingSeed` param:
	err = encoder.Encode(obj.TickSpacingSeed)
	if err != nil {
		return err
	}
	// Serialize `FeeRate` param:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeRate` param:
	err = encoder.Encode(obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `TickCurrentIndex` param:
	err = encoder.Encode(obj.TickCurrentIndex)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeOwedA` param:
	err = encoder.Encode(obj.ProtocolFeeOwedA)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeeOwedB` param:
	err = encoder.Encode(obj.ProtocolFeeOwedB)
	if err != nil {
		return err
	}
	// Serialize `TokenMintA` param:
	err = encoder.Encode(obj.TokenMintA)
	if err != nil {
		return err
	}
	// Serialize `TokenVaultA` param:
	err = encoder.Encode(obj.TokenVaultA)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthGlobalA` param:
	err = encoder.Encode(obj.FeeGrowthGlobalA)
	if err != nil {
		return err
	}
	// Serialize `TokenMintB` param:
	err = encoder.Encode(obj.TokenMintB)
	if err != nil {
		return err
	}
	// Serialize `TokenVaultB` param:
	err = encoder.Encode(obj.TokenVaultB)
	if err != nil {
		return err
	}
	// Serialize `FeeGrowthGlobalB` param:
	err = encoder.Encode(obj.FeeGrowthGlobalB)
	if err != nil {
		return err
	}
	// Serialize `RewardLastUpdatedTimestamp` param:
	err = encoder.Encode(obj.RewardLastUpdatedTimestamp)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Whirlpool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `WhirlpoolBump`:
	err = decoder.Decode(&obj.WhirlpoolBump)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacingSeed`:
	err = decoder.Decode(&obj.TickSpacingSeed)
	if err != nil {
		return err
	}
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeRate`:
	err = decoder.Decode(&obj.ProtocolFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `TickCurrentIndex`:
	err = decoder.Decode(&obj.TickCurrentIndex)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeOwedA`:
	err = decoder.Decode(&obj.ProtocolFeeOwedA)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeeOwedB`:
	err = decoder.Decode(&obj.ProtocolFeeOwedB)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintA`:
	err = decoder.Decode(&obj.TokenMintA)
	if err != nil {
		return err
	}
	// Deserialize `TokenVaultA`:
	err = decoder.Decode(&obj.TokenVaultA)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthGlobalA`:
	err = decoder.Decode(&obj.FeeGrowthGlobalA)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintB`:
	err = decoder.Decode(&obj.TokenMintB)
	if err != nil {
		return err
	}
	// Deserialize `TokenVaultB`:
	err = decoder.Decode(&obj.TokenVaultB)
	if err != nil {
		return err
	}
	// Deserialize `FeeGrowthGlobalB`:
	err = decoder.Decode(&obj.FeeGrowthGlobalB)
	if err != nil {
		return err
	}
	// Deserialize `RewardLastUpdatedTimestamp`:
	err = decoder.Decode(&obj.RewardLastUpdatedTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityDecreased struct {
	Whirlpool         ag_solanago.PublicKey
	Position          ag_solanago.PublicKey
	TickLowerIndex    int32
	TickUpperIndex    int32
	Liquidity         ag_binary.Uint128
	TokenAAmount      uint64
	TokenBAmount      uint64
	TokenATransferFee uint64
	TokenBTransferFee uint64
}

func (obj LiquidityDecreased) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenATransferFee` param:
	err = encoder.Encode(obj.TokenATransferFee)
	if err != nil {
		return err
	}
	// Serialize `TokenBTransferFee` param:
	err = encoder.Encode(obj.TokenBTransferFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityDecreased) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenATransferFee`:
	err = decoder.Decode(&obj.TokenATransferFee)
	if err != nil {
		return err
	}
	// Deserialize `TokenBTransferFee`:
	err = decoder.Decode(&obj.TokenBTransferFee)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityIncreased struct {
	Whirlpool         ag_solanago.PublicKey
	Position          ag_solanago.PublicKey
	TickLowerIndex    int32
	TickUpperIndex    int32
	Liquidity         ag_binary.Uint128
	TokenAAmount      uint64
	TokenBAmount      uint64
	TokenATransferFee uint64
	TokenBTransferFee uint64
}

func (obj LiquidityIncreased) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenATransferFee` param:
	err = encoder.Encode(obj.TokenATransferFee)
	if err != nil {
		return err
	}
	// Serialize `TokenBTransferFee` param:
	err = encoder.Encode(obj.TokenBTransferFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityIncreased) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenATransferFee`:
	err = decoder.Decode(&obj.TokenATransferFee)
	if err != nil {
		return err
	}
	// Deserialize `TokenBTransferFee`:
	err = decoder.Decode(&obj.TokenBTransferFee)
	if err != nil {
		return err
	}
	return nil
}

type PoolInitialized struct {
	Whirlpool        ag_solanago.PublicKey
	WhirlpoolsConfig ag_solanago.PublicKey
	TokenMintA       ag_solanago.PublicKey
	TokenMintB       ag_solanago.PublicKey
	TickSpacing      uint16
	TokenProgramA    ag_solanago.PublicKey
	TokenProgramB    ag_solanago.PublicKey
	DecimalsA        uint8
	DecimalsB        uint8
	InitialSqrtPrice ag_binary.Uint128
}

func (obj PoolInitialized) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `WhirlpoolsConfig` param:
	err = encoder.Encode(obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Serialize `TokenMintA` param:
	err = encoder.Encode(obj.TokenMintA)
	if err != nil {
		return err
	}
	// Serialize `TokenMintB` param:
	err = encoder.Encode(obj.TokenMintB)
	if err != nil {
		return err
	}
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `TokenProgramA` param:
	err = encoder.Encode(obj.TokenProgramA)
	if err != nil {
		return err
	}
	// Serialize `TokenProgramB` param:
	err = encoder.Encode(obj.TokenProgramB)
	if err != nil {
		return err
	}
	// Serialize `DecimalsA` param:
	err = encoder.Encode(obj.DecimalsA)
	if err != nil {
		return err
	}
	// Serialize `DecimalsB` param:
	err = encoder.Encode(obj.DecimalsB)
	if err != nil {
		return err
	}
	// Serialize `InitialSqrtPrice` param:
	err = encoder.Encode(obj.InitialSqrtPrice)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolInitialized) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `WhirlpoolsConfig`:
	err = decoder.Decode(&obj.WhirlpoolsConfig)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintA`:
	err = decoder.Decode(&obj.TokenMintA)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintB`:
	err = decoder.Decode(&obj.TokenMintB)
	if err != nil {
		return err
	}
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgramA`:
	err = decoder.Decode(&obj.TokenProgramA)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgramB`:
	err = decoder.Decode(&obj.TokenProgramB)
	if err != nil {
		return err
	}
	// Deserialize `DecimalsA`:
	err = decoder.Decode(&obj.DecimalsA)
	if err != nil {
		return err
	}
	// Deserialize `DecimalsB`:
	err = decoder.Decode(&obj.DecimalsB)
	if err != nil {
		return err
	}
	// Deserialize `InitialSqrtPrice`:
	err = decoder.Decode(&obj.InitialSqrtPrice)
	if err != nil {
		return err
	}
	return nil
}

type Traded struct {
	Whirlpool         ag_solanago.PublicKey
	AToB              bool
	PreSqrtPrice      ag_binary.Uint128
	PostSqrtPrice     ag_binary.Uint128
	InputAmount       uint64
	OutputAmount      uint64
	InputTransferFee  uint64
	OutputTransferFee uint64
	LpFee             uint64
	ProtocolFee       uint64
}

func (obj Traded) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Whirlpool` param:
	err = encoder.Encode(obj.Whirlpool)
	if err != nil {
		return err
	}
	// Serialize `AToB` param:
	err = encoder.Encode(obj.AToB)
	if err != nil {
		return err
	}
	// Serialize `PreSqrtPrice` param:
	err = encoder.Encode(obj.PreSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `PostSqrtPrice` param:
	err = encoder.Encode(obj.PostSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `InputAmount` param:
	err = encoder.Encode(obj.InputAmount)
	if err != nil {
		return err
	}
	// Serialize `OutputAmount` param:
	err = encoder.Encode(obj.OutputAmount)
	if err != nil {
		return err
	}
	// Serialize `InputTransferFee` param:
	err = encoder.Encode(obj.InputTransferFee)
	if err != nil {
		return err
	}
	// Serialize `OutputTransferFee` param:
	err = encoder.Encode(obj.OutputTransferFee)
	if err != nil {
		return err
	}
	// Serialize `LpFee` param:
	err = encoder.Encode(obj.LpFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Traded) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Whirlpool`:
	err = decoder.Decode(&obj.Whirlpool)
	if err != nil {
		return err
	}
	// Deserialize `AToB`:
	err = decoder.Decode(&obj.AToB)
	if err != nil {
		return err
	}
	// Deserialize `PreSqrtPrice`:
	err = decoder.Decode(&obj.PreSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `PostSqrtPrice`:
	err = decoder.Decode(&obj.PostSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `InputAmount`:
	err = decoder.Decode(&obj.InputAmount)
	if err != nil {
		return err
	}
	// Deserialize `OutputAmount`:
	err = decoder.Decode(&obj.OutputAmount)
	if err != nil {
		return err
	}
	// Deserialize `InputTransferFee`:
	err = decoder.Decode(&obj.InputTransferFee)
	if err != nil {
		return err
	}
	// Deserialize `OutputTransferFee`:
	err = decoder.Decode(&obj.OutputTransferFee)
	if err != nil {
		return err
	}
	// Deserialize `LpFee`:
	err = decoder.Decode(&obj.LpFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	return nil
}
