// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// OpenPositionWithTokenExtensions is the `open_position_with_token_extensions` instruction.
type OpenPositionWithTokenExtensions struct {
	TickLowerIndex             *int32
	TickUpperIndex             *int32
	WithTokenMetadataExtension *bool

	// [0] = [WRITE, SIGNER] funder
	//
	// [1] = [] owner
	//
	// [2] = [WRITE] position
	//
	// [3] = [WRITE, SIGNER] position_mint
	//
	// [4] = [WRITE] position_token_account
	//
	// [5] = [] whirlpool
	//
	// [6] = [] token2022_program
	//
	// [7] = [] system_program
	//
	// [8] = [] associated_token_program
	//
	// [9] = [] metadata_update_auth
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOpenPositionWithTokenExtensionsInstructionBuilder creates a new `OpenPositionWithTokenExtensions` instruction builder.
func NewOpenPositionWithTokenExtensionsInstructionBuilder() *OpenPositionWithTokenExtensions {
	nd := &OpenPositionWithTokenExtensions{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetTickLowerIndex sets the "tick_lower_index" parameter.
func (inst *OpenPositionWithTokenExtensions) SetTickLowerIndex(tick_lower_index int32) *OpenPositionWithTokenExtensions {
	inst.TickLowerIndex = &tick_lower_index
	return inst
}

// SetTickUpperIndex sets the "tick_upper_index" parameter.
func (inst *OpenPositionWithTokenExtensions) SetTickUpperIndex(tick_upper_index int32) *OpenPositionWithTokenExtensions {
	inst.TickUpperIndex = &tick_upper_index
	return inst
}

// SetWithTokenMetadataExtension sets the "with_token_metadata_extension" parameter.
func (inst *OpenPositionWithTokenExtensions) SetWithTokenMetadataExtension(with_token_metadata_extension bool) *OpenPositionWithTokenExtensions {
	inst.WithTokenMetadataExtension = &with_token_metadata_extension
	return inst
}

// SetFunderAccount sets the "funder" account.
func (inst *OpenPositionWithTokenExtensions) SetFunderAccount(funder ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *OpenPositionWithTokenExtensions) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *OpenPositionWithTokenExtensions) SetOwnerAccount(owner ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *OpenPositionWithTokenExtensions) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionAccount sets the "position" account.
func (inst *OpenPositionWithTokenExtensions) SetPositionAccount(position ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *OpenPositionWithTokenExtensions) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionMintAccount sets the "position_mint" account.
func (inst *OpenPositionWithTokenExtensions) SetPositionMintAccount(positionMint ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionMint).WRITE().SIGNER()
	return inst
}

// GetPositionMintAccount gets the "position_mint" account.
func (inst *OpenPositionWithTokenExtensions) GetPositionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPositionTokenAccountAccount sets the "position_token_account" account.
func (inst *OpenPositionWithTokenExtensions) SetPositionTokenAccountAccount(positionTokenAccount ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(positionTokenAccount).WRITE()
	return inst
}

// GetPositionTokenAccountAccount gets the "position_token_account" account.
func (inst *OpenPositionWithTokenExtensions) GetPositionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *OpenPositionWithTokenExtensions) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(whirlpool)
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *OpenPositionWithTokenExtensions) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetToken2022ProgramAccount sets the "token2022_program" account.
func (inst *OpenPositionWithTokenExtensions) SetToken2022ProgramAccount(token2022Program ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(token2022Program)
	return inst
}

// GetToken2022ProgramAccount gets the "token2022_program" account.
func (inst *OpenPositionWithTokenExtensions) GetToken2022ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *OpenPositionWithTokenExtensions) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *OpenPositionWithTokenExtensions) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *OpenPositionWithTokenExtensions) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *OpenPositionWithTokenExtensions) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMetadataUpdateAuthAccount sets the "metadata_update_auth" account.
func (inst *OpenPositionWithTokenExtensions) SetMetadataUpdateAuthAccount(metadataUpdateAuth ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(metadataUpdateAuth)
	return inst
}

// GetMetadataUpdateAuthAccount gets the "metadata_update_auth" account.
func (inst *OpenPositionWithTokenExtensions) GetMetadataUpdateAuthAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *OpenPositionWithTokenExtensions) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *OpenPositionWithTokenExtensions) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *OpenPositionWithTokenExtensions {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *OpenPositionWithTokenExtensions) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst OpenPositionWithTokenExtensions) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OpenPositionWithTokenExtensions,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OpenPositionWithTokenExtensions) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OpenPositionWithTokenExtensions) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TickLowerIndex == nil {
			return errors.New("tickLowerIndex parameter is not set")
		}
		if inst.TickUpperIndex == nil {
			return errors.New("tickUpperIndex parameter is not set")
		}
		if inst.WithTokenMetadataExtension == nil {
			return errors.New("withTokenMetadataExtension parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PositionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Token2022Program is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MetadataUpdateAuth is not set")
		}
	}
	return nil
}

func (inst *OpenPositionWithTokenExtensions) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OpenPositionWithTokenExtensions")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("               TickLowerIndex", *inst.TickLowerIndex))
						paramsBranch.Child(ag_format.Param("               TickUpperIndex", *inst.TickUpperIndex))
						paramsBranch.Child(ag_format.Param("   WithTokenMetadataExtension", *inst.WithTokenMetadataExtension))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  funder", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                position", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           position_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         position_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("               whirlpool", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("       token2022_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("    metadata_update_auth", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj OpenPositionWithTokenExtensions) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TickLowerIndex` param:
	err = encoder.Encode(obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Serialize `TickUpperIndex` param:
	err = encoder.Encode(obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Serialize `WithTokenMetadataExtension` param:
	err = encoder.Encode(obj.WithTokenMetadataExtension)
	if err != nil {
		return err
	}
	return nil
}
func (obj *OpenPositionWithTokenExtensions) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TickLowerIndex`:
	err = decoder.Decode(&obj.TickLowerIndex)
	if err != nil {
		return err
	}
	// Deserialize `TickUpperIndex`:
	err = decoder.Decode(&obj.TickUpperIndex)
	if err != nil {
		return err
	}
	// Deserialize `WithTokenMetadataExtension`:
	err = decoder.Decode(&obj.WithTokenMetadataExtension)
	if err != nil {
		return err
	}
	return nil
}

// NewOpenPositionWithTokenExtensionsInstruction declares a new OpenPositionWithTokenExtensions instruction with the provided parameters and accounts.
func NewOpenPositionWithTokenExtensionsInstruction(
	// Parameters:
	tick_lower_index int32,
	tick_upper_index int32,
	with_token_metadata_extension bool,
	// Accounts:
	funder ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionMint ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	metadataUpdateAuth ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	return NewOpenPositionWithTokenExtensionsInstructionBuilder().
		SetTickLowerIndex(tick_lower_index).
		SetTickUpperIndex(tick_upper_index).
		SetWithTokenMetadataExtension(with_token_metadata_extension).
		SetFunderAccount(funder).
		SetOwnerAccount(owner).
		SetPositionAccount(position).
		SetPositionMintAccount(positionMint).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetWhirlpoolAccount(whirlpool).
		SetToken2022ProgramAccount(token2022Program).
		SetSystemProgramAccount(systemProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetMetadataUpdateAuthAccount(metadataUpdateAuth)
}

// NewSimpleOpenPositionWithTokenExtensionsInstruction declares a new OpenPositionWithTokenExtensions instruction with the provided parameters and accounts.
func NewSimpleOpenPositionWithTokenExtensionsInstruction(
	// Parameters:
	tick_lower_index int32,
	tick_upper_index int32,
	with_token_metadata_extension bool,
	// Accounts:
	funder ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionMint ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	metadataUpdateAuth ag_solanago.PublicKey) *OpenPositionWithTokenExtensions {
	return NewOpenPositionWithTokenExtensionsInstructionBuilder().
		SetTickLowerIndex(tick_lower_index).
		SetTickUpperIndex(tick_upper_index).
		SetWithTokenMetadataExtension(with_token_metadata_extension).
		SetFunderAccount(funder).
		SetOwnerAccount(owner).
		SetPositionAccount(position).
		SetPositionMintAccount(positionMint).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetWhirlpoolAccount(whirlpool).
		SetToken2022ProgramAccount(token2022Program).
		SetSystemProgramAccount(systemProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetMetadataUpdateAuthAccount(metadataUpdateAuth)
}
