// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initializes a Whirlpool account and Oracle account with adaptive fee.
//
// ### Parameters
// - `initial_sqrt_price` - The desired initial sqrt-price for this pool
// - `trade_enable_timestamp` - The timestamp when trading is enabled for this pool (within 72 hours)
//
// #### Special Errors
// `InvalidTokenMintOrder` - The order of mints have to be ordered by
// `SqrtPriceOutOfBounds` - provided initial_sqrt_price is not between 2^-64 to 2^64
// `InvalidTradeEnableTimestamp` - provided trade_enable_timestamp is not within 72 hours or the adaptive fee-tier is permission-less
// `UnsupportedTokenMint` - The provided token mint is not supported by the program (e.g. it has risky token extensions)
//
type InitializePoolWithAdaptiveFee struct {
	InitialSqrtPrice     *ag_binary.Uint128
	TradeEnableTimestamp *uint64 `bin:"optional"`

	// [0] = [] whirlpools_config
	//
	// [1] = [] token_mint_a
	//
	// [2] = [] token_mint_b
	//
	// [3] = [] token_badge_a
	//
	// [4] = [] token_badge_b
	//
	// [5] = [WRITE, SIGNER] funder
	//
	// [6] = [SIGNER] initialize_pool_authority
	//
	// [7] = [WRITE] whirlpool
	//
	// [8] = [WRITE] oracle
	//
	// [9] = [WRITE, SIGNER] token_vault_a
	//
	// [10] = [WRITE, SIGNER] token_vault_b
	//
	// [11] = [] adaptive_fee_tier
	//
	// [12] = [] token_program_a
	//
	// [13] = [] token_program_b
	//
	// [14] = [] system_program
	//
	// [15] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePoolWithAdaptiveFeeInstructionBuilder creates a new `InitializePoolWithAdaptiveFee` instruction builder.
func NewInitializePoolWithAdaptiveFeeInstructionBuilder() *InitializePoolWithAdaptiveFee {
	nd := &InitializePoolWithAdaptiveFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetInitialSqrtPrice sets the "initial_sqrt_price" parameter.
func (inst *InitializePoolWithAdaptiveFee) SetInitialSqrtPrice(initial_sqrt_price ag_binary.Uint128) *InitializePoolWithAdaptiveFee {
	inst.InitialSqrtPrice = &initial_sqrt_price
	return inst
}

// SetTradeEnableTimestamp sets the "trade_enable_timestamp" parameter.
func (inst *InitializePoolWithAdaptiveFee) SetTradeEnableTimestamp(trade_enable_timestamp uint64) *InitializePoolWithAdaptiveFee {
	inst.TradeEnableTimestamp = &trade_enable_timestamp
	return inst
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *InitializePoolWithAdaptiveFee) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *InitializePoolWithAdaptiveFee) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMintAAccount sets the "token_mint_a" account.
func (inst *InitializePoolWithAdaptiveFee) SetTokenMintAAccount(tokenMintA ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMintA)
	return inst
}

// GetTokenMintAAccount gets the "token_mint_a" account.
func (inst *InitializePoolWithAdaptiveFee) GetTokenMintAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintBAccount sets the "token_mint_b" account.
func (inst *InitializePoolWithAdaptiveFee) SetTokenMintBAccount(tokenMintB ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMintB)
	return inst
}

// GetTokenMintBAccount gets the "token_mint_b" account.
func (inst *InitializePoolWithAdaptiveFee) GetTokenMintBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBadgeAAccount sets the "token_badge_a" account.
func (inst *InitializePoolWithAdaptiveFee) SetTokenBadgeAAccount(tokenBadgeA ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBadgeA)
	return inst
}

// GetTokenBadgeAAccount gets the "token_badge_a" account.
func (inst *InitializePoolWithAdaptiveFee) GetTokenBadgeAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenBadgeBAccount sets the "token_badge_b" account.
func (inst *InitializePoolWithAdaptiveFee) SetTokenBadgeBAccount(tokenBadgeB ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenBadgeB)
	return inst
}

// GetTokenBadgeBAccount gets the "token_badge_b" account.
func (inst *InitializePoolWithAdaptiveFee) GetTokenBadgeBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFunderAccount sets the "funder" account.
func (inst *InitializePoolWithAdaptiveFee) SetFunderAccount(funder ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *InitializePoolWithAdaptiveFee) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetInitializePoolAuthorityAccount sets the "initialize_pool_authority" account.
func (inst *InitializePoolWithAdaptiveFee) SetInitializePoolAuthorityAccount(initializePoolAuthority ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(initializePoolAuthority).SIGNER()
	return inst
}

// GetInitializePoolAuthorityAccount gets the "initialize_pool_authority" account.
func (inst *InitializePoolWithAdaptiveFee) GetInitializePoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *InitializePoolWithAdaptiveFee) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *InitializePoolWithAdaptiveFee) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetOracleAccount sets the "oracle" account.
func (inst *InitializePoolWithAdaptiveFee) SetOracleAccount(oracle ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *InitializePoolWithAdaptiveFee) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenVaultAAccount sets the "token_vault_a" account.
func (inst *InitializePoolWithAdaptiveFee) SetTokenVaultAAccount(tokenVaultA ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenVaultA).WRITE().SIGNER()
	return inst
}

// GetTokenVaultAAccount gets the "token_vault_a" account.
func (inst *InitializePoolWithAdaptiveFee) GetTokenVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenVaultBAccount sets the "token_vault_b" account.
func (inst *InitializePoolWithAdaptiveFee) SetTokenVaultBAccount(tokenVaultB ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenVaultB).WRITE().SIGNER()
	return inst
}

// GetTokenVaultBAccount gets the "token_vault_b" account.
func (inst *InitializePoolWithAdaptiveFee) GetTokenVaultBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetAdaptiveFeeTierAccount sets the "adaptive_fee_tier" account.
func (inst *InitializePoolWithAdaptiveFee) SetAdaptiveFeeTierAccount(adaptiveFeeTier ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(adaptiveFeeTier)
	return inst
}

// GetAdaptiveFeeTierAccount gets the "adaptive_fee_tier" account.
func (inst *InitializePoolWithAdaptiveFee) GetAdaptiveFeeTierAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAAccount sets the "token_program_a" account.
func (inst *InitializePoolWithAdaptiveFee) SetTokenProgramAAccount(tokenProgramA ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgramA)
	return inst
}

// GetTokenProgramAAccount gets the "token_program_a" account.
func (inst *InitializePoolWithAdaptiveFee) GetTokenProgramAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramBAccount sets the "token_program_b" account.
func (inst *InitializePoolWithAdaptiveFee) SetTokenProgramBAccount(tokenProgramB ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgramB)
	return inst
}

// GetTokenProgramBAccount gets the "token_program_b" account.
func (inst *InitializePoolWithAdaptiveFee) GetTokenProgramBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializePoolWithAdaptiveFee) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializePoolWithAdaptiveFee) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializePoolWithAdaptiveFee) SetRentAccount(rent ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializePoolWithAdaptiveFee) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst *InitializePoolWithAdaptiveFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializePoolWithAdaptiveFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializePoolWithAdaptiveFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:16], metas...)
	return inst
}

func (inst *InitializePoolWithAdaptiveFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[16:]
}

func (inst InitializePoolWithAdaptiveFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePoolWithAdaptiveFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePoolWithAdaptiveFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePoolWithAdaptiveFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.InitialSqrtPrice == nil {
			return errors.New("initialSqrtPrice parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 16 {
		return errors.New("accounts slice has wrong length: expected 16 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMintA is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMintB is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBadgeA is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenBadgeB is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.InitializePoolAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenVaultA is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenVaultB is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AdaptiveFeeTier is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgramA is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgramB is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializePoolWithAdaptiveFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePoolWithAdaptiveFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      InitialSqrtPrice", *inst.InitialSqrtPrice))
						paramsBranch.Child(ag_format.Param("  TradeEnableTimestamp (OPT)", inst.TradeEnableTimestamp))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             token_mint_a", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             token_mint_b", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            token_badge_a", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            token_badge_b", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                   funder", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("initialize_pool_authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                whirlpool", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                   oracle", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            token_vault_a", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            token_vault_b", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        adaptive_fee_tier", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("          token_program_a", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("          token_program_b", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("           system_program", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                     rent", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj InitializePoolWithAdaptiveFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InitialSqrtPrice` param:
	err = encoder.Encode(obj.InitialSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `TradeEnableTimestamp` param (optional):
	{
		if obj.TradeEnableTimestamp == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TradeEnableTimestamp)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *InitializePoolWithAdaptiveFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InitialSqrtPrice`:
	err = decoder.Decode(&obj.InitialSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `TradeEnableTimestamp` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TradeEnableTimestamp)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewInitializePoolWithAdaptiveFeeInstruction declares a new InitializePoolWithAdaptiveFee instruction with the provided parameters and accounts.
func NewInitializePoolWithAdaptiveFeeInstruction(
	// Parameters:
	initial_sqrt_price ag_binary.Uint128,
	trade_enable_timestamp uint64,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	tokenMintA ag_solanago.PublicKey,
	tokenMintB ag_solanago.PublicKey,
	tokenBadgeA ag_solanago.PublicKey,
	tokenBadgeB ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	initializePoolAuthority ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	return NewInitializePoolWithAdaptiveFeeInstructionBuilder().
		SetInitialSqrtPrice(initial_sqrt_price).
		SetTradeEnableTimestamp(trade_enable_timestamp).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetTokenMintAAccount(tokenMintA).
		SetTokenMintBAccount(tokenMintB).
		SetTokenBadgeAAccount(tokenBadgeA).
		SetTokenBadgeBAccount(tokenBadgeB).
		SetFunderAccount(funder).
		SetInitializePoolAuthorityAccount(initializePoolAuthority).
		SetWhirlpoolAccount(whirlpool).
		SetOracleAccount(oracle).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenVaultBAccount(tokenVaultB).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}

// NewSimpleInitializePoolWithAdaptiveFeeInstruction declares a new InitializePoolWithAdaptiveFee instruction with the provided parameters and accounts.
func NewSimpleInitializePoolWithAdaptiveFeeInstruction(
	// Parameters:
	initial_sqrt_price ag_binary.Uint128,
	trade_enable_timestamp uint64,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	tokenMintA ag_solanago.PublicKey,
	tokenMintB ag_solanago.PublicKey,
	tokenBadgeA ag_solanago.PublicKey,
	tokenBadgeB ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	initializePoolAuthority ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	adaptiveFeeTier ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializePoolWithAdaptiveFee {
	return NewInitializePoolWithAdaptiveFeeInstructionBuilder().
		SetInitialSqrtPrice(initial_sqrt_price).
		SetTradeEnableTimestamp(trade_enable_timestamp).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetTokenMintAAccount(tokenMintA).
		SetTokenMintBAccount(tokenMintB).
		SetTokenBadgeAAccount(tokenBadgeA).
		SetTokenBadgeBAccount(tokenBadgeB).
		SetFunderAccount(funder).
		SetInitializePoolAuthorityAccount(initializePoolAuthority).
		SetWhirlpoolAccount(whirlpool).
		SetOracleAccount(oracle).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenVaultBAccount(tokenVaultB).
		SetAdaptiveFeeTierAccount(adaptiveFeeTier).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
