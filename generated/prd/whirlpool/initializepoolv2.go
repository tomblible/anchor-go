// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializePoolV2 is the `initialize_pool_v2` instruction.
type InitializePoolV2 struct {
	TickSpacing      *uint16
	InitialSqrtPrice *ag_binary.Uint128

	// [0] = [] whirlpools_config
	//
	// [1] = [] token_mint_a
	//
	// [2] = [] token_mint_b
	//
	// [3] = [] token_badge_a
	//
	// [4] = [] token_badge_b
	//
	// [5] = [WRITE, SIGNER] funder
	//
	// [6] = [WRITE] whirlpool
	//
	// [7] = [WRITE, SIGNER] token_vault_a
	//
	// [8] = [WRITE, SIGNER] token_vault_b
	//
	// [9] = [] fee_tier
	//
	// [10] = [] token_program_a
	//
	// [11] = [] token_program_b
	//
	// [12] = [] system_program
	//
	// [13] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePoolV2InstructionBuilder creates a new `InitializePoolV2` instruction builder.
func NewInitializePoolV2InstructionBuilder() *InitializePoolV2 {
	nd := &InitializePoolV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetTickSpacing sets the "tick_spacing" parameter.
func (inst *InitializePoolV2) SetTickSpacing(tick_spacing uint16) *InitializePoolV2 {
	inst.TickSpacing = &tick_spacing
	return inst
}

// SetInitialSqrtPrice sets the "initial_sqrt_price" parameter.
func (inst *InitializePoolV2) SetInitialSqrtPrice(initial_sqrt_price ag_binary.Uint128) *InitializePoolV2 {
	inst.InitialSqrtPrice = &initial_sqrt_price
	return inst
}

// SetWhirlpoolsConfigAccount sets the "whirlpools_config" account.
func (inst *InitializePoolV2) SetWhirlpoolsConfigAccount(whirlpoolsConfig ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpoolsConfig)
	return inst
}

// GetWhirlpoolsConfigAccount gets the "whirlpools_config" account.
func (inst *InitializePoolV2) GetWhirlpoolsConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMintAAccount sets the "token_mint_a" account.
func (inst *InitializePoolV2) SetTokenMintAAccount(tokenMintA ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMintA)
	return inst
}

// GetTokenMintAAccount gets the "token_mint_a" account.
func (inst *InitializePoolV2) GetTokenMintAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintBAccount sets the "token_mint_b" account.
func (inst *InitializePoolV2) SetTokenMintBAccount(tokenMintB ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMintB)
	return inst
}

// GetTokenMintBAccount gets the "token_mint_b" account.
func (inst *InitializePoolV2) GetTokenMintBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBadgeAAccount sets the "token_badge_a" account.
func (inst *InitializePoolV2) SetTokenBadgeAAccount(tokenBadgeA ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBadgeA)
	return inst
}

// GetTokenBadgeAAccount gets the "token_badge_a" account.
func (inst *InitializePoolV2) GetTokenBadgeAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenBadgeBAccount sets the "token_badge_b" account.
func (inst *InitializePoolV2) SetTokenBadgeBAccount(tokenBadgeB ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenBadgeB)
	return inst
}

// GetTokenBadgeBAccount gets the "token_badge_b" account.
func (inst *InitializePoolV2) GetTokenBadgeBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFunderAccount sets the "funder" account.
func (inst *InitializePoolV2) SetFunderAccount(funder ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *InitializePoolV2) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *InitializePoolV2) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *InitializePoolV2) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenVaultAAccount sets the "token_vault_a" account.
func (inst *InitializePoolV2) SetTokenVaultAAccount(tokenVaultA ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenVaultA).WRITE().SIGNER()
	return inst
}

// GetTokenVaultAAccount gets the "token_vault_a" account.
func (inst *InitializePoolV2) GetTokenVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenVaultBAccount sets the "token_vault_b" account.
func (inst *InitializePoolV2) SetTokenVaultBAccount(tokenVaultB ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenVaultB).WRITE().SIGNER()
	return inst
}

// GetTokenVaultBAccount gets the "token_vault_b" account.
func (inst *InitializePoolV2) GetTokenVaultBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetFeeTierAccount sets the "fee_tier" account.
func (inst *InitializePoolV2) SetFeeTierAccount(feeTier ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(feeTier)
	return inst
}

// GetFeeTierAccount gets the "fee_tier" account.
func (inst *InitializePoolV2) GetFeeTierAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAAccount sets the "token_program_a" account.
func (inst *InitializePoolV2) SetTokenProgramAAccount(tokenProgramA ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgramA)
	return inst
}

// GetTokenProgramAAccount gets the "token_program_a" account.
func (inst *InitializePoolV2) GetTokenProgramAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramBAccount sets the "token_program_b" account.
func (inst *InitializePoolV2) SetTokenProgramBAccount(tokenProgramB ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgramB)
	return inst
}

// GetTokenProgramBAccount gets the "token_program_b" account.
func (inst *InitializePoolV2) GetTokenProgramBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializePoolV2) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializePoolV2) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializePoolV2) SetRentAccount(rent ag_solanago.PublicKey) *InitializePoolV2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializePoolV2) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *InitializePoolV2) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializePoolV2) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializePoolV2 {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *InitializePoolV2) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst InitializePoolV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePoolV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePoolV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePoolV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TickSpacing == nil {
			return errors.New("tickSpacing parameter is not set")
		}
		if inst.InitialSqrtPrice == nil {
			return errors.New("initialSqrtPrice parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.WhirlpoolsConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMintA is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMintB is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBadgeA is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenBadgeB is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenVaultA is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenVaultB is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.FeeTier is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgramA is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgramB is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializePoolV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePoolV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("       TickSpacing", *inst.TickSpacing))
						paramsBranch.Child(ag_format.Param("  InitialSqrtPrice", *inst.InitialSqrtPrice))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("whirlpools_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     token_mint_a", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     token_mint_b", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    token_badge_a", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    token_badge_b", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           funder", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        whirlpool", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    token_vault_a", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    token_vault_b", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         fee_tier", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("  token_program_a", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("  token_program_b", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   system_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("             rent", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj InitializePoolV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TickSpacing` param:
	err = encoder.Encode(obj.TickSpacing)
	if err != nil {
		return err
	}
	// Serialize `InitialSqrtPrice` param:
	err = encoder.Encode(obj.InitialSqrtPrice)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePoolV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TickSpacing`:
	err = decoder.Decode(&obj.TickSpacing)
	if err != nil {
		return err
	}
	// Deserialize `InitialSqrtPrice`:
	err = decoder.Decode(&obj.InitialSqrtPrice)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePoolV2Instruction declares a new InitializePoolV2 instruction with the provided parameters and accounts.
func NewInitializePoolV2Instruction(
	// Parameters:
	tick_spacing uint16,
	initial_sqrt_price ag_binary.Uint128,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	tokenMintA ag_solanago.PublicKey,
	tokenMintB ag_solanago.PublicKey,
	tokenBadgeA ag_solanago.PublicKey,
	tokenBadgeB ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	feeTier ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializePoolV2 {
	return NewInitializePoolV2InstructionBuilder().
		SetTickSpacing(tick_spacing).
		SetInitialSqrtPrice(initial_sqrt_price).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetTokenMintAAccount(tokenMintA).
		SetTokenMintBAccount(tokenMintB).
		SetTokenBadgeAAccount(tokenBadgeA).
		SetTokenBadgeBAccount(tokenBadgeB).
		SetFunderAccount(funder).
		SetWhirlpoolAccount(whirlpool).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenVaultBAccount(tokenVaultB).
		SetFeeTierAccount(feeTier).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}

// NewSimpleInitializePoolV2Instruction declares a new InitializePoolV2 instruction with the provided parameters and accounts.
func NewSimpleInitializePoolV2Instruction(
	// Parameters:
	tick_spacing uint16,
	initial_sqrt_price ag_binary.Uint128,
	// Accounts:
	whirlpoolsConfig ag_solanago.PublicKey,
	tokenMintA ag_solanago.PublicKey,
	tokenMintB ag_solanago.PublicKey,
	tokenBadgeA ag_solanago.PublicKey,
	tokenBadgeB ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	tokenVaultA ag_solanago.PublicKey,
	tokenVaultB ag_solanago.PublicKey,
	feeTier ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializePoolV2 {
	return NewInitializePoolV2InstructionBuilder().
		SetTickSpacing(tick_spacing).
		SetInitialSqrtPrice(initial_sqrt_price).
		SetWhirlpoolsConfigAccount(whirlpoolsConfig).
		SetTokenMintAAccount(tokenMintA).
		SetTokenMintBAccount(tokenMintB).
		SetTokenBadgeAAccount(tokenBadgeA).
		SetTokenBadgeBAccount(tokenBadgeB).
		SetFunderAccount(funder).
		SetWhirlpoolAccount(whirlpool).
		SetTokenVaultAAccount(tokenVaultA).
		SetTokenVaultBAccount(tokenVaultB).
		SetFeeTierAccount(feeTier).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
