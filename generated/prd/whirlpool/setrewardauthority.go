// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Set the whirlpool reward authority at the provided `reward_index`.
// Only the current reward authority for this reward index has permission to invoke this instruction.
//
// ### Authority
// - "reward_authority" - Set authority that can control reward emission for this particular reward.
//
// #### Special Errors
// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
// index in this pool, or exceeds NUM_REWARDS, or
// all reward slots for this pool has been initialized.
type SetRewardAuthority struct {
	RewardIndex *uint8

	// [0] = [WRITE] whirlpool
	//
	// [1] = [SIGNER] reward_authority
	//
	// [2] = [] new_reward_authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetRewardAuthorityInstructionBuilder creates a new `SetRewardAuthority` instruction builder.
func NewSetRewardAuthorityInstructionBuilder() *SetRewardAuthority {
	nd := &SetRewardAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetRewardIndex sets the "reward_index" parameter.
func (inst *SetRewardAuthority) SetRewardIndex(reward_index uint8) *SetRewardAuthority {
	inst.RewardIndex = &reward_index
	return inst
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *SetRewardAuthority) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *SetRewardAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *SetRewardAuthority) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRewardAuthorityAccount sets the "reward_authority" account.
func (inst *SetRewardAuthority) SetRewardAuthorityAccount(rewardAuthority ag_solanago.PublicKey) *SetRewardAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(rewardAuthority).SIGNER()
	return inst
}

// GetRewardAuthorityAccount gets the "reward_authority" account.
func (inst *SetRewardAuthority) GetRewardAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetNewRewardAuthorityAccount sets the "new_reward_authority" account.
func (inst *SetRewardAuthority) SetNewRewardAuthorityAccount(newRewardAuthority ag_solanago.PublicKey) *SetRewardAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(newRewardAuthority)
	return inst
}

// GetNewRewardAuthorityAccount gets the "new_reward_authority" account.
func (inst *SetRewardAuthority) GetNewRewardAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *SetRewardAuthority) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetRewardAuthority) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetRewardAuthority {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *SetRewardAuthority) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst SetRewardAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetRewardAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetRewardAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetRewardAuthority) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("rewardIndex parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RewardAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.NewRewardAuthority is not set")
		}
	}
	return nil
}

func (inst *SetRewardAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetRewardAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" RewardIndex", *inst.RewardIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           whirlpool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    reward_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("new_reward_authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetRewardAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetRewardAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewSetRewardAuthorityInstruction declares a new SetRewardAuthority instruction with the provided parameters and accounts.
func NewSetRewardAuthorityInstruction(
	// Parameters:
	reward_index uint8,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	rewardAuthority ag_solanago.PublicKey,
	newRewardAuthority ag_solanago.PublicKey) *SetRewardAuthority {
	return NewSetRewardAuthorityInstructionBuilder().
		SetRewardIndex(reward_index).
		SetWhirlpoolAccount(whirlpool).
		SetRewardAuthorityAccount(rewardAuthority).
		SetNewRewardAuthorityAccount(newRewardAuthority)
}

// NewSimpleSetRewardAuthorityInstruction declares a new SetRewardAuthority instruction with the provided parameters and accounts.
func NewSimpleSetRewardAuthorityInstruction(
	// Parameters:
	reward_index uint8,
	// Accounts:
	whirlpool ag_solanago.PublicKey,
	rewardAuthority ag_solanago.PublicKey,
	newRewardAuthority ag_solanago.PublicKey) *SetRewardAuthority {
	return NewSetRewardAuthorityInstructionBuilder().
		SetRewardIndex(reward_index).
		SetWhirlpoolAccount(whirlpool).
		SetRewardAuthorityAccount(rewardAuthority).
		SetNewRewardAuthorityAccount(newRewardAuthority)
}
