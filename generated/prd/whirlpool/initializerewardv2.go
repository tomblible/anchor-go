// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package orca_whirlpool

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize reward for a Whirlpool. A pool can only support up to a set number of rewards.
//
// ### Authority
// - "reward_authority" - assigned authority by the reward_super_authority for the specified
// reward-index in this Whirlpool
//
// ### Parameters
// - `reward_index` - The reward index that we'd like to initialize. (0 <= index <= NUM_REWARDS)
//
// #### Special Errors
// - `InvalidRewardIndex` - If the provided reward index doesn't match the lowest uninitialized
// index in this pool, or exceeds NUM_REWARDS, or
// all reward slots for this pool has been initialized.
type InitializeRewardV2 struct {
	RewardIndex *uint8

	// [0] = [SIGNER] reward_authority
	//
	// [1] = [WRITE, SIGNER] funder
	//
	// [2] = [WRITE] whirlpool
	//
	// [3] = [] reward_mint
	//
	// [4] = [] reward_token_badge
	//
	// [5] = [WRITE, SIGNER] reward_vault
	//
	// [6] = [] reward_token_program
	//
	// [7] = [] system_program
	//
	// [8] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeRewardV2InstructionBuilder creates a new `InitializeRewardV2` instruction builder.
func NewInitializeRewardV2InstructionBuilder() *InitializeRewardV2 {
	nd := &InitializeRewardV2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetRewardIndex sets the "reward_index" parameter.
func (inst *InitializeRewardV2) SetRewardIndex(reward_index uint8) *InitializeRewardV2 {
	inst.RewardIndex = &reward_index
	return inst
}

// SetRewardAuthorityAccount sets the "reward_authority" account.
func (inst *InitializeRewardV2) SetRewardAuthorityAccount(rewardAuthority ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(rewardAuthority).SIGNER()
	return inst
}

// GetRewardAuthorityAccount gets the "reward_authority" account.
func (inst *InitializeRewardV2) GetRewardAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFunderAccount sets the "funder" account.
func (inst *InitializeRewardV2) SetFunderAccount(funder ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *InitializeRewardV2) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetWhirlpoolAccount sets the "whirlpool" account.
func (inst *InitializeRewardV2) SetWhirlpoolAccount(whirlpool ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(whirlpool).WRITE()
	return inst
}

// GetWhirlpoolAccount gets the "whirlpool" account.
func (inst *InitializeRewardV2) GetWhirlpoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRewardMintAccount sets the "reward_mint" account.
func (inst *InitializeRewardV2) SetRewardMintAccount(rewardMint ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rewardMint)
	return inst
}

// GetRewardMintAccount gets the "reward_mint" account.
func (inst *InitializeRewardV2) GetRewardMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetRewardTokenBadgeAccount sets the "reward_token_badge" account.
func (inst *InitializeRewardV2) SetRewardTokenBadgeAccount(rewardTokenBadge ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(rewardTokenBadge)
	return inst
}

// GetRewardTokenBadgeAccount gets the "reward_token_badge" account.
func (inst *InitializeRewardV2) GetRewardTokenBadgeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRewardVaultAccount sets the "reward_vault" account.
func (inst *InitializeRewardV2) SetRewardVaultAccount(rewardVault ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rewardVault).WRITE().SIGNER()
	return inst
}

// GetRewardVaultAccount gets the "reward_vault" account.
func (inst *InitializeRewardV2) GetRewardVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRewardTokenProgramAccount sets the "reward_token_program" account.
func (inst *InitializeRewardV2) SetRewardTokenProgramAccount(rewardTokenProgram ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rewardTokenProgram)
	return inst
}

// GetRewardTokenProgramAccount gets the "reward_token_program" account.
func (inst *InitializeRewardV2) GetRewardTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeRewardV2) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeRewardV2) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
func (inst *InitializeRewardV2) SetRentAccount(rent ag_solanago.PublicKey) *InitializeRewardV2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitializeRewardV2) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst *InitializeRewardV2) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeRewardV2) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeRewardV2 {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:9], metas...)
	return inst
}

func (inst *InitializeRewardV2) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9:]
}

func (inst InitializeRewardV2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeRewardV2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeRewardV2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeRewardV2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("rewardIndex parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 9 {
		return errors.New("accounts slice has wrong length: expected 9 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.RewardAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Whirlpool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RewardMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.RewardTokenBadge is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.RewardVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RewardTokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitializeRewardV2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeRewardV2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" RewardIndex", *inst.RewardIndex))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    reward_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              funder", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           whirlpool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         reward_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  reward_token_badge", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        reward_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("reward_token_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      system_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj InitializeRewardV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeRewardV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeRewardV2Instruction declares a new InitializeRewardV2 instruction with the provided parameters and accounts.
func NewInitializeRewardV2Instruction(
	// Parameters:
	reward_index uint8,
	// Accounts:
	rewardAuthority ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	rewardTokenBadge ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey,
	rewardTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializeRewardV2 {
	return NewInitializeRewardV2InstructionBuilder().
		SetRewardIndex(reward_index).
		SetRewardAuthorityAccount(rewardAuthority).
		SetFunderAccount(funder).
		SetWhirlpoolAccount(whirlpool).
		SetRewardMintAccount(rewardMint).
		SetRewardTokenBadgeAccount(rewardTokenBadge).
		SetRewardVaultAccount(rewardVault).
		SetRewardTokenProgramAccount(rewardTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}

// NewSimpleInitializeRewardV2Instruction declares a new InitializeRewardV2 instruction with the provided parameters and accounts.
func NewSimpleInitializeRewardV2Instruction(
	// Parameters:
	reward_index uint8,
	// Accounts:
	rewardAuthority ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	whirlpool ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	rewardTokenBadge ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey,
	rewardTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitializeRewardV2 {
	return NewInitializeRewardV2InstructionBuilder().
		SetRewardIndex(reward_index).
		SetRewardAuthorityAccount(rewardAuthority).
		SetFunderAccount(funder).
		SetWhirlpoolAccount(whirlpool).
		SetRewardMintAccount(rewardMint).
		SetRewardTokenBadgeAccount(rewardTokenBadge).
		SetRewardVaultAccount(rewardVault).
		SetRewardTokenProgramAccount(rewardTokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
