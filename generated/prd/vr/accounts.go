// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package vr

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type PoolAccount struct {
	Enabled        bool
	Owner          ag_solanago.PublicKey
	MintA          ag_solanago.PublicKey
	MintB          ag_solanago.PublicKey
	TokenAReserves ag_binary.Uint128
	TokenBReserves ag_binary.Uint128
	Shift          ag_binary.Uint128
	Royalties      uint64
	VertigoFees    uint64
	Bump           uint8
	FeeParams      FeeParams
}

var PoolAccountDiscriminator = [8]byte{241, 154, 109, 4, 17, 177, 109, 188}

func (obj PoolAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `MintA` param:
	err = encoder.Encode(obj.MintA)
	if err != nil {
		return err
	}
	// Serialize `MintB` param:
	err = encoder.Encode(obj.MintB)
	if err != nil {
		return err
	}
	// Serialize `TokenAReserves` param:
	err = encoder.Encode(obj.TokenAReserves)
	if err != nil {
		return err
	}
	// Serialize `TokenBReserves` param:
	err = encoder.Encode(obj.TokenBReserves)
	if err != nil {
		return err
	}
	// Serialize `Shift` param:
	err = encoder.Encode(obj.Shift)
	if err != nil {
		return err
	}
	// Serialize `Royalties` param:
	err = encoder.Encode(obj.Royalties)
	if err != nil {
		return err
	}
	// Serialize `VertigoFees` param:
	err = encoder.Encode(obj.VertigoFees)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `FeeParams` param:
	err = encoder.Encode(obj.FeeParams)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[241 154 109 4 17 177 109 188]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `MintA`:
	err = decoder.Decode(&obj.MintA)
	if err != nil {
		return err
	}
	// Deserialize `MintB`:
	err = decoder.Decode(&obj.MintB)
	if err != nil {
		return err
	}
	// Deserialize `TokenAReserves`:
	err = decoder.Decode(&obj.TokenAReserves)
	if err != nil {
		return err
	}
	// Deserialize `TokenBReserves`:
	err = decoder.Decode(&obj.TokenBReserves)
	if err != nil {
		return err
	}
	// Deserialize `Shift`:
	err = decoder.Decode(&obj.Shift)
	if err != nil {
		return err
	}
	// Deserialize `Royalties`:
	err = decoder.Decode(&obj.Royalties)
	if err != nil {
		return err
	}
	// Deserialize `VertigoFees`:
	err = decoder.Decode(&obj.VertigoFees)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `FeeParams`:
	err = decoder.Decode(&obj.FeeParams)
	if err != nil {
		return err
	}
	return nil
}
