// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package vr

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sell is the `sell` instruction.
type Sell struct {
	Params *SwapParams

	// [0] = [WRITE] pool
	//
	// [1] = [WRITE, SIGNER] user
	//
	// [2] = [] owner
	//
	// [3] = [] mint_a
	//
	// [4] = [] mint_b
	//
	// [5] = [WRITE] user_ta_a
	// ··········· Can be any token account owned by the user for this mint
	//
	// [6] = [WRITE] user_ta_b
	// ··········· Can be any token account owned by the user for this mint
	//
	// [7] = [WRITE] vault_a
	//
	// [8] = [WRITE] vault_b
	//
	// [9] = [] token_program_a
	//
	// [10] = [] token_program_b
	//
	// [11] = [] system_program
	//
	// [12] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSellInstructionBuilder creates a new `Sell` instruction builder.
func NewSellInstructionBuilder() *Sell {
	nd := &Sell{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	nd.AccountMetaSlice[11] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[12] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetParams sets the "params" parameter.
func (inst *Sell) SetParams(params SwapParams) *Sell {
	inst.Params = &params
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *Sell) SetPoolAccount(pool ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *Sell) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAccount sets the "user" account.
func (inst *Sell) SetUserAccount(user ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Sell) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOwnerAccount sets the "owner" account.
func (inst *Sell) SetOwnerAccount(owner ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *Sell) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAAccount sets the "mint_a" account.
func (inst *Sell) SetMintAAccount(mintA ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mintA)
	return inst
}

// GetMintAAccount gets the "mint_a" account.
func (inst *Sell) GetMintAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMintBAccount sets the "mint_b" account.
func (inst *Sell) SetMintBAccount(mintB ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mintB)
	return inst
}

// GetMintBAccount gets the "mint_b" account.
func (inst *Sell) GetMintBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetUserTaAAccount sets the "user_ta_a" account.
// Can be any token account owned by the user for this mint
func (inst *Sell) SetUserTaAAccount(userTaA ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(userTaA).WRITE()
	return inst
}

// GetUserTaAAccount gets the "user_ta_a" account.
// Can be any token account owned by the user for this mint
func (inst *Sell) GetUserTaAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserTaBAccount sets the "user_ta_b" account.
// Can be any token account owned by the user for this mint
func (inst *Sell) SetUserTaBAccount(userTaB ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(userTaB).WRITE()
	return inst
}

// GetUserTaBAccount gets the "user_ta_b" account.
// Can be any token account owned by the user for this mint
func (inst *Sell) GetUserTaBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetVaultAAccount sets the "vault_a" account.
func (inst *Sell) SetVaultAAccount(vaultA ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vaultA).WRITE()
	return inst
}

// GetVaultAAccount gets the "vault_a" account.
func (inst *Sell) GetVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetVaultBAccount sets the "vault_b" account.
func (inst *Sell) SetVaultBAccount(vaultB ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(vaultB).WRITE()
	return inst
}

// GetVaultBAccount gets the "vault_b" account.
func (inst *Sell) GetVaultBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAAccount sets the "token_program_a" account.
func (inst *Sell) SetTokenProgramAAccount(tokenProgramA ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgramA)
	return inst
}

// GetTokenProgramAAccount gets the "token_program_a" account.
func (inst *Sell) GetTokenProgramAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramBAccount sets the "token_program_b" account.
func (inst *Sell) SetTokenProgramBAccount(tokenProgramB ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgramB)
	return inst
}

// GetTokenProgramBAccount gets the "token_program_b" account.
func (inst *Sell) GetTokenProgramBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Sell) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Sell) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetProgramAccount sets the "program" account.
func (inst *Sell) SetProgramAccount(program ag_solanago.PublicKey) *Sell {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Sell) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst *Sell) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Sell) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Sell {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:13], metas...)
	return inst
}

func (inst *Sell) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[13:]
}

func (inst Sell) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Sell,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Sell) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Sell) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 13 {
		return errors.New("accounts slice has wrong length: expected 13 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MintA is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MintB is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.UserTaA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.UserTaB is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.VaultA is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.VaultB is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgramA is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgramB is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *Sell) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Sell")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           user", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         mint_a", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         mint_b", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      user_ta_a", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      user_ta_b", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        vault_a", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        vault_b", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("token_program_a", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("token_program_b", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj Sell) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Sell) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewSellInstruction declares a new Sell instruction with the provided parameters and accounts.
func NewSellInstruction(
	// Parameters:
	params SwapParams,
	// Accounts:
	pool ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	mintA ag_solanago.PublicKey,
	mintB ag_solanago.PublicKey,
	userTaA ag_solanago.PublicKey,
	userTaB ag_solanago.PublicKey,
	vaultA ag_solanago.PublicKey,
	vaultB ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey) *Sell {
	return NewSellInstructionBuilder().
		SetParams(params).
		SetPoolAccount(pool).
		SetUserAccount(user).
		SetOwnerAccount(owner).
		SetMintAAccount(mintA).
		SetMintBAccount(mintB).
		SetUserTaAAccount(userTaA).
		SetUserTaBAccount(userTaB).
		SetVaultAAccount(vaultA).
		SetVaultBAccount(vaultB).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB)
}

// NewSimpleSellInstruction declares a new Sell instruction with the provided parameters and accounts.
func NewSimpleSellInstruction(
	// Parameters:
	params SwapParams,
	user ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	mintA ag_solanago.PublicKey,
	mintB ag_solanago.PublicKey,
	userTaA ag_solanago.PublicKey,
	userTaB ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey,
	tokenProgramB ag_solanago.PublicKey) *Sell {
	pool := MustFindPoolAddress(owner, mintA, mintB)
	vaultA := MustFindVaultAAddress(pool, mintA)
	vaultB := MustFindVaultBAddress(pool, mintB)
	return NewSellInstructionBuilder().
		SetParams(params).
		SetPoolAccount(pool).
		SetUserAccount(user).
		SetOwnerAccount(owner).
		SetMintAAccount(mintA).
		SetMintBAccount(mintB).
		SetUserTaAAccount(userTaA).
		SetUserTaBAccount(userTaB).
		SetVaultAAccount(vaultA).
		SetVaultBAccount(vaultB).
		SetTokenProgramAAccount(tokenProgramA).
		SetTokenProgramBAccount(tokenProgramB)
}
