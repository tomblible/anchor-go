// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package vr

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Claim is the `claim` instruction.
type Claim struct {

	// [0] = [WRITE] pool
	//
	// [1] = [] system_program
	//
	// [2] = [WRITE, SIGNER] claimer
	//
	// [3] = [] mint_a
	// ··········· The token mint of the tokens used in the pool.
	//
	// [4] = [WRITE] vault_a
	//
	// [5] = [WRITE] receiver_ta_a
	// ··········· Can be any token account owned by the user for this mint
	//
	// [6] = [] token_program_a
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimInstructionBuilder creates a new `Claim` instruction builder.
func NewClaimInstructionBuilder() *Claim {
	nd := &Claim{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(SystemProgram)
	return nd
}

// SetPoolAccount sets the "pool" account.
func (inst *Claim) SetPoolAccount(pool ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *Claim) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Claim) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Claim) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetClaimerAccount sets the "claimer" account.
func (inst *Claim) SetClaimerAccount(claimer ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(claimer).WRITE().SIGNER()
	return inst
}

// GetClaimerAccount gets the "claimer" account.
func (inst *Claim) GetClaimerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAAccount sets the "mint_a" account.
// The token mint of the tokens used in the pool.
func (inst *Claim) SetMintAAccount(mintA ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mintA)
	return inst
}

// GetMintAAccount gets the "mint_a" account.
// The token mint of the tokens used in the pool.
func (inst *Claim) GetMintAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVaultAAccount sets the "vault_a" account.
func (inst *Claim) SetVaultAAccount(vaultA ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vaultA).WRITE()
	return inst
}

// GetVaultAAccount gets the "vault_a" account.
func (inst *Claim) GetVaultAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiverTaAAccount sets the "receiver_ta_a" account.
// Can be any token account owned by the user for this mint
func (inst *Claim) SetReceiverTaAAccount(receiverTaA ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiverTaA).WRITE()
	return inst
}

// GetReceiverTaAAccount gets the "receiver_ta_a" account.
// Can be any token account owned by the user for this mint
func (inst *Claim) GetReceiverTaAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAAccount sets the "token_program_a" account.
func (inst *Claim) SetTokenProgramAAccount(tokenProgramA ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgramA)
	return inst
}

// GetTokenProgramAAccount gets the "token_program_a" account.
func (inst *Claim) GetTokenProgramAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst *Claim) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Claim) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Claim {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:7], metas...)
	return inst
}

func (inst *Claim) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7:]
}

func (inst Claim) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Claim,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Claim) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Claim) Validate() error {
	if len(inst.AccountMetaSlice) < 7 {
		return errors.New("accounts slice has wrong length: expected 7 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Claimer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MintA is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.VaultA is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReceiverTaA is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgramA is not set")
		}
	}
	return nil
}

func (inst *Claim) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Claim")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        claimer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         mint_a", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        vault_a", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  receiver_ta_a", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("token_program_a", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj Claim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Claim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClaimInstruction declares a new Claim instruction with the provided parameters and accounts.
func NewClaimInstruction(
	// Accounts:
	pool ag_solanago.PublicKey,
	claimer ag_solanago.PublicKey,
	mintA ag_solanago.PublicKey,
	vaultA ag_solanago.PublicKey,
	receiverTaA ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey) *Claim {
	return NewClaimInstructionBuilder().
		SetPoolAccount(pool).
		SetClaimerAccount(claimer).
		SetMintAAccount(mintA).
		SetVaultAAccount(vaultA).
		SetReceiverTaAAccount(receiverTaA).
		SetTokenProgramAAccount(tokenProgramA)
}

// NewSimpleClaimInstruction declares a new Claim instruction with the provided parameters and accounts.
func NewSimpleClaimInstruction(
	// Accounts:
	pool ag_solanago.PublicKey,
	claimer ag_solanago.PublicKey,
	mintA ag_solanago.PublicKey,
	receiverTaA ag_solanago.PublicKey,
	tokenProgramA ag_solanago.PublicKey) *Claim {
	vaultA := MustFindVaultAAddress(pool, mintA)
	return NewClaimInstructionBuilder().
		SetPoolAccount(pool).
		SetClaimerAccount(claimer).
		SetMintAAccount(mintA).
		SetVaultAAccount(vaultA).
		SetReceiverTaAAccount(receiverTaA).
		SetTokenProgramAAccount(tokenProgramA)
}
