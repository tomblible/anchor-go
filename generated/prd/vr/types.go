// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package vr

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type BuyEvent struct {
	Pool         ag_solanago.PublicKey
	User         ag_solanago.PublicKey
	AmountA      uint64
	AmountB      uint64
	NewReservesA ag_binary.Uint128
	NewReservesB ag_binary.Uint128
	FeeA         uint64
}

func (obj BuyEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `AmountA` param:
	err = encoder.Encode(obj.AmountA)
	if err != nil {
		return err
	}
	// Serialize `AmountB` param:
	err = encoder.Encode(obj.AmountB)
	if err != nil {
		return err
	}
	// Serialize `NewReservesA` param:
	err = encoder.Encode(obj.NewReservesA)
	if err != nil {
		return err
	}
	// Serialize `NewReservesB` param:
	err = encoder.Encode(obj.NewReservesB)
	if err != nil {
		return err
	}
	// Serialize `FeeA` param:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BuyEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `AmountA`:
	err = decoder.Decode(&obj.AmountA)
	if err != nil {
		return err
	}
	// Deserialize `AmountB`:
	err = decoder.Decode(&obj.AmountB)
	if err != nil {
		return err
	}
	// Deserialize `NewReservesA`:
	err = decoder.Decode(&obj.NewReservesA)
	if err != nil {
		return err
	}
	// Deserialize `NewReservesB`:
	err = decoder.Decode(&obj.NewReservesB)
	if err != nil {
		return err
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return err
	}
	return nil
}

type CreateParams struct {
	Shift                 ag_binary.Uint128
	InitialTokenBReserves uint64
	FeeParams             FeeParams
}

func (obj CreateParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Shift` param:
	err = encoder.Encode(obj.Shift)
	if err != nil {
		return err
	}
	// Serialize `InitialTokenBReserves` param:
	err = encoder.Encode(obj.InitialTokenBReserves)
	if err != nil {
		return err
	}
	// Serialize `FeeParams` param:
	err = encoder.Encode(obj.FeeParams)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Shift`:
	err = decoder.Decode(&obj.Shift)
	if err != nil {
		return err
	}
	// Deserialize `InitialTokenBReserves`:
	err = decoder.Decode(&obj.InitialTokenBReserves)
	if err != nil {
		return err
	}
	// Deserialize `FeeParams`:
	err = decoder.Decode(&obj.FeeParams)
	if err != nil {
		return err
	}
	return nil
}

type FeeParams struct {
	// The normalization period in slots.
	// During this period, the fee will decay from 100% to the base fee.
	NormalizationPeriod uint64

	// Normalization period fee decay rate.
	// Higher values decay faster.
	Decay float64

	// Reference slot for the fee calculation.
	Reference uint64

	// Royalties in basis points.
	RoyaltiesBps uint16

	// Number of fee exempt buys.
	PrivilegedSwapper *ag_solanago.PublicKey `bin:"optional"`
}

func (obj FeeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NormalizationPeriod` param:
	err = encoder.Encode(obj.NormalizationPeriod)
	if err != nil {
		return err
	}
	// Serialize `Decay` param:
	err = encoder.Encode(obj.Decay)
	if err != nil {
		return err
	}
	// Serialize `Reference` param:
	err = encoder.Encode(obj.Reference)
	if err != nil {
		return err
	}
	// Serialize `RoyaltiesBps` param:
	err = encoder.Encode(obj.RoyaltiesBps)
	if err != nil {
		return err
	}
	// Serialize `PrivilegedSwapper` param (optional):
	{
		if obj.PrivilegedSwapper == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PrivilegedSwapper)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *FeeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NormalizationPeriod`:
	err = decoder.Decode(&obj.NormalizationPeriod)
	if err != nil {
		return err
	}
	// Deserialize `Decay`:
	err = decoder.Decode(&obj.Decay)
	if err != nil {
		return err
	}
	// Deserialize `Reference`:
	err = decoder.Decode(&obj.Reference)
	if err != nil {
		return err
	}
	// Deserialize `RoyaltiesBps`:
	err = decoder.Decode(&obj.RoyaltiesBps)
	if err != nil {
		return err
	}
	// Deserialize `PrivilegedSwapper` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PrivilegedSwapper)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Pool struct {
	Enabled        bool
	Owner          ag_solanago.PublicKey
	MintA          ag_solanago.PublicKey
	MintB          ag_solanago.PublicKey
	TokenAReserves ag_binary.Uint128
	TokenBReserves ag_binary.Uint128
	Shift          ag_binary.Uint128
	Royalties      uint64
	VertigoFees    uint64
	Bump           uint8
	FeeParams      FeeParams
}

func (obj Pool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `MintA` param:
	err = encoder.Encode(obj.MintA)
	if err != nil {
		return err
	}
	// Serialize `MintB` param:
	err = encoder.Encode(obj.MintB)
	if err != nil {
		return err
	}
	// Serialize `TokenAReserves` param:
	err = encoder.Encode(obj.TokenAReserves)
	if err != nil {
		return err
	}
	// Serialize `TokenBReserves` param:
	err = encoder.Encode(obj.TokenBReserves)
	if err != nil {
		return err
	}
	// Serialize `Shift` param:
	err = encoder.Encode(obj.Shift)
	if err != nil {
		return err
	}
	// Serialize `Royalties` param:
	err = encoder.Encode(obj.Royalties)
	if err != nil {
		return err
	}
	// Serialize `VertigoFees` param:
	err = encoder.Encode(obj.VertigoFees)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `FeeParams` param:
	err = encoder.Encode(obj.FeeParams)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Pool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `MintA`:
	err = decoder.Decode(&obj.MintA)
	if err != nil {
		return err
	}
	// Deserialize `MintB`:
	err = decoder.Decode(&obj.MintB)
	if err != nil {
		return err
	}
	// Deserialize `TokenAReserves`:
	err = decoder.Decode(&obj.TokenAReserves)
	if err != nil {
		return err
	}
	// Deserialize `TokenBReserves`:
	err = decoder.Decode(&obj.TokenBReserves)
	if err != nil {
		return err
	}
	// Deserialize `Shift`:
	err = decoder.Decode(&obj.Shift)
	if err != nil {
		return err
	}
	// Deserialize `Royalties`:
	err = decoder.Decode(&obj.Royalties)
	if err != nil {
		return err
	}
	// Deserialize `VertigoFees`:
	err = decoder.Decode(&obj.VertigoFees)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `FeeParams`:
	err = decoder.Decode(&obj.FeeParams)
	if err != nil {
		return err
	}
	return nil
}

type PoolCreated struct {
	Pool                 ag_solanago.PublicKey
	MintA                ag_solanago.PublicKey
	MintB                ag_solanago.PublicKey
	Owner                ag_solanago.PublicKey
	InitialTokenReserves uint64
	Shift                ag_binary.Uint128
	FeeParams            FeeParams
}

func (obj PoolCreated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `MintA` param:
	err = encoder.Encode(obj.MintA)
	if err != nil {
		return err
	}
	// Serialize `MintB` param:
	err = encoder.Encode(obj.MintB)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `InitialTokenReserves` param:
	err = encoder.Encode(obj.InitialTokenReserves)
	if err != nil {
		return err
	}
	// Serialize `Shift` param:
	err = encoder.Encode(obj.Shift)
	if err != nil {
		return err
	}
	// Serialize `FeeParams` param:
	err = encoder.Encode(obj.FeeParams)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolCreated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `MintA`:
	err = decoder.Decode(&obj.MintA)
	if err != nil {
		return err
	}
	// Deserialize `MintB`:
	err = decoder.Decode(&obj.MintB)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `InitialTokenReserves`:
	err = decoder.Decode(&obj.InitialTokenReserves)
	if err != nil {
		return err
	}
	// Deserialize `Shift`:
	err = decoder.Decode(&obj.Shift)
	if err != nil {
		return err
	}
	// Deserialize `FeeParams`:
	err = decoder.Decode(&obj.FeeParams)
	if err != nil {
		return err
	}
	return nil
}

type SellEvent struct {
	Pool         ag_solanago.PublicKey
	User         ag_solanago.PublicKey
	AmountA      uint64
	AmountB      uint64
	NewReservesA ag_binary.Uint128
	NewReservesB ag_binary.Uint128
	FeeA         uint64
}

func (obj SellEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `AmountA` param:
	err = encoder.Encode(obj.AmountA)
	if err != nil {
		return err
	}
	// Serialize `AmountB` param:
	err = encoder.Encode(obj.AmountB)
	if err != nil {
		return err
	}
	// Serialize `NewReservesA` param:
	err = encoder.Encode(obj.NewReservesA)
	if err != nil {
		return err
	}
	// Serialize `NewReservesB` param:
	err = encoder.Encode(obj.NewReservesB)
	if err != nil {
		return err
	}
	// Serialize `FeeA` param:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SellEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `AmountA`:
	err = decoder.Decode(&obj.AmountA)
	if err != nil {
		return err
	}
	// Deserialize `AmountB`:
	err = decoder.Decode(&obj.AmountB)
	if err != nil {
		return err
	}
	// Deserialize `NewReservesA`:
	err = decoder.Decode(&obj.NewReservesA)
	if err != nil {
		return err
	}
	// Deserialize `NewReservesB`:
	err = decoder.Decode(&obj.NewReservesB)
	if err != nil {
		return err
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return err
	}
	return nil
}

type SwapParams struct {
	Amount uint64
	Limit  uint64
}

func (obj SwapParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Limit` param:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

type SwapResult struct {
	NewReservesA ag_binary.Uint128
	NewReservesB ag_binary.Uint128
	AmountA      uint64
	AmountB      uint64
	FeeA         uint64
}

func (obj SwapResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewReservesA` param:
	err = encoder.Encode(obj.NewReservesA)
	if err != nil {
		return err
	}
	// Serialize `NewReservesB` param:
	err = encoder.Encode(obj.NewReservesB)
	if err != nil {
		return err
	}
	// Serialize `AmountA` param:
	err = encoder.Encode(obj.AmountA)
	if err != nil {
		return err
	}
	// Serialize `AmountB` param:
	err = encoder.Encode(obj.AmountB)
	if err != nil {
		return err
	}
	// Serialize `FeeA` param:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewReservesA`:
	err = decoder.Decode(&obj.NewReservesA)
	if err != nil {
		return err
	}
	// Deserialize `NewReservesB`:
	err = decoder.Decode(&obj.NewReservesB)
	if err != nil {
		return err
	}
	// Deserialize `AmountA`:
	err = decoder.Decode(&obj.AmountA)
	if err != nil {
		return err
	}
	// Deserialize `AmountB`:
	err = decoder.Decode(&obj.AmountB)
	if err != nil {
		return err
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return err
	}
	return nil
}
