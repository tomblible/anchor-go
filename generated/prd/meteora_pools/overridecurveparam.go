// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Update swap curve parameters. This function do not allow update of curve type. For example: stable swap curve to constant product curve. Only supported by pool with stable swap curve.
// Only amp is allowed to be override. The other attributes of stable swap curve will be ignored.
type OverrideCurveParam struct {
	CurveType CurveType

	// [0] = [WRITE] pool
	// ··········· Pool account (PDA)
	//
	// [1] = [SIGNER] admin
	// ··········· Admin account.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewOverrideCurveParamInstructionBuilder creates a new `OverrideCurveParam` instruction builder.
func NewOverrideCurveParamInstructionBuilder() *OverrideCurveParam {
	nd := &OverrideCurveParam{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetCurveType sets the "curve_type" parameter.
func (inst *OverrideCurveParam) SetCurveType(curve_type CurveType) *OverrideCurveParam {
	inst.CurveType = curve_type
	return inst
}

// SetPoolAccount sets the "pool" account.
// Pool account (PDA)
func (inst *OverrideCurveParam) SetPoolAccount(pool ag_solanago.PublicKey) *OverrideCurveParam {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account (PDA)
func (inst *OverrideCurveParam) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
// Admin account.
func (inst *OverrideCurveParam) SetAdminAccount(admin ag_solanago.PublicKey) *OverrideCurveParam {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
// Admin account.
func (inst *OverrideCurveParam) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst *OverrideCurveParam) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *OverrideCurveParam) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *OverrideCurveParam {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:2], metas...)
	return inst
}

func (inst *OverrideCurveParam) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2:]
}

func (inst OverrideCurveParam) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_OverrideCurveParam,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst OverrideCurveParam) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *OverrideCurveParam) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CurveType == nil {
			return errors.New("curveType parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 2 {
		return errors.New("accounts slice has wrong length: expected 2 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *OverrideCurveParam) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("OverrideCurveParam")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" CurveType", inst.CurveType))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("admin", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj OverrideCurveParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CurveType` param:
	{
		tmp := curveTypeContainer{}
		switch realvalue := obj.CurveType.(type) {
		case *CurveTypeConstantProductTuple:
			tmp.Enum = 0
			tmp.ConstantProduct = *realvalue
		case *CurveTypeStableTuple:
			tmp.Enum = 1
			tmp.Stable = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *OverrideCurveParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CurveType`:
	{
		tmp := new(curveTypeContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.CurveType = (*CurveTypeConstantProductTuple)(&tmp.Enum)
		case 1:
			obj.CurveType = &tmp.Stable
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewOverrideCurveParamInstruction declares a new OverrideCurveParam instruction with the provided parameters and accounts.
func NewOverrideCurveParamInstruction(
	// Parameters:
	curve_type CurveType,
	// Accounts:
	pool ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *OverrideCurveParam {
	return NewOverrideCurveParamInstructionBuilder().
		SetCurveType(curve_type).
		SetPoolAccount(pool).
		SetAdminAccount(admin)
}

// NewSimpleOverrideCurveParamInstruction declares a new OverrideCurveParam instruction with the provided parameters and accounts.
func NewSimpleOverrideCurveParamInstruction(
	// Parameters:
	curve_type CurveType,
	// Accounts:
	pool ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *OverrideCurveParam {
	return NewOverrideCurveParamInstructionBuilder().
		SetCurveType(curve_type).
		SetPoolAccount(pool).
		SetAdminAccount(admin)
}
