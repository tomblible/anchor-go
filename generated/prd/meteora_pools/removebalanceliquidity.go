// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Withdraw tokens from the pool in a balanced ratio. User will still able to withdraw from pool even the pool is disabled. This allow user to exit their liquidity when there's some unforeseen event happen.
type RemoveBalanceLiquidity struct {
	PoolTokenAmount  *uint64
	MinimumATokenOut *uint64
	MinimumBTokenOut *uint64

	// [0] = [WRITE] pool
	// ··········· Pool account (PDA)
	//
	// [1] = [WRITE] lp_mint
	// ··········· LP token mint of the pool
	//
	// [2] = [WRITE] user_pool_lp
	// ··········· user pool lp token account. lp will be burned from this account upon success liquidity removal.
	//
	// [3] = [WRITE] a_vault_lp
	// ··········· LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [4] = [WRITE] b_vault_lp
	// ··········· LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [5] = [WRITE] a_vault
	// ··········· Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
	//
	// [6] = [WRITE] b_vault
	// ··········· Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
	//
	// [7] = [WRITE] a_vault_lp_mint
	// ··········· LP token mint of vault a
	//
	// [8] = [WRITE] b_vault_lp_mint
	// ··········· LP token mint of vault b
	//
	// [9] = [WRITE] a_token_vault
	// ··········· Token vault account of vault A
	//
	// [10] = [WRITE] b_token_vault
	// ··········· Token vault account of vault B
	//
	// [11] = [WRITE] user_a_token
	// ··········· User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
	//
	// [12] = [WRITE] user_b_token
	// ··········· User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
	//
	// [13] = [SIGNER] user
	// ··········· User account. Must be owner of user_a_token, and user_b_token.
	//
	// [14] = [] vault_program
	// ··········· Vault program. the pool will deposit/withdraw liquidity from the vault.
	//
	// [15] = [] token_program
	// ··········· Token program.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRemoveBalanceLiquidityInstructionBuilder creates a new `RemoveBalanceLiquidity` instruction builder.
func NewRemoveBalanceLiquidityInstructionBuilder() *RemoveBalanceLiquidity {
	nd := &RemoveBalanceLiquidity{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetPoolTokenAmount sets the "pool_token_amount" parameter.
func (inst *RemoveBalanceLiquidity) SetPoolTokenAmount(pool_token_amount uint64) *RemoveBalanceLiquidity {
	inst.PoolTokenAmount = &pool_token_amount
	return inst
}

// SetMinimumATokenOut sets the "minimum_a_token_out" parameter.
func (inst *RemoveBalanceLiquidity) SetMinimumATokenOut(minimum_a_token_out uint64) *RemoveBalanceLiquidity {
	inst.MinimumATokenOut = &minimum_a_token_out
	return inst
}

// SetMinimumBTokenOut sets the "minimum_b_token_out" parameter.
func (inst *RemoveBalanceLiquidity) SetMinimumBTokenOut(minimum_b_token_out uint64) *RemoveBalanceLiquidity {
	inst.MinimumBTokenOut = &minimum_b_token_out
	return inst
}

// SetPoolAccount sets the "pool" account.
// Pool account (PDA)
func (inst *RemoveBalanceLiquidity) SetPoolAccount(pool ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account (PDA)
func (inst *RemoveBalanceLiquidity) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLpMintAccount sets the "lp_mint" account.
// LP token mint of the pool
func (inst *RemoveBalanceLiquidity) SetLpMintAccount(lpMint ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
// LP token mint of the pool
func (inst *RemoveBalanceLiquidity) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserPoolLpAccount sets the "user_pool_lp" account.
// user pool lp token account. lp will be burned from this account upon success liquidity removal.
func (inst *RemoveBalanceLiquidity) SetUserPoolLpAccount(userPoolLp ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userPoolLp).WRITE()
	return inst
}

// GetUserPoolLpAccount gets the "user_pool_lp" account.
// user pool lp token account. lp will be burned from this account upon success liquidity removal.
func (inst *RemoveBalanceLiquidity) GetUserPoolLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAVaultLpAccount sets the "a_vault_lp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *RemoveBalanceLiquidity) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(aVaultLp).WRITE()
	return inst
}

// GetAVaultLpAccount gets the "a_vault_lp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *RemoveBalanceLiquidity) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBVaultLpAccount sets the "b_vault_lp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *RemoveBalanceLiquidity) SetBVaultLpAccount(bVaultLp ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bVaultLp).WRITE()
	return inst
}

// GetBVaultLpAccount gets the "b_vault_lp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *RemoveBalanceLiquidity) GetBVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetAVaultAccount sets the "a_vault" account.
// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
func (inst *RemoveBalanceLiquidity) SetAVaultAccount(aVault ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(aVault).WRITE()
	return inst
}

// GetAVaultAccount gets the "a_vault" account.
// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
func (inst *RemoveBalanceLiquidity) GetAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBVaultAccount sets the "b_vault" account.
// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
func (inst *RemoveBalanceLiquidity) SetBVaultAccount(bVault ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(bVault).WRITE()
	return inst
}

// GetBVaultAccount gets the "b_vault" account.
// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
func (inst *RemoveBalanceLiquidity) GetBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAVaultLpMintAccount sets the "a_vault_lp_mint" account.
// LP token mint of vault a
func (inst *RemoveBalanceLiquidity) SetAVaultLpMintAccount(aVaultLpMint ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(aVaultLpMint).WRITE()
	return inst
}

// GetAVaultLpMintAccount gets the "a_vault_lp_mint" account.
// LP token mint of vault a
func (inst *RemoveBalanceLiquidity) GetAVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetBVaultLpMintAccount sets the "b_vault_lp_mint" account.
// LP token mint of vault b
func (inst *RemoveBalanceLiquidity) SetBVaultLpMintAccount(bVaultLpMint ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(bVaultLpMint).WRITE()
	return inst
}

// GetBVaultLpMintAccount gets the "b_vault_lp_mint" account.
// LP token mint of vault b
func (inst *RemoveBalanceLiquidity) GetBVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetATokenVaultAccount sets the "a_token_vault" account.
// Token vault account of vault A
func (inst *RemoveBalanceLiquidity) SetATokenVaultAccount(aTokenVault ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(aTokenVault).WRITE()
	return inst
}

// GetATokenVaultAccount gets the "a_token_vault" account.
// Token vault account of vault A
func (inst *RemoveBalanceLiquidity) GetATokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetBTokenVaultAccount sets the "b_token_vault" account.
// Token vault account of vault B
func (inst *RemoveBalanceLiquidity) SetBTokenVaultAccount(bTokenVault ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(bTokenVault).WRITE()
	return inst
}

// GetBTokenVaultAccount gets the "b_token_vault" account.
// Token vault account of vault B
func (inst *RemoveBalanceLiquidity) GetBTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserATokenAccount sets the "user_a_token" account.
// User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
func (inst *RemoveBalanceLiquidity) SetUserATokenAccount(userAToken ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userAToken).WRITE()
	return inst
}

// GetUserATokenAccount gets the "user_a_token" account.
// User token A account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
func (inst *RemoveBalanceLiquidity) GetUserATokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserBTokenAccount sets the "user_b_token" account.
// User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
func (inst *RemoveBalanceLiquidity) SetUserBTokenAccount(userBToken ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(userBToken).WRITE()
	return inst
}

// GetUserBTokenAccount gets the "user_b_token" account.
// User token B account. Token will be transfer from this account if it is add liquidity operation. Else, token will be transfer into this account.
func (inst *RemoveBalanceLiquidity) GetUserBTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetUserAccount sets the "user" account.
// User account. Must be owner of user_a_token, and user_b_token.
func (inst *RemoveBalanceLiquidity) SetUserAccount(user ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
// User account. Must be owner of user_a_token, and user_b_token.
func (inst *RemoveBalanceLiquidity) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetVaultProgramAccount sets the "vault_program" account.
// Vault program. the pool will deposit/withdraw liquidity from the vault.
func (inst *RemoveBalanceLiquidity) SetVaultProgramAccount(vaultProgram ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(vaultProgram)
	return inst
}

// GetVaultProgramAccount gets the "vault_program" account.
// Vault program. the pool will deposit/withdraw liquidity from the vault.
func (inst *RemoveBalanceLiquidity) GetVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetTokenProgramAccount sets the "token_program" account.
// Token program.
func (inst *RemoveBalanceLiquidity) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// Token program.
func (inst *RemoveBalanceLiquidity) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst *RemoveBalanceLiquidity) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *RemoveBalanceLiquidity) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *RemoveBalanceLiquidity {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:16], metas...)
	return inst
}

func (inst *RemoveBalanceLiquidity) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[16:]
}

func (inst RemoveBalanceLiquidity) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RemoveBalanceLiquidity,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RemoveBalanceLiquidity) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RemoveBalanceLiquidity) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PoolTokenAmount == nil {
			return errors.New("poolTokenAmount parameter is not set")
		}
		if inst.MinimumATokenOut == nil {
			return errors.New("minimumATokenOut parameter is not set")
		}
		if inst.MinimumBTokenOut == nil {
			return errors.New("minimumBTokenOut parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 16 {
		return errors.New("accounts slice has wrong length: expected 16 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserPoolLp is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BVaultLp is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.AVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.BVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.ATokenVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.BTokenVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserAToken is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.UserBToken is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.VaultProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *RemoveBalanceLiquidity) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RemoveBalanceLiquidity")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    PoolTokenAmount", *inst.PoolTokenAmount))
						paramsBranch.Child(ag_format.Param("   MinimumATokenOut", *inst.MinimumATokenOut))
						paramsBranch.Child(ag_format.Param("   MinimumBTokenOut", *inst.MinimumBTokenOut))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        lp_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   user_pool_lp", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     a_vault_lp", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     b_vault_lp", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        a_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        b_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("a_vault_lp_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("b_vault_lp_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  a_token_vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("  b_token_vault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   user_a_token", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   user_b_token", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("           user", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("  vault_program", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("  token_program", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj RemoveBalanceLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolTokenAmount` param:
	err = encoder.Encode(obj.PoolTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MinimumATokenOut` param:
	err = encoder.Encode(obj.MinimumATokenOut)
	if err != nil {
		return err
	}
	// Serialize `MinimumBTokenOut` param:
	err = encoder.Encode(obj.MinimumBTokenOut)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RemoveBalanceLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolTokenAmount`:
	err = decoder.Decode(&obj.PoolTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MinimumATokenOut`:
	err = decoder.Decode(&obj.MinimumATokenOut)
	if err != nil {
		return err
	}
	// Deserialize `MinimumBTokenOut`:
	err = decoder.Decode(&obj.MinimumBTokenOut)
	if err != nil {
		return err
	}
	return nil
}

// NewRemoveBalanceLiquidityInstruction declares a new RemoveBalanceLiquidity instruction with the provided parameters and accounts.
func NewRemoveBalanceLiquidityInstruction(
	// Parameters:
	pool_token_amount uint64,
	minimum_a_token_out uint64,
	minimum_b_token_out uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	userPoolLp ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey,
	aTokenVault ag_solanago.PublicKey,
	bTokenVault ag_solanago.PublicKey,
	userAToken ag_solanago.PublicKey,
	userBToken ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	return NewRemoveBalanceLiquidityInstructionBuilder().
		SetPoolTokenAmount(pool_token_amount).
		SetMinimumATokenOut(minimum_a_token_out).
		SetMinimumBTokenOut(minimum_b_token_out).
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetUserPoolLpAccount(userPoolLp).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint).
		SetATokenVaultAccount(aTokenVault).
		SetBTokenVaultAccount(bTokenVault).
		SetUserATokenAccount(userAToken).
		SetUserBTokenAccount(userBToken).
		SetUserAccount(user).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram)
}

// NewSimpleRemoveBalanceLiquidityInstruction declares a new RemoveBalanceLiquidity instruction with the provided parameters and accounts.
func NewSimpleRemoveBalanceLiquidityInstruction(
	// Parameters:
	pool_token_amount uint64,
	minimum_a_token_out uint64,
	minimum_b_token_out uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	userPoolLp ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey,
	aTokenVault ag_solanago.PublicKey,
	bTokenVault ag_solanago.PublicKey,
	userAToken ag_solanago.PublicKey,
	userBToken ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *RemoveBalanceLiquidity {
	return NewRemoveBalanceLiquidityInstructionBuilder().
		SetPoolTokenAmount(pool_token_amount).
		SetMinimumATokenOut(minimum_a_token_out).
		SetMinimumBTokenOut(minimum_b_token_out).
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetUserPoolLpAccount(userPoolLp).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint).
		SetATokenVaultAccount(aTokenVault).
		SetBTokenVaultAccount(bTokenVault).
		SetUserATokenAccount(userAToken).
		SetUserBTokenAccount(userBToken).
		SetUserAccount(user).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram)
}
