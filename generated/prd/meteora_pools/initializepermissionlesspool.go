// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize a new permissionless pool.
type InitializePermissionlessPool struct {
	CurveType    CurveType
	TokenAAmount *uint64
	TokenBAmount *uint64

	// [0] = [WRITE] pool
	// ··········· Pool account (PDA address)
	//
	// [1] = [WRITE] lp_mint
	// ··········· LP token mint of the pool
	//
	// [2] = [] token_a_mint
	// ··········· Token A mint of the pool. Eg: USDT
	//
	// [3] = [] token_b_mint
	// ··········· Token B mint of the pool. Eg: USDC
	//
	// [4] = [WRITE] a_vault
	// ··········· Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
	//
	// [5] = [WRITE] b_vault
	// ··········· Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
	//
	// [6] = [WRITE] a_token_vault
	// ··········· Token vault account of vault A
	//
	// [7] = [WRITE] b_token_vault
	// ··········· Token vault account of vault B
	//
	// [8] = [WRITE] a_vault_lp_mint
	// ··········· LP token mint of vault A
	//
	// [9] = [WRITE] b_vault_lp_mint
	// ··········· LP token mint of vault B
	//
	// [10] = [WRITE] a_vault_lp
	// ··········· LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [11] = [WRITE] b_vault_lp
	// ··········· LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
	//
	// [12] = [WRITE] payer_token_a
	// ··········· Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
	//
	// [13] = [WRITE] payer_token_b
	// ··········· Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
	//
	// [14] = [WRITE] payer_pool_lp
	//
	// [15] = [WRITE] protocol_token_a_fee
	// ··········· Protocol fee token account for token A. Used to receive trading fee.
	//
	// [16] = [WRITE] protocol_token_b_fee
	// ··········· Protocol fee token account for token B. Used to receive trading fee.
	//
	// [17] = [WRITE, SIGNER] payer
	// ··········· Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
	//
	// [18] = [] fee_owner
	//
	// [19] = [] rent
	// ··········· Rent account.
	//
	// [20] = [WRITE] mint_metadata
	//
	// [21] = [] metadata_program
	//
	// [22] = [] vault_program
	// ··········· Vault program. The pool will deposit/withdraw liquidity from the vault.
	//
	// [23] = [] token_program
	// ··········· Token program.
	//
	// [24] = [] associated_token_program
	// ··········· Associated token program.
	//
	// [25] = [] system_program
	// ··········· System program.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePermissionlessPoolInstructionBuilder creates a new `InitializePermissionlessPool` instruction builder.
func NewInitializePermissionlessPoolInstructionBuilder() *InitializePermissionlessPool {
	nd := &InitializePermissionlessPool{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 26),
	}
	return nd
}

// SetCurveType sets the "curve_type" parameter.
func (inst *InitializePermissionlessPool) SetCurveType(curve_type CurveType) *InitializePermissionlessPool {
	inst.CurveType = curve_type
	return inst
}

// SetTokenAAmount sets the "token_a_amount" parameter.
func (inst *InitializePermissionlessPool) SetTokenAAmount(token_a_amount uint64) *InitializePermissionlessPool {
	inst.TokenAAmount = &token_a_amount
	return inst
}

// SetTokenBAmount sets the "token_b_amount" parameter.
func (inst *InitializePermissionlessPool) SetTokenBAmount(token_b_amount uint64) *InitializePermissionlessPool {
	inst.TokenBAmount = &token_b_amount
	return inst
}

// SetPoolAccount sets the "pool" account.
// Pool account (PDA address)
func (inst *InitializePermissionlessPool) SetPoolAccount(pool ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account (PDA address)
func (inst *InitializePermissionlessPool) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLpMintAccount sets the "lp_mint" account.
// LP token mint of the pool
func (inst *InitializePermissionlessPool) SetLpMintAccount(lpMint ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
// LP token mint of the pool
func (inst *InitializePermissionlessPool) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAMintAccount sets the "token_a_mint" account.
// Token A mint of the pool. Eg: USDT
func (inst *InitializePermissionlessPool) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "token_a_mint" account.
// Token A mint of the pool. Eg: USDT
func (inst *InitializePermissionlessPool) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBMintAccount sets the "token_b_mint" account.
// Token B mint of the pool. Eg: USDC
func (inst *InitializePermissionlessPool) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "token_b_mint" account.
// Token B mint of the pool. Eg: USDC
func (inst *InitializePermissionlessPool) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAVaultAccount sets the "a_vault" account.
// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
func (inst *InitializePermissionlessPool) SetAVaultAccount(aVault ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(aVault).WRITE()
	return inst
}

// GetAVaultAccount gets the "a_vault" account.
// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
func (inst *InitializePermissionlessPool) GetAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBVaultAccount sets the "b_vault" account.
// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
func (inst *InitializePermissionlessPool) SetBVaultAccount(bVault ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bVault).WRITE()
	return inst
}

// GetBVaultAccount gets the "b_vault" account.
// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
func (inst *InitializePermissionlessPool) GetBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetATokenVaultAccount sets the "a_token_vault" account.
// Token vault account of vault A
func (inst *InitializePermissionlessPool) SetATokenVaultAccount(aTokenVault ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(aTokenVault).WRITE()
	return inst
}

// GetATokenVaultAccount gets the "a_token_vault" account.
// Token vault account of vault A
func (inst *InitializePermissionlessPool) GetATokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBTokenVaultAccount sets the "b_token_vault" account.
// Token vault account of vault B
func (inst *InitializePermissionlessPool) SetBTokenVaultAccount(bTokenVault ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(bTokenVault).WRITE()
	return inst
}

// GetBTokenVaultAccount gets the "b_token_vault" account.
// Token vault account of vault B
func (inst *InitializePermissionlessPool) GetBTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAVaultLpMintAccount sets the "a_vault_lp_mint" account.
// LP token mint of vault A
func (inst *InitializePermissionlessPool) SetAVaultLpMintAccount(aVaultLpMint ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(aVaultLpMint).WRITE()
	return inst
}

// GetAVaultLpMintAccount gets the "a_vault_lp_mint" account.
// LP token mint of vault A
func (inst *InitializePermissionlessPool) GetAVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetBVaultLpMintAccount sets the "b_vault_lp_mint" account.
// LP token mint of vault B
func (inst *InitializePermissionlessPool) SetBVaultLpMintAccount(bVaultLpMint ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(bVaultLpMint).WRITE()
	return inst
}

// GetBVaultLpMintAccount gets the "b_vault_lp_mint" account.
// LP token mint of vault B
func (inst *InitializePermissionlessPool) GetBVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAVaultLpAccount sets the "a_vault_lp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *InitializePermissionlessPool) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(aVaultLp).WRITE()
	return inst
}

// GetAVaultLpAccount gets the "a_vault_lp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *InitializePermissionlessPool) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBVaultLpAccount sets the "b_vault_lp" account.
// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
func (inst *InitializePermissionlessPool) SetBVaultLpAccount(bVaultLp ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(bVaultLp).WRITE()
	return inst
}

// GetBVaultLpAccount gets the "b_vault_lp" account.
// LP token account of vault B. Used to receive/burn vault LP upon deposit/withdraw from the vault.
func (inst *InitializePermissionlessPool) GetBVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetPayerTokenAAccount sets the "payer_token_a" account.
// Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
func (inst *InitializePermissionlessPool) SetPayerTokenAAccount(payerTokenA ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(payerTokenA).WRITE()
	return inst
}

// GetPayerTokenAAccount gets the "payer_token_a" account.
// Payer token account for pool token A mint. Used to bootstrap the pool with initial liquidity.
func (inst *InitializePermissionlessPool) GetPayerTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetPayerTokenBAccount sets the "payer_token_b" account.
// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
func (inst *InitializePermissionlessPool) SetPayerTokenBAccount(payerTokenB ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(payerTokenB).WRITE()
	return inst
}

// GetPayerTokenBAccount gets the "payer_token_b" account.
// Admin token account for pool token B mint. Used to bootstrap the pool with initial liquidity.
func (inst *InitializePermissionlessPool) GetPayerTokenBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetPayerPoolLpAccount sets the "payer_pool_lp" account.
func (inst *InitializePermissionlessPool) SetPayerPoolLpAccount(payerPoolLp ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(payerPoolLp).WRITE()
	return inst
}

// GetPayerPoolLpAccount gets the "payer_pool_lp" account.
func (inst *InitializePermissionlessPool) GetPayerPoolLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetProtocolTokenAFeeAccount sets the "protocol_token_a_fee" account.
// Protocol fee token account for token A. Used to receive trading fee.
func (inst *InitializePermissionlessPool) SetProtocolTokenAFeeAccount(protocolTokenAFee ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(protocolTokenAFee).WRITE()
	return inst
}

// GetProtocolTokenAFeeAccount gets the "protocol_token_a_fee" account.
// Protocol fee token account for token A. Used to receive trading fee.
func (inst *InitializePermissionlessPool) GetProtocolTokenAFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetProtocolTokenBFeeAccount sets the "protocol_token_b_fee" account.
// Protocol fee token account for token B. Used to receive trading fee.
func (inst *InitializePermissionlessPool) SetProtocolTokenBFeeAccount(protocolTokenBFee ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(protocolTokenBFee).WRITE()
	return inst
}

// GetProtocolTokenBFeeAccount gets the "protocol_token_b_fee" account.
// Protocol fee token account for token B. Used to receive trading fee.
func (inst *InitializePermissionlessPool) GetProtocolTokenBFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetPayerAccount sets the "payer" account.
// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
func (inst *InitializePermissionlessPool) SetPayerAccount(payer ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Admin account. This account will be the admin of the pool, and the payer for PDA during initialize pool.
func (inst *InitializePermissionlessPool) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetFeeOwnerAccount sets the "fee_owner" account.
func (inst *InitializePermissionlessPool) SetFeeOwnerAccount(feeOwner ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(feeOwner)
	return inst
}

// GetFeeOwnerAccount gets the "fee_owner" account.
func (inst *InitializePermissionlessPool) GetFeeOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetRentAccount sets the "rent" account.
// Rent account.
func (inst *InitializePermissionlessPool) SetRentAccount(rent ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Rent account.
func (inst *InitializePermissionlessPool) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetMintMetadataAccount sets the "mint_metadata" account.
func (inst *InitializePermissionlessPool) SetMintMetadataAccount(mintMetadata ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(mintMetadata).WRITE()
	return inst
}

// GetMintMetadataAccount gets the "mint_metadata" account.
func (inst *InitializePermissionlessPool) GetMintMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetMetadataProgramAccount sets the "metadata_program" account.
func (inst *InitializePermissionlessPool) SetMetadataProgramAccount(metadataProgram ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(metadataProgram)
	return inst
}

// GetMetadataProgramAccount gets the "metadata_program" account.
func (inst *InitializePermissionlessPool) GetMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

// SetVaultProgramAccount sets the "vault_program" account.
// Vault program. The pool will deposit/withdraw liquidity from the vault.
func (inst *InitializePermissionlessPool) SetVaultProgramAccount(vaultProgram ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[22] = ag_solanago.Meta(vaultProgram)
	return inst
}

// GetVaultProgramAccount gets the "vault_program" account.
// Vault program. The pool will deposit/withdraw liquidity from the vault.
func (inst *InitializePermissionlessPool) GetVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(22)
}

// SetTokenProgramAccount sets the "token_program" account.
// Token program.
func (inst *InitializePermissionlessPool) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[23] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// Token program.
func (inst *InitializePermissionlessPool) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(23)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
// Associated token program.
func (inst *InitializePermissionlessPool) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[24] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
// Associated token program.
func (inst *InitializePermissionlessPool) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(24)
}

// SetSystemProgramAccount sets the "system_program" account.
// System program.
func (inst *InitializePermissionlessPool) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePermissionlessPool {
	inst.AccountMetaSlice[25] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// System program.
func (inst *InitializePermissionlessPool) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(25)
}

func (inst *InitializePermissionlessPool) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializePermissionlessPool) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializePermissionlessPool {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:26], metas...)
	return inst
}

func (inst *InitializePermissionlessPool) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[26:]
}

func (inst InitializePermissionlessPool) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePermissionlessPool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePermissionlessPool) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePermissionlessPool) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CurveType == nil {
			return errors.New("curveType parameter is not set")
		}
		if inst.TokenAAmount == nil {
			return errors.New("tokenAAmount parameter is not set")
		}
		if inst.TokenBAmount == nil {
			return errors.New("tokenBAmount parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 26 {
		return errors.New("accounts slice has wrong length: expected 26 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ATokenVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BTokenVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.BVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BVaultLp is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.PayerTokenA is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.PayerTokenB is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.PayerPoolLp is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.ProtocolTokenAFee is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.ProtocolTokenBFee is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.FeeOwner is not set")
		}
		if inst.AccountMetaSlice[19] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.MintMetadata is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.MetadataProgram is not set")
		}
		if inst.AccountMetaSlice[22] == nil {
			return errors.New("accounts.VaultProgram is not set")
		}
		if inst.AccountMetaSlice[23] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[24] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[25] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializePermissionlessPool) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePermissionlessPool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     CurveType", inst.CurveType))
						paramsBranch.Child(ag_format.Param("  TokenAAmount", *inst.TokenAAmount))
						paramsBranch.Child(ag_format.Param("  TokenBAmount", *inst.TokenBAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=26]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 lp_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            token_a_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            token_b_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 a_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 b_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           a_token_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           b_token_vault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         a_vault_lp_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         b_vault_lp_mint", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("              a_vault_lp", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("              b_vault_lp", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("           payer_token_a", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("           payer_token_b", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("           payer_pool_lp", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("    protocol_token_a_fee", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("    protocol_token_b_fee", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("                   payer", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("               fee_owner", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("                    rent", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("           mint_metadata", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("        metadata_program", inst.AccountMetaSlice.Get(21)))
						accountsBranch.Child(ag_format.Meta("           vault_program", inst.AccountMetaSlice.Get(22)))
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(23)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(24)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(25)))
					})
				})
		})
}

func (obj InitializePermissionlessPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CurveType` param:
	{
		tmp := curveTypeContainer{}
		switch realvalue := obj.CurveType.(type) {
		case *CurveTypeConstantProductTuple:
			tmp.Enum = 0
			tmp.ConstantProduct = *realvalue
		case *CurveTypeStableTuple:
			tmp.Enum = 1
			tmp.Stable = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePermissionlessPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CurveType`:
	{
		tmp := new(curveTypeContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.CurveType = (*CurveTypeConstantProductTuple)(&tmp.Enum)
		case 1:
			obj.CurveType = &tmp.Stable
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePermissionlessPoolInstruction declares a new InitializePermissionlessPool instruction with the provided parameters and accounts.
func NewInitializePermissionlessPoolInstruction(
	// Parameters:
	curve_type CurveType,
	token_a_amount uint64,
	token_b_amount uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aTokenVault ag_solanago.PublicKey,
	bTokenVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	payerTokenA ag_solanago.PublicKey,
	payerTokenB ag_solanago.PublicKey,
	payerPoolLp ag_solanago.PublicKey,
	protocolTokenAFee ag_solanago.PublicKey,
	protocolTokenBFee ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	feeOwner ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	mintMetadata ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializePermissionlessPool {
	return NewInitializePermissionlessPoolInstructionBuilder().
		SetCurveType(curve_type).
		SetTokenAAmount(token_a_amount).
		SetTokenBAmount(token_b_amount).
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetATokenVaultAccount(aTokenVault).
		SetBTokenVaultAccount(bTokenVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetPayerTokenAAccount(payerTokenA).
		SetPayerTokenBAccount(payerTokenB).
		SetPayerPoolLpAccount(payerPoolLp).
		SetProtocolTokenAFeeAccount(protocolTokenAFee).
		SetProtocolTokenBFeeAccount(protocolTokenBFee).
		SetPayerAccount(payer).
		SetFeeOwnerAccount(feeOwner).
		SetRentAccount(rent).
		SetMintMetadataAccount(mintMetadata).
		SetMetadataProgramAccount(metadataProgram).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleInitializePermissionlessPoolInstruction declares a new InitializePermissionlessPool instruction with the provided parameters and accounts.
func NewSimpleInitializePermissionlessPoolInstruction(
	// Parameters:
	curve_type CurveType,
	token_a_amount uint64,
	token_b_amount uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aTokenVault ag_solanago.PublicKey,
	bTokenVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	payerTokenA ag_solanago.PublicKey,
	payerTokenB ag_solanago.PublicKey,
	payerPoolLp ag_solanago.PublicKey,
	protocolTokenAFee ag_solanago.PublicKey,
	protocolTokenBFee ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	feeOwner ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	mintMetadata ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializePermissionlessPool {
	return NewInitializePermissionlessPoolInstructionBuilder().
		SetCurveType(curve_type).
		SetTokenAAmount(token_a_amount).
		SetTokenBAmount(token_b_amount).
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetATokenVaultAccount(aTokenVault).
		SetBTokenVaultAccount(bTokenVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetPayerTokenAAccount(payerTokenA).
		SetPayerTokenBAccount(payerTokenB).
		SetPayerPoolLpAccount(payerPoolLp).
		SetProtocolTokenAFeeAccount(protocolTokenAFee).
		SetProtocolTokenBFeeAccount(protocolTokenBFee).
		SetPayerAccount(payer).
		SetFeeOwnerAccount(feeOwner).
		SetRentAccount(rent).
		SetMintMetadataAccount(mintMetadata).
		SetMetadataProgramAccount(metadataProgram).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
