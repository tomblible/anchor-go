// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Get the general information of the pool.
type GetPoolInfo struct {

	// [0] = [] pool
	// ··········· Pool account (PDA)
	//
	// [1] = [] lp_mint
	// ··········· LP token mint of the pool
	//
	// [2] = [] a_vault_lp
	// ··········· LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [3] = [] b_vault_lp
	// ··········· LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [4] = [] a_vault
	// ··········· Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
	//
	// [5] = [] b_vault
	// ··········· Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
	//
	// [6] = [] a_vault_lp_mint
	// ··········· LP token mint of vault a
	//
	// [7] = [] b_vault_lp_mint
	// ··········· LP token mint of vault b
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewGetPoolInfoInstructionBuilder creates a new `GetPoolInfo` instruction builder.
func NewGetPoolInfoInstructionBuilder() *GetPoolInfo {
	nd := &GetPoolInfo{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetPoolAccount sets the "pool" account.
// Pool account (PDA)
func (inst *GetPoolInfo) SetPoolAccount(pool ag_solanago.PublicKey) *GetPoolInfo {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool)
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account (PDA)
func (inst *GetPoolInfo) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLpMintAccount sets the "lp_mint" account.
// LP token mint of the pool
func (inst *GetPoolInfo) SetLpMintAccount(lpMint ag_solanago.PublicKey) *GetPoolInfo {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lpMint)
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
// LP token mint of the pool
func (inst *GetPoolInfo) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAVaultLpAccount sets the "a_vault_lp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *GetPoolInfo) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *GetPoolInfo {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(aVaultLp)
	return inst
}

// GetAVaultLpAccount gets the "a_vault_lp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *GetPoolInfo) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBVaultLpAccount sets the "b_vault_lp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *GetPoolInfo) SetBVaultLpAccount(bVaultLp ag_solanago.PublicKey) *GetPoolInfo {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bVaultLp)
	return inst
}

// GetBVaultLpAccount gets the "b_vault_lp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *GetPoolInfo) GetBVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAVaultAccount sets the "a_vault" account.
// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
func (inst *GetPoolInfo) SetAVaultAccount(aVault ag_solanago.PublicKey) *GetPoolInfo {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(aVault)
	return inst
}

// GetAVaultAccount gets the "a_vault" account.
// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
func (inst *GetPoolInfo) GetAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBVaultAccount sets the "b_vault" account.
// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
func (inst *GetPoolInfo) SetBVaultAccount(bVault ag_solanago.PublicKey) *GetPoolInfo {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bVault)
	return inst
}

// GetBVaultAccount gets the "b_vault" account.
// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
func (inst *GetPoolInfo) GetBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAVaultLpMintAccount sets the "a_vault_lp_mint" account.
// LP token mint of vault a
func (inst *GetPoolInfo) SetAVaultLpMintAccount(aVaultLpMint ag_solanago.PublicKey) *GetPoolInfo {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(aVaultLpMint)
	return inst
}

// GetAVaultLpMintAccount gets the "a_vault_lp_mint" account.
// LP token mint of vault a
func (inst *GetPoolInfo) GetAVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBVaultLpMintAccount sets the "b_vault_lp_mint" account.
// LP token mint of vault b
func (inst *GetPoolInfo) SetBVaultLpMintAccount(bVaultLpMint ag_solanago.PublicKey) *GetPoolInfo {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(bVaultLpMint)
	return inst
}

// GetBVaultLpMintAccount gets the "b_vault_lp_mint" account.
// LP token mint of vault b
func (inst *GetPoolInfo) GetBVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst *GetPoolInfo) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *GetPoolInfo) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *GetPoolInfo {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:8], metas...)
	return inst
}

func (inst *GetPoolInfo) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8:]
}

func (inst GetPoolInfo) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_GetPoolInfo,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst GetPoolInfo) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *GetPoolInfo) Validate() error {
	if len(inst.AccountMetaSlice) < 8 {
		return errors.New("accounts slice has wrong length: expected 8 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BVaultLp is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BVaultLpMint is not set")
		}
	}
	return nil
}

func (inst *GetPoolInfo) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("GetPoolInfo")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        lp_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     a_vault_lp", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     b_vault_lp", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        a_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        b_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("a_vault_lp_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("b_vault_lp_mint", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj GetPoolInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *GetPoolInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewGetPoolInfoInstruction declares a new GetPoolInfo instruction with the provided parameters and accounts.
func NewGetPoolInfoInstruction(
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey) *GetPoolInfo {
	return NewGetPoolInfoInstructionBuilder().
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint)
}

// NewSimpleGetPoolInfoInstruction declares a new GetPoolInfo instruction with the provided parameters and accounts.
func NewSimpleGetPoolInfoInstruction(
	// Accounts:
	pool ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey) *GetPoolInfo {
	return NewGetPoolInfoInstructionBuilder().
		SetPoolAccount(pool).
		SetLpMintAccount(lpMint).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint)
}
