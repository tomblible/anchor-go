// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Swap token A to B, or vice versa. An amount of trading fee will be charged for liquidity provider, and the admin of the pool.
type Swap struct {
	InAmount         *uint64
	MinimumOutAmount *uint64

	// [0] = [WRITE] pool
	// ··········· Pool account (PDA)
	//
	// [1] = [WRITE] user_source_token
	// ··········· User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool.
	//
	// [2] = [WRITE] user_destination_token
	// ··········· User token account. The exchanged token will be transfer into this account from the pool.
	//
	// [3] = [WRITE] a_vault
	// ··········· Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
	//
	// [4] = [WRITE] b_vault
	// ··········· Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
	//
	// [5] = [WRITE] a_token_vault
	// ··········· Token vault account of vault A
	//
	// [6] = [WRITE] b_token_vault
	// ··········· Token vault account of vault B
	//
	// [7] = [WRITE] a_vault_lp_mint
	// ··········· Lp token mint of vault a
	//
	// [8] = [WRITE] b_vault_lp_mint
	// ··········· Lp token mint of vault b
	//
	// [9] = [WRITE] a_vault_lp
	// ··········· LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [10] = [WRITE] b_vault_lp
	// ··········· LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	//
	// [11] = [WRITE] protocol_token_fee
	// ··········· Protocol fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field.
	//
	// [12] = [SIGNER] user
	// ··········· User account. Must be owner of user_source_token.
	//
	// [13] = [] vault_program
	// ··········· Vault program. the pool will deposit/withdraw liquidity from the vault.
	//
	// [14] = [] token_program
	// ··········· Token program.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapInstructionBuilder creates a new `Swap` instruction builder.
func NewSwapInstructionBuilder() *Swap {
	nd := &Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	return nd
}

// SetInAmount sets the "in_amount" parameter.
func (inst *Swap) SetInAmount(in_amount uint64) *Swap {
	inst.InAmount = &in_amount
	return inst
}

// SetMinimumOutAmount sets the "minimum_out_amount" parameter.
func (inst *Swap) SetMinimumOutAmount(minimum_out_amount uint64) *Swap {
	inst.MinimumOutAmount = &minimum_out_amount
	return inst
}

// SetPoolAccount sets the "pool" account.
// Pool account (PDA)
func (inst *Swap) SetPoolAccount(pool ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account (PDA)
func (inst *Swap) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserSourceTokenAccount sets the "user_source_token" account.
// User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool.
func (inst *Swap) SetUserSourceTokenAccount(userSourceToken ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userSourceToken).WRITE()
	return inst
}

// GetUserSourceTokenAccount gets the "user_source_token" account.
// User token account. Token from this account will be transfer into the vault by the pool in exchange for another token of the pool.
func (inst *Swap) GetUserSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserDestinationTokenAccount sets the "user_destination_token" account.
// User token account. The exchanged token will be transfer into this account from the pool.
func (inst *Swap) SetUserDestinationTokenAccount(userDestinationToken ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userDestinationToken).WRITE()
	return inst
}

// GetUserDestinationTokenAccount gets the "user_destination_token" account.
// User token account. The exchanged token will be transfer into this account from the pool.
func (inst *Swap) GetUserDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAVaultAccount sets the "a_vault" account.
// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
func (inst *Swap) SetAVaultAccount(aVault ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(aVault).WRITE()
	return inst
}

// GetAVaultAccount gets the "a_vault" account.
// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
func (inst *Swap) GetAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBVaultAccount sets the "b_vault" account.
// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
func (inst *Swap) SetBVaultAccount(bVault ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bVault).WRITE()
	return inst
}

// GetBVaultAccount gets the "b_vault" account.
// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
func (inst *Swap) GetBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetATokenVaultAccount sets the "a_token_vault" account.
// Token vault account of vault A
func (inst *Swap) SetATokenVaultAccount(aTokenVault ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(aTokenVault).WRITE()
	return inst
}

// GetATokenVaultAccount gets the "a_token_vault" account.
// Token vault account of vault A
func (inst *Swap) GetATokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBTokenVaultAccount sets the "b_token_vault" account.
// Token vault account of vault B
func (inst *Swap) SetBTokenVaultAccount(bTokenVault ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(bTokenVault).WRITE()
	return inst
}

// GetBTokenVaultAccount gets the "b_token_vault" account.
// Token vault account of vault B
func (inst *Swap) GetBTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAVaultLpMintAccount sets the "a_vault_lp_mint" account.
// Lp token mint of vault a
func (inst *Swap) SetAVaultLpMintAccount(aVaultLpMint ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(aVaultLpMint).WRITE()
	return inst
}

// GetAVaultLpMintAccount gets the "a_vault_lp_mint" account.
// Lp token mint of vault a
func (inst *Swap) GetAVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetBVaultLpMintAccount sets the "b_vault_lp_mint" account.
// Lp token mint of vault b
func (inst *Swap) SetBVaultLpMintAccount(bVaultLpMint ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(bVaultLpMint).WRITE()
	return inst
}

// GetBVaultLpMintAccount gets the "b_vault_lp_mint" account.
// Lp token mint of vault b
func (inst *Swap) GetBVaultLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAVaultLpAccount sets the "a_vault_lp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *Swap) SetAVaultLpAccount(aVaultLp ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(aVaultLp).WRITE()
	return inst
}

// GetAVaultLpAccount gets the "a_vault_lp" account.
// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *Swap) GetAVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetBVaultLpAccount sets the "b_vault_lp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *Swap) SetBVaultLpAccount(bVaultLp ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(bVaultLp).WRITE()
	return inst
}

// GetBVaultLpAccount gets the "b_vault_lp" account.
// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
func (inst *Swap) GetBVaultLpAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetProtocolTokenFeeAccount sets the "protocol_token_fee" account.
// Protocol fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field.
func (inst *Swap) SetProtocolTokenFeeAccount(protocolTokenFee ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(protocolTokenFee).WRITE()
	return inst
}

// GetProtocolTokenFeeAccount gets the "protocol_token_fee" account.
// Protocol fee token account. Used to receive trading fee. It's mint field must matched with user_source_token mint field.
func (inst *Swap) GetProtocolTokenFeeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserAccount sets the "user" account.
// User account. Must be owner of user_source_token.
func (inst *Swap) SetUserAccount(user ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
// User account. Must be owner of user_source_token.
func (inst *Swap) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetVaultProgramAccount sets the "vault_program" account.
// Vault program. the pool will deposit/withdraw liquidity from the vault.
func (inst *Swap) SetVaultProgramAccount(vaultProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(vaultProgram)
	return inst
}

// GetVaultProgramAccount gets the "vault_program" account.
// Vault program. the pool will deposit/withdraw liquidity from the vault.
func (inst *Swap) GetVaultProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenProgramAccount sets the "token_program" account.
// Token program.
func (inst *Swap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// Token program.
func (inst *Swap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst *Swap) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Swap) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Swap {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:15], metas...)
	return inst
}

func (inst *Swap) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15:]
}

func (inst Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Swap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Swap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.InAmount == nil {
			return errors.New("inAmount parameter is not set")
		}
		if inst.MinimumOutAmount == nil {
			return errors.New("minimumOutAmount parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 15 {
		return errors.New("accounts slice has wrong length: expected 15 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserSourceToken is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserDestinationToken is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ATokenVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BTokenVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.BVaultLpMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AVaultLp is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.BVaultLp is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.ProtocolTokenFee is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.VaultProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          InAmount", *inst.InAmount))
						paramsBranch.Child(ag_format.Param("  MinimumOutAmount", *inst.MinimumOutAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     user_source_token", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("user_destination_token", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("               a_vault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               b_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         a_token_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         b_token_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       a_vault_lp_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("       b_vault_lp_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            a_vault_lp", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            b_vault_lp", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    protocol_token_fee", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("         vault_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("         token_program", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InAmount` param:
	err = encoder.Encode(obj.InAmount)
	if err != nil {
		return err
	}
	// Serialize `MinimumOutAmount` param:
	err = encoder.Encode(obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InAmount`:
	err = decoder.Decode(&obj.InAmount)
	if err != nil {
		return err
	}
	// Deserialize `MinimumOutAmount`:
	err = decoder.Decode(&obj.MinimumOutAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSwapInstruction(
	// Parameters:
	in_amount uint64,
	minimum_out_amount uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	userSourceToken ag_solanago.PublicKey,
	userDestinationToken ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aTokenVault ag_solanago.PublicKey,
	bTokenVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	protocolTokenFee ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetInAmount(in_amount).
		SetMinimumOutAmount(minimum_out_amount).
		SetPoolAccount(pool).
		SetUserSourceTokenAccount(userSourceToken).
		SetUserDestinationTokenAccount(userDestinationToken).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetATokenVaultAccount(aTokenVault).
		SetBTokenVaultAccount(bTokenVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetProtocolTokenFeeAccount(protocolTokenFee).
		SetUserAccount(user).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram)
}

// NewSimpleSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSimpleSwapInstruction(
	// Parameters:
	in_amount uint64,
	minimum_out_amount uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	userSourceToken ag_solanago.PublicKey,
	userDestinationToken ag_solanago.PublicKey,
	aVault ag_solanago.PublicKey,
	bVault ag_solanago.PublicKey,
	aTokenVault ag_solanago.PublicKey,
	bTokenVault ag_solanago.PublicKey,
	aVaultLpMint ag_solanago.PublicKey,
	bVaultLpMint ag_solanago.PublicKey,
	aVaultLp ag_solanago.PublicKey,
	bVaultLp ag_solanago.PublicKey,
	protocolTokenFee ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	vaultProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetInAmount(in_amount).
		SetMinimumOutAmount(minimum_out_amount).
		SetPoolAccount(pool).
		SetUserSourceTokenAccount(userSourceToken).
		SetUserDestinationTokenAccount(userDestinationToken).
		SetAVaultAccount(aVault).
		SetBVaultAccount(bVault).
		SetATokenVaultAccount(aTokenVault).
		SetBTokenVaultAccount(bTokenVault).
		SetAVaultLpMintAccount(aVaultLpMint).
		SetBVaultLpMintAccount(bVaultLpMint).
		SetAVaultLpAccount(aVaultLp).
		SetBVaultLpAccount(bVaultLp).
		SetProtocolTokenFeeAccount(protocolTokenFee).
		SetUserAccount(user).
		SetVaultProgramAccount(vaultProgram).
		SetTokenProgramAccount(tokenProgram)
}
