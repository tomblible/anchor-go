// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_pools

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Set whitelisted vault
type SetWhitelistedVault struct {
	WhitelistedVault *ag_solanago.PublicKey

	// [0] = [WRITE] pool
	//
	// [1] = [SIGNER] admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetWhitelistedVaultInstructionBuilder creates a new `SetWhitelistedVault` instruction builder.
func NewSetWhitelistedVaultInstructionBuilder() *SetWhitelistedVault {
	nd := &SetWhitelistedVault{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetWhitelistedVault sets the "whitelisted_vault" parameter.
func (inst *SetWhitelistedVault) SetWhitelistedVault(whitelisted_vault ag_solanago.PublicKey) *SetWhitelistedVault {
	inst.WhitelistedVault = &whitelisted_vault
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *SetWhitelistedVault) SetPoolAccount(pool ag_solanago.PublicKey) *SetWhitelistedVault {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *SetWhitelistedVault) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *SetWhitelistedVault) SetAdminAccount(admin ag_solanago.PublicKey) *SetWhitelistedVault {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *SetWhitelistedVault) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst *SetWhitelistedVault) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetWhitelistedVault) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetWhitelistedVault {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:2], metas...)
	return inst
}

func (inst *SetWhitelistedVault) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2:]
}

func (inst SetWhitelistedVault) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetWhitelistedVault,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetWhitelistedVault) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetWhitelistedVault) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.WhitelistedVault == nil {
			return errors.New("whitelistedVault parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 2 {
		return errors.New("accounts slice has wrong length: expected 2 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *SetWhitelistedVault) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetWhitelistedVault")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" WhitelistedVault", *inst.WhitelistedVault))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("admin", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetWhitelistedVault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhitelistedVault` param:
	err = encoder.Encode(obj.WhitelistedVault)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetWhitelistedVault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhitelistedVault`:
	err = decoder.Decode(&obj.WhitelistedVault)
	if err != nil {
		return err
	}
	return nil
}

// NewSetWhitelistedVaultInstruction declares a new SetWhitelistedVault instruction with the provided parameters and accounts.
func NewSetWhitelistedVaultInstruction(
	// Parameters:
	whitelisted_vault ag_solanago.PublicKey,
	// Accounts:
	pool ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *SetWhitelistedVault {
	return NewSetWhitelistedVaultInstructionBuilder().
		SetWhitelistedVault(whitelisted_vault).
		SetPoolAccount(pool).
		SetAdminAccount(admin)
}

// NewSimpleSetWhitelistedVaultInstruction declares a new SetWhitelistedVault instruction with the provided parameters and accounts.
func NewSimpleSetWhitelistedVaultInstruction(
	// Parameters:
	whitelisted_vault ag_solanago.PublicKey,
	// Accounts:
	pool ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *SetWhitelistedVault {
	return NewSetWhitelistedVaultInstructionBuilder().
		SetWhitelistedVault(whitelisted_vault).
		SetPoolAccount(pool).
		SetAdminAccount(admin)
}
