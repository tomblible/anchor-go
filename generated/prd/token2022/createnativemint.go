// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Creates the native mint.
type CreateNativeMint struct {

	// [0] = [WRITE, SIGNER] funding_account
	//
	// [1] = [WRITE] native_mint
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateNativeMintInstructionBuilder creates a new `CreateNativeMint` instruction builder.
func NewCreateNativeMintInstructionBuilder() *CreateNativeMint {
	nd := &CreateNativeMint{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetFundingAccountAccount sets the "funding_account" account.
func (inst *CreateNativeMint) SetFundingAccountAccount(fundingAccount ag_solanago.PublicKey) *CreateNativeMint {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(fundingAccount).WRITE().SIGNER()
	return inst
}

// GetFundingAccountAccount gets the "funding_account" account.
func (inst *CreateNativeMint) GetFundingAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNativeMintAccount sets the "native_mint" account.
func (inst *CreateNativeMint) SetNativeMintAccount(nativeMint ag_solanago.PublicKey) *CreateNativeMint {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(nativeMint).WRITE()
	return inst
}

// GetNativeMintAccount gets the "native_mint" account.
func (inst *CreateNativeMint) GetNativeMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateNativeMint) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateNativeMint {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateNativeMint) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *CreateNativeMint) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateNativeMint) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateNativeMint {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *CreateNativeMint) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst CreateNativeMint) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateNativeMint,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateNativeMint) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateNativeMint) Validate() error {
	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.FundingAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NativeMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateNativeMint) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateNativeMint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      funding_", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   native_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj CreateNativeMint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateNativeMint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateNativeMintInstruction declares a new CreateNativeMint instruction with the provided parameters and accounts.
func NewCreateNativeMintInstruction(
	// Accounts:
	fundingAccount ag_solanago.PublicKey,
	nativeMint ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateNativeMint {
	return NewCreateNativeMintInstructionBuilder().
		SetFundingAccountAccount(fundingAccount).
		SetNativeMintAccount(nativeMint).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleCreateNativeMintInstruction declares a new CreateNativeMint instruction with the provided parameters and accounts.
func NewSimpleCreateNativeMintInstruction(
	// Accounts:
	fundingAccount ag_solanago.PublicKey,
	nativeMint ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateNativeMint {
	return NewCreateNativeMintInstructionBuilder().
		SetFundingAccountAccount(fundingAccount).
		SetNativeMintAccount(nativeMint).
		SetSystemProgramAccount(systemProgram)
}
