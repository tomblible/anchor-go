// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateConfidentialTransferMint is the `update_confidential_transfer_mint` instruction.
type UpdateConfidentialTransferMint struct {
	AutoApproveNewAccounts *bool
	AuditorElgamalPubkey   *ag_solanago.PublicKey `bin:"optional"`

	// [0] = [WRITE] mint
	//
	// [1] = [SIGNER] mintAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateConfidentialTransferMintInstructionBuilder creates a new `UpdateConfidentialTransferMint` instruction builder.
func NewUpdateConfidentialTransferMintInstructionBuilder() *UpdateConfidentialTransferMint {
	nd := &UpdateConfidentialTransferMint{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetAutoApproveNewAccounts sets the "autoApproveNewAccounts" parameter.
func (inst *UpdateConfidentialTransferMint) SetAutoApproveNewAccounts(autoApproveNewAccounts bool) *UpdateConfidentialTransferMint {
	inst.AutoApproveNewAccounts = &autoApproveNewAccounts
	return inst
}

// SetAuditorElgamalPubkey sets the "auditorElgamalPubkey" parameter.
func (inst *UpdateConfidentialTransferMint) SetAuditorElgamalPubkey(auditorElgamalPubkey ag_solanago.PublicKey) *UpdateConfidentialTransferMint {
	inst.AuditorElgamalPubkey = &auditorElgamalPubkey
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *UpdateConfidentialTransferMint) SetMintAccount(mint ag_solanago.PublicKey) *UpdateConfidentialTransferMint {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *UpdateConfidentialTransferMint) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *UpdateConfidentialTransferMint) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *UpdateConfidentialTransferMint {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mintAuthority).SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *UpdateConfidentialTransferMint) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst *UpdateConfidentialTransferMint) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *UpdateConfidentialTransferMint) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *UpdateConfidentialTransferMint {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:2], metas...)
	return inst
}

func (inst *UpdateConfidentialTransferMint) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2:]
}

func (inst UpdateConfidentialTransferMint) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_UpdateConfidentialTransferMint),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateConfidentialTransferMint) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateConfidentialTransferMint) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AutoApproveNewAccounts == nil {
			return errors.New("autoApproveNewAccounts parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 2 {
		return errors.New("accounts slice has wrong length: expected 2 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
	}
	return nil
}

func (inst *UpdateConfidentialTransferMint) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateConfidentialTransferMint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("AutoApproveNewAccounts", *inst.AutoApproveNewAccounts))
						paramsBranch.Child(ag_format.Param("  AuditorElgamalPubkey (OPT)", inst.AuditorElgamalPubkey))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         mint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("mintAuthority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateConfidentialTransferMint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AutoApproveNewAccounts` param:
	err = encoder.Encode(obj.AutoApproveNewAccounts)
	if err != nil {
		return err
	}
	// Serialize `AuditorElgamalPubkey` param (optional):
	{
		if obj.AuditorElgamalPubkey == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AuditorElgamalPubkey)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *UpdateConfidentialTransferMint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AutoApproveNewAccounts`:
	err = decoder.Decode(&obj.AutoApproveNewAccounts)
	if err != nil {
		return err
	}
	// Deserialize `AuditorElgamalPubkey` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AuditorElgamalPubkey)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewUpdateConfidentialTransferMintInstruction declares a new UpdateConfidentialTransferMint instruction with the provided parameters and accounts.
func NewUpdateConfidentialTransferMintInstruction(
	// Parameters:
	autoApproveNewAccounts bool,
	auditorElgamalPubkey ag_solanago.PublicKey,
	// Accounts:
	mint ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey) *UpdateConfidentialTransferMint {
	return NewUpdateConfidentialTransferMintInstructionBuilder().
		SetAutoApproveNewAccounts(autoApproveNewAccounts).
		SetAuditorElgamalPubkey(auditorElgamalPubkey).
		SetMintAccount(mint).
		SetMintAuthorityAccount(mintAuthority)
}

// NewSimpleUpdateConfidentialTransferMintInstruction declares a new UpdateConfidentialTransferMint instruction with the provided parameters and accounts.
func NewSimpleUpdateConfidentialTransferMintInstruction(
	// Parameters:
	autoApproveNewAccounts bool,
	auditorElgamalPubkey ag_solanago.PublicKey,
	// Accounts:
	mint ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey) *UpdateConfidentialTransferMint {
	return NewUpdateConfidentialTransferMintInstructionBuilder().
		SetAutoApproveNewAccounts(autoApproveNewAccounts).
		SetAuditorElgamalPubkey(auditorElgamalPubkey).
		SetMintAccount(mint).
		SetMintAuthorityAccount(mintAuthority)
}
