// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateDefaultAccountState is the `update_default_account_state` instruction.
type UpdateDefaultAccountState struct {
	State *AccountState

	// [0] = [WRITE] mint
	//
	// [1] = [SIGNER] freezeAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateDefaultAccountStateInstructionBuilder creates a new `UpdateDefaultAccountState` instruction builder.
func NewUpdateDefaultAccountStateInstructionBuilder() *UpdateDefaultAccountState {
	nd := &UpdateDefaultAccountState{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetState sets the "state" parameter.
func (inst *UpdateDefaultAccountState) SetState(state AccountState) *UpdateDefaultAccountState {
	inst.State = &state
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *UpdateDefaultAccountState) SetMintAccount(mint ag_solanago.PublicKey) *UpdateDefaultAccountState {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *UpdateDefaultAccountState) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFreezeAuthorityAccount sets the "freezeAuthority" account.
func (inst *UpdateDefaultAccountState) SetFreezeAuthorityAccount(freezeAuthority ag_solanago.PublicKey) *UpdateDefaultAccountState {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(freezeAuthority).SIGNER()
	return inst
}

// GetFreezeAuthorityAccount gets the "freezeAuthority" account.
func (inst *UpdateDefaultAccountState) GetFreezeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst *UpdateDefaultAccountState) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *UpdateDefaultAccountState) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *UpdateDefaultAccountState {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:2], metas...)
	return inst
}

func (inst *UpdateDefaultAccountState) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2:]
}

func (inst UpdateDefaultAccountState) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_UpdateDefaultAccountState),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateDefaultAccountState) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateDefaultAccountState) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.State == nil {
			return errors.New("state parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 2 {
		return errors.New("accounts slice has wrong length: expected 2 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FreezeAuthority is not set")
		}
	}
	return nil
}

func (inst *UpdateDefaultAccountState) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateDefaultAccountState")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("State", *inst.State))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           mint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("freezeAuthority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateDefaultAccountState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateDefaultAccountState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateDefaultAccountStateInstruction declares a new UpdateDefaultAccountState instruction with the provided parameters and accounts.
func NewUpdateDefaultAccountStateInstruction(
	// Parameters:
	state AccountState,
	// Accounts:
	mint ag_solanago.PublicKey,
	freezeAuthority ag_solanago.PublicKey) *UpdateDefaultAccountState {
	return NewUpdateDefaultAccountStateInstructionBuilder().
		SetState(state).
		SetMintAccount(mint).
		SetFreezeAuthorityAccount(freezeAuthority)
}

// NewSimpleUpdateDefaultAccountStateInstruction declares a new UpdateDefaultAccountState instruction with the provided parameters and accounts.
func NewSimpleUpdateDefaultAccountStateInstruction(
	// Parameters:
	state AccountState,
	// Accounts:
	mint ag_solanago.PublicKey,
	freezeAuthority ag_solanago.PublicKey) *UpdateDefaultAccountState {
	return NewUpdateDefaultAccountStateInstructionBuilder().
		SetState(state).
		SetMintAccount(mint).
		SetFreezeAuthorityAccount(freezeAuthority)
}
