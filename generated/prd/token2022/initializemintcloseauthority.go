// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize the close account authority on a new mint.
type InitializeMintCloseAuthority struct {
	CloseAuthority *ag_solanago.PublicKey

	// [0] = [WRITE] mint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeMintCloseAuthorityInstructionBuilder creates a new `InitializeMintCloseAuthority` instruction builder.
func NewInitializeMintCloseAuthorityInstructionBuilder() *InitializeMintCloseAuthority {
	nd := &InitializeMintCloseAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetCloseAuthority sets the "close_authority" parameter.
func (inst *InitializeMintCloseAuthority) SetCloseAuthority(close_authority ag_solanago.PublicKey) *InitializeMintCloseAuthority {
	inst.CloseAuthority = &close_authority
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *InitializeMintCloseAuthority) SetMintAccount(mint ag_solanago.PublicKey) *InitializeMintCloseAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *InitializeMintCloseAuthority) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst *InitializeMintCloseAuthority) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeMintCloseAuthority) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeMintCloseAuthority {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:1], metas...)
	return inst
}

func (inst *InitializeMintCloseAuthority) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1:]
}

func (inst InitializeMintCloseAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_InitializeMintCloseAuthority),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeMintCloseAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeMintCloseAuthority) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CloseAuthority == nil {
			return errors.New("closeAuthority parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 1 {
		return errors.New("accounts slice has wrong length: expected 1 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
	}
	return nil
}

func (inst *InitializeMintCloseAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeMintCloseAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" CloseAuthority", *inst.CloseAuthority))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("mint", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj InitializeMintCloseAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CloseAuthority` param:
	err = encoder.Encode(obj.CloseAuthority)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeMintCloseAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CloseAuthority`:
	err = decoder.Decode(&obj.CloseAuthority)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeMintCloseAuthorityInstruction declares a new InitializeMintCloseAuthority instruction with the provided parameters and accounts.
func NewInitializeMintCloseAuthorityInstruction(
	// Parameters:
	close_authority ag_solanago.PublicKey,
	// Accounts:
	mint ag_solanago.PublicKey) *InitializeMintCloseAuthority {
	return NewInitializeMintCloseAuthorityInstructionBuilder().
		SetCloseAuthority(close_authority).
		SetMintAccount(mint)
}

// NewSimpleInitializeMintCloseAuthorityInstruction declares a new InitializeMintCloseAuthority instruction with the provided parameters and accounts.
func NewSimpleInitializeMintCloseAuthorityInstruction(
	// Parameters:
	close_authority ag_solanago.PublicKey,
	// Accounts:
	mint ag_solanago.PublicKey) *InitializeMintCloseAuthority {
	return NewInitializeMintCloseAuthorityInstructionBuilder().
		SetCloseAuthority(close_authority).
		SetMintAccount(mint)
}
