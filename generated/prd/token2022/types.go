// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AccountState ag_binary.BorshEnum

const (
	AccountStateUninitialized AccountState = iota
	AccountStateInitialized
	AccountStateFrozen
)

func (value AccountState) String() string {
	switch value {
	case AccountStateUninitialized:
		return "Uninitialized"
	case AccountStateInitialized:
		return "Initialized"
	case AccountStateFrozen:
		return "Frozen"
	default:
		return ""
	}
}

type AuthorityType ag_binary.BorshEnum

const (
	AuthorityTypeMintTokens AuthorityType = iota
	AuthorityTypeFreezeAccount
	AuthorityTypeAccountOwner
	AuthorityTypeCloseAccount
	AuthorityTypeTransferFeeConfig
	AuthorityTypeWithheldWithdraw
	AuthorityTypeCloseMint
	AuthorityTypeInterestRate
	AuthorityTypePermanentDelegate
	AuthorityTypeConfidentialTransferMint
	AuthorityTypeTransferHookProgramId
	AuthorityTypeConfidentialTransferFeeConfig
	AuthorityTypeMetadataPointer
	AuthorityTypeGroupPointer
	AuthorityTypeGroupMemberPointer
	AuthorityTypeScaledUiAmount
	AuthorityTypePause
)

func (value AuthorityType) String() string {
	switch value {
	case AuthorityTypeMintTokens:
		return "mintTokens"
	case AuthorityTypeFreezeAccount:
		return "freezeAccount"
	case AuthorityTypeAccountOwner:
		return "accountOwner"
	case AuthorityTypeCloseAccount:
		return "closeAccount"
	case AuthorityTypeTransferFeeConfig:
		return "transferFeeConfig"
	case AuthorityTypeWithheldWithdraw:
		return "withheldWithdraw"
	case AuthorityTypeCloseMint:
		return "closeMint"
	case AuthorityTypeInterestRate:
		return "interestRate"
	case AuthorityTypePermanentDelegate:
		return "permanentDelegate"
	case AuthorityTypeConfidentialTransferMint:
		return "confidentialTransferMint"
	case AuthorityTypeTransferHookProgramId:
		return "transferHookProgramId"
	case AuthorityTypeConfidentialTransferFeeConfig:
		return "confidentialTransferFeeConfig"
	case AuthorityTypeMetadataPointer:
		return "metadataPointer"
	case AuthorityTypeGroupPointer:
		return "groupPointer"
	case AuthorityTypeGroupMemberPointer:
		return "groupMemberPointer"
	case AuthorityTypeScaledUiAmount:
		return "scaledUiAmount"
	case AuthorityTypePause:
		return "pause"
	default:
		return ""
	}
}

type TransferFee struct {
	Epoch                  uint64
	MaximumFee             uint64
	TransferFeeBasisPoints uint16
}

func (obj TransferFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `MaximumFee` param:
	err = encoder.Encode(obj.MaximumFee)
	if err != nil {
		return err
	}
	// Serialize `TransferFeeBasisPoints` param:
	err = encoder.Encode(obj.TransferFeeBasisPoints)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransferFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `MaximumFee`:
	err = decoder.Decode(&obj.MaximumFee)
	if err != nil {
		return err
	}
	// Deserialize `TransferFeeBasisPoints`:
	err = decoder.Decode(&obj.TransferFeeBasisPoints)
	if err != nil {
		return err
	}
	return nil
}

type EncryptedBalance struct{}

func (obj EncryptedBalance) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *EncryptedBalance) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type DecryptableBalance struct{}

func (obj DecryptableBalance) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *DecryptableBalance) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type Extension interface {
	isExtension()
}

type extensionContainer struct {
	Enum                          ag_binary.BorshEnum `borsh_enum:"true"`
	Uninitialized                 ExtensionUninitializedTuple
	TransferFeeConfig             ExtensionTransferFeeConfigTuple
	TransferFeeAmount             ExtensionTransferFeeAmountTuple
	MintCloseAuthority            ExtensionMintCloseAuthorityTuple
	ConfidentialTransferMint      ExtensionConfidentialTransferMintTuple
	ConfidentialTransferAccount   ExtensionConfidentialTransferAccountTuple
	DefaultAccountState           ExtensionDefaultAccountStateTuple
	ImmutableOwner                ExtensionImmutableOwnerTuple
	MemoTransfer                  ExtensionMemoTransferTuple
	NonTransferable               ExtensionNonTransferableTuple
	InterestBearingConfig         ExtensionInterestBearingConfigTuple
	CpiGuard                      ExtensionCpiGuardTuple
	PermanentDelegate             ExtensionPermanentDelegateTuple
	NonTransferableAccount        ExtensionNonTransferableAccountTuple
	TransferHook                  ExtensionTransferHookTuple
	TransferHookAccount           ExtensionTransferHookAccountTuple
	ConfidentialTransferFee       ExtensionConfidentialTransferFeeTuple
	ConfidentialTransferFeeAmount ExtensionConfidentialTransferFeeAmountTuple
	MetadataPointer               ExtensionMetadataPointerTuple
	TokenMetadata                 ExtensionTokenMetadataTuple
	GroupPointer                  ExtensionGroupPointerTuple
	TokenGroup                    ExtensionTokenGroupTuple
	GroupMemberPointer            ExtensionGroupMemberPointerTuple
	TokenGroupMember              ExtensionTokenGroupMemberTuple
	ConfidentialMintBurn          ExtensionConfidentialMintBurnTuple
	ScaledUiAmountConfig          ExtensionScaledUiAmountConfigTuple
	PausableConfig                ExtensionPausableConfigTuple
	PausableAccount               ExtensionPausableAccountTuple
}

type ExtensionUninitializedTuple uint8

func (obj ExtensionUninitializedTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ExtensionUninitializedTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ExtensionUninitializedTuple) isExtension() {}

type ExtensionTransferFeeConfigTuple struct {
	TransferFeeConfigAuthority ag_solanago.PublicKey
	WithdrawWithheldAuthority  ag_solanago.PublicKey
	WithheldAmount             uint64
	OlderTransferFee           TransferFee
	NewerTransferFee           TransferFee
}

func (obj ExtensionTransferFeeConfigTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TransferFeeConfigAuthority` param:
	err = encoder.Encode(obj.TransferFeeConfigAuthority)
	if err != nil {
		return err
	}
	// Serialize `WithdrawWithheldAuthority` param:
	err = encoder.Encode(obj.WithdrawWithheldAuthority)
	if err != nil {
		return err
	}
	// Serialize `WithheldAmount` param:
	err = encoder.Encode(obj.WithheldAmount)
	if err != nil {
		return err
	}
	// Serialize `OlderTransferFee` param:
	err = encoder.Encode(obj.OlderTransferFee)
	if err != nil {
		return err
	}
	// Serialize `NewerTransferFee` param:
	err = encoder.Encode(obj.NewerTransferFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionTransferFeeConfigTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TransferFeeConfigAuthority`:
	err = decoder.Decode(&obj.TransferFeeConfigAuthority)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawWithheldAuthority`:
	err = decoder.Decode(&obj.WithdrawWithheldAuthority)
	if err != nil {
		return err
	}
	// Deserialize `WithheldAmount`:
	err = decoder.Decode(&obj.WithheldAmount)
	if err != nil {
		return err
	}
	// Deserialize `OlderTransferFee`:
	err = decoder.Decode(&obj.OlderTransferFee)
	if err != nil {
		return err
	}
	// Deserialize `NewerTransferFee`:
	err = decoder.Decode(&obj.NewerTransferFee)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionTransferFeeConfigTuple) isExtension() {}

type ExtensionTransferFeeAmountTuple struct {
	WithheldAmount uint64
}

func (obj ExtensionTransferFeeAmountTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WithheldAmount` param:
	err = encoder.Encode(obj.WithheldAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionTransferFeeAmountTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WithheldAmount`:
	err = decoder.Decode(&obj.WithheldAmount)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionTransferFeeAmountTuple) isExtension() {}

type ExtensionMintCloseAuthorityTuple struct {
	CloseAuthority ag_solanago.PublicKey
}

func (obj ExtensionMintCloseAuthorityTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CloseAuthority` param:
	err = encoder.Encode(obj.CloseAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionMintCloseAuthorityTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CloseAuthority`:
	err = decoder.Decode(&obj.CloseAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionMintCloseAuthorityTuple) isExtension() {}

type ExtensionConfidentialTransferMintTuple struct {
	Authority              *ag_solanago.PublicKey `bin:"optional"`
	AutoApproveNewAccounts bool
	AuditorElgamalPubkey   *ag_solanago.PublicKey `bin:"optional"`
}

func (obj ExtensionConfidentialTransferMintTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param (optional):
	{
		if obj.Authority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AutoApproveNewAccounts` param:
	err = encoder.Encode(obj.AutoApproveNewAccounts)
	if err != nil {
		return err
	}
	// Serialize `AuditorElgamalPubkey` param (optional):
	{
		if obj.AuditorElgamalPubkey == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AuditorElgamalPubkey)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ExtensionConfidentialTransferMintTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AutoApproveNewAccounts`:
	err = decoder.Decode(&obj.AutoApproveNewAccounts)
	if err != nil {
		return err
	}
	// Deserialize `AuditorElgamalPubkey` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AuditorElgamalPubkey)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ ExtensionConfidentialTransferMintTuple) isExtension() {}

type ExtensionConfidentialTransferAccountTuple struct {
	Approved                            bool
	ElgamalPubkey                       ag_solanago.PublicKey
	PendingBalanceLow                   EncryptedBalance
	PendingBalanceHigh                  EncryptedBalance
	AvailableBalance                    EncryptedBalance
	DecryptableAvailableBalance         DecryptableBalance
	AllowConfidentialCredits            bool
	AllowNonConfidentialCredits         bool
	PendingBalanceCreditCounter         uint64
	MaximumPendingBalanceCreditCounter  uint64
	ExpectedPendingBalanceCreditCounter uint64
	ActualPendingBalanceCreditCounter   uint64
}

func (obj ExtensionConfidentialTransferAccountTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Approved` param:
	err = encoder.Encode(obj.Approved)
	if err != nil {
		return err
	}
	// Serialize `ElgamalPubkey` param:
	err = encoder.Encode(obj.ElgamalPubkey)
	if err != nil {
		return err
	}
	// Serialize `PendingBalanceLow` param:
	err = encoder.Encode(obj.PendingBalanceLow)
	if err != nil {
		return err
	}
	// Serialize `PendingBalanceHigh` param:
	err = encoder.Encode(obj.PendingBalanceHigh)
	if err != nil {
		return err
	}
	// Serialize `AvailableBalance` param:
	err = encoder.Encode(obj.AvailableBalance)
	if err != nil {
		return err
	}
	// Serialize `DecryptableAvailableBalance` param:
	err = encoder.Encode(obj.DecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Serialize `AllowConfidentialCredits` param:
	err = encoder.Encode(obj.AllowConfidentialCredits)
	if err != nil {
		return err
	}
	// Serialize `AllowNonConfidentialCredits` param:
	err = encoder.Encode(obj.AllowNonConfidentialCredits)
	if err != nil {
		return err
	}
	// Serialize `PendingBalanceCreditCounter` param:
	err = encoder.Encode(obj.PendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	// Serialize `MaximumPendingBalanceCreditCounter` param:
	err = encoder.Encode(obj.MaximumPendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	// Serialize `ExpectedPendingBalanceCreditCounter` param:
	err = encoder.Encode(obj.ExpectedPendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	// Serialize `ActualPendingBalanceCreditCounter` param:
	err = encoder.Encode(obj.ActualPendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionConfidentialTransferAccountTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Approved`:
	err = decoder.Decode(&obj.Approved)
	if err != nil {
		return err
	}
	// Deserialize `ElgamalPubkey`:
	err = decoder.Decode(&obj.ElgamalPubkey)
	if err != nil {
		return err
	}
	// Deserialize `PendingBalanceLow`:
	err = decoder.Decode(&obj.PendingBalanceLow)
	if err != nil {
		return err
	}
	// Deserialize `PendingBalanceHigh`:
	err = decoder.Decode(&obj.PendingBalanceHigh)
	if err != nil {
		return err
	}
	// Deserialize `AvailableBalance`:
	err = decoder.Decode(&obj.AvailableBalance)
	if err != nil {
		return err
	}
	// Deserialize `DecryptableAvailableBalance`:
	err = decoder.Decode(&obj.DecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Deserialize `AllowConfidentialCredits`:
	err = decoder.Decode(&obj.AllowConfidentialCredits)
	if err != nil {
		return err
	}
	// Deserialize `AllowNonConfidentialCredits`:
	err = decoder.Decode(&obj.AllowNonConfidentialCredits)
	if err != nil {
		return err
	}
	// Deserialize `PendingBalanceCreditCounter`:
	err = decoder.Decode(&obj.PendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	// Deserialize `MaximumPendingBalanceCreditCounter`:
	err = decoder.Decode(&obj.MaximumPendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	// Deserialize `ExpectedPendingBalanceCreditCounter`:
	err = decoder.Decode(&obj.ExpectedPendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	// Deserialize `ActualPendingBalanceCreditCounter`:
	err = decoder.Decode(&obj.ActualPendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionConfidentialTransferAccountTuple) isExtension() {}

type ExtensionDefaultAccountStateTuple struct {
	State AccountState
}

func (obj ExtensionDefaultAccountStateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionDefaultAccountStateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionDefaultAccountStateTuple) isExtension() {}

type ExtensionImmutableOwnerTuple uint8

func (obj ExtensionImmutableOwnerTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ExtensionImmutableOwnerTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ExtensionImmutableOwnerTuple) isExtension() {}

type ExtensionMemoTransferTuple struct {
	RequireIncomingTransferMemos bool
}

func (obj ExtensionMemoTransferTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RequireIncomingTransferMemos` param:
	err = encoder.Encode(obj.RequireIncomingTransferMemos)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionMemoTransferTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RequireIncomingTransferMemos`:
	err = decoder.Decode(&obj.RequireIncomingTransferMemos)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionMemoTransferTuple) isExtension() {}

type ExtensionNonTransferableTuple uint8

func (obj ExtensionNonTransferableTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ExtensionNonTransferableTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ExtensionNonTransferableTuple) isExtension() {}

type ExtensionInterestBearingConfigTuple struct {
	RateAuthority           ag_solanago.PublicKey
	InitializationTimestamp uint64
	PreUpdateAverageRate    int16
	LastUpdateTimestamp     uint64
	CurrentRate             int16
}

func (obj ExtensionInterestBearingConfigTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RateAuthority` param:
	err = encoder.Encode(obj.RateAuthority)
	if err != nil {
		return err
	}
	// Serialize `InitializationTimestamp` param:
	err = encoder.Encode(obj.InitializationTimestamp)
	if err != nil {
		return err
	}
	// Serialize `PreUpdateAverageRate` param:
	err = encoder.Encode(obj.PreUpdateAverageRate)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTimestamp` param:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Serialize `CurrentRate` param:
	err = encoder.Encode(obj.CurrentRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionInterestBearingConfigTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RateAuthority`:
	err = decoder.Decode(&obj.RateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `InitializationTimestamp`:
	err = decoder.Decode(&obj.InitializationTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `PreUpdateAverageRate`:
	err = decoder.Decode(&obj.PreUpdateAverageRate)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `CurrentRate`:
	err = decoder.Decode(&obj.CurrentRate)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionInterestBearingConfigTuple) isExtension() {}

type ExtensionCpiGuardTuple struct {
	LockCpi bool
}

func (obj ExtensionCpiGuardTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LockCpi` param:
	err = encoder.Encode(obj.LockCpi)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionCpiGuardTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LockCpi`:
	err = decoder.Decode(&obj.LockCpi)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionCpiGuardTuple) isExtension() {}

type ExtensionPermanentDelegateTuple struct {
	Delegate ag_solanago.PublicKey
}

func (obj ExtensionPermanentDelegateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Delegate` param:
	err = encoder.Encode(obj.Delegate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionPermanentDelegateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Delegate`:
	err = decoder.Decode(&obj.Delegate)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionPermanentDelegateTuple) isExtension() {}

type ExtensionNonTransferableAccountTuple uint8

func (obj ExtensionNonTransferableAccountTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ExtensionNonTransferableAccountTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ExtensionNonTransferableAccountTuple) isExtension() {}

type ExtensionTransferHookTuple struct {
	Authority ag_solanago.PublicKey
	ProgramId ag_solanago.PublicKey
}

func (obj ExtensionTransferHookTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `ProgramId` param:
	err = encoder.Encode(obj.ProgramId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionTransferHookTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `ProgramId`:
	err = decoder.Decode(&obj.ProgramId)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionTransferHookTuple) isExtension() {}

type ExtensionTransferHookAccountTuple struct {
	Transferring bool
}

func (obj ExtensionTransferHookAccountTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Transferring` param:
	err = encoder.Encode(obj.Transferring)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionTransferHookAccountTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Transferring`:
	err = decoder.Decode(&obj.Transferring)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionTransferHookAccountTuple) isExtension() {}

type ExtensionConfidentialTransferFeeTuple struct {
	Authority            *ag_solanago.PublicKey `bin:"optional"`
	ElgamalPubkey        ag_solanago.PublicKey
	HarvestToMintEnabled bool
	WithheldAmount       EncryptedBalance
}

func (obj ExtensionConfidentialTransferFeeTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param (optional):
	{
		if obj.Authority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ElgamalPubkey` param:
	err = encoder.Encode(obj.ElgamalPubkey)
	if err != nil {
		return err
	}
	// Serialize `HarvestToMintEnabled` param:
	err = encoder.Encode(obj.HarvestToMintEnabled)
	if err != nil {
		return err
	}
	// Serialize `WithheldAmount` param:
	err = encoder.Encode(obj.WithheldAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionConfidentialTransferFeeTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ElgamalPubkey`:
	err = decoder.Decode(&obj.ElgamalPubkey)
	if err != nil {
		return err
	}
	// Deserialize `HarvestToMintEnabled`:
	err = decoder.Decode(&obj.HarvestToMintEnabled)
	if err != nil {
		return err
	}
	// Deserialize `WithheldAmount`:
	err = decoder.Decode(&obj.WithheldAmount)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionConfidentialTransferFeeTuple) isExtension() {}

type ExtensionConfidentialTransferFeeAmountTuple struct {
	WithheldAmount EncryptedBalance
}

func (obj ExtensionConfidentialTransferFeeAmountTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WithheldAmount` param:
	err = encoder.Encode(obj.WithheldAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionConfidentialTransferFeeAmountTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WithheldAmount`:
	err = decoder.Decode(&obj.WithheldAmount)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionConfidentialTransferFeeAmountTuple) isExtension() {}

type ExtensionMetadataPointerTuple struct {
	Authority       *ag_solanago.PublicKey `bin:"optional"`
	MetadataAddress *ag_solanago.PublicKey `bin:"optional"`
}

func (obj ExtensionMetadataPointerTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param (optional):
	{
		if obj.Authority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MetadataAddress` param (optional):
	{
		if obj.MetadataAddress == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MetadataAddress)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ExtensionMetadataPointerTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MetadataAddress` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MetadataAddress)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ ExtensionMetadataPointerTuple) isExtension() {}

type ExtensionTokenMetadataTuple struct {
	UpdateAuthority *ag_solanago.PublicKey `bin:"optional"`
	Mint            ag_solanago.PublicKey
	Name            string
	Symbol          string
	Uri             string
}

func (obj ExtensionTokenMetadataTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UpdateAuthority` param (optional):
	{
		if obj.UpdateAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionTokenMetadataTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UpdateAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionTokenMetadataTuple) isExtension() {}

type ExtensionGroupPointerTuple struct {
	Authority    *ag_solanago.PublicKey `bin:"optional"`
	GroupAddress *ag_solanago.PublicKey `bin:"optional"`
}

func (obj ExtensionGroupPointerTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param (optional):
	{
		if obj.Authority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `GroupAddress` param (optional):
	{
		if obj.GroupAddress == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.GroupAddress)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ExtensionGroupPointerTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `GroupAddress` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.GroupAddress)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ ExtensionGroupPointerTuple) isExtension() {}

type ExtensionTokenGroupTuple struct {
	UpdateAuthority *ag_solanago.PublicKey `bin:"optional"`
	Mint            ag_solanago.PublicKey
	Size            uint64
	MaxSize         uint64
}

func (obj ExtensionTokenGroupTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UpdateAuthority` param (optional):
	{
		if obj.UpdateAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Size` param:
	err = encoder.Encode(obj.Size)
	if err != nil {
		return err
	}
	// Serialize `MaxSize` param:
	err = encoder.Encode(obj.MaxSize)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionTokenGroupTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UpdateAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UpdateAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Size`:
	err = decoder.Decode(&obj.Size)
	if err != nil {
		return err
	}
	// Deserialize `MaxSize`:
	err = decoder.Decode(&obj.MaxSize)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionTokenGroupTuple) isExtension() {}

type ExtensionGroupMemberPointerTuple struct {
	Authority     *ag_solanago.PublicKey `bin:"optional"`
	MemberAddress *ag_solanago.PublicKey `bin:"optional"`
}

func (obj ExtensionGroupMemberPointerTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param (optional):
	{
		if obj.Authority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MemberAddress` param (optional):
	{
		if obj.MemberAddress == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MemberAddress)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ExtensionGroupMemberPointerTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MemberAddress` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MemberAddress)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ ExtensionGroupMemberPointerTuple) isExtension() {}

type ExtensionTokenGroupMemberTuple struct {
	Mint         ag_solanago.PublicKey
	Group        ag_solanago.PublicKey
	MemberNumber uint64
}

func (obj ExtensionTokenGroupMemberTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Group` param:
	err = encoder.Encode(obj.Group)
	if err != nil {
		return err
	}
	// Serialize `MemberNumber` param:
	err = encoder.Encode(obj.MemberNumber)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionTokenGroupMemberTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Group`:
	err = decoder.Decode(&obj.Group)
	if err != nil {
		return err
	}
	// Deserialize `MemberNumber`:
	err = decoder.Decode(&obj.MemberNumber)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionTokenGroupMemberTuple) isExtension() {}

type ExtensionConfidentialMintBurnTuple uint8

func (obj ExtensionConfidentialMintBurnTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ExtensionConfidentialMintBurnTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ExtensionConfidentialMintBurnTuple) isExtension() {}

type ExtensionScaledUiAmountConfigTuple struct {
	Authority                       ag_solanago.PublicKey
	Multiplier                      float64
	NewMultiplierEffectiveTimestamp uint64
	NewMultiplier                   float64
}

func (obj ExtensionScaledUiAmountConfigTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return err
	}
	// Serialize `Multiplier` param:
	err = encoder.Encode(obj.Multiplier)
	if err != nil {
		return err
	}
	// Serialize `NewMultiplierEffectiveTimestamp` param:
	err = encoder.Encode(obj.NewMultiplierEffectiveTimestamp)
	if err != nil {
		return err
	}
	// Serialize `NewMultiplier` param:
	err = encoder.Encode(obj.NewMultiplier)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionScaledUiAmountConfigTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return err
	}
	// Deserialize `Multiplier`:
	err = decoder.Decode(&obj.Multiplier)
	if err != nil {
		return err
	}
	// Deserialize `NewMultiplierEffectiveTimestamp`:
	err = decoder.Decode(&obj.NewMultiplierEffectiveTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `NewMultiplier`:
	err = decoder.Decode(&obj.NewMultiplier)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionScaledUiAmountConfigTuple) isExtension() {}

type ExtensionPausableConfigTuple struct {
	Authority *ag_solanago.PublicKey `bin:"optional"`
	Paused    bool
}

func (obj ExtensionPausableConfigTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Authority` param (optional):
	{
		if obj.Authority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Paused` param:
	err = encoder.Encode(obj.Paused)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ExtensionPausableConfigTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Authority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Authority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Paused`:
	err = decoder.Decode(&obj.Paused)
	if err != nil {
		return err
	}
	return nil
}

func (_ ExtensionPausableConfigTuple) isExtension() {}

type ExtensionPausableAccountTuple uint8

func (obj ExtensionPausableAccountTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ExtensionPausableAccountTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ExtensionPausableAccountTuple) isExtension() {}

type AccountType ag_binary.BorshEnum

const (
	AccountTypeUninitialized AccountType = iota
	AccountTypeMint
	AccountTypeAccount
)

func (value AccountType) String() string {
	switch value {
	case AccountTypeUninitialized:
		return "Uninitialized"
	case AccountTypeMint:
		return "Mint"
	case AccountTypeAccount:
		return "Account"
	default:
		return ""
	}
}

type ExtensionType ag_binary.BorshEnum

const (
	ExtensionTypeUninitialized ExtensionType = iota
	ExtensionTypeTransferFeeConfig
	ExtensionTypeTransferFeeAmount
	ExtensionTypeMintCloseAuthority
	ExtensionTypeConfidentialTransferMint
	ExtensionTypeConfidentialTransferAccount
	ExtensionTypeDefaultAccountState
	ExtensionTypeImmutableOwner
	ExtensionTypeMemoTransfer
	ExtensionTypeNonTransferable
	ExtensionTypeInterestBearingConfig
	ExtensionTypeCpiGuard
	ExtensionTypePermanentDelegate
	ExtensionTypeNonTransferableAccount
	ExtensionTypeTransferHook
	ExtensionTypeTransferHookAccount
	ExtensionTypeConfidentialTransferFee
	ExtensionTypeConfidentialTransferFeeAmount
	ExtensionTypeScaledUiAmountConfig
	ExtensionTypePausableConfig
	ExtensionTypePausableAccount
	ExtensionTypeMetadataPointer
	ExtensionTypeTokenMetadata
	ExtensionTypeGroupPointer
	ExtensionTypeTokenGroup
	ExtensionTypeGroupMemberPointer
	ExtensionTypeTokenGroupMember
)

func (value ExtensionType) String() string {
	switch value {
	case ExtensionTypeUninitialized:
		return "uninitialized"
	case ExtensionTypeTransferFeeConfig:
		return "transferFeeConfig"
	case ExtensionTypeTransferFeeAmount:
		return "transferFeeAmount"
	case ExtensionTypeMintCloseAuthority:
		return "mintCloseAuthority"
	case ExtensionTypeConfidentialTransferMint:
		return "confidentialTransferMint"
	case ExtensionTypeConfidentialTransferAccount:
		return "confidentialTransferAccount"
	case ExtensionTypeDefaultAccountState:
		return "defaultAccountState"
	case ExtensionTypeImmutableOwner:
		return "immutableOwner"
	case ExtensionTypeMemoTransfer:
		return "memoTransfer"
	case ExtensionTypeNonTransferable:
		return "nonTransferable"
	case ExtensionTypeInterestBearingConfig:
		return "interestBearingConfig"
	case ExtensionTypeCpiGuard:
		return "cpiGuard"
	case ExtensionTypePermanentDelegate:
		return "permanentDelegate"
	case ExtensionTypeNonTransferableAccount:
		return "nonTransferableAccount"
	case ExtensionTypeTransferHook:
		return "transferHook"
	case ExtensionTypeTransferHookAccount:
		return "transferHookAccount"
	case ExtensionTypeConfidentialTransferFee:
		return "confidentialTransferFee"
	case ExtensionTypeConfidentialTransferFeeAmount:
		return "confidentialTransferFeeAmount"
	case ExtensionTypeScaledUiAmountConfig:
		return "scaledUiAmountConfig"
	case ExtensionTypePausableConfig:
		return "pausableConfig"
	case ExtensionTypePausableAccount:
		return "pausableAccount"
	case ExtensionTypeMetadataPointer:
		return "metadataPointer"
	case ExtensionTypeTokenMetadata:
		return "tokenMetadata"
	case ExtensionTypeGroupPointer:
		return "groupPointer"
	case ExtensionTypeTokenGroup:
		return "tokenGroup"
	case ExtensionTypeGroupMemberPointer:
		return "groupMemberPointer"
	case ExtensionTypeTokenGroupMember:
		return "tokenGroupMember"
	default:
		return ""
	}
}

type Multisig struct {
	// Number of signers required
	M uint8

	// Number of valid signers
	N uint8

	// Is `true` if this structure has been initialized
	IsInitialized bool

	// Signer public keys
	Signers [11]ag_solanago.PublicKey
}

func (obj Multisig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `M` param:
	err = encoder.Encode(obj.M)
	if err != nil {
		return err
	}
	// Serialize `N` param:
	err = encoder.Encode(obj.N)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Signers` param:
	err = encoder.Encode(obj.Signers)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Multisig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `M`:
	err = decoder.Decode(&obj.M)
	if err != nil {
		return err
	}
	// Deserialize `N`:
	err = decoder.Decode(&obj.N)
	if err != nil {
		return err
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Signers`:
	err = decoder.Decode(&obj.Signers)
	if err != nil {
		return err
	}
	return nil
}

type Mint struct {
	// Optional authority used to mint new tokens. The mint authority may only be provided during
	// mint creation. If no mint authority is present then the mint has a fixed supply and no
	// further tokens may be minted.
	MintAuthority *ag_solanago.PublicKey `bin:"optional"`

	// Total supply of tokens.
	Supply uint64

	// Number of base 10 digits to the right of the decimal place.
	Decimals uint8

	// Is `true` if this structure has been initialized
	IsInitialized bool

	// Optional authority to freeze token accounts.
	FreezeAuthority *ag_solanago.PublicKey `bin:"optional"`
}

func (obj Mint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintAuthority` param (optional):
	{
		if obj.MintAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MintAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Supply` param:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `FreezeAuthority` param (optional):
	{
		if obj.FreezeAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FreezeAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Mint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MintAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `FreezeAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FreezeAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Token struct {
	// The mint associated with this account
	Mint ag_solanago.PublicKey

	// The owner of this account.
	Owner ag_solanago.PublicKey

	// The amount of tokens this account holds.
	Amount uint64

	// If `delegate` is `Some` then `delegated_amount` represents
	// the amount authorized by the delegate
	Delegate *ag_solanago.PublicKey `bin:"optional"`

	// The account's state
	State AccountState

	// If is_some, this is a native token, and the value logs the rent-exempt reserve. An Account
	// is required to be rent-exempt, so the value is used by the Processor to ensure that wrapped
	// SOL accounts do not drop below this threshold.
	IsNative *uint64 `bin:"optional"`

	// The amount delegated
	DelegatedAmount uint64

	// Optional authority to close the account.
	CloseAuthority *ag_solanago.PublicKey `bin:"optional"`
}

func (obj Token) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Delegate` param (optional):
	{
		if obj.Delegate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Delegate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `IsNative` param (optional):
	{
		if obj.IsNative == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.IsNative)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DelegatedAmount` param:
	err = encoder.Encode(obj.DelegatedAmount)
	if err != nil {
		return err
	}
	// Serialize `CloseAuthority` param (optional):
	{
		if obj.CloseAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CloseAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Token) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Delegate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Delegate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `IsNative` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.IsNative)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DelegatedAmount`:
	err = decoder.Decode(&obj.DelegatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `CloseAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CloseAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type TokenMetadataField ag_binary.BorshEnum

const (
	TokenMetadataFieldName TokenMetadataField = iota
	TokenMetadataFieldSymbol
	TokenMetadataFieldUri
	TokenMetadataFieldKey
)

func (value TokenMetadataField) String() string {
	switch value {
	case TokenMetadataFieldName:
		return "name"
	case TokenMetadataFieldSymbol:
		return "symbol"
	case TokenMetadataFieldUri:
		return "uri"
	case TokenMetadataFieldKey:
		return "key"
	default:
		return ""
	}
}
