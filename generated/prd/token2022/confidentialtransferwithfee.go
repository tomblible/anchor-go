// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConfidentialTransferWithFee is the `confidential_Transfer_With_fee` instruction.
type ConfidentialTransferWithFee struct {
	NewSourceDecryptableAvailableBalance                   *DecryptableBalance
	EqualityProofInstructionOffset                         *int8
	TransferAmountCiphertextValidityProofInstructionOffset *int8
	FeeSigmaProofInstructionOffset                         *int8
	FeeCiphertextValidityProofInstructionOffset            *int8
	RangeProofInstructionOffset                            *int8

	// [0] = [WRITE] source
	//
	// [1] = [WRITE] destination
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConfidentialTransferWithFeeInstructionBuilder creates a new `ConfidentialTransferWithFee` instruction builder.
func NewConfidentialTransferWithFeeInstructionBuilder() *ConfidentialTransferWithFee {
	nd := &ConfidentialTransferWithFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetNewSourceDecryptableAvailableBalance sets the "newSourceDecryptableAvailableBalance" parameter.
func (inst *ConfidentialTransferWithFee) SetNewSourceDecryptableAvailableBalance(newSourceDecryptableAvailableBalance DecryptableBalance) *ConfidentialTransferWithFee {
	inst.NewSourceDecryptableAvailableBalance = &newSourceDecryptableAvailableBalance
	return inst
}

// SetEqualityProofInstructionOffset sets the "equalityProofInstructionOffset" parameter.
func (inst *ConfidentialTransferWithFee) SetEqualityProofInstructionOffset(equalityProofInstructionOffset int8) *ConfidentialTransferWithFee {
	inst.EqualityProofInstructionOffset = &equalityProofInstructionOffset
	return inst
}

// SetTransferAmountCiphertextValidityProofInstructionOffset sets the "transferAmountCiphertextValidityProofInstructionOffset" parameter.
func (inst *ConfidentialTransferWithFee) SetTransferAmountCiphertextValidityProofInstructionOffset(transferAmountCiphertextValidityProofInstructionOffset int8) *ConfidentialTransferWithFee {
	inst.TransferAmountCiphertextValidityProofInstructionOffset = &transferAmountCiphertextValidityProofInstructionOffset
	return inst
}

// SetFeeSigmaProofInstructionOffset sets the "feeSigmaProofInstructionOffset" parameter.
func (inst *ConfidentialTransferWithFee) SetFeeSigmaProofInstructionOffset(feeSigmaProofInstructionOffset int8) *ConfidentialTransferWithFee {
	inst.FeeSigmaProofInstructionOffset = &feeSigmaProofInstructionOffset
	return inst
}

// SetFeeCiphertextValidityProofInstructionOffset sets the "feeCiphertextValidityProofInstructionOffset" parameter.
func (inst *ConfidentialTransferWithFee) SetFeeCiphertextValidityProofInstructionOffset(feeCiphertextValidityProofInstructionOffset int8) *ConfidentialTransferWithFee {
	inst.FeeCiphertextValidityProofInstructionOffset = &feeCiphertextValidityProofInstructionOffset
	return inst
}

// SetRangeProofInstructionOffset sets the "rangeProofInstructionOffset" parameter.
func (inst *ConfidentialTransferWithFee) SetRangeProofInstructionOffset(rangeProofInstructionOffset int8) *ConfidentialTransferWithFee {
	inst.RangeProofInstructionOffset = &rangeProofInstructionOffset
	return inst
}

// SetSourceAccount sets the "source" account.
func (inst *ConfidentialTransferWithFee) SetSourceAccount(source ag_solanago.PublicKey) *ConfidentialTransferWithFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(source).WRITE()
	return inst
}

// GetSourceAccount gets the "source" account.
func (inst *ConfidentialTransferWithFee) GetSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDestinationAccount sets the "destination" account.
func (inst *ConfidentialTransferWithFee) SetDestinationAccount(destination ag_solanago.PublicKey) *ConfidentialTransferWithFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *ConfidentialTransferWithFee) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ConfidentialTransferWithFee) SetAuthorityAccount(authority ag_solanago.PublicKey) *ConfidentialTransferWithFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ConfidentialTransferWithFee) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *ConfidentialTransferWithFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ConfidentialTransferWithFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ConfidentialTransferWithFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *ConfidentialTransferWithFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst ConfidentialTransferWithFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_ConfidentialTransferWithFee),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConfidentialTransferWithFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConfidentialTransferWithFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewSourceDecryptableAvailableBalance == nil {
			return errors.New("newSourceDecryptableAvailableBalance parameter is not set")
		}
		if inst.EqualityProofInstructionOffset == nil {
			return errors.New("equalityProofInstructionOffset parameter is not set")
		}
		if inst.TransferAmountCiphertextValidityProofInstructionOffset == nil {
			return errors.New("transferAmountCiphertextValidityProofInstructionOffset parameter is not set")
		}
		if inst.FeeSigmaProofInstructionOffset == nil {
			return errors.New("feeSigmaProofInstructionOffset parameter is not set")
		}
		if inst.FeeCiphertextValidityProofInstructionOffset == nil {
			return errors.New("feeCiphertextValidityProofInstructionOffset parameter is not set")
		}
		if inst.RangeProofInstructionOffset == nil {
			return errors.New("rangeProofInstructionOffset parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Source is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *ConfidentialTransferWithFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConfidentialTransferWithFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                  NewSourceDecryptableAvailableBalance", *inst.NewSourceDecryptableAvailableBalance))
						paramsBranch.Child(ag_format.Param("                        EqualityProofInstructionOffset", *inst.EqualityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("TransferAmountCiphertextValidityProofInstructionOffset", *inst.TransferAmountCiphertextValidityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("                        FeeSigmaProofInstructionOffset", *inst.FeeSigmaProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("           FeeCiphertextValidityProofInstructionOffset", *inst.FeeCiphertextValidityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("                           RangeProofInstructionOffset", *inst.RangeProofInstructionOffset))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     source", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("destination", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj ConfidentialTransferWithFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewSourceDecryptableAvailableBalance` param:
	err = encoder.Encode(obj.NewSourceDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Serialize `EqualityProofInstructionOffset` param:
	err = encoder.Encode(obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `TransferAmountCiphertextValidityProofInstructionOffset` param:
	err = encoder.Encode(obj.TransferAmountCiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `FeeSigmaProofInstructionOffset` param:
	err = encoder.Encode(obj.FeeSigmaProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `FeeCiphertextValidityProofInstructionOffset` param:
	err = encoder.Encode(obj.FeeCiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `RangeProofInstructionOffset` param:
	err = encoder.Encode(obj.RangeProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConfidentialTransferWithFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewSourceDecryptableAvailableBalance`:
	err = decoder.Decode(&obj.NewSourceDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Deserialize `EqualityProofInstructionOffset`:
	err = decoder.Decode(&obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `TransferAmountCiphertextValidityProofInstructionOffset`:
	err = decoder.Decode(&obj.TransferAmountCiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `FeeSigmaProofInstructionOffset`:
	err = decoder.Decode(&obj.FeeSigmaProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `FeeCiphertextValidityProofInstructionOffset`:
	err = decoder.Decode(&obj.FeeCiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `RangeProofInstructionOffset`:
	err = decoder.Decode(&obj.RangeProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}

// NewConfidentialTransferWithFeeInstruction declares a new ConfidentialTransferWithFee instruction with the provided parameters and accounts.
func NewConfidentialTransferWithFeeInstruction(
	// Parameters:
	newSourceDecryptableAvailableBalance DecryptableBalance,
	equalityProofInstructionOffset int8,
	transferAmountCiphertextValidityProofInstructionOffset int8,
	feeSigmaProofInstructionOffset int8,
	feeCiphertextValidityProofInstructionOffset int8,
	rangeProofInstructionOffset int8,
	// Accounts:
	source ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *ConfidentialTransferWithFee {
	return NewConfidentialTransferWithFeeInstructionBuilder().
		SetNewSourceDecryptableAvailableBalance(newSourceDecryptableAvailableBalance).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetTransferAmountCiphertextValidityProofInstructionOffset(transferAmountCiphertextValidityProofInstructionOffset).
		SetFeeSigmaProofInstructionOffset(feeSigmaProofInstructionOffset).
		SetFeeCiphertextValidityProofInstructionOffset(feeCiphertextValidityProofInstructionOffset).
		SetRangeProofInstructionOffset(rangeProofInstructionOffset).
		SetSourceAccount(source).
		SetDestinationAccount(destination).
		SetAuthorityAccount(authority)
}

// NewSimpleConfidentialTransferWithFeeInstruction declares a new ConfidentialTransferWithFee instruction with the provided parameters and accounts.
func NewSimpleConfidentialTransferWithFeeInstruction(
	// Parameters:
	newSourceDecryptableAvailableBalance DecryptableBalance,
	equalityProofInstructionOffset int8,
	transferAmountCiphertextValidityProofInstructionOffset int8,
	feeSigmaProofInstructionOffset int8,
	feeCiphertextValidityProofInstructionOffset int8,
	rangeProofInstructionOffset int8,
	// Accounts:
	source ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *ConfidentialTransferWithFee {
	return NewConfidentialTransferWithFeeInstructionBuilder().
		SetNewSourceDecryptableAvailableBalance(newSourceDecryptableAvailableBalance).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetTransferAmountCiphertextValidityProofInstructionOffset(transferAmountCiphertextValidityProofInstructionOffset).
		SetFeeSigmaProofInstructionOffset(feeSigmaProofInstructionOffset).
		SetFeeCiphertextValidityProofInstructionOffset(feeCiphertextValidityProofInstructionOffset).
		SetRangeProofInstructionOffset(rangeProofInstructionOffset).
		SetSourceAccount(source).
		SetDestinationAccount(destination).
		SetAuthorityAccount(authority)
}
