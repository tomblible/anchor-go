// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// BurnToken is the `burn_token` instruction.
type BurnToken struct {
	NewDecryptableAvailableBalance           *DecryptableBalance
	BurnAmountAuditorCiphertextLo            *[64]uint8
	BurnAmountAuditorCiphertextHi            *[64]uint8
	EqualityProofInstructionOffset           *int8
	CiphertextValidityProofInstructionOffset *int8
	RangeProofInstructionOffset              *int8

	// [0] = [WRITE] account
	//
	// [1] = [WRITE] mint
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewBurnTokenInstructionBuilder creates a new `BurnToken` instruction builder.
func NewBurnTokenInstructionBuilder() *BurnToken {
	nd := &BurnToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetNewDecryptableAvailableBalance sets the "newDecryptableAvailableBalance" parameter.
func (inst *BurnToken) SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance DecryptableBalance) *BurnToken {
	inst.NewDecryptableAvailableBalance = &newDecryptableAvailableBalance
	return inst
}

// SetBurnAmountAuditorCiphertextLo sets the "burnAmountAuditorCiphertextLo" parameter.
func (inst *BurnToken) SetBurnAmountAuditorCiphertextLo(burnAmountAuditorCiphertextLo [64]uint8) *BurnToken {
	inst.BurnAmountAuditorCiphertextLo = &burnAmountAuditorCiphertextLo
	return inst
}

// SetBurnAmountAuditorCiphertextHi sets the "burnAmountAuditorCiphertextHi" parameter.
func (inst *BurnToken) SetBurnAmountAuditorCiphertextHi(burnAmountAuditorCiphertextHi [64]uint8) *BurnToken {
	inst.BurnAmountAuditorCiphertextHi = &burnAmountAuditorCiphertextHi
	return inst
}

// SetEqualityProofInstructionOffset sets the "equalityProofInstructionOffset" parameter.
func (inst *BurnToken) SetEqualityProofInstructionOffset(equalityProofInstructionOffset int8) *BurnToken {
	inst.EqualityProofInstructionOffset = &equalityProofInstructionOffset
	return inst
}

// SetCiphertextValidityProofInstructionOffset sets the "ciphertextValidityProofInstructionOffset" parameter.
func (inst *BurnToken) SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset int8) *BurnToken {
	inst.CiphertextValidityProofInstructionOffset = &ciphertextValidityProofInstructionOffset
	return inst
}

// SetRangeProofInstructionOffset sets the "rangeProofInstructionOffset" parameter.
func (inst *BurnToken) SetRangeProofInstructionOffset(rangeProofInstructionOffset int8) *BurnToken {
	inst.RangeProofInstructionOffset = &rangeProofInstructionOffset
	return inst
}

// SetAccountAccount sets the "account" account.
func (inst *BurnToken) SetAccountAccount(account ag_solanago.PublicKey) *BurnToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(account).WRITE()
	return inst
}

// GetAccountAccount gets the "account" account.
func (inst *BurnToken) GetAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *BurnToken) SetMintAccount(mint ag_solanago.PublicKey) *BurnToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *BurnToken) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *BurnToken) SetAuthorityAccount(authority ag_solanago.PublicKey) *BurnToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *BurnToken) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *BurnToken) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *BurnToken) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *BurnToken {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *BurnToken) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst BurnToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_BurnToken),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst BurnToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *BurnToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewDecryptableAvailableBalance == nil {
			return errors.New("newDecryptableAvailableBalance parameter is not set")
		}
		if inst.BurnAmountAuditorCiphertextLo == nil {
			return errors.New("burnAmountAuditorCiphertextLo parameter is not set")
		}
		if inst.BurnAmountAuditorCiphertextHi == nil {
			return errors.New("burnAmountAuditorCiphertextHi parameter is not set")
		}
		if inst.EqualityProofInstructionOffset == nil {
			return errors.New("equalityProofInstructionOffset parameter is not set")
		}
		if inst.CiphertextValidityProofInstructionOffset == nil {
			return errors.New("ciphertextValidityProofInstructionOffset parameter is not set")
		}
		if inst.RangeProofInstructionOffset == nil {
			return errors.New("rangeProofInstructionOffset parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Account is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *BurnToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("BurnToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          NewDecryptableAvailableBalance", *inst.NewDecryptableAvailableBalance))
						paramsBranch.Child(ag_format.Param("           BurnAmountAuditorCiphertextLo", *inst.BurnAmountAuditorCiphertextLo))
						paramsBranch.Child(ag_format.Param("           BurnAmountAuditorCiphertextHi", *inst.BurnAmountAuditorCiphertextHi))
						paramsBranch.Child(ag_format.Param("          EqualityProofInstructionOffset", *inst.EqualityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("CiphertextValidityProofInstructionOffset", *inst.CiphertextValidityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("             RangeProofInstructionOffset", *inst.RangeProofInstructionOffset))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  account", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj BurnToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewDecryptableAvailableBalance` param:
	err = encoder.Encode(obj.NewDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Serialize `BurnAmountAuditorCiphertextLo` param:
	err = encoder.Encode(obj.BurnAmountAuditorCiphertextLo)
	if err != nil {
		return err
	}
	// Serialize `BurnAmountAuditorCiphertextHi` param:
	err = encoder.Encode(obj.BurnAmountAuditorCiphertextHi)
	if err != nil {
		return err
	}
	// Serialize `EqualityProofInstructionOffset` param:
	err = encoder.Encode(obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `CiphertextValidityProofInstructionOffset` param:
	err = encoder.Encode(obj.CiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `RangeProofInstructionOffset` param:
	err = encoder.Encode(obj.RangeProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}
func (obj *BurnToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewDecryptableAvailableBalance`:
	err = decoder.Decode(&obj.NewDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Deserialize `BurnAmountAuditorCiphertextLo`:
	err = decoder.Decode(&obj.BurnAmountAuditorCiphertextLo)
	if err != nil {
		return err
	}
	// Deserialize `BurnAmountAuditorCiphertextHi`:
	err = decoder.Decode(&obj.BurnAmountAuditorCiphertextHi)
	if err != nil {
		return err
	}
	// Deserialize `EqualityProofInstructionOffset`:
	err = decoder.Decode(&obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `CiphertextValidityProofInstructionOffset`:
	err = decoder.Decode(&obj.CiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `RangeProofInstructionOffset`:
	err = decoder.Decode(&obj.RangeProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}

// NewBurnTokenInstruction declares a new BurnToken instruction with the provided parameters and accounts.
func NewBurnTokenInstruction(
	// Parameters:
	newDecryptableAvailableBalance DecryptableBalance,
	burnAmountAuditorCiphertextLo [64]uint8,
	burnAmountAuditorCiphertextHi [64]uint8,
	equalityProofInstructionOffset int8,
	ciphertextValidityProofInstructionOffset int8,
	rangeProofInstructionOffset int8,
	// Accounts:
	account ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *BurnToken {
	return NewBurnTokenInstructionBuilder().
		SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance).
		SetBurnAmountAuditorCiphertextLo(burnAmountAuditorCiphertextLo).
		SetBurnAmountAuditorCiphertextHi(burnAmountAuditorCiphertextHi).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset).
		SetRangeProofInstructionOffset(rangeProofInstructionOffset).
		SetAccountAccount(account).
		SetMintAccount(mint).
		SetAuthorityAccount(authority)
}

// NewSimpleBurnTokenInstruction declares a new BurnToken instruction with the provided parameters and accounts.
func NewSimpleBurnTokenInstruction(
	// Parameters:
	newDecryptableAvailableBalance DecryptableBalance,
	burnAmountAuditorCiphertextLo [64]uint8,
	burnAmountAuditorCiphertextHi [64]uint8,
	equalityProofInstructionOffset int8,
	ciphertextValidityProofInstructionOffset int8,
	rangeProofInstructionOffset int8,
	// Accounts:
	account ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *BurnToken {
	return NewBurnTokenInstructionBuilder().
		SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance).
		SetBurnAmountAuditorCiphertextLo(burnAmountAuditorCiphertextLo).
		SetBurnAmountAuditorCiphertextHi(burnAmountAuditorCiphertextHi).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset).
		SetRangeProofInstructionOffset(rangeProofInstructionOffset).
		SetAccountAccount(account).
		SetMintAccount(mint).
		SetAuthorityAccount(authority)
}
