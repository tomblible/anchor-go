// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConfidentialTransfer is the `confidential_transfer` instruction.
type ConfidentialTransfer struct {
	NewSourceDecryptableAvailableBalance     *DecryptableBalance
	EqualityProofInstructionOffset           *int8
	CiphertextValidityProofInstructionOffset *int8

	// [0] = [WRITE] source
	//
	// [1] = [] mint
	//
	// [2] = [WRITE] destination
	//
	// [3] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConfidentialTransferInstructionBuilder creates a new `ConfidentialTransfer` instruction builder.
func NewConfidentialTransferInstructionBuilder() *ConfidentialTransfer {
	nd := &ConfidentialTransfer{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetNewSourceDecryptableAvailableBalance sets the "newSourceDecryptableAvailableBalance" parameter.
func (inst *ConfidentialTransfer) SetNewSourceDecryptableAvailableBalance(newSourceDecryptableAvailableBalance DecryptableBalance) *ConfidentialTransfer {
	inst.NewSourceDecryptableAvailableBalance = &newSourceDecryptableAvailableBalance
	return inst
}

// SetEqualityProofInstructionOffset sets the "equalityProofInstructionOffset" parameter.
func (inst *ConfidentialTransfer) SetEqualityProofInstructionOffset(equalityProofInstructionOffset int8) *ConfidentialTransfer {
	inst.EqualityProofInstructionOffset = &equalityProofInstructionOffset
	return inst
}

// SetCiphertextValidityProofInstructionOffset sets the "ciphertextValidityProofInstructionOffset" parameter.
func (inst *ConfidentialTransfer) SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset int8) *ConfidentialTransfer {
	inst.CiphertextValidityProofInstructionOffset = &ciphertextValidityProofInstructionOffset
	return inst
}

// SetSourceAccount sets the "source" account.
func (inst *ConfidentialTransfer) SetSourceAccount(source ag_solanago.PublicKey) *ConfidentialTransfer {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(source).WRITE()
	return inst
}

// GetSourceAccount gets the "source" account.
func (inst *ConfidentialTransfer) GetSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *ConfidentialTransfer) SetMintAccount(mint ag_solanago.PublicKey) *ConfidentialTransfer {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ConfidentialTransfer) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDestinationAccount sets the "destination" account.
func (inst *ConfidentialTransfer) SetDestinationAccount(destination ag_solanago.PublicKey) *ConfidentialTransfer {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *ConfidentialTransfer) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ConfidentialTransfer) SetAuthorityAccount(authority ag_solanago.PublicKey) *ConfidentialTransfer {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ConfidentialTransfer) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *ConfidentialTransfer) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ConfidentialTransfer) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ConfidentialTransfer {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *ConfidentialTransfer) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst ConfidentialTransfer) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_ConfidentialTransfer),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConfidentialTransfer) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConfidentialTransfer) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewSourceDecryptableAvailableBalance == nil {
			return errors.New("newSourceDecryptableAvailableBalance parameter is not set")
		}
		if inst.EqualityProofInstructionOffset == nil {
			return errors.New("equalityProofInstructionOffset parameter is not set")
		}
		if inst.CiphertextValidityProofInstructionOffset == nil {
			return errors.New("ciphertextValidityProofInstructionOffset parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Source is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *ConfidentialTransfer) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConfidentialTransfer")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    NewSourceDecryptableAvailableBalance", *inst.NewSourceDecryptableAvailableBalance))
						paramsBranch.Child(ag_format.Param("          EqualityProofInstructionOffset", *inst.EqualityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("CiphertextValidityProofInstructionOffset", *inst.CiphertextValidityProofInstructionOffset))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     source", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("destination", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  authority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj ConfidentialTransfer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewSourceDecryptableAvailableBalance` param:
	err = encoder.Encode(obj.NewSourceDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Serialize `EqualityProofInstructionOffset` param:
	err = encoder.Encode(obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `CiphertextValidityProofInstructionOffset` param:
	err = encoder.Encode(obj.CiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConfidentialTransfer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewSourceDecryptableAvailableBalance`:
	err = decoder.Decode(&obj.NewSourceDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Deserialize `EqualityProofInstructionOffset`:
	err = decoder.Decode(&obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `CiphertextValidityProofInstructionOffset`:
	err = decoder.Decode(&obj.CiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}

// NewConfidentialTransferInstruction declares a new ConfidentialTransfer instruction with the provided parameters and accounts.
func NewConfidentialTransferInstruction(
	// Parameters:
	newSourceDecryptableAvailableBalance DecryptableBalance,
	equalityProofInstructionOffset int8,
	ciphertextValidityProofInstructionOffset int8,
	// Accounts:
	source ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *ConfidentialTransfer {
	return NewConfidentialTransferInstructionBuilder().
		SetNewSourceDecryptableAvailableBalance(newSourceDecryptableAvailableBalance).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset).
		SetSourceAccount(source).
		SetMintAccount(mint).
		SetDestinationAccount(destination).
		SetAuthorityAccount(authority)
}

// NewSimpleConfidentialTransferInstruction declares a new ConfidentialTransfer instruction with the provided parameters and accounts.
func NewSimpleConfidentialTransferInstruction(
	// Parameters:
	newSourceDecryptableAvailableBalance DecryptableBalance,
	equalityProofInstructionOffset int8,
	ciphertextValidityProofInstructionOffset int8,
	// Accounts:
	source ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *ConfidentialTransfer {
	return NewConfidentialTransferInstructionBuilder().
		SetNewSourceDecryptableAvailableBalance(newSourceDecryptableAvailableBalance).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset).
		SetSourceAccount(source).
		SetMintAccount(mint).
		SetDestinationAccount(destination).
		SetAuthorityAccount(authority)
}
