// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// This instruction is to be used to rescue SOL sent to any `TokenProgram`
type WithdrawExcessLamports struct {

	// [0] = [WRITE] source
	//
	// [1] = [WRITE] destination
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawExcessLamportsInstructionBuilder creates a new `WithdrawExcessLamports` instruction builder.
func NewWithdrawExcessLamportsInstructionBuilder() *WithdrawExcessLamports {
	nd := &WithdrawExcessLamports{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetSourceAccount sets the "source" account.
func (inst *WithdrawExcessLamports) SetSourceAccount(source ag_solanago.PublicKey) *WithdrawExcessLamports {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(source).WRITE()
	return inst
}

// GetSourceAccount gets the "source" account.
func (inst *WithdrawExcessLamports) GetSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDestinationAccount sets the "destination" account.
func (inst *WithdrawExcessLamports) SetDestinationAccount(destination ag_solanago.PublicKey) *WithdrawExcessLamports {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *WithdrawExcessLamports) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *WithdrawExcessLamports) SetAuthorityAccount(authority ag_solanago.PublicKey) *WithdrawExcessLamports {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *WithdrawExcessLamports) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *WithdrawExcessLamports) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WithdrawExcessLamports) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WithdrawExcessLamports {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *WithdrawExcessLamports) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst WithdrawExcessLamports) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_WithdrawExcessLamports),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawExcessLamports) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawExcessLamports) Validate() error {
	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Source is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *WithdrawExcessLamports) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawExcessLamports")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     source", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("destination", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj WithdrawExcessLamports) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawExcessLamports) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawExcessLamportsInstruction declares a new WithdrawExcessLamports instruction with the provided parameters and accounts.
func NewWithdrawExcessLamportsInstruction(
	// Accounts:
	source ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *WithdrawExcessLamports {
	return NewWithdrawExcessLamportsInstructionBuilder().
		SetSourceAccount(source).
		SetDestinationAccount(destination).
		SetAuthorityAccount(authority)
}

// NewSimpleWithdrawExcessLamportsInstruction declares a new WithdrawExcessLamports instruction with the provided parameters and accounts.
func NewSimpleWithdrawExcessLamportsInstruction(
	// Accounts:
	source ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *WithdrawExcessLamports {
	return NewWithdrawExcessLamportsInstructionBuilder().
		SetSourceAccount(source).
		SetDestinationAccount(destination).
		SetAuthorityAccount(authority)
}
