// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EmptyConfidentialTransferAccount is the `empty_confidential_transfer_account` instruction.
type EmptyConfidentialTransferAccount struct {
	ProofInstructionOffset *int8

	// [0] = [WRITE] account
	//
	// [1] = [] instructionsOrContextState
	//
	// [2] = [SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEmptyConfidentialTransferAccountInstructionBuilder creates a new `EmptyConfidentialTransferAccount` instruction builder.
func NewEmptyConfidentialTransferAccountInstructionBuilder() *EmptyConfidentialTransferAccount {
	nd := &EmptyConfidentialTransferAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetProofInstructionOffset sets the "proofInstructionOffset" parameter.
func (inst *EmptyConfidentialTransferAccount) SetProofInstructionOffset(proofInstructionOffset int8) *EmptyConfidentialTransferAccount {
	inst.ProofInstructionOffset = &proofInstructionOffset
	return inst
}

// SetAccountAccount sets the "account" account.
func (inst *EmptyConfidentialTransferAccount) SetAccountAccount(account ag_solanago.PublicKey) *EmptyConfidentialTransferAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(account).WRITE()
	return inst
}

// GetAccountAccount gets the "account" account.
func (inst *EmptyConfidentialTransferAccount) GetAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetInstructionsOrContextStateAccount sets the "instructionsOrContextState" account.
func (inst *EmptyConfidentialTransferAccount) SetInstructionsOrContextStateAccount(instructionsOrContextState ag_solanago.PublicKey) *EmptyConfidentialTransferAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(instructionsOrContextState)
	return inst
}

// GetInstructionsOrContextStateAccount gets the "instructionsOrContextState" account.
func (inst *EmptyConfidentialTransferAccount) GetInstructionsOrContextStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOwnerAccount sets the "owner" account.
func (inst *EmptyConfidentialTransferAccount) SetOwnerAccount(owner ag_solanago.PublicKey) *EmptyConfidentialTransferAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *EmptyConfidentialTransferAccount) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *EmptyConfidentialTransferAccount) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *EmptyConfidentialTransferAccount) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *EmptyConfidentialTransferAccount {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *EmptyConfidentialTransferAccount) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst EmptyConfidentialTransferAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_EmptyConfidentialTransferAccount),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EmptyConfidentialTransferAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EmptyConfidentialTransferAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ProofInstructionOffset == nil {
			return errors.New("proofInstructionOffset parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Account is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.InstructionsOrContextState is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *EmptyConfidentialTransferAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EmptyConfidentialTransferAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ProofInstructionOffset", *inst.ProofInstructionOffset))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   account", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("instructionsOrContextState", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                     owner", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj EmptyConfidentialTransferAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProofInstructionOffset` param:
	err = encoder.Encode(obj.ProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}
func (obj *EmptyConfidentialTransferAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProofInstructionOffset`:
	err = decoder.Decode(&obj.ProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}

// NewEmptyConfidentialTransferAccountInstruction declares a new EmptyConfidentialTransferAccount instruction with the provided parameters and accounts.
func NewEmptyConfidentialTransferAccountInstruction(
	// Parameters:
	proofInstructionOffset int8,
	// Accounts:
	account ag_solanago.PublicKey,
	instructionsOrContextState ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *EmptyConfidentialTransferAccount {
	return NewEmptyConfidentialTransferAccountInstructionBuilder().
		SetProofInstructionOffset(proofInstructionOffset).
		SetAccountAccount(account).
		SetInstructionsOrContextStateAccount(instructionsOrContextState).
		SetOwnerAccount(owner)
}

// NewSimpleEmptyConfidentialTransferAccountInstruction declares a new EmptyConfidentialTransferAccount instruction with the provided parameters and accounts.
func NewSimpleEmptyConfidentialTransferAccountInstruction(
	// Parameters:
	proofInstructionOffset int8,
	// Accounts:
	account ag_solanago.PublicKey,
	instructionsOrContextState ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *EmptyConfidentialTransferAccount {
	return NewEmptyConfidentialTransferAccountInstructionBuilder().
		SetProofInstructionOffset(proofInstructionOffset).
		SetAccountAccount(account).
		SetInstructionsOrContextStateAccount(instructionsOrContextState).
		SetOwnerAccount(owner)
}
