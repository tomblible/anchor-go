// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetTransferFee is the `set_transfer_fee` instruction.
type SetTransferFee struct {
	TransferFeeBasisPoints *uint16
	MaximumFee             *uint64

	// [0] = [WRITE] mint
	//
	// [1] = [SIGNER] feeAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetTransferFeeInstructionBuilder creates a new `SetTransferFee` instruction builder.
func NewSetTransferFeeInstructionBuilder() *SetTransferFee {
	nd := &SetTransferFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetTransferFeeBasisPoints sets the "transferFeeBasisPoints" parameter.
func (inst *SetTransferFee) SetTransferFeeBasisPoints(transferFeeBasisPoints uint16) *SetTransferFee {
	inst.TransferFeeBasisPoints = &transferFeeBasisPoints
	return inst
}

// SetMaximumFee sets the "maximumFee" parameter.
func (inst *SetTransferFee) SetMaximumFee(maximumFee uint64) *SetTransferFee {
	inst.MaximumFee = &maximumFee
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *SetTransferFee) SetMintAccount(mint ag_solanago.PublicKey) *SetTransferFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *SetTransferFee) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFeeAuthorityAccount sets the "feeAuthority" account.
func (inst *SetTransferFee) SetFeeAuthorityAccount(feeAuthority ag_solanago.PublicKey) *SetTransferFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(feeAuthority).SIGNER()
	return inst
}

// GetFeeAuthorityAccount gets the "feeAuthority" account.
func (inst *SetTransferFee) GetFeeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst *SetTransferFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetTransferFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetTransferFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:2], metas...)
	return inst
}

func (inst *SetTransferFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2:]
}

func (inst SetTransferFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_SetTransferFee),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetTransferFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetTransferFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TransferFeeBasisPoints == nil {
			return errors.New("transferFeeBasisPoints parameter is not set")
		}
		if inst.MaximumFee == nil {
			return errors.New("maximumFee parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 2 {
		return errors.New("accounts slice has wrong length: expected 2 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FeeAuthority is not set")
		}
	}
	return nil
}

func (inst *SetTransferFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetTransferFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TransferFeeBasisPoints", *inst.TransferFeeBasisPoints))
						paramsBranch.Child(ag_format.Param("            MaximumFee", *inst.MaximumFee))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        mint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("feeAuthority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetTransferFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TransferFeeBasisPoints` param:
	err = encoder.Encode(obj.TransferFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `MaximumFee` param:
	err = encoder.Encode(obj.MaximumFee)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetTransferFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TransferFeeBasisPoints`:
	err = decoder.Decode(&obj.TransferFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `MaximumFee`:
	err = decoder.Decode(&obj.MaximumFee)
	if err != nil {
		return err
	}
	return nil
}

// NewSetTransferFeeInstruction declares a new SetTransferFee instruction with the provided parameters and accounts.
func NewSetTransferFeeInstruction(
	// Parameters:
	transferFeeBasisPoints uint16,
	maximumFee uint64,
	// Accounts:
	mint ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey) *SetTransferFee {
	return NewSetTransferFeeInstructionBuilder().
		SetTransferFeeBasisPoints(transferFeeBasisPoints).
		SetMaximumFee(maximumFee).
		SetMintAccount(mint).
		SetFeeAuthorityAccount(feeAuthority)
}

// NewSimpleSetTransferFeeInstruction declares a new SetTransferFee instruction with the provided parameters and accounts.
func NewSimpleSetTransferFeeInstruction(
	// Parameters:
	transferFeeBasisPoints uint16,
	maximumFee uint64,
	// Accounts:
	mint ag_solanago.PublicKey,
	feeAuthority ag_solanago.PublicKey) *SetTransferFee {
	return NewSetTransferFeeInstructionBuilder().
		SetTransferFeeBasisPoints(transferFeeBasisPoints).
		SetMaximumFee(maximumFee).
		SetMintAccount(mint).
		SetFeeAuthorityAccount(feeAuthority)
}
