// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeInterestBearingMint is the `initialize_interest_bearing_mint` instruction.
type InitializeInterestBearingMint struct {
	RateAuthority          *ag_solanago.PublicKey
	InitialRateBasisPoints *uint16

	// [0] = [WRITE] mint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeInterestBearingMintInstructionBuilder creates a new `InitializeInterestBearingMint` instruction builder.
func NewInitializeInterestBearingMintInstructionBuilder() *InitializeInterestBearingMint {
	nd := &InitializeInterestBearingMint{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetRateAuthority sets the "rateAuthority" parameter.
func (inst *InitializeInterestBearingMint) SetRateAuthority(rateAuthority ag_solanago.PublicKey) *InitializeInterestBearingMint {
	inst.RateAuthority = &rateAuthority
	return inst
}

// SetInitialRateBasisPoints sets the "initialRateBasisPoints" parameter.
func (inst *InitializeInterestBearingMint) SetInitialRateBasisPoints(initialRateBasisPoints uint16) *InitializeInterestBearingMint {
	inst.InitialRateBasisPoints = &initialRateBasisPoints
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *InitializeInterestBearingMint) SetMintAccount(mint ag_solanago.PublicKey) *InitializeInterestBearingMint {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *InitializeInterestBearingMint) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst *InitializeInterestBearingMint) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeInterestBearingMint) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeInterestBearingMint {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:1], metas...)
	return inst
}

func (inst *InitializeInterestBearingMint) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1:]
}

func (inst InitializeInterestBearingMint) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_InitializeInterestBearingMint),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeInterestBearingMint) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeInterestBearingMint) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RateAuthority == nil {
			return errors.New("rateAuthority parameter is not set")
		}
		if inst.InitialRateBasisPoints == nil {
			return errors.New("initialRateBasisPoints parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 1 {
		return errors.New("accounts slice has wrong length: expected 1 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
	}
	return nil
}

func (inst *InitializeInterestBearingMint) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeInterestBearingMint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("         RateAuthority", *inst.RateAuthority))
						paramsBranch.Child(ag_format.Param("InitialRateBasisPoints", *inst.InitialRateBasisPoints))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("mint", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj InitializeInterestBearingMint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RateAuthority` param:
	err = encoder.Encode(obj.RateAuthority)
	if err != nil {
		return err
	}
	// Serialize `InitialRateBasisPoints` param:
	err = encoder.Encode(obj.InitialRateBasisPoints)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeInterestBearingMint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RateAuthority`:
	err = decoder.Decode(&obj.RateAuthority)
	if err != nil {
		return err
	}
	// Deserialize `InitialRateBasisPoints`:
	err = decoder.Decode(&obj.InitialRateBasisPoints)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInterestBearingMintInstruction declares a new InitializeInterestBearingMint instruction with the provided parameters and accounts.
func NewInitializeInterestBearingMintInstruction(
	// Parameters:
	rateAuthority ag_solanago.PublicKey,
	initialRateBasisPoints uint16,
	// Accounts:
	mint ag_solanago.PublicKey) *InitializeInterestBearingMint {
	return NewInitializeInterestBearingMintInstructionBuilder().
		SetRateAuthority(rateAuthority).
		SetInitialRateBasisPoints(initialRateBasisPoints).
		SetMintAccount(mint)
}

// NewSimpleInitializeInterestBearingMintInstruction declares a new InitializeInterestBearingMint instruction with the provided parameters and accounts.
func NewSimpleInitializeInterestBearingMintInstruction(
	// Parameters:
	rateAuthority ag_solanago.PublicKey,
	initialRateBasisPoints uint16,
	// Accounts:
	mint ag_solanago.PublicKey) *InitializeInterestBearingMint {
	return NewInitializeInterestBearingMintInstructionBuilder().
		SetRateAuthority(rateAuthority).
		SetInitialRateBasisPoints(initialRateBasisPoints).
		SetMintAccount(mint)
}
