// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawWithheldTokensFromMintForConfidentialTransferFee is the `withdraw_withheld_tokens_from_mint_for_confidential_transfer_fee` instruction.
type WithdrawWithheldTokensFromMintForConfidentialTransferFee struct {
	ProofInstructionOffset         *int8
	NewDecryptableAvailableBalance *DecryptableBalance

	// [0] = [WRITE] mint
	//
	// [1] = [WRITE] fee_receiver
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionBuilder creates a new `WithdrawWithheldTokensFromMintForConfidentialTransferFee` instruction builder.
func NewWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionBuilder() *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	nd := &WithdrawWithheldTokensFromMintForConfidentialTransferFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetProofInstructionOffset sets the "proofInstructionOffset" parameter.
func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) SetProofInstructionOffset(proofInstructionOffset int8) *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	inst.ProofInstructionOffset = &proofInstructionOffset
	return inst
}

// SetNewDecryptableAvailableBalance sets the "newDecryptableAvailableBalance" parameter.
func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance DecryptableBalance) *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	inst.NewDecryptableAvailableBalance = &newDecryptableAvailableBalance
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) SetMintAccount(mint ag_solanago.PublicKey) *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFeeReceiverAccount sets the "fee_receiver" account.
func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) SetFeeReceiverAccount(feeReceiver ag_solanago.PublicKey) *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(feeReceiver).WRITE()
	return inst
}

// GetFeeReceiverAccount gets the "fee_receiver" account.
func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) GetFeeReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) SetAuthorityAccount(authority ag_solanago.PublicKey) *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst WithdrawWithheldTokensFromMintForConfidentialTransferFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_WithdrawWithheldTokensFromMintForConfidentialTransferFee),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawWithheldTokensFromMintForConfidentialTransferFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ProofInstructionOffset == nil {
			return errors.New("proofInstructionOffset parameter is not set")
		}
		if inst.NewDecryptableAvailableBalance == nil {
			return errors.New("newDecryptableAvailableBalance parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FeeReceiver is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *WithdrawWithheldTokensFromMintForConfidentialTransferFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawWithheldTokensFromMintForConfidentialTransferFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        ProofInstructionOffset", *inst.ProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("NewDecryptableAvailableBalance", *inst.NewDecryptableAvailableBalance))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        mint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("fee_receiver", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj WithdrawWithheldTokensFromMintForConfidentialTransferFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProofInstructionOffset` param:
	err = encoder.Encode(obj.ProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `NewDecryptableAvailableBalance` param:
	err = encoder.Encode(obj.NewDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawWithheldTokensFromMintForConfidentialTransferFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProofInstructionOffset`:
	err = decoder.Decode(&obj.ProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `NewDecryptableAvailableBalance`:
	err = decoder.Decode(&obj.NewDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction declares a new WithdrawWithheldTokensFromMintForConfidentialTransferFee instruction with the provided parameters and accounts.
func NewWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction(
	// Parameters:
	proofInstructionOffset int8,
	newDecryptableAvailableBalance DecryptableBalance,
	// Accounts:
	mint ag_solanago.PublicKey,
	feeReceiver ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	return NewWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionBuilder().
		SetProofInstructionOffset(proofInstructionOffset).
		SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance).
		SetMintAccount(mint).
		SetFeeReceiverAccount(feeReceiver).
		SetAuthorityAccount(authority)
}

// NewSimpleWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction declares a new WithdrawWithheldTokensFromMintForConfidentialTransferFee instruction with the provided parameters and accounts.
func NewSimpleWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction(
	// Parameters:
	proofInstructionOffset int8,
	newDecryptableAvailableBalance DecryptableBalance,
	// Accounts:
	mint ag_solanago.PublicKey,
	feeReceiver ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *WithdrawWithheldTokensFromMintForConfidentialTransferFee {
	return NewWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionBuilder().
		SetProofInstructionOffset(proofInstructionOffset).
		SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance).
		SetMintAccount(mint).
		SetFeeReceiverAccount(feeReceiver).
		SetAuthorityAccount(authority)
}
