// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferCheckedWithFee is the `transfer_checked_With_fee` instruction.
type TransferCheckedWithFee struct {
	Amount   *uint64
	Decimals *uint8
	Fee      *uint64

	// [0] = [WRITE] source
	//
	// [1] = [] mint
	//
	// [2] = [WRITE] destination
	//
	// [3] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferCheckedWithFeeInstructionBuilder creates a new `TransferCheckedWithFee` instruction builder.
func NewTransferCheckedWithFeeInstructionBuilder() *TransferCheckedWithFee {
	nd := &TransferCheckedWithFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *TransferCheckedWithFee) SetAmount(amount uint64) *TransferCheckedWithFee {
	inst.Amount = &amount
	return inst
}

// SetDecimals sets the "decimals" parameter.
func (inst *TransferCheckedWithFee) SetDecimals(decimals uint8) *TransferCheckedWithFee {
	inst.Decimals = &decimals
	return inst
}

// SetFee sets the "fee" parameter.
func (inst *TransferCheckedWithFee) SetFee(fee uint64) *TransferCheckedWithFee {
	inst.Fee = &fee
	return inst
}

// SetSourceAccount sets the "source" account.
func (inst *TransferCheckedWithFee) SetSourceAccount(source ag_solanago.PublicKey) *TransferCheckedWithFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(source).WRITE()
	return inst
}

// GetSourceAccount gets the "source" account.
func (inst *TransferCheckedWithFee) GetSourceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *TransferCheckedWithFee) SetMintAccount(mint ag_solanago.PublicKey) *TransferCheckedWithFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *TransferCheckedWithFee) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDestinationAccount sets the "destination" account.
func (inst *TransferCheckedWithFee) SetDestinationAccount(destination ag_solanago.PublicKey) *TransferCheckedWithFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
func (inst *TransferCheckedWithFee) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *TransferCheckedWithFee) SetAuthorityAccount(authority ag_solanago.PublicKey) *TransferCheckedWithFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *TransferCheckedWithFee) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *TransferCheckedWithFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *TransferCheckedWithFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *TransferCheckedWithFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *TransferCheckedWithFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst TransferCheckedWithFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_TransferCheckedWithFee),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferCheckedWithFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferCheckedWithFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("amount parameter is not set")
		}
		if inst.Decimals == nil {
			return errors.New("decimals parameter is not set")
		}
		if inst.Fee == nil {
			return errors.New("fee parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Source is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *TransferCheckedWithFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferCheckedWithFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("Decimals", *inst.Decimals))
						paramsBranch.Child(ag_format.Param("     Fee", *inst.Fee))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     source", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("destination", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  authority", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj TransferCheckedWithFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TransferCheckedWithFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	return nil
}

// NewTransferCheckedWithFeeInstruction declares a new TransferCheckedWithFee instruction with the provided parameters and accounts.
func NewTransferCheckedWithFeeInstruction(
	// Parameters:
	amount uint64,
	decimals uint8,
	fee uint64,
	// Accounts:
	source ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *TransferCheckedWithFee {
	return NewTransferCheckedWithFeeInstructionBuilder().
		SetAmount(amount).
		SetDecimals(decimals).
		SetFee(fee).
		SetSourceAccount(source).
		SetMintAccount(mint).
		SetDestinationAccount(destination).
		SetAuthorityAccount(authority)
}

// NewSimpleTransferCheckedWithFeeInstruction declares a new TransferCheckedWithFee instruction with the provided parameters and accounts.
func NewSimpleTransferCheckedWithFeeInstruction(
	// Parameters:
	amount uint64,
	decimals uint8,
	fee uint64,
	// Accounts:
	source ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *TransferCheckedWithFee {
	return NewTransferCheckedWithFeeInstructionBuilder().
		SetAmount(amount).
		SetDecimals(decimals).
		SetFee(fee).
		SetSourceAccount(source).
		SetMintAccount(mint).
		SetDestinationAccount(destination).
		SetAuthorityAccount(authority)
}
