// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// The common instruction prefix for Memo Transfer account extension instructions.
type MemoTransferExtension struct {
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMemoTransferExtensionInstructionBuilder creates a new `MemoTransferExtension` instruction builder.
func NewMemoTransferExtensionInstructionBuilder() *MemoTransferExtension {
	nd := &MemoTransferExtension{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 0),
	}
	return nd
}

func (inst *MemoTransferExtension) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *MemoTransferExtension) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *MemoTransferExtension {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:0], metas...)
	return inst
}

func (inst *MemoTransferExtension) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0:]
}

func (inst MemoTransferExtension) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MemoTransferExtension,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MemoTransferExtension) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MemoTransferExtension) Validate() error {
	return nil
}

func (inst *MemoTransferExtension) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MemoTransferExtension")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=0]").ParentFunc(func(accountsBranch ag_treeout.Branches) {})
				})
		})
}

func (obj MemoTransferExtension) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MemoTransferExtension) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMemoTransferExtensionInstruction declares a new MemoTransferExtension instruction with the provided parameters and accounts.
func NewMemoTransferExtensionInstruction() *MemoTransferExtension {
	return NewMemoTransferExtensionInstructionBuilder()
}

// NewSimpleMemoTransferExtensionInstruction declares a new MemoTransferExtension instruction with the provided parameters and accounts.
func NewSimpleMemoTransferExtensionInstruction() *MemoTransferExtension {
	return NewMemoTransferExtensionInstructionBuilder()
}
