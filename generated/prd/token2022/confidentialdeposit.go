// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConfidentialDeposit is the `confidential_deposit` instruction.
type ConfidentialDeposit struct {
	Amount   *uint64
	Decimals *uint8

	// [0] = [WRITE] account
	//
	// [1] = [] mint
	//
	// [2] = [SIGNER] ownerOrDelegate
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConfidentialDepositInstructionBuilder creates a new `ConfidentialDeposit` instruction builder.
func NewConfidentialDepositInstructionBuilder() *ConfidentialDeposit {
	nd := &ConfidentialDeposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *ConfidentialDeposit) SetAmount(amount uint64) *ConfidentialDeposit {
	inst.Amount = &amount
	return inst
}

// SetDecimals sets the "decimals" parameter.
func (inst *ConfidentialDeposit) SetDecimals(decimals uint8) *ConfidentialDeposit {
	inst.Decimals = &decimals
	return inst
}

// SetAccountAccount sets the "account" account.
func (inst *ConfidentialDeposit) SetAccountAccount(account ag_solanago.PublicKey) *ConfidentialDeposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(account).WRITE()
	return inst
}

// GetAccountAccount gets the "account" account.
func (inst *ConfidentialDeposit) GetAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *ConfidentialDeposit) SetMintAccount(mint ag_solanago.PublicKey) *ConfidentialDeposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ConfidentialDeposit) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOwnerOrDelegateAccount sets the "ownerOrDelegate" account.
func (inst *ConfidentialDeposit) SetOwnerOrDelegateAccount(ownerOrDelegate ag_solanago.PublicKey) *ConfidentialDeposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(ownerOrDelegate).SIGNER()
	return inst
}

// GetOwnerOrDelegateAccount gets the "ownerOrDelegate" account.
func (inst *ConfidentialDeposit) GetOwnerOrDelegateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *ConfidentialDeposit) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ConfidentialDeposit) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ConfidentialDeposit {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *ConfidentialDeposit) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst ConfidentialDeposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_ConfidentialDeposit),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConfidentialDeposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConfidentialDeposit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("amount parameter is not set")
		}
		if inst.Decimals == nil {
			return errors.New("decimals parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Account is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OwnerOrDelegate is not set")
		}
	}
	return nil
}

func (inst *ConfidentialDeposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConfidentialDeposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("Decimals", *inst.Decimals))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        account", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("ownerOrDelegate", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj ConfidentialDeposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConfidentialDeposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

// NewConfidentialDepositInstruction declares a new ConfidentialDeposit instruction with the provided parameters and accounts.
func NewConfidentialDepositInstruction(
	// Parameters:
	amount uint64,
	decimals uint8,
	// Accounts:
	account ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	ownerOrDelegate ag_solanago.PublicKey) *ConfidentialDeposit {
	return NewConfidentialDepositInstructionBuilder().
		SetAmount(amount).
		SetDecimals(decimals).
		SetAccountAccount(account).
		SetMintAccount(mint).
		SetOwnerOrDelegateAccount(ownerOrDelegate)
}

// NewSimpleConfidentialDepositInstruction declares a new ConfidentialDeposit instruction with the provided parameters and accounts.
func NewSimpleConfidentialDepositInstruction(
	// Parameters:
	amount uint64,
	decimals uint8,
	// Accounts:
	account ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	ownerOrDelegate ag_solanago.PublicKey) *ConfidentialDeposit {
	return NewConfidentialDepositInstructionBuilder().
		SetAmount(amount).
		SetDecimals(decimals).
		SetAccountAccount(account).
		SetMintAccount(mint).
		SetOwnerOrDelegateAccount(ownerOrDelegate)
}
