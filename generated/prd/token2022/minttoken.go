// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintToken is the `mint_token` instruction.
type MintToken struct {
	NewDecryptableSupply                     *[36]uint8
	MintAmountAuditorCiphertextLo            *[64]uint8
	MintAmountAuditorCiphertextHi            *[64]uint8
	EqualityProofInstructionOffset           *int8
	CiphertextValidityProofInstructionOffset *int8
	RangeProofInstructionOffset              *int8

	// [0] = [WRITE] account
	//
	// [1] = [WRITE] mint
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintTokenInstructionBuilder creates a new `MintToken` instruction builder.
func NewMintTokenInstructionBuilder() *MintToken {
	nd := &MintToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetNewDecryptableSupply sets the "newDecryptableSupply" parameter.
func (inst *MintToken) SetNewDecryptableSupply(newDecryptableSupply [36]uint8) *MintToken {
	inst.NewDecryptableSupply = &newDecryptableSupply
	return inst
}

// SetMintAmountAuditorCiphertextLo sets the "mintAmountAuditorCiphertextLo" parameter.
func (inst *MintToken) SetMintAmountAuditorCiphertextLo(mintAmountAuditorCiphertextLo [64]uint8) *MintToken {
	inst.MintAmountAuditorCiphertextLo = &mintAmountAuditorCiphertextLo
	return inst
}

// SetMintAmountAuditorCiphertextHi sets the "mintAmountAuditorCiphertextHi" parameter.
func (inst *MintToken) SetMintAmountAuditorCiphertextHi(mintAmountAuditorCiphertextHi [64]uint8) *MintToken {
	inst.MintAmountAuditorCiphertextHi = &mintAmountAuditorCiphertextHi
	return inst
}

// SetEqualityProofInstructionOffset sets the "equalityProofInstructionOffset" parameter.
func (inst *MintToken) SetEqualityProofInstructionOffset(equalityProofInstructionOffset int8) *MintToken {
	inst.EqualityProofInstructionOffset = &equalityProofInstructionOffset
	return inst
}

// SetCiphertextValidityProofInstructionOffset sets the "ciphertextValidityProofInstructionOffset" parameter.
func (inst *MintToken) SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset int8) *MintToken {
	inst.CiphertextValidityProofInstructionOffset = &ciphertextValidityProofInstructionOffset
	return inst
}

// SetRangeProofInstructionOffset sets the "rangeProofInstructionOffset" parameter.
func (inst *MintToken) SetRangeProofInstructionOffset(rangeProofInstructionOffset int8) *MintToken {
	inst.RangeProofInstructionOffset = &rangeProofInstructionOffset
	return inst
}

// SetAccountAccount sets the "account" account.
func (inst *MintToken) SetAccountAccount(account ag_solanago.PublicKey) *MintToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(account).WRITE()
	return inst
}

// GetAccountAccount gets the "account" account.
func (inst *MintToken) GetAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *MintToken) SetMintAccount(mint ag_solanago.PublicKey) *MintToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *MintToken) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *MintToken) SetAuthorityAccount(authority ag_solanago.PublicKey) *MintToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *MintToken) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *MintToken) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *MintToken) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *MintToken {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *MintToken) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst MintToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_MintToken),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewDecryptableSupply == nil {
			return errors.New("newDecryptableSupply parameter is not set")
		}
		if inst.MintAmountAuditorCiphertextLo == nil {
			return errors.New("mintAmountAuditorCiphertextLo parameter is not set")
		}
		if inst.MintAmountAuditorCiphertextHi == nil {
			return errors.New("mintAmountAuditorCiphertextHi parameter is not set")
		}
		if inst.EqualityProofInstructionOffset == nil {
			return errors.New("equalityProofInstructionOffset parameter is not set")
		}
		if inst.CiphertextValidityProofInstructionOffset == nil {
			return errors.New("ciphertextValidityProofInstructionOffset parameter is not set")
		}
		if inst.RangeProofInstructionOffset == nil {
			return errors.New("rangeProofInstructionOffset parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Account is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *MintToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                    NewDecryptableSupply", *inst.NewDecryptableSupply))
						paramsBranch.Child(ag_format.Param("           MintAmountAuditorCiphertextLo", *inst.MintAmountAuditorCiphertextLo))
						paramsBranch.Child(ag_format.Param("           MintAmountAuditorCiphertextHi", *inst.MintAmountAuditorCiphertextHi))
						paramsBranch.Child(ag_format.Param("          EqualityProofInstructionOffset", *inst.EqualityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("CiphertextValidityProofInstructionOffset", *inst.CiphertextValidityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("             RangeProofInstructionOffset", *inst.RangeProofInstructionOffset))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  account", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj MintToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewDecryptableSupply` param:
	err = encoder.Encode(obj.NewDecryptableSupply)
	if err != nil {
		return err
	}
	// Serialize `MintAmountAuditorCiphertextLo` param:
	err = encoder.Encode(obj.MintAmountAuditorCiphertextLo)
	if err != nil {
		return err
	}
	// Serialize `MintAmountAuditorCiphertextHi` param:
	err = encoder.Encode(obj.MintAmountAuditorCiphertextHi)
	if err != nil {
		return err
	}
	// Serialize `EqualityProofInstructionOffset` param:
	err = encoder.Encode(obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `CiphertextValidityProofInstructionOffset` param:
	err = encoder.Encode(obj.CiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `RangeProofInstructionOffset` param:
	err = encoder.Encode(obj.RangeProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewDecryptableSupply`:
	err = decoder.Decode(&obj.NewDecryptableSupply)
	if err != nil {
		return err
	}
	// Deserialize `MintAmountAuditorCiphertextLo`:
	err = decoder.Decode(&obj.MintAmountAuditorCiphertextLo)
	if err != nil {
		return err
	}
	// Deserialize `MintAmountAuditorCiphertextHi`:
	err = decoder.Decode(&obj.MintAmountAuditorCiphertextHi)
	if err != nil {
		return err
	}
	// Deserialize `EqualityProofInstructionOffset`:
	err = decoder.Decode(&obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `CiphertextValidityProofInstructionOffset`:
	err = decoder.Decode(&obj.CiphertextValidityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `RangeProofInstructionOffset`:
	err = decoder.Decode(&obj.RangeProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}

// NewMintTokenInstruction declares a new MintToken instruction with the provided parameters and accounts.
func NewMintTokenInstruction(
	// Parameters:
	newDecryptableSupply [36]uint8,
	mintAmountAuditorCiphertextLo [64]uint8,
	mintAmountAuditorCiphertextHi [64]uint8,
	equalityProofInstructionOffset int8,
	ciphertextValidityProofInstructionOffset int8,
	rangeProofInstructionOffset int8,
	// Accounts:
	account ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *MintToken {
	return NewMintTokenInstructionBuilder().
		SetNewDecryptableSupply(newDecryptableSupply).
		SetMintAmountAuditorCiphertextLo(mintAmountAuditorCiphertextLo).
		SetMintAmountAuditorCiphertextHi(mintAmountAuditorCiphertextHi).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset).
		SetRangeProofInstructionOffset(rangeProofInstructionOffset).
		SetAccountAccount(account).
		SetMintAccount(mint).
		SetAuthorityAccount(authority)
}

// NewSimpleMintTokenInstruction declares a new MintToken instruction with the provided parameters and accounts.
func NewSimpleMintTokenInstruction(
	// Parameters:
	newDecryptableSupply [36]uint8,
	mintAmountAuditorCiphertextLo [64]uint8,
	mintAmountAuditorCiphertextHi [64]uint8,
	equalityProofInstructionOffset int8,
	ciphertextValidityProofInstructionOffset int8,
	rangeProofInstructionOffset int8,
	// Accounts:
	account ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *MintToken {
	return NewMintTokenInstructionBuilder().
		SetNewDecryptableSupply(newDecryptableSupply).
		SetMintAmountAuditorCiphertextLo(mintAmountAuditorCiphertextLo).
		SetMintAmountAuditorCiphertextHi(mintAmountAuditorCiphertextHi).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetCiphertextValidityProofInstructionOffset(ciphertextValidityProofInstructionOffset).
		SetRangeProofInstructionOffset(rangeProofInstructionOffset).
		SetAccountAccount(account).
		SetMintAccount(mint).
		SetAuthorityAccount(authority)
}
