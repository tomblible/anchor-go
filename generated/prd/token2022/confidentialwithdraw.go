// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConfidentialWithdraw is the `confidential_withdraw` instruction.
type ConfidentialWithdraw struct {
	Amount                         *uint64
	Decimals                       *uint8
	NewDecryptableAvailableBalance *DecryptableBalance
	EqualityProofInstructionOffset *int8
	RangeProofInstructionOffset    *int8

	// [0] = [WRITE] account
	//
	// [1] = [] mint
	//
	// [2] = [SIGNER] authority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConfidentialWithdrawInstructionBuilder creates a new `ConfidentialWithdraw` instruction builder.
func NewConfidentialWithdrawInstructionBuilder() *ConfidentialWithdraw {
	nd := &ConfidentialWithdraw{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *ConfidentialWithdraw) SetAmount(amount uint64) *ConfidentialWithdraw {
	inst.Amount = &amount
	return inst
}

// SetDecimals sets the "decimals" parameter.
func (inst *ConfidentialWithdraw) SetDecimals(decimals uint8) *ConfidentialWithdraw {
	inst.Decimals = &decimals
	return inst
}

// SetNewDecryptableAvailableBalance sets the "newDecryptableAvailableBalance" parameter.
func (inst *ConfidentialWithdraw) SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance DecryptableBalance) *ConfidentialWithdraw {
	inst.NewDecryptableAvailableBalance = &newDecryptableAvailableBalance
	return inst
}

// SetEqualityProofInstructionOffset sets the "equalityProofInstructionOffset" parameter.
func (inst *ConfidentialWithdraw) SetEqualityProofInstructionOffset(equalityProofInstructionOffset int8) *ConfidentialWithdraw {
	inst.EqualityProofInstructionOffset = &equalityProofInstructionOffset
	return inst
}

// SetRangeProofInstructionOffset sets the "rangeProofInstructionOffset" parameter.
func (inst *ConfidentialWithdraw) SetRangeProofInstructionOffset(rangeProofInstructionOffset int8) *ConfidentialWithdraw {
	inst.RangeProofInstructionOffset = &rangeProofInstructionOffset
	return inst
}

// SetAccountAccount sets the "account" account.
func (inst *ConfidentialWithdraw) SetAccountAccount(account ag_solanago.PublicKey) *ConfidentialWithdraw {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(account).WRITE()
	return inst
}

// GetAccountAccount gets the "account" account.
func (inst *ConfidentialWithdraw) GetAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *ConfidentialWithdraw) SetMintAccount(mint ag_solanago.PublicKey) *ConfidentialWithdraw {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ConfidentialWithdraw) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *ConfidentialWithdraw) SetAuthorityAccount(authority ag_solanago.PublicKey) *ConfidentialWithdraw {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *ConfidentialWithdraw) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *ConfidentialWithdraw) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ConfidentialWithdraw) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ConfidentialWithdraw {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *ConfidentialWithdraw) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst ConfidentialWithdraw) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_ConfidentialWithdraw),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConfidentialWithdraw) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConfidentialWithdraw) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("amount parameter is not set")
		}
		if inst.Decimals == nil {
			return errors.New("decimals parameter is not set")
		}
		if inst.NewDecryptableAvailableBalance == nil {
			return errors.New("newDecryptableAvailableBalance parameter is not set")
		}
		if inst.EqualityProofInstructionOffset == nil {
			return errors.New("equalityProofInstructionOffset parameter is not set")
		}
		if inst.RangeProofInstructionOffset == nil {
			return errors.New("rangeProofInstructionOffset parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Account is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
	}
	return nil
}

func (inst *ConfidentialWithdraw) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConfidentialWithdraw")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                        Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("                      Decimals", *inst.Decimals))
						paramsBranch.Child(ag_format.Param("NewDecryptableAvailableBalance", *inst.NewDecryptableAvailableBalance))
						paramsBranch.Child(ag_format.Param("EqualityProofInstructionOffset", *inst.EqualityProofInstructionOffset))
						paramsBranch.Child(ag_format.Param("   RangeProofInstructionOffset", *inst.RangeProofInstructionOffset))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  account", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("authority", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj ConfidentialWithdraw) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `NewDecryptableAvailableBalance` param:
	err = encoder.Encode(obj.NewDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Serialize `EqualityProofInstructionOffset` param:
	err = encoder.Encode(obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Serialize `RangeProofInstructionOffset` param:
	err = encoder.Encode(obj.RangeProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConfidentialWithdraw) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `NewDecryptableAvailableBalance`:
	err = decoder.Decode(&obj.NewDecryptableAvailableBalance)
	if err != nil {
		return err
	}
	// Deserialize `EqualityProofInstructionOffset`:
	err = decoder.Decode(&obj.EqualityProofInstructionOffset)
	if err != nil {
		return err
	}
	// Deserialize `RangeProofInstructionOffset`:
	err = decoder.Decode(&obj.RangeProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}

// NewConfidentialWithdrawInstruction declares a new ConfidentialWithdraw instruction with the provided parameters and accounts.
func NewConfidentialWithdrawInstruction(
	// Parameters:
	amount uint64,
	decimals uint8,
	newDecryptableAvailableBalance DecryptableBalance,
	equalityProofInstructionOffset int8,
	rangeProofInstructionOffset int8,
	// Accounts:
	account ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *ConfidentialWithdraw {
	return NewConfidentialWithdrawInstructionBuilder().
		SetAmount(amount).
		SetDecimals(decimals).
		SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetRangeProofInstructionOffset(rangeProofInstructionOffset).
		SetAccountAccount(account).
		SetMintAccount(mint).
		SetAuthorityAccount(authority)
}

// NewSimpleConfidentialWithdrawInstruction declares a new ConfidentialWithdraw instruction with the provided parameters and accounts.
func NewSimpleConfidentialWithdrawInstruction(
	// Parameters:
	amount uint64,
	decimals uint8,
	newDecryptableAvailableBalance DecryptableBalance,
	equalityProofInstructionOffset int8,
	rangeProofInstructionOffset int8,
	// Accounts:
	account ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey) *ConfidentialWithdraw {
	return NewConfidentialWithdrawInstructionBuilder().
		SetAmount(amount).
		SetDecimals(decimals).
		SetNewDecryptableAvailableBalance(newDecryptableAvailableBalance).
		SetEqualityProofInstructionOffset(equalityProofInstructionOffset).
		SetRangeProofInstructionOffset(rangeProofInstructionOffset).
		SetAccountAccount(account).
		SetMintAccount(mint).
		SetAuthorityAccount(authority)
}
