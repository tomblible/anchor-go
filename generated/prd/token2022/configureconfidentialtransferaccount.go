// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConfigureConfidentialTransferAccount is the `configure_confidential_transfer_account` instruction.
type ConfigureConfidentialTransferAccount struct {
	DecryptableZeroBalance             *DecryptableBalance
	MaximumPendingBalanceCreditCounter *uint64
	ProofInstructionOffset             *int8

	// [0] = [WRITE] tokenAccount
	//
	// [1] = [] mint
	//
	// [2] = [] instructionsOrContextState
	//
	// [3] = [SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConfigureConfidentialTransferAccountInstructionBuilder creates a new `ConfigureConfidentialTransferAccount` instruction builder.
func NewConfigureConfidentialTransferAccountInstructionBuilder() *ConfigureConfidentialTransferAccount {
	nd := &ConfigureConfidentialTransferAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetDecryptableZeroBalance sets the "decryptableZeroBalance" parameter.
func (inst *ConfigureConfidentialTransferAccount) SetDecryptableZeroBalance(decryptableZeroBalance DecryptableBalance) *ConfigureConfidentialTransferAccount {
	inst.DecryptableZeroBalance = &decryptableZeroBalance
	return inst
}

// SetMaximumPendingBalanceCreditCounter sets the "maximumPendingBalanceCreditCounter" parameter.
func (inst *ConfigureConfidentialTransferAccount) SetMaximumPendingBalanceCreditCounter(maximumPendingBalanceCreditCounter uint64) *ConfigureConfidentialTransferAccount {
	inst.MaximumPendingBalanceCreditCounter = &maximumPendingBalanceCreditCounter
	return inst
}

// SetProofInstructionOffset sets the "proofInstructionOffset" parameter.
func (inst *ConfigureConfidentialTransferAccount) SetProofInstructionOffset(proofInstructionOffset int8) *ConfigureConfidentialTransferAccount {
	inst.ProofInstructionOffset = &proofInstructionOffset
	return inst
}

// SetTokenAccountAccount sets the "tokenAccount" account.
func (inst *ConfigureConfidentialTransferAccount) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *ConfigureConfidentialTransferAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
func (inst *ConfigureConfidentialTransferAccount) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *ConfigureConfidentialTransferAccount) SetMintAccount(mint ag_solanago.PublicKey) *ConfigureConfidentialTransferAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *ConfigureConfidentialTransferAccount) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetInstructionsOrContextStateAccount sets the "instructionsOrContextState" account.
func (inst *ConfigureConfidentialTransferAccount) SetInstructionsOrContextStateAccount(instructionsOrContextState ag_solanago.PublicKey) *ConfigureConfidentialTransferAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(instructionsOrContextState)
	return inst
}

// GetInstructionsOrContextStateAccount gets the "instructionsOrContextState" account.
func (inst *ConfigureConfidentialTransferAccount) GetInstructionsOrContextStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOwnerAccount sets the "owner" account.
func (inst *ConfigureConfidentialTransferAccount) SetOwnerAccount(owner ag_solanago.PublicKey) *ConfigureConfidentialTransferAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *ConfigureConfidentialTransferAccount) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *ConfigureConfidentialTransferAccount) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ConfigureConfidentialTransferAccount) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ConfigureConfidentialTransferAccount {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *ConfigureConfidentialTransferAccount) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst ConfigureConfidentialTransferAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_ConfigureConfidentialTransferAccount),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConfigureConfidentialTransferAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConfigureConfidentialTransferAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DecryptableZeroBalance == nil {
			return errors.New("decryptableZeroBalance parameter is not set")
		}
		if inst.MaximumPendingBalanceCreditCounter == nil {
			return errors.New("maximumPendingBalanceCreditCounter parameter is not set")
		}
		if inst.ProofInstructionOffset == nil {
			return errors.New("proofInstructionOffset parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.InstructionsOrContextState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *ConfigureConfidentialTransferAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConfigureConfidentialTransferAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("            DecryptableZeroBalance", *inst.DecryptableZeroBalance))
						paramsBranch.Child(ag_format.Param("MaximumPendingBalanceCreditCounter", *inst.MaximumPendingBalanceCreditCounter))
						paramsBranch.Child(ag_format.Param("            ProofInstructionOffset", *inst.ProofInstructionOffset))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     token", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                      mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("instructionsOrContextState", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                     owner", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj ConfigureConfidentialTransferAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DecryptableZeroBalance` param:
	err = encoder.Encode(obj.DecryptableZeroBalance)
	if err != nil {
		return err
	}
	// Serialize `MaximumPendingBalanceCreditCounter` param:
	err = encoder.Encode(obj.MaximumPendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	// Serialize `ProofInstructionOffset` param:
	err = encoder.Encode(obj.ProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConfigureConfidentialTransferAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DecryptableZeroBalance`:
	err = decoder.Decode(&obj.DecryptableZeroBalance)
	if err != nil {
		return err
	}
	// Deserialize `MaximumPendingBalanceCreditCounter`:
	err = decoder.Decode(&obj.MaximumPendingBalanceCreditCounter)
	if err != nil {
		return err
	}
	// Deserialize `ProofInstructionOffset`:
	err = decoder.Decode(&obj.ProofInstructionOffset)
	if err != nil {
		return err
	}
	return nil
}

// NewConfigureConfidentialTransferAccountInstruction declares a new ConfigureConfidentialTransferAccount instruction with the provided parameters and accounts.
func NewConfigureConfidentialTransferAccountInstruction(
	// Parameters:
	decryptableZeroBalance DecryptableBalance,
	maximumPendingBalanceCreditCounter uint64,
	proofInstructionOffset int8,
	// Accounts:
	tokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	instructionsOrContextState ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *ConfigureConfidentialTransferAccount {
	return NewConfigureConfidentialTransferAccountInstructionBuilder().
		SetDecryptableZeroBalance(decryptableZeroBalance).
		SetMaximumPendingBalanceCreditCounter(maximumPendingBalanceCreditCounter).
		SetProofInstructionOffset(proofInstructionOffset).
		SetTokenAccountAccount(tokenAccount).
		SetMintAccount(mint).
		SetInstructionsOrContextStateAccount(instructionsOrContextState).
		SetOwnerAccount(owner)
}

// NewSimpleConfigureConfidentialTransferAccountInstruction declares a new ConfigureConfidentialTransferAccount instruction with the provided parameters and accounts.
func NewSimpleConfigureConfidentialTransferAccountInstruction(
	// Parameters:
	decryptableZeroBalance DecryptableBalance,
	maximumPendingBalanceCreditCounter uint64,
	proofInstructionOffset int8,
	// Accounts:
	tokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	instructionsOrContextState ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *ConfigureConfidentialTransferAccount {
	return NewConfigureConfidentialTransferAccountInstructionBuilder().
		SetDecryptableZeroBalance(decryptableZeroBalance).
		SetMaximumPendingBalanceCreditCounter(maximumPendingBalanceCreditCounter).
		SetProofInstructionOffset(proofInstructionOffset).
		SetTokenAccountAccount(tokenAccount).
		SetMintAccount(mint).
		SetInstructionsOrContextStateAccount(instructionsOrContextState).
		SetOwnerAccount(owner)
}
