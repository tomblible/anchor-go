// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Check if a token account is large enough for a list of ExtensionTypes,
// and if not, use reallocation to increase the data size.
type Reallocate struct {
	ExtensionTypes *[]ExtensionType

	// [0] = [WRITE] account
	//
	// [1] = [WRITE, SIGNER] payer
	//
	// [2] = [] systemProgram
	//
	// [3] = [SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewReallocateInstructionBuilder creates a new `Reallocate` instruction builder.
func NewReallocateInstructionBuilder() *Reallocate {
	nd := &Reallocate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetExtensionTypes sets the "extension_types" parameter.
func (inst *Reallocate) SetExtensionTypes(extension_types []ExtensionType) *Reallocate {
	inst.ExtensionTypes = &extension_types
	return inst
}

// SetAccountAccount sets the "account" account.
func (inst *Reallocate) SetAccountAccount(account ag_solanago.PublicKey) *Reallocate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(account).WRITE()
	return inst
}

// GetAccountAccount gets the "account" account.
func (inst *Reallocate) GetAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *Reallocate) SetPayerAccount(payer ag_solanago.PublicKey) *Reallocate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *Reallocate) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Reallocate) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Reallocate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Reallocate) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOwnerAccount sets the "owner" account.
func (inst *Reallocate) SetOwnerAccount(owner ag_solanago.PublicKey) *Reallocate {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *Reallocate) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *Reallocate) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Reallocate) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Reallocate {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *Reallocate) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst Reallocate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Reallocate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Reallocate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Reallocate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ExtensionTypes == nil {
			return errors.New("extensionTypes parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Account is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *Reallocate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Reallocate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" ExtensionTypes", *inst.ExtensionTypes))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      account", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        owner", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj Reallocate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ExtensionTypes` param:
	err = encoder.Encode(obj.ExtensionTypes)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Reallocate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ExtensionTypes`:
	err = decoder.Decode(&obj.ExtensionTypes)
	if err != nil {
		return err
	}
	return nil
}

// NewReallocateInstruction declares a new Reallocate instruction with the provided parameters and accounts.
func NewReallocateInstruction(
	// Parameters:
	extension_types []ExtensionType,
	// Accounts:
	account ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *Reallocate {
	return NewReallocateInstructionBuilder().
		SetExtensionTypes(extension_types).
		SetAccountAccount(account).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetOwnerAccount(owner)
}

// NewSimpleReallocateInstruction declares a new Reallocate instruction with the provided parameters and accounts.
func NewSimpleReallocateInstruction(
	// Parameters:
	extension_types []ExtensionType,
	// Accounts:
	account ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *Reallocate {
	return NewReallocateInstructionBuilder().
		SetExtensionTypes(extension_types).
		SetAccountAccount(account).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetOwnerAccount(owner)
}
