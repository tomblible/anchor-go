// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package token2022

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeTransferFeeConfig is the `initialize_transfer_fee_config` instruction.
type InitializeTransferFeeConfig struct {
	TransferFeeConfigAuthority *ag_solanago.PublicKey `bin:"optional"`
	WithdrawWithheldAuthority  *ag_solanago.PublicKey `bin:"optional"`
	TransferFeeBasisPoints     *uint16
	MaximumFee                 *uint64

	// [0] = [WRITE] mint
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeTransferFeeConfigInstructionBuilder creates a new `InitializeTransferFeeConfig` instruction builder.
func NewInitializeTransferFeeConfigInstructionBuilder() *InitializeTransferFeeConfig {
	nd := &InitializeTransferFeeConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetTransferFeeConfigAuthority sets the "transferFeeConfigAuthority" parameter.
func (inst *InitializeTransferFeeConfig) SetTransferFeeConfigAuthority(transferFeeConfigAuthority ag_solanago.PublicKey) *InitializeTransferFeeConfig {
	inst.TransferFeeConfigAuthority = &transferFeeConfigAuthority
	return inst
}

// SetWithdrawWithheldAuthority sets the "withdrawWithheldAuthority" parameter.
func (inst *InitializeTransferFeeConfig) SetWithdrawWithheldAuthority(withdrawWithheldAuthority ag_solanago.PublicKey) *InitializeTransferFeeConfig {
	inst.WithdrawWithheldAuthority = &withdrawWithheldAuthority
	return inst
}

// SetTransferFeeBasisPoints sets the "transferFeeBasisPoints" parameter.
func (inst *InitializeTransferFeeConfig) SetTransferFeeBasisPoints(transferFeeBasisPoints uint16) *InitializeTransferFeeConfig {
	inst.TransferFeeBasisPoints = &transferFeeBasisPoints
	return inst
}

// SetMaximumFee sets the "maximumFee" parameter.
func (inst *InitializeTransferFeeConfig) SetMaximumFee(maximumFee uint64) *InitializeTransferFeeConfig {
	inst.MaximumFee = &maximumFee
	return inst
}

// SetMintAccount sets the "mint" account.
func (inst *InitializeTransferFeeConfig) SetMintAccount(mint ag_solanago.PublicKey) *InitializeTransferFeeConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *InitializeTransferFeeConfig) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst *InitializeTransferFeeConfig) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeTransferFeeConfig) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeTransferFeeConfig {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:1], metas...)
	return inst
}

func (inst *InitializeTransferFeeConfig) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1:]
}

func (inst InitializeTransferFeeConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint8(Instruction_InitializeTransferFeeConfig),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeTransferFeeConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeTransferFeeConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TransferFeeBasisPoints == nil {
			return errors.New("transferFeeBasisPoints parameter is not set")
		}
		if inst.MaximumFee == nil {
			return errors.New("maximumFee parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 1 {
		return errors.New("accounts slice has wrong length: expected 1 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Mint is not set")
		}
	}
	return nil
}

func (inst *InitializeTransferFeeConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeTransferFeeConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TransferFeeConfigAuthority (OPT)", inst.TransferFeeConfigAuthority))
						paramsBranch.Child(ag_format.Param(" WithdrawWithheldAuthority (OPT)", inst.WithdrawWithheldAuthority))
						paramsBranch.Child(ag_format.Param("    TransferFeeBasisPoints", *inst.TransferFeeBasisPoints))
						paramsBranch.Child(ag_format.Param("                MaximumFee", *inst.MaximumFee))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("mint", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj InitializeTransferFeeConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TransferFeeConfigAuthority` param (optional):
	{
		if obj.TransferFeeConfigAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.TransferFeeConfigAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `WithdrawWithheldAuthority` param (optional):
	{
		if obj.WithdrawWithheldAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WithdrawWithheldAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TransferFeeBasisPoints` param:
	err = encoder.Encode(obj.TransferFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `MaximumFee` param:
	err = encoder.Encode(obj.MaximumFee)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeTransferFeeConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TransferFeeConfigAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.TransferFeeConfigAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `WithdrawWithheldAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WithdrawWithheldAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TransferFeeBasisPoints`:
	err = decoder.Decode(&obj.TransferFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `MaximumFee`:
	err = decoder.Decode(&obj.MaximumFee)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeTransferFeeConfigInstruction declares a new InitializeTransferFeeConfig instruction with the provided parameters and accounts.
func NewInitializeTransferFeeConfigInstruction(
	// Parameters:
	transferFeeConfigAuthority ag_solanago.PublicKey,
	withdrawWithheldAuthority ag_solanago.PublicKey,
	transferFeeBasisPoints uint16,
	maximumFee uint64,
	// Accounts:
	mint ag_solanago.PublicKey) *InitializeTransferFeeConfig {
	return NewInitializeTransferFeeConfigInstructionBuilder().
		SetTransferFeeConfigAuthority(transferFeeConfigAuthority).
		SetWithdrawWithheldAuthority(withdrawWithheldAuthority).
		SetTransferFeeBasisPoints(transferFeeBasisPoints).
		SetMaximumFee(maximumFee).
		SetMintAccount(mint)
}

// NewSimpleInitializeTransferFeeConfigInstruction declares a new InitializeTransferFeeConfig instruction with the provided parameters and accounts.
func NewSimpleInitializeTransferFeeConfigInstruction(
	// Parameters:
	transferFeeConfigAuthority ag_solanago.PublicKey,
	withdrawWithheldAuthority ag_solanago.PublicKey,
	transferFeeBasisPoints uint16,
	maximumFee uint64,
	// Accounts:
	mint ag_solanago.PublicKey) *InitializeTransferFeeConfig {
	return NewInitializeTransferFeeConfigInstructionBuilder().
		SetTransferFeeConfigAuthority(transferFeeConfigAuthority).
		SetWithdrawWithheldAuthority(withdrawWithheldAuthority).
		SetTransferFeeBasisPoints(transferFeeBasisPoints).
		SetMaximumFee(maximumFee).
		SetMintAccount(mint)
}
