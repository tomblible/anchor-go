// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package moonit

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type ConfigAccountAccount struct {
	MigrationAuthority             ag_solanago.PublicKey
	BackendAuthority               ag_solanago.PublicKey
	ConfigAuthority                ag_solanago.PublicKey
	HelioFee                       ag_solanago.PublicKey
	DexFee                         ag_solanago.PublicKey
	FeeBps                         uint16
	DexFeeShare                    uint8
	MigrationFee                   uint64
	LinearCurveMcapThreshold       uint64
	MarketcapCurrency              Currency
	MinSupportedDecimalPlaces      uint8
	MaxSupportedDecimalPlaces      uint8
	MinSupportedTokenSupply        uint64
	MaxSupportedTokenSupply        uint64
	Bump                           uint8
	CoefB                          uint32
	ConstantProductV1McapThreshold uint64
	ConstantProductV2McapThreshold uint64
}

var ConfigAccountAccountDiscriminator = [8]byte{189, 255, 97, 70, 186, 189, 24, 102}

func (obj ConfigAccountAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ConfigAccountAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `MigrationAuthority` param:
	err = encoder.Encode(obj.MigrationAuthority)
	if err != nil {
		return err
	}
	// Serialize `BackendAuthority` param:
	err = encoder.Encode(obj.BackendAuthority)
	if err != nil {
		return err
	}
	// Serialize `ConfigAuthority` param:
	err = encoder.Encode(obj.ConfigAuthority)
	if err != nil {
		return err
	}
	// Serialize `HelioFee` param:
	err = encoder.Encode(obj.HelioFee)
	if err != nil {
		return err
	}
	// Serialize `DexFee` param:
	err = encoder.Encode(obj.DexFee)
	if err != nil {
		return err
	}
	// Serialize `FeeBps` param:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return err
	}
	// Serialize `DexFeeShare` param:
	err = encoder.Encode(obj.DexFeeShare)
	if err != nil {
		return err
	}
	// Serialize `MigrationFee` param:
	err = encoder.Encode(obj.MigrationFee)
	if err != nil {
		return err
	}
	// Serialize `LinearCurveMcapThreshold` param:
	err = encoder.Encode(obj.LinearCurveMcapThreshold)
	if err != nil {
		return err
	}
	// Serialize `MarketcapCurrency` param:
	err = encoder.Encode(obj.MarketcapCurrency)
	if err != nil {
		return err
	}
	// Serialize `MinSupportedDecimalPlaces` param:
	err = encoder.Encode(obj.MinSupportedDecimalPlaces)
	if err != nil {
		return err
	}
	// Serialize `MaxSupportedDecimalPlaces` param:
	err = encoder.Encode(obj.MaxSupportedDecimalPlaces)
	if err != nil {
		return err
	}
	// Serialize `MinSupportedTokenSupply` param:
	err = encoder.Encode(obj.MinSupportedTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `MaxSupportedTokenSupply` param:
	err = encoder.Encode(obj.MaxSupportedTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `CoefB` param:
	err = encoder.Encode(obj.CoefB)
	if err != nil {
		return err
	}
	// Serialize `ConstantProductV1McapThreshold` param:
	err = encoder.Encode(obj.ConstantProductV1McapThreshold)
	if err != nil {
		return err
	}
	// Serialize `ConstantProductV2McapThreshold` param:
	err = encoder.Encode(obj.ConstantProductV2McapThreshold)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigAccountAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ConfigAccountAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[189 255 97 70 186 189 24 102]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `MigrationAuthority`:
	err = decoder.Decode(&obj.MigrationAuthority)
	if err != nil {
		return err
	}
	// Deserialize `BackendAuthority`:
	err = decoder.Decode(&obj.BackendAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ConfigAuthority`:
	err = decoder.Decode(&obj.ConfigAuthority)
	if err != nil {
		return err
	}
	// Deserialize `HelioFee`:
	err = decoder.Decode(&obj.HelioFee)
	if err != nil {
		return err
	}
	// Deserialize `DexFee`:
	err = decoder.Decode(&obj.DexFee)
	if err != nil {
		return err
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return err
	}
	// Deserialize `DexFeeShare`:
	err = decoder.Decode(&obj.DexFeeShare)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFee`:
	err = decoder.Decode(&obj.MigrationFee)
	if err != nil {
		return err
	}
	// Deserialize `LinearCurveMcapThreshold`:
	err = decoder.Decode(&obj.LinearCurveMcapThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MarketcapCurrency`:
	err = decoder.Decode(&obj.MarketcapCurrency)
	if err != nil {
		return err
	}
	// Deserialize `MinSupportedDecimalPlaces`:
	err = decoder.Decode(&obj.MinSupportedDecimalPlaces)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupportedDecimalPlaces`:
	err = decoder.Decode(&obj.MaxSupportedDecimalPlaces)
	if err != nil {
		return err
	}
	// Deserialize `MinSupportedTokenSupply`:
	err = decoder.Decode(&obj.MinSupportedTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupportedTokenSupply`:
	err = decoder.Decode(&obj.MaxSupportedTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `CoefB`:
	err = decoder.Decode(&obj.CoefB)
	if err != nil {
		return err
	}
	// Deserialize `ConstantProductV1McapThreshold`:
	err = decoder.Decode(&obj.ConstantProductV1McapThreshold)
	if err != nil {
		return err
	}
	// Deserialize `ConstantProductV2McapThreshold`:
	err = decoder.Decode(&obj.ConstantProductV2McapThreshold)
	if err != nil {
		return err
	}
	return nil
}

type CurveAccountAccount struct {
	TotalSupply        uint64
	CurveAmount        uint64
	Mint               ag_solanago.PublicKey
	Decimals           uint8
	CollateralCurrency Currency
	CurveType          CurveType
	MarketcapThreshold uint64
	MarketcapCurrency  Currency
	MigrationFee       uint64
	CoefB              uint32
	Bump               uint8
	MigrationTarget    MigrationTarget
	PriceIncrease      uint16
}

var CurveAccountAccountDiscriminator = [8]byte{8, 91, 83, 28, 132, 216, 248, 22}

func (obj CurveAccountAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CurveAccountAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TotalSupply` param:
	err = encoder.Encode(obj.TotalSupply)
	if err != nil {
		return err
	}
	// Serialize `CurveAmount` param:
	err = encoder.Encode(obj.CurveAmount)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `CollateralCurrency` param:
	err = encoder.Encode(obj.CollateralCurrency)
	if err != nil {
		return err
	}
	// Serialize `CurveType` param:
	err = encoder.Encode(obj.CurveType)
	if err != nil {
		return err
	}
	// Serialize `MarketcapThreshold` param:
	err = encoder.Encode(obj.MarketcapThreshold)
	if err != nil {
		return err
	}
	// Serialize `MarketcapCurrency` param:
	err = encoder.Encode(obj.MarketcapCurrency)
	if err != nil {
		return err
	}
	// Serialize `MigrationFee` param:
	err = encoder.Encode(obj.MigrationFee)
	if err != nil {
		return err
	}
	// Serialize `CoefB` param:
	err = encoder.Encode(obj.CoefB)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `MigrationTarget` param:
	err = encoder.Encode(obj.MigrationTarget)
	if err != nil {
		return err
	}
	// Serialize `PriceIncrease` param:
	err = encoder.Encode(obj.PriceIncrease)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveAccountAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CurveAccountAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[8 91 83 28 132 216 248 22]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TotalSupply`:
	err = decoder.Decode(&obj.TotalSupply)
	if err != nil {
		return err
	}
	// Deserialize `CurveAmount`:
	err = decoder.Decode(&obj.CurveAmount)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `CollateralCurrency`:
	err = decoder.Decode(&obj.CollateralCurrency)
	if err != nil {
		return err
	}
	// Deserialize `CurveType`:
	err = decoder.Decode(&obj.CurveType)
	if err != nil {
		return err
	}
	// Deserialize `MarketcapThreshold`:
	err = decoder.Decode(&obj.MarketcapThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MarketcapCurrency`:
	err = decoder.Decode(&obj.MarketcapCurrency)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFee`:
	err = decoder.Decode(&obj.MigrationFee)
	if err != nil {
		return err
	}
	// Deserialize `CoefB`:
	err = decoder.Decode(&obj.CoefB)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `MigrationTarget`:
	err = decoder.Decode(&obj.MigrationTarget)
	if err != nil {
		return err
	}
	// Deserialize `PriceIncrease`:
	err = decoder.Decode(&obj.PriceIncrease)
	if err != nil {
		return err
	}
	return nil
}
