// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package moonit

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConfigUpdate is the `config_update` instruction.
type ConfigUpdate struct {
	Data *ConfigParams

	// [0] = [SIGNER] config_authority
	//
	// [1] = [WRITE] config_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConfigUpdateInstructionBuilder creates a new `ConfigUpdate` instruction builder.
func NewConfigUpdateInstructionBuilder() *ConfigUpdate {
	nd := &ConfigUpdate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *ConfigUpdate) SetData(data ConfigParams) *ConfigUpdate {
	inst.Data = &data
	return inst
}

// SetConfigAuthorityAccount sets the "config_authority" account.
func (inst *ConfigUpdate) SetConfigAuthorityAccount(configAuthority ag_solanago.PublicKey) *ConfigUpdate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(configAuthority).SIGNER()
	return inst
}

// GetConfigAuthorityAccount gets the "config_authority" account.
func (inst *ConfigUpdate) GetConfigAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccountAccount sets the "config_account" account.
func (inst *ConfigUpdate) SetConfigAccountAccount(configAccount ag_solanago.PublicKey) *ConfigUpdate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(configAccount).WRITE()
	return inst
}

// GetConfigAccountAccount gets the "config_account" account.
func (inst *ConfigUpdate) GetConfigAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst *ConfigUpdate) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ConfigUpdate) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ConfigUpdate {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:2], metas...)
	return inst
}

func (inst *ConfigUpdate) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2:]
}

func (inst ConfigUpdate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ConfigUpdate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConfigUpdate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConfigUpdate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("data parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 2 {
		return errors.New("accounts slice has wrong length: expected 2 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ConfigAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ConfigAccount is not set")
		}
	}
	return nil
}

func (inst *ConfigUpdate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConfigUpdate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("config_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         config_", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj ConfigUpdate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConfigUpdate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

// NewConfigUpdateInstruction declares a new ConfigUpdate instruction with the provided parameters and accounts.
func NewConfigUpdateInstruction(
	// Parameters:
	data ConfigParams,
	// Accounts:
	configAuthority ag_solanago.PublicKey,
	configAccount ag_solanago.PublicKey) *ConfigUpdate {
	return NewConfigUpdateInstructionBuilder().
		SetData(data).
		SetConfigAuthorityAccount(configAuthority).
		SetConfigAccountAccount(configAccount)
}

// NewSimpleConfigUpdateInstruction declares a new ConfigUpdate instruction with the provided parameters and accounts.
func NewSimpleConfigUpdateInstruction(
	// Parameters:
	data ConfigParams,
	// Accounts:
	configAuthority ag_solanago.PublicKey,
	configAccount ag_solanago.PublicKey) *ConfigUpdate {
	return NewConfigUpdateInstructionBuilder().
		SetData(data).
		SetConfigAuthorityAccount(configAuthority).
		SetConfigAccountAccount(configAccount)
}
