// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package moonit

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MigrateFunds is the `migrate_funds` instruction.
type MigrateFunds struct {

	// [0] = [SIGNER] backend_authority
	// ··········· BE Authority
	//
	// [1] = [WRITE, SIGNER] migration_authority
	// ··········· Migration Authority
	// ··········· Owner and Payer over Token Accounts, needs to be mutable
	//
	// [2] = [WRITE] curve_account
	// ··········· Curve Account
	// ··········· The account is closed after this instruction
	//
	// [3] = [WRITE] curve_token_account
	// ··········· Curve Token Account
	// ··········· The account is closed after this instruction
	//
	// [4] = [WRITE] migration_authority_token_account
	// ··········· Authority token Account
	// ··········· Init on demand
	//
	// [5] = [WRITE] mint
	// ··········· InterfaceAccount: checks program ownership + deserialize into Mint
	//
	// [6] = [WRITE] dex_fee_account
	//
	// [7] = [WRITE] helio_fee_account
	//
	// [8] = [] config_account
	//
	// [9] = [] system_program
	//
	// [10] = [] token_program
	//
	// [11] = [] associated_token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrateFundsInstructionBuilder creates a new `MigrateFunds` instruction builder.
func NewMigrateFundsInstructionBuilder() *MigrateFunds {
	nd := &MigrateFunds{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetBackendAuthorityAccount sets the "backend_authority" account.
// BE Authority
func (inst *MigrateFunds) SetBackendAuthorityAccount(backendAuthority ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(backendAuthority).SIGNER()
	return inst
}

// GetBackendAuthorityAccount gets the "backend_authority" account.
// BE Authority
func (inst *MigrateFunds) GetBackendAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMigrationAuthorityAccount sets the "migration_authority" account.
// Migration Authority
// Owner and Payer over Token Accounts, needs to be mutable
func (inst *MigrateFunds) SetMigrationAuthorityAccount(migrationAuthority ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(migrationAuthority).WRITE().SIGNER()
	return inst
}

// GetMigrationAuthorityAccount gets the "migration_authority" account.
// Migration Authority
// Owner and Payer over Token Accounts, needs to be mutable
func (inst *MigrateFunds) GetMigrationAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCurveAccountAccount sets the "curve_account" account.
// Curve Account
// The account is closed after this instruction
func (inst *MigrateFunds) SetCurveAccountAccount(curveAccount ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(curveAccount).WRITE()
	return inst
}

// GetCurveAccountAccount gets the "curve_account" account.
// Curve Account
// The account is closed after this instruction
func (inst *MigrateFunds) GetCurveAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCurveTokenAccountAccount sets the "curve_token_account" account.
// Curve Token Account
// The account is closed after this instruction
func (inst *MigrateFunds) SetCurveTokenAccountAccount(curveTokenAccount ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(curveTokenAccount).WRITE()
	return inst
}

// GetCurveTokenAccountAccount gets the "curve_token_account" account.
// Curve Token Account
// The account is closed after this instruction
func (inst *MigrateFunds) GetCurveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMigrationAuthorityTokenAccountAccount sets the "migration_authority_token_account" account.
// Authority token Account
// Init on demand
func (inst *MigrateFunds) SetMigrationAuthorityTokenAccountAccount(migrationAuthorityTokenAccount ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(migrationAuthorityTokenAccount).WRITE()
	return inst
}

// GetMigrationAuthorityTokenAccountAccount gets the "migration_authority_token_account" account.
// Authority token Account
// Init on demand
func (inst *MigrateFunds) GetMigrationAuthorityTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMintAccount sets the "mint" account.
// InterfaceAccount: checks program ownership + deserialize into Mint
func (inst *MigrateFunds) SetMintAccount(mint ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
// InterfaceAccount: checks program ownership + deserialize into Mint
func (inst *MigrateFunds) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetDexFeeAccountAccount sets the "dex_fee_account" account.
func (inst *MigrateFunds) SetDexFeeAccountAccount(dexFeeAccount ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(dexFeeAccount).WRITE()
	return inst
}

// GetDexFeeAccountAccount gets the "dex_fee_account" account.
func (inst *MigrateFunds) GetDexFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetHelioFeeAccountAccount sets the "helio_fee_account" account.
func (inst *MigrateFunds) SetHelioFeeAccountAccount(helioFeeAccount ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(helioFeeAccount).WRITE()
	return inst
}

// GetHelioFeeAccountAccount gets the "helio_fee_account" account.
func (inst *MigrateFunds) GetHelioFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetConfigAccountAccount sets the "config_account" account.
func (inst *MigrateFunds) SetConfigAccountAccount(configAccount ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(configAccount)
	return inst
}

// GetConfigAccountAccount gets the "config_account" account.
func (inst *MigrateFunds) GetConfigAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *MigrateFunds) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *MigrateFunds) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *MigrateFunds) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *MigrateFunds) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *MigrateFunds) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *MigrateFunds {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *MigrateFunds) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst *MigrateFunds) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *MigrateFunds) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *MigrateFunds {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:12], metas...)
	return inst
}

func (inst *MigrateFunds) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12:]
}

func (inst MigrateFunds) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MigrateFunds,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MigrateFunds) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MigrateFunds) Validate() error {
	if len(inst.AccountMetaSlice) < 12 {
		return errors.New("accounts slice has wrong length: expected 12 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BackendAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MigrationAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CurveAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CurveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MigrationAuthorityTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.DexFeeAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.HelioFeeAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.ConfigAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
	}
	return nil
}

func (inst *MigrateFunds) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MigrateFunds")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         backend_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       migration_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                    curve_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              curve_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("migration_authority_token_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                      mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                  dex_fee_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                helio_fee_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                   config_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("            system_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("             token_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("  associated_token_program", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj MigrateFunds) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MigrateFunds) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMigrateFundsInstruction declares a new MigrateFunds instruction with the provided parameters and accounts.
func NewMigrateFundsInstruction(
	// Accounts:
	backendAuthority ag_solanago.PublicKey,
	migrationAuthority ag_solanago.PublicKey,
	curveAccount ag_solanago.PublicKey,
	curveTokenAccount ag_solanago.PublicKey,
	migrationAuthorityTokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	dexFeeAccount ag_solanago.PublicKey,
	helioFeeAccount ag_solanago.PublicKey,
	configAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *MigrateFunds {
	return NewMigrateFundsInstructionBuilder().
		SetBackendAuthorityAccount(backendAuthority).
		SetMigrationAuthorityAccount(migrationAuthority).
		SetCurveAccountAccount(curveAccount).
		SetCurveTokenAccountAccount(curveTokenAccount).
		SetMigrationAuthorityTokenAccountAccount(migrationAuthorityTokenAccount).
		SetMintAccount(mint).
		SetDexFeeAccountAccount(dexFeeAccount).
		SetHelioFeeAccountAccount(helioFeeAccount).
		SetConfigAccountAccount(configAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}

// NewSimpleMigrateFundsInstruction declares a new MigrateFunds instruction with the provided parameters and accounts.
func NewSimpleMigrateFundsInstruction(
	// Accounts:
	backendAuthority ag_solanago.PublicKey,
	migrationAuthority ag_solanago.PublicKey,
	curveAccount ag_solanago.PublicKey,
	curveTokenAccount ag_solanago.PublicKey,
	migrationAuthorityTokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	dexFeeAccount ag_solanago.PublicKey,
	helioFeeAccount ag_solanago.PublicKey,
	configAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey) *MigrateFunds {
	return NewMigrateFundsInstructionBuilder().
		SetBackendAuthorityAccount(backendAuthority).
		SetMigrationAuthorityAccount(migrationAuthority).
		SetCurveAccountAccount(curveAccount).
		SetCurveTokenAccountAccount(curveTokenAccount).
		SetMigrationAuthorityTokenAccountAccount(migrationAuthorityTokenAccount).
		SetMintAccount(mint).
		SetDexFeeAccountAccount(dexFeeAccount).
		SetHelioFeeAccountAccount(helioFeeAccount).
		SetConfigAccountAccount(configAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram)
}
