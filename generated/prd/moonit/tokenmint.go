// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package moonit

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TokenMint is the `token_mint` instruction.
type TokenMint struct {
	MintParams *TokenMintParams

	// [0] = [WRITE, SIGNER] sender
	//
	// [1] = [SIGNER] backend_authority
	//
	// [2] = [WRITE] curve_account
	//
	// [3] = [WRITE, SIGNER] mint
	//
	// [4] = [WRITE] mint_metadata
	// ··········· Type validating that the account is owned by the System Program = uninitialized
	// ··········· seeds should ensure that the address is correct
	//
	// [5] = [WRITE] curve_token_account
	//
	// [6] = [] config_account
	//
	// [7] = [] token_program
	//
	// [8] = [] associated_token_program
	//
	// [9] = [] mpl_token_metadata
	//
	// [10] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTokenMintInstructionBuilder creates a new `TokenMint` instruction builder.
func NewTokenMintInstructionBuilder() *TokenMint {
	nd := &TokenMint{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetMintParams sets the "mint_params" parameter.
func (inst *TokenMint) SetMintParams(mint_params TokenMintParams) *TokenMint {
	inst.MintParams = &mint_params
	return inst
}

// SetSenderAccount sets the "sender" account.
func (inst *TokenMint) SetSenderAccount(sender ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(sender).WRITE().SIGNER()
	return inst
}

// GetSenderAccount gets the "sender" account.
func (inst *TokenMint) GetSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBackendAuthorityAccount sets the "backend_authority" account.
func (inst *TokenMint) SetBackendAuthorityAccount(backendAuthority ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(backendAuthority).SIGNER()
	return inst
}

// GetBackendAuthorityAccount gets the "backend_authority" account.
func (inst *TokenMint) GetBackendAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCurveAccountAccount sets the "curve_account" account.
func (inst *TokenMint) SetCurveAccountAccount(curveAccount ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(curveAccount).WRITE()
	return inst
}

// GetCurveAccountAccount gets the "curve_account" account.
func (inst *TokenMint) GetCurveAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *TokenMint) SetMintAccount(mint ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint).WRITE().SIGNER()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *TokenMint) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMintMetadataAccount sets the "mint_metadata" account.
// Type validating that the account is owned by the System Program = uninitialized
// seeds should ensure that the address is correct
func (inst *TokenMint) SetMintMetadataAccount(mintMetadata ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mintMetadata).WRITE()
	return inst
}

// GetMintMetadataAccount gets the "mint_metadata" account.
// Type validating that the account is owned by the System Program = uninitialized
// seeds should ensure that the address is correct
func (inst *TokenMint) GetMintMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCurveTokenAccountAccount sets the "curve_token_account" account.
func (inst *TokenMint) SetCurveTokenAccountAccount(curveTokenAccount ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(curveTokenAccount).WRITE()
	return inst
}

// GetCurveTokenAccountAccount gets the "curve_token_account" account.
func (inst *TokenMint) GetCurveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetConfigAccountAccount sets the "config_account" account.
func (inst *TokenMint) SetConfigAccountAccount(configAccount ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(configAccount)
	return inst
}

// GetConfigAccountAccount gets the "config_account" account.
func (inst *TokenMint) GetConfigAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *TokenMint) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *TokenMint) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *TokenMint) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *TokenMint) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMplTokenMetadataAccount sets the "mpl_token_metadata" account.
func (inst *TokenMint) SetMplTokenMetadataAccount(mplTokenMetadata ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(mplTokenMetadata)
	return inst
}

// GetMplTokenMetadataAccount gets the "mpl_token_metadata" account.
func (inst *TokenMint) GetMplTokenMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *TokenMint) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *TokenMint {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *TokenMint) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst *TokenMint) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *TokenMint) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *TokenMint {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:11], metas...)
	return inst
}

func (inst *TokenMint) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11:]
}

func (inst TokenMint) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TokenMint,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TokenMint) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TokenMint) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MintParams == nil {
			return errors.New("mintParams parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 11 {
		return errors.New("accounts slice has wrong length: expected 11 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Sender is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.BackendAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CurveAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MintMetadata is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CurveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ConfigAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MplTokenMetadata is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *TokenMint) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TokenMint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" MintParams", *inst.MintParams))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  sender", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       backend_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  curve_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                    mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           mint_metadata", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            curve_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 config_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("      mpl_token_metadata", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj TokenMint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintParams` param:
	err = encoder.Encode(obj.MintParams)
	if err != nil {
		return err
	}
	return nil
}
func (obj *TokenMint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintParams`:
	err = decoder.Decode(&obj.MintParams)
	if err != nil {
		return err
	}
	return nil
}

// NewTokenMintInstruction declares a new TokenMint instruction with the provided parameters and accounts.
func NewTokenMintInstruction(
	// Parameters:
	mint_params TokenMintParams,
	// Accounts:
	sender ag_solanago.PublicKey,
	backendAuthority ag_solanago.PublicKey,
	curveAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	mintMetadata ag_solanago.PublicKey,
	curveTokenAccount ag_solanago.PublicKey,
	configAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	mplTokenMetadata ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *TokenMint {
	return NewTokenMintInstructionBuilder().
		SetMintParams(mint_params).
		SetSenderAccount(sender).
		SetBackendAuthorityAccount(backendAuthority).
		SetCurveAccountAccount(curveAccount).
		SetMintAccount(mint).
		SetMintMetadataAccount(mintMetadata).
		SetCurveTokenAccountAccount(curveTokenAccount).
		SetConfigAccountAccount(configAccount).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetMplTokenMetadataAccount(mplTokenMetadata).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleTokenMintInstruction declares a new TokenMint instruction with the provided parameters and accounts.
func NewSimpleTokenMintInstruction(
	// Parameters:
	mint_params TokenMintParams,
	// Accounts:
	sender ag_solanago.PublicKey,
	backendAuthority ag_solanago.PublicKey,
	curveAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	mintMetadata ag_solanago.PublicKey,
	curveTokenAccount ag_solanago.PublicKey,
	configAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	mplTokenMetadata ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *TokenMint {
	return NewTokenMintInstructionBuilder().
		SetMintParams(mint_params).
		SetSenderAccount(sender).
		SetBackendAuthorityAccount(backendAuthority).
		SetCurveAccountAccount(curveAccount).
		SetMintAccount(mint).
		SetMintMetadataAccount(mintMetadata).
		SetCurveTokenAccountAccount(curveTokenAccount).
		SetConfigAccountAccount(configAccount).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetMplTokenMetadataAccount(mplTokenMetadata).
		SetSystemProgramAccount(systemProgram)
}
