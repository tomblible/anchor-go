// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package moonit

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Currency ag_binary.BorshEnum

const (
	CurrencySol Currency = iota
)

func (value Currency) String() string {
	switch value {
	case CurrencySol:
		return "Sol"
	default:
		return ""
	}
}

type CurveType ag_binary.BorshEnum

const (
	CurveTypeLinearV1 CurveType = iota
	CurveTypeConstantProductV1
	CurveTypeConstantProductV2
	CurveTypeFlatCurveV1
)

func (value CurveType) String() string {
	switch value {
	case CurveTypeLinearV1:
		return "LinearV1"
	case CurveTypeConstantProductV1:
		return "ConstantProductV1"
	case CurveTypeConstantProductV2:
		return "ConstantProductV2"
	case CurveTypeFlatCurveV1:
		return "FlatCurveV1"
	default:
		return ""
	}
}

type MigrationTarget ag_binary.BorshEnum

const (
	MigrationTargetRaydium MigrationTarget = iota
	MigrationTargetMeteora
)

func (value MigrationTarget) String() string {
	switch value {
	case MigrationTargetRaydium:
		return "Raydium"
	case MigrationTargetMeteora:
		return "Meteora"
	default:
		return ""
	}
}

type TradeType ag_binary.BorshEnum

const (
	TradeTypeBuy TradeType = iota
	TradeTypeSell
)

func (value TradeType) String() string {
	switch value {
	case TradeTypeBuy:
		return "Buy"
	case TradeTypeSell:
		return "Sell"
	default:
		return ""
	}
}

type ConfigParams struct {
	MigrationAuthority             *ag_solanago.PublicKey `bin:"optional"`
	BackendAuthority               *ag_solanago.PublicKey `bin:"optional"`
	ConfigAuthority                *ag_solanago.PublicKey `bin:"optional"`
	HelioFee                       *ag_solanago.PublicKey `bin:"optional"`
	DexFee                         *ag_solanago.PublicKey `bin:"optional"`
	FeeBps                         *uint16                `bin:"optional"`
	DexFeeShare                    *uint8                 `bin:"optional"`
	MigrationFee                   *uint64                `bin:"optional"`
	LinearCurveMcapThreshold       *uint64                `bin:"optional"`
	MarketcapCurrency              *uint8                 `bin:"optional"`
	MinSupportedDecimalPlaces      *uint8                 `bin:"optional"`
	MaxSupportedDecimalPlaces      *uint8                 `bin:"optional"`
	MinSupportedTokenSupply        *uint64                `bin:"optional"`
	MaxSupportedTokenSupply        *uint64                `bin:"optional"`
	CoefB                          *uint32                `bin:"optional"`
	ConstantProductV1McapThreshold *uint64                `bin:"optional"`
	ConstantProductV2McapThreshold *uint64                `bin:"optional"`
}

func (obj ConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MigrationAuthority` param (optional):
	{
		if obj.MigrationAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MigrationAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BackendAuthority` param (optional):
	{
		if obj.BackendAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.BackendAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ConfigAuthority` param (optional):
	{
		if obj.ConfigAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ConfigAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `HelioFee` param (optional):
	{
		if obj.HelioFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.HelioFee)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DexFee` param (optional):
	{
		if obj.DexFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.DexFee)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FeeBps` param (optional):
	{
		if obj.FeeBps == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FeeBps)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DexFeeShare` param (optional):
	{
		if obj.DexFeeShare == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.DexFeeShare)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MigrationFee` param (optional):
	{
		if obj.MigrationFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MigrationFee)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `LinearCurveMcapThreshold` param (optional):
	{
		if obj.LinearCurveMcapThreshold == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.LinearCurveMcapThreshold)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MarketcapCurrency` param (optional):
	{
		if obj.MarketcapCurrency == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MarketcapCurrency)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinSupportedDecimalPlaces` param (optional):
	{
		if obj.MinSupportedDecimalPlaces == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MinSupportedDecimalPlaces)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MaxSupportedDecimalPlaces` param (optional):
	{
		if obj.MaxSupportedDecimalPlaces == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxSupportedDecimalPlaces)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MinSupportedTokenSupply` param (optional):
	{
		if obj.MinSupportedTokenSupply == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MinSupportedTokenSupply)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `MaxSupportedTokenSupply` param (optional):
	{
		if obj.MaxSupportedTokenSupply == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxSupportedTokenSupply)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CoefB` param (optional):
	{
		if obj.CoefB == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CoefB)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ConstantProductV1McapThreshold` param (optional):
	{
		if obj.ConstantProductV1McapThreshold == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ConstantProductV1McapThreshold)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ConstantProductV2McapThreshold` param (optional):
	{
		if obj.ConstantProductV2McapThreshold == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ConstantProductV2McapThreshold)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MigrationAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MigrationAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BackendAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.BackendAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ConfigAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ConfigAuthority)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `HelioFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.HelioFee)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DexFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.DexFee)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FeeBps` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FeeBps)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DexFeeShare` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.DexFeeShare)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MigrationFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MigrationFee)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `LinearCurveMcapThreshold` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.LinearCurveMcapThreshold)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MarketcapCurrency` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MarketcapCurrency)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinSupportedDecimalPlaces` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MinSupportedDecimalPlaces)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MaxSupportedDecimalPlaces` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxSupportedDecimalPlaces)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MinSupportedTokenSupply` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MinSupportedTokenSupply)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `MaxSupportedTokenSupply` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxSupportedTokenSupply)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CoefB` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CoefB)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ConstantProductV1McapThreshold` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ConstantProductV1McapThreshold)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ConstantProductV2McapThreshold` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ConstantProductV2McapThreshold)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type TokenMintParams struct {
	Name                string
	Symbol              string
	Uri                 string
	Decimals            uint8
	CollateralCurrency  uint8
	Amount              uint64
	CurveType           uint8
	MigrationTarget     uint8
	PriceIncrease       uint16
	CollateralCollected uint64
}

func (obj TokenMintParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `CollateralCurrency` param:
	err = encoder.Encode(obj.CollateralCurrency)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `CurveType` param:
	err = encoder.Encode(obj.CurveType)
	if err != nil {
		return err
	}
	// Serialize `MigrationTarget` param:
	err = encoder.Encode(obj.MigrationTarget)
	if err != nil {
		return err
	}
	// Serialize `PriceIncrease` param:
	err = encoder.Encode(obj.PriceIncrease)
	if err != nil {
		return err
	}
	// Serialize `CollateralCollected` param:
	err = encoder.Encode(obj.CollateralCollected)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenMintParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `CollateralCurrency`:
	err = decoder.Decode(&obj.CollateralCurrency)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `CurveType`:
	err = decoder.Decode(&obj.CurveType)
	if err != nil {
		return err
	}
	// Deserialize `MigrationTarget`:
	err = decoder.Decode(&obj.MigrationTarget)
	if err != nil {
		return err
	}
	// Deserialize `PriceIncrease`:
	err = decoder.Decode(&obj.PriceIncrease)
	if err != nil {
		return err
	}
	// Deserialize `CollateralCollected`:
	err = decoder.Decode(&obj.CollateralCollected)
	if err != nil {
		return err
	}
	return nil
}

type TradeParams struct {
	TokenAmount      uint64
	CollateralAmount uint64
	FixedSide        uint8
	SlippageBps      uint64
}

func (obj TradeParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	// Serialize `CollateralAmount` param:
	err = encoder.Encode(obj.CollateralAmount)
	if err != nil {
		return err
	}
	// Serialize `FixedSide` param:
	err = encoder.Encode(obj.FixedSide)
	if err != nil {
		return err
	}
	// Serialize `SlippageBps` param:
	err = encoder.Encode(obj.SlippageBps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TradeParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `CollateralAmount`:
	err = decoder.Decode(&obj.CollateralAmount)
	if err != nil {
		return err
	}
	// Deserialize `FixedSide`:
	err = decoder.Decode(&obj.FixedSide)
	if err != nil {
		return err
	}
	// Deserialize `SlippageBps`:
	err = decoder.Decode(&obj.SlippageBps)
	if err != nil {
		return err
	}
	return nil
}

type ConfigAccount struct {
	MigrationAuthority             ag_solanago.PublicKey
	BackendAuthority               ag_solanago.PublicKey
	ConfigAuthority                ag_solanago.PublicKey
	HelioFee                       ag_solanago.PublicKey
	DexFee                         ag_solanago.PublicKey
	FeeBps                         uint16
	DexFeeShare                    uint8
	MigrationFee                   uint64
	LinearCurveMcapThreshold       uint64
	MarketcapCurrency              Currency
	MinSupportedDecimalPlaces      uint8
	MaxSupportedDecimalPlaces      uint8
	MinSupportedTokenSupply        uint64
	MaxSupportedTokenSupply        uint64
	Bump                           uint8
	CoefB                          uint32
	ConstantProductV1McapThreshold uint64
	ConstantProductV2McapThreshold uint64
}

func (obj ConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MigrationAuthority` param:
	err = encoder.Encode(obj.MigrationAuthority)
	if err != nil {
		return err
	}
	// Serialize `BackendAuthority` param:
	err = encoder.Encode(obj.BackendAuthority)
	if err != nil {
		return err
	}
	// Serialize `ConfigAuthority` param:
	err = encoder.Encode(obj.ConfigAuthority)
	if err != nil {
		return err
	}
	// Serialize `HelioFee` param:
	err = encoder.Encode(obj.HelioFee)
	if err != nil {
		return err
	}
	// Serialize `DexFee` param:
	err = encoder.Encode(obj.DexFee)
	if err != nil {
		return err
	}
	// Serialize `FeeBps` param:
	err = encoder.Encode(obj.FeeBps)
	if err != nil {
		return err
	}
	// Serialize `DexFeeShare` param:
	err = encoder.Encode(obj.DexFeeShare)
	if err != nil {
		return err
	}
	// Serialize `MigrationFee` param:
	err = encoder.Encode(obj.MigrationFee)
	if err != nil {
		return err
	}
	// Serialize `LinearCurveMcapThreshold` param:
	err = encoder.Encode(obj.LinearCurveMcapThreshold)
	if err != nil {
		return err
	}
	// Serialize `MarketcapCurrency` param:
	err = encoder.Encode(obj.MarketcapCurrency)
	if err != nil {
		return err
	}
	// Serialize `MinSupportedDecimalPlaces` param:
	err = encoder.Encode(obj.MinSupportedDecimalPlaces)
	if err != nil {
		return err
	}
	// Serialize `MaxSupportedDecimalPlaces` param:
	err = encoder.Encode(obj.MaxSupportedDecimalPlaces)
	if err != nil {
		return err
	}
	// Serialize `MinSupportedTokenSupply` param:
	err = encoder.Encode(obj.MinSupportedTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `MaxSupportedTokenSupply` param:
	err = encoder.Encode(obj.MaxSupportedTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `CoefB` param:
	err = encoder.Encode(obj.CoefB)
	if err != nil {
		return err
	}
	// Serialize `ConstantProductV1McapThreshold` param:
	err = encoder.Encode(obj.ConstantProductV1McapThreshold)
	if err != nil {
		return err
	}
	// Serialize `ConstantProductV2McapThreshold` param:
	err = encoder.Encode(obj.ConstantProductV2McapThreshold)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MigrationAuthority`:
	err = decoder.Decode(&obj.MigrationAuthority)
	if err != nil {
		return err
	}
	// Deserialize `BackendAuthority`:
	err = decoder.Decode(&obj.BackendAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ConfigAuthority`:
	err = decoder.Decode(&obj.ConfigAuthority)
	if err != nil {
		return err
	}
	// Deserialize `HelioFee`:
	err = decoder.Decode(&obj.HelioFee)
	if err != nil {
		return err
	}
	// Deserialize `DexFee`:
	err = decoder.Decode(&obj.DexFee)
	if err != nil {
		return err
	}
	// Deserialize `FeeBps`:
	err = decoder.Decode(&obj.FeeBps)
	if err != nil {
		return err
	}
	// Deserialize `DexFeeShare`:
	err = decoder.Decode(&obj.DexFeeShare)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFee`:
	err = decoder.Decode(&obj.MigrationFee)
	if err != nil {
		return err
	}
	// Deserialize `LinearCurveMcapThreshold`:
	err = decoder.Decode(&obj.LinearCurveMcapThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MarketcapCurrency`:
	err = decoder.Decode(&obj.MarketcapCurrency)
	if err != nil {
		return err
	}
	// Deserialize `MinSupportedDecimalPlaces`:
	err = decoder.Decode(&obj.MinSupportedDecimalPlaces)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupportedDecimalPlaces`:
	err = decoder.Decode(&obj.MaxSupportedDecimalPlaces)
	if err != nil {
		return err
	}
	// Deserialize `MinSupportedTokenSupply`:
	err = decoder.Decode(&obj.MinSupportedTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `MaxSupportedTokenSupply`:
	err = decoder.Decode(&obj.MaxSupportedTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `CoefB`:
	err = decoder.Decode(&obj.CoefB)
	if err != nil {
		return err
	}
	// Deserialize `ConstantProductV1McapThreshold`:
	err = decoder.Decode(&obj.ConstantProductV1McapThreshold)
	if err != nil {
		return err
	}
	// Deserialize `ConstantProductV2McapThreshold`:
	err = decoder.Decode(&obj.ConstantProductV2McapThreshold)
	if err != nil {
		return err
	}
	return nil
}

type CurveAccount struct {
	TotalSupply        uint64
	CurveAmount        uint64
	Mint               ag_solanago.PublicKey
	Decimals           uint8
	CollateralCurrency Currency
	CurveType          CurveType
	MarketcapThreshold uint64
	MarketcapCurrency  Currency
	MigrationFee       uint64
	CoefB              uint32
	Bump               uint8
	MigrationTarget    MigrationTarget
	PriceIncrease      uint16
}

func (obj CurveAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalSupply` param:
	err = encoder.Encode(obj.TotalSupply)
	if err != nil {
		return err
	}
	// Serialize `CurveAmount` param:
	err = encoder.Encode(obj.CurveAmount)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `CollateralCurrency` param:
	err = encoder.Encode(obj.CollateralCurrency)
	if err != nil {
		return err
	}
	// Serialize `CurveType` param:
	err = encoder.Encode(obj.CurveType)
	if err != nil {
		return err
	}
	// Serialize `MarketcapThreshold` param:
	err = encoder.Encode(obj.MarketcapThreshold)
	if err != nil {
		return err
	}
	// Serialize `MarketcapCurrency` param:
	err = encoder.Encode(obj.MarketcapCurrency)
	if err != nil {
		return err
	}
	// Serialize `MigrationFee` param:
	err = encoder.Encode(obj.MigrationFee)
	if err != nil {
		return err
	}
	// Serialize `CoefB` param:
	err = encoder.Encode(obj.CoefB)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `MigrationTarget` param:
	err = encoder.Encode(obj.MigrationTarget)
	if err != nil {
		return err
	}
	// Serialize `PriceIncrease` param:
	err = encoder.Encode(obj.PriceIncrease)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalSupply`:
	err = decoder.Decode(&obj.TotalSupply)
	if err != nil {
		return err
	}
	// Deserialize `CurveAmount`:
	err = decoder.Decode(&obj.CurveAmount)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `CollateralCurrency`:
	err = decoder.Decode(&obj.CollateralCurrency)
	if err != nil {
		return err
	}
	// Deserialize `CurveType`:
	err = decoder.Decode(&obj.CurveType)
	if err != nil {
		return err
	}
	// Deserialize `MarketcapThreshold`:
	err = decoder.Decode(&obj.MarketcapThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MarketcapCurrency`:
	err = decoder.Decode(&obj.MarketcapCurrency)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFee`:
	err = decoder.Decode(&obj.MigrationFee)
	if err != nil {
		return err
	}
	// Deserialize `CoefB`:
	err = decoder.Decode(&obj.CoefB)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `MigrationTarget`:
	err = decoder.Decode(&obj.MigrationTarget)
	if err != nil {
		return err
	}
	// Deserialize `PriceIncrease`:
	err = decoder.Decode(&obj.PriceIncrease)
	if err != nil {
		return err
	}
	return nil
}

type MigrationEvent struct {
	TokensMigrated     uint64
	TokensBurned       uint64
	CollateralMigrated uint64
	Fee                uint64
	Label              string
}

func (obj MigrationEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokensMigrated` param:
	err = encoder.Encode(obj.TokensMigrated)
	if err != nil {
		return err
	}
	// Serialize `TokensBurned` param:
	err = encoder.Encode(obj.TokensBurned)
	if err != nil {
		return err
	}
	// Serialize `CollateralMigrated` param:
	err = encoder.Encode(obj.CollateralMigrated)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	// Serialize `Label` param:
	err = encoder.Encode(obj.Label)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MigrationEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokensMigrated`:
	err = decoder.Decode(&obj.TokensMigrated)
	if err != nil {
		return err
	}
	// Deserialize `TokensBurned`:
	err = decoder.Decode(&obj.TokensBurned)
	if err != nil {
		return err
	}
	// Deserialize `CollateralMigrated`:
	err = decoder.Decode(&obj.CollateralMigrated)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	// Deserialize `Label`:
	err = decoder.Decode(&obj.Label)
	if err != nil {
		return err
	}
	return nil
}

type TradeEvent struct {
	Amount           uint64
	CollateralAmount uint64
	DexFee           uint64
	HelioFee         uint64
	Allocation       uint64
	Curve            ag_solanago.PublicKey
	CostToken        ag_solanago.PublicKey
	Sender           ag_solanago.PublicKey
	Type             TradeType
	Label            string
}

func (obj TradeEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `CollateralAmount` param:
	err = encoder.Encode(obj.CollateralAmount)
	if err != nil {
		return err
	}
	// Serialize `DexFee` param:
	err = encoder.Encode(obj.DexFee)
	if err != nil {
		return err
	}
	// Serialize `HelioFee` param:
	err = encoder.Encode(obj.HelioFee)
	if err != nil {
		return err
	}
	// Serialize `Allocation` param:
	err = encoder.Encode(obj.Allocation)
	if err != nil {
		return err
	}
	// Serialize `Curve` param:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return err
	}
	// Serialize `CostToken` param:
	err = encoder.Encode(obj.CostToken)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	// Serialize `Type` param:
	err = encoder.Encode(obj.Type)
	if err != nil {
		return err
	}
	// Serialize `Label` param:
	err = encoder.Encode(obj.Label)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TradeEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `CollateralAmount`:
	err = decoder.Decode(&obj.CollateralAmount)
	if err != nil {
		return err
	}
	// Deserialize `DexFee`:
	err = decoder.Decode(&obj.DexFee)
	if err != nil {
		return err
	}
	// Deserialize `HelioFee`:
	err = decoder.Decode(&obj.HelioFee)
	if err != nil {
		return err
	}
	// Deserialize `Allocation`:
	err = decoder.Decode(&obj.Allocation)
	if err != nil {
		return err
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return err
	}
	// Deserialize `CostToken`:
	err = decoder.Decode(&obj.CostToken)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	// Deserialize `Type`:
	err = decoder.Decode(&obj.Type)
	if err != nil {
		return err
	}
	// Deserialize `Label`:
	err = decoder.Decode(&obj.Label)
	if err != nil {
		return err
	}
	return nil
}
