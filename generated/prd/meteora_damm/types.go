// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AddLiquidityParameters struct {
	// delta liquidity
	LiquidityDelta ag_binary.Uint128

	// maximum token a amount
	TokenAAmountThreshold uint64

	// maximum token b amount
	TokenBAmountThreshold uint64
}

func (obj AddLiquidityParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LiquidityDelta` param:
	err = encoder.Encode(obj.LiquidityDelta)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmountThreshold` param:
	err = encoder.Encode(obj.TokenAAmountThreshold)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmountThreshold` param:
	err = encoder.Encode(obj.TokenBAmountThreshold)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AddLiquidityParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LiquidityDelta`:
	err = decoder.Decode(&obj.LiquidityDelta)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmountThreshold`:
	err = decoder.Decode(&obj.TokenAAmountThreshold)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmountThreshold`:
	err = decoder.Decode(&obj.TokenBAmountThreshold)
	if err != nil {
		return err
	}
	return nil
}

type BaseFeeConfig struct {
	CliffFeeNumerator uint64
	FeeSchedulerMode  uint8
	padding           [5]uint8
	NumberOfPeriod    uint16
	PeriodFrequency   uint64
	ReductionFactor   uint64
}

func (obj BaseFeeConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator` param:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `FeeSchedulerMode` param:
	err = encoder.Encode(obj.FeeSchedulerMode)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Serialize `PeriodFrequency` param:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BaseFeeConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `FeeSchedulerMode`:
	err = decoder.Decode(&obj.FeeSchedulerMode)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	return nil
}

type BaseFeeParameters struct {
	CliffFeeNumerator uint64
	NumberOfPeriod    uint16
	PeriodFrequency   uint64
	ReductionFactor   uint64
	FeeSchedulerMode  uint8
}

func (obj BaseFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator` param:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Serialize `PeriodFrequency` param:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `FeeSchedulerMode` param:
	err = encoder.Encode(obj.FeeSchedulerMode)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BaseFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `FeeSchedulerMode`:
	err = decoder.Decode(&obj.FeeSchedulerMode)
	if err != nil {
		return err
	}
	return nil
}

type BaseFeeStruct struct {
	CliffFeeNumerator uint64
	FeeSchedulerMode  uint8
	padding_0         [5]uint8
	NumberOfPeriod    uint16
	PeriodFrequency   uint64
	ReductionFactor   uint64
	padding_1         uint64
}

func (obj BaseFeeStruct) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CliffFeeNumerator` param:
	err = encoder.Encode(obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `FeeSchedulerMode` param:
	err = encoder.Encode(obj.FeeSchedulerMode)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Serialize `PeriodFrequency` param:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `padding_1` param:
	err = encoder.Encode(obj.padding_1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BaseFeeStruct) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CliffFeeNumerator`:
	err = decoder.Decode(&obj.CliffFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `FeeSchedulerMode`:
	err = decoder.Decode(&obj.FeeSchedulerMode)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `padding_1`:
	err = decoder.Decode(&obj.padding_1)
	if err != nil {
		return err
	}
	return nil
}

type ClaimFeeOperator struct {
	// operator
	Operator ag_solanago.PublicKey

	// Reserve
	_padding [128]uint8
}

func (obj ClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type Config struct {
	// Vault config key
	VaultConfigKey ag_solanago.PublicKey

	// Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config.
	PoolCreatorAuthority ag_solanago.PublicKey

	// Pool fee
	PoolFees PoolFeesConfig

	// Activation type
	ActivationType uint8

	// Collect fee mode
	CollectFeeMode uint8

	// Config type mode, 0 for static, 1 for dynamic
	ConfigType uint8

	// padding 0
	_padding_0 [5]uint8

	// config index
	Index uint64

	// sqrt min price
	SqrtMinPrice ag_binary.Uint128

	// sqrt max price
	SqrtMaxPrice ag_binary.Uint128

	// Fee curve point
	// Padding for further use
	_padding_1 [10]uint64
}

func (obj Config) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `ConfigType` param:
	err = encoder.Encode(obj.ConfigType)
	if err != nil {
		return err
	}
	// Serialize `_padding_0` param:
	err = encoder.Encode(obj._padding_0)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `SqrtMinPrice` param:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtMaxPrice` param:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Serialize `_padding_1` param:
	err = encoder.Encode(obj._padding_1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `ConfigType`:
	err = decoder.Decode(&obj.ConfigType)
	if err != nil {
		return err
	}
	// Deserialize `_padding_0`:
	err = decoder.Decode(&obj._padding_0)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `_padding_1`:
	err = decoder.Decode(&obj._padding_1)
	if err != nil {
		return err
	}
	return nil
}

type DynamicConfigParameters struct {
	PoolCreatorAuthority ag_solanago.PublicKey
}

func (obj DynamicConfigParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicConfigParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	return nil
}

type DynamicFeeConfig struct {
	Initialized              uint8
	padding                  [7]uint8
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
	BinStep                  uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	padding_1                [8]uint8
	BinStepU128              ag_binary.Uint128
}

func (obj DynamicFeeConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `padding_1` param:
	err = encoder.Encode(obj.padding_1)
	if err != nil {
		return err
	}
	// Serialize `BinStepU128` param:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicFeeConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `padding_1`:
	err = decoder.Decode(&obj.padding_1)
	if err != nil {
		return err
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return err
	}
	return nil
}

type DynamicFeeParameters struct {
	BinStep                  uint16
	BinStepU128              ag_binary.Uint128
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
}

func (obj DynamicFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BinStepU128` param:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	return nil
}

type DynamicFeeStruct struct {
	Initialized              uint8
	padding                  [7]uint8
	MaxVolatilityAccumulator uint32
	VariableFeeControl       uint32
	BinStep                  uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	LastUpdateTimestamp      uint64
	BinStepU128              ag_binary.Uint128
	SqrtPriceReference       ag_binary.Uint128
	VolatilityAccumulator    ag_binary.Uint128
	VolatilityReference      ag_binary.Uint128
}

func (obj DynamicFeeStruct) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTimestamp` param:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Serialize `BinStepU128` param:
	err = encoder.Encode(obj.BinStepU128)
	if err != nil {
		return err
	}
	// Serialize `SqrtPriceReference` param:
	err = encoder.Encode(obj.SqrtPriceReference)
	if err != nil {
		return err
	}
	// Serialize `VolatilityAccumulator` param:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VolatilityReference` param:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicFeeStruct) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `BinStepU128`:
	err = decoder.Decode(&obj.BinStepU128)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPriceReference`:
	err = decoder.Decode(&obj.SqrtPriceReference)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return err
	}
	return nil
}

type EvtAddLiquidity struct {
	Pool         ag_solanago.PublicKey
	Position     ag_solanago.PublicKey
	Owner        ag_solanago.PublicKey
	Params       AddLiquidityParameters
	TokenAAmount uint64
	TokenBAmount uint64
	TotalAmountA uint64
	TotalAmountB uint64
}

func (obj EvtAddLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountA` param:
	err = encoder.Encode(obj.TotalAmountA)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountB` param:
	err = encoder.Encode(obj.TotalAmountB)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtAddLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountA`:
	err = decoder.Decode(&obj.TotalAmountA)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountB`:
	err = decoder.Decode(&obj.TotalAmountB)
	if err != nil {
		return err
	}
	return nil
}

type EvtClaimPartnerFee struct {
	Pool         ag_solanago.PublicKey
	TokenAAmount uint64
	TokenBAmount uint64
}

func (obj EvtClaimPartnerFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimPartnerFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtClaimPositionFee struct {
	Pool        ag_solanago.PublicKey
	Position    ag_solanago.PublicKey
	Owner       ag_solanago.PublicKey
	FeeAClaimed uint64
	FeeBClaimed uint64
}

func (obj EvtClaimPositionFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `FeeAClaimed` param:
	err = encoder.Encode(obj.FeeAClaimed)
	if err != nil {
		return err
	}
	// Serialize `FeeBClaimed` param:
	err = encoder.Encode(obj.FeeBClaimed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimPositionFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `FeeAClaimed`:
	err = decoder.Decode(&obj.FeeAClaimed)
	if err != nil {
		return err
	}
	// Deserialize `FeeBClaimed`:
	err = decoder.Decode(&obj.FeeBClaimed)
	if err != nil {
		return err
	}
	return nil
}

type EvtClaimProtocolFee struct {
	Pool         ag_solanago.PublicKey
	TokenAAmount uint64
	TokenBAmount uint64
}

func (obj EvtClaimProtocolFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimProtocolFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtClaimReward struct {
	Pool        ag_solanago.PublicKey
	Position    ag_solanago.PublicKey
	Owner       ag_solanago.PublicKey
	MintReward  ag_solanago.PublicKey
	RewardIndex uint8
	TotalReward uint64
}

func (obj EvtClaimReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `MintReward` param:
	err = encoder.Encode(obj.MintReward)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `TotalReward` param:
	err = encoder.Encode(obj.TotalReward)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `MintReward`:
	err = decoder.Decode(&obj.MintReward)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `TotalReward`:
	err = decoder.Decode(&obj.TotalReward)
	if err != nil {
		return err
	}
	return nil
}

type EvtCloseClaimFeeOperator struct {
	ClaimFeeOperator ag_solanago.PublicKey
	Operator         ag_solanago.PublicKey
}

func (obj EvtCloseClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ClaimFeeOperator` param:
	err = encoder.Encode(obj.ClaimFeeOperator)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCloseClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ClaimFeeOperator`:
	err = decoder.Decode(&obj.ClaimFeeOperator)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

type EvtCloseConfig struct {
	// Config pubkey
	Config ag_solanago.PublicKey

	// admin pk
	Admin ag_solanago.PublicKey
}

func (obj EvtCloseConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCloseConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

type EvtClosePosition struct {
	Pool            ag_solanago.PublicKey
	Owner           ag_solanago.PublicKey
	Position        ag_solanago.PublicKey
	PositionNftMint ag_solanago.PublicKey
}

func (obj EvtClosePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `PositionNftMint` param:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClosePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreateClaimFeeOperator struct {
	Operator ag_solanago.PublicKey
}

func (obj EvtCreateClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreateConfig struct {
	PoolFees             PoolFeeParameters
	VaultConfigKey       ag_solanago.PublicKey
	PoolCreatorAuthority ag_solanago.PublicKey
	ActivationType       uint8
	SqrtMinPrice         ag_binary.Uint128
	SqrtMaxPrice         ag_binary.Uint128
	CollectFeeMode       uint8
	Index                uint64
	Config               ag_solanago.PublicKey
}

func (obj EvtCreateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `SqrtMinPrice` param:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtMaxPrice` param:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreateDynamicConfig struct {
	Config               ag_solanago.PublicKey
	PoolCreatorAuthority ag_solanago.PublicKey
	Index                uint64
}

func (obj EvtCreateDynamicConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateDynamicConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreatePosition struct {
	Pool            ag_solanago.PublicKey
	Owner           ag_solanago.PublicKey
	Position        ag_solanago.PublicKey
	PositionNftMint ag_solanago.PublicKey
}

func (obj EvtCreatePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `PositionNftMint` param:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreatePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return err
	}
	return nil
}

type EvtCreateTokenBadge struct {
	TokenMint ag_solanago.PublicKey
}

func (obj EvtCreateTokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateTokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

type EvtFundReward struct {
	Pool                        ag_solanago.PublicKey
	Funder                      ag_solanago.PublicKey
	MintReward                  ag_solanago.PublicKey
	RewardIndex                 uint8
	Amount                      uint64
	TransferFeeExcludedAmountIn uint64
	RewardDurationEnd           uint64
	PreRewardRate               ag_binary.Uint128
	PostRewardRate              ag_binary.Uint128
}

func (obj EvtFundReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Funder` param:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return err
	}
	// Serialize `MintReward` param:
	err = encoder.Encode(obj.MintReward)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `TransferFeeExcludedAmountIn` param:
	err = encoder.Encode(obj.TransferFeeExcludedAmountIn)
	if err != nil {
		return err
	}
	// Serialize `RewardDurationEnd` param:
	err = encoder.Encode(obj.RewardDurationEnd)
	if err != nil {
		return err
	}
	// Serialize `PreRewardRate` param:
	err = encoder.Encode(obj.PreRewardRate)
	if err != nil {
		return err
	}
	// Serialize `PostRewardRate` param:
	err = encoder.Encode(obj.PostRewardRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtFundReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return err
	}
	// Deserialize `MintReward`:
	err = decoder.Decode(&obj.MintReward)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `TransferFeeExcludedAmountIn`:
	err = decoder.Decode(&obj.TransferFeeExcludedAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `RewardDurationEnd`:
	err = decoder.Decode(&obj.RewardDurationEnd)
	if err != nil {
		return err
	}
	// Deserialize `PreRewardRate`:
	err = decoder.Decode(&obj.PreRewardRate)
	if err != nil {
		return err
	}
	// Deserialize `PostRewardRate`:
	err = decoder.Decode(&obj.PostRewardRate)
	if err != nil {
		return err
	}
	return nil
}

type EvtInitializePool struct {
	Pool            ag_solanago.PublicKey
	TokenAMint      ag_solanago.PublicKey
	TokenBMint      ag_solanago.PublicKey
	Creator         ag_solanago.PublicKey
	Payer           ag_solanago.PublicKey
	AlphaVault      ag_solanago.PublicKey
	PoolFees        PoolFeeParameters
	SqrtMinPrice    ag_binary.Uint128
	SqrtMaxPrice    ag_binary.Uint128
	ActivationType  uint8
	CollectFeeMode  uint8
	Liquidity       ag_binary.Uint128
	SqrtPrice       ag_binary.Uint128
	ActivationPoint uint64
	TokenAFlag      uint8
	TokenBFlag      uint8
	TokenAAmount    uint64
	TokenBAmount    uint64
	TotalAmountA    uint64
	TotalAmountB    uint64
	PoolType        uint8
}

func (obj EvtInitializePool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Payer` param:
	err = encoder.Encode(obj.Payer)
	if err != nil {
		return err
	}
	// Serialize `AlphaVault` param:
	err = encoder.Encode(obj.AlphaVault)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `SqrtMinPrice` param:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtMaxPrice` param:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `TokenAFlag` param:
	err = encoder.Encode(obj.TokenAFlag)
	if err != nil {
		return err
	}
	// Serialize `TokenBFlag` param:
	err = encoder.Encode(obj.TokenBFlag)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountA` param:
	err = encoder.Encode(obj.TotalAmountA)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountB` param:
	err = encoder.Encode(obj.TotalAmountB)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtInitializePool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Payer`:
	err = decoder.Decode(&obj.Payer)
	if err != nil {
		return err
	}
	// Deserialize `AlphaVault`:
	err = decoder.Decode(&obj.AlphaVault)
	if err != nil {
		return err
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAFlag`:
	err = decoder.Decode(&obj.TokenAFlag)
	if err != nil {
		return err
	}
	// Deserialize `TokenBFlag`:
	err = decoder.Decode(&obj.TokenBFlag)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountA`:
	err = decoder.Decode(&obj.TotalAmountA)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountB`:
	err = decoder.Decode(&obj.TotalAmountB)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	return nil
}

type EvtInitializeReward struct {
	Pool           ag_solanago.PublicKey
	RewardMint     ag_solanago.PublicKey
	Funder         ag_solanago.PublicKey
	Creator        ag_solanago.PublicKey
	RewardIndex    uint8
	RewardDuration uint64
}

func (obj EvtInitializeReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `RewardMint` param:
	err = encoder.Encode(obj.RewardMint)
	if err != nil {
		return err
	}
	// Serialize `Funder` param:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `RewardDuration` param:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtInitializeReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `RewardMint`:
	err = decoder.Decode(&obj.RewardMint)
	if err != nil {
		return err
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return err
	}
	return nil
}

type EvtLockPosition struct {
	Pool                 ag_solanago.PublicKey
	Position             ag_solanago.PublicKey
	Owner                ag_solanago.PublicKey
	Vesting              ag_solanago.PublicKey
	CliffPoint           uint64
	PeriodFrequency      uint64
	CliffUnlockLiquidity ag_binary.Uint128
	LiquidityPerPeriod   ag_binary.Uint128
	NumberOfPeriod       uint16
}

func (obj EvtLockPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Vesting` param:
	err = encoder.Encode(obj.Vesting)
	if err != nil {
		return err
	}
	// Serialize `CliffPoint` param:
	err = encoder.Encode(obj.CliffPoint)
	if err != nil {
		return err
	}
	// Serialize `PeriodFrequency` param:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Serialize `CliffUnlockLiquidity` param:
	err = encoder.Encode(obj.CliffUnlockLiquidity)
	if err != nil {
		return err
	}
	// Serialize `LiquidityPerPeriod` param:
	err = encoder.Encode(obj.LiquidityPerPeriod)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtLockPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Vesting`:
	err = decoder.Decode(&obj.Vesting)
	if err != nil {
		return err
	}
	// Deserialize `CliffPoint`:
	err = decoder.Decode(&obj.CliffPoint)
	if err != nil {
		return err
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Deserialize `CliffUnlockLiquidity`:
	err = decoder.Decode(&obj.CliffUnlockLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityPerPeriod`:
	err = decoder.Decode(&obj.LiquidityPerPeriod)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	return nil
}

type EvtPermanentLockPosition struct {
	Pool                          ag_solanago.PublicKey
	Position                      ag_solanago.PublicKey
	LockLiquidityAmount           ag_binary.Uint128
	TotalPermanentLockedLiquidity ag_binary.Uint128
}

func (obj EvtPermanentLockPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `LockLiquidityAmount` param:
	err = encoder.Encode(obj.LockLiquidityAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalPermanentLockedLiquidity` param:
	err = encoder.Encode(obj.TotalPermanentLockedLiquidity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtPermanentLockPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `LockLiquidityAmount`:
	err = decoder.Decode(&obj.LockLiquidityAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalPermanentLockedLiquidity`:
	err = decoder.Decode(&obj.TotalPermanentLockedLiquidity)
	if err != nil {
		return err
	}
	return nil
}

type EvtRemoveLiquidity struct {
	Pool         ag_solanago.PublicKey
	Position     ag_solanago.PublicKey
	Owner        ag_solanago.PublicKey
	Params       RemoveLiquidityParameters
	TokenAAmount uint64
	TokenBAmount uint64
}

func (obj EvtRemoveLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtRemoveLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

type EvtSetPoolStatus struct {
	Pool   ag_solanago.PublicKey
	Status uint8
}

func (obj EvtSetPoolStatus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtSetPoolStatus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

type EvtSplitPosition struct {
	Pool                    ag_solanago.PublicKey
	FirstOwner              ag_solanago.PublicKey
	SecondOwner             ag_solanago.PublicKey
	FirstPosition           ag_solanago.PublicKey
	SecondPosition          ag_solanago.PublicKey
	CurrentSqrtPrice        ag_binary.Uint128
	AmountSplits            SplitAmountInfo
	FirstPositionInfo       SplitPositionInfo
	SecondPositionInfo      SplitPositionInfo
	SplitPositionParameters SplitPositionParameters
}

func (obj EvtSplitPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `FirstOwner` param:
	err = encoder.Encode(obj.FirstOwner)
	if err != nil {
		return err
	}
	// Serialize `SecondOwner` param:
	err = encoder.Encode(obj.SecondOwner)
	if err != nil {
		return err
	}
	// Serialize `FirstPosition` param:
	err = encoder.Encode(obj.FirstPosition)
	if err != nil {
		return err
	}
	// Serialize `SecondPosition` param:
	err = encoder.Encode(obj.SecondPosition)
	if err != nil {
		return err
	}
	// Serialize `CurrentSqrtPrice` param:
	err = encoder.Encode(obj.CurrentSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `AmountSplits` param:
	err = encoder.Encode(obj.AmountSplits)
	if err != nil {
		return err
	}
	// Serialize `FirstPositionInfo` param:
	err = encoder.Encode(obj.FirstPositionInfo)
	if err != nil {
		return err
	}
	// Serialize `SecondPositionInfo` param:
	err = encoder.Encode(obj.SecondPositionInfo)
	if err != nil {
		return err
	}
	// Serialize `SplitPositionParameters` param:
	err = encoder.Encode(obj.SplitPositionParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtSplitPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `FirstOwner`:
	err = decoder.Decode(&obj.FirstOwner)
	if err != nil {
		return err
	}
	// Deserialize `SecondOwner`:
	err = decoder.Decode(&obj.SecondOwner)
	if err != nil {
		return err
	}
	// Deserialize `FirstPosition`:
	err = decoder.Decode(&obj.FirstPosition)
	if err != nil {
		return err
	}
	// Deserialize `SecondPosition`:
	err = decoder.Decode(&obj.SecondPosition)
	if err != nil {
		return err
	}
	// Deserialize `CurrentSqrtPrice`:
	err = decoder.Decode(&obj.CurrentSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `AmountSplits`:
	err = decoder.Decode(&obj.AmountSplits)
	if err != nil {
		return err
	}
	// Deserialize `FirstPositionInfo`:
	err = decoder.Decode(&obj.FirstPositionInfo)
	if err != nil {
		return err
	}
	// Deserialize `SecondPositionInfo`:
	err = decoder.Decode(&obj.SecondPositionInfo)
	if err != nil {
		return err
	}
	// Deserialize `SplitPositionParameters`:
	err = decoder.Decode(&obj.SplitPositionParameters)
	if err != nil {
		return err
	}
	return nil
}

type EvtSwap struct {
	Pool             ag_solanago.PublicKey
	TradeDirection   uint8
	HasReferral      bool
	Params           SwapParameters
	SwapResult       SwapResult
	ActualAmountIn   uint64
	CurrentTimestamp uint64
}

func (obj EvtSwap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TradeDirection` param:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return err
	}
	// Serialize `HasReferral` param:
	err = encoder.Encode(obj.HasReferral)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `SwapResult` param:
	err = encoder.Encode(obj.SwapResult)
	if err != nil {
		return err
	}
	// Serialize `ActualAmountIn` param:
	err = encoder.Encode(obj.ActualAmountIn)
	if err != nil {
		return err
	}
	// Serialize `CurrentTimestamp` param:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtSwap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return err
	}
	// Deserialize `HasReferral`:
	err = decoder.Decode(&obj.HasReferral)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `SwapResult`:
	err = decoder.Decode(&obj.SwapResult)
	if err != nil {
		return err
	}
	// Deserialize `ActualAmountIn`:
	err = decoder.Decode(&obj.ActualAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

type EvtUpdateRewardDuration struct {
	Pool              ag_solanago.PublicKey
	RewardIndex       uint8
	OldRewardDuration uint64
	NewRewardDuration uint64
}

func (obj EvtUpdateRewardDuration) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `OldRewardDuration` param:
	err = encoder.Encode(obj.OldRewardDuration)
	if err != nil {
		return err
	}
	// Serialize `NewRewardDuration` param:
	err = encoder.Encode(obj.NewRewardDuration)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtUpdateRewardDuration) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `OldRewardDuration`:
	err = decoder.Decode(&obj.OldRewardDuration)
	if err != nil {
		return err
	}
	// Deserialize `NewRewardDuration`:
	err = decoder.Decode(&obj.NewRewardDuration)
	if err != nil {
		return err
	}
	return nil
}

type EvtUpdateRewardFunder struct {
	Pool        ag_solanago.PublicKey
	RewardIndex uint8
	OldFunder   ag_solanago.PublicKey
	NewFunder   ag_solanago.PublicKey
}

func (obj EvtUpdateRewardFunder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `OldFunder` param:
	err = encoder.Encode(obj.OldFunder)
	if err != nil {
		return err
	}
	// Serialize `NewFunder` param:
	err = encoder.Encode(obj.NewFunder)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtUpdateRewardFunder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `OldFunder`:
	err = decoder.Decode(&obj.OldFunder)
	if err != nil {
		return err
	}
	// Deserialize `NewFunder`:
	err = decoder.Decode(&obj.NewFunder)
	if err != nil {
		return err
	}
	return nil
}

type EvtWithdrawIneligibleReward struct {
	Pool       ag_solanago.PublicKey
	RewardMint ag_solanago.PublicKey
	Amount     uint64
}

func (obj EvtWithdrawIneligibleReward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `RewardMint` param:
	err = encoder.Encode(obj.RewardMint)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtWithdrawIneligibleReward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `RewardMint`:
	err = decoder.Decode(&obj.RewardMint)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type InitializeCustomizablePoolParameters struct {
	// pool fees
	PoolFees PoolFeeParameters

	// sqrt min price
	SqrtMinPrice ag_binary.Uint128

	// sqrt max price
	SqrtMaxPrice ag_binary.Uint128

	// has alpha vault
	HasAlphaVault bool

	// initialize liquidity
	Liquidity ag_binary.Uint128

	// The init price of the pool as a sqrt(token_b/token_a) Q64.64 value
	SqrtPrice ag_binary.Uint128

	// activation type
	ActivationType uint8

	// collect fee mode
	CollectFeeMode uint8

	// activation point
	ActivationPoint *uint64 `bin:"optional"`
}

func (obj InitializeCustomizablePoolParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `SqrtMinPrice` param:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtMaxPrice` param:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Serialize `HasAlphaVault` param:
	err = encoder.Encode(obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *InitializeCustomizablePoolParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `HasAlphaVault`:
	err = decoder.Decode(&obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type InitializePoolParameters struct {
	// initialize liquidity
	Liquidity ag_binary.Uint128

	// The init price of the pool as a sqrt(token_b/token_a) Q64.64 value
	SqrtPrice ag_binary.Uint128

	// activation point
	ActivationPoint *uint64 `bin:"optional"`
}

func (obj InitializePoolParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *InitializePoolParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Pool struct {
	// Pool fee
	PoolFees PoolFeesStruct

	// token a mint
	TokenAMint ag_solanago.PublicKey

	// token b mint
	TokenBMint ag_solanago.PublicKey

	// token a vault
	TokenAVault ag_solanago.PublicKey

	// token b vault
	TokenBVault ag_solanago.PublicKey

	// Whitelisted vault to be able to buy pool before activation_point
	WhitelistedVault ag_solanago.PublicKey

	// partner
	Partner ag_solanago.PublicKey

	// liquidity share
	Liquidity ag_binary.Uint128

	// padding, previous reserve amount, be careful to use that field
	_padding ag_binary.Uint128

	// protocol a fee
	ProtocolAFee uint64

	// protocol b fee
	ProtocolBFee uint64

	// partner a fee
	PartnerAFee uint64

	// partner b fee
	PartnerBFee uint64

	// min price
	SqrtMinPrice ag_binary.Uint128

	// max price
	SqrtMaxPrice ag_binary.Uint128

	// current price
	SqrtPrice ag_binary.Uint128

	// Activation point, can be slot or timestamp
	ActivationPoint uint64

	// Activation type, 0 means by slot, 1 means by timestamp
	ActivationType uint8

	// pool status, 0: enable, 1 disable
	PoolStatus uint8

	// token a flag
	TokenAFlag uint8

	// token b flag
	TokenBFlag uint8

	// 0 is collect fee in both token, 1 only collect fee in token a, 2 only collect fee in token b
	CollectFeeMode uint8

	// pool type
	PoolType uint8

	// padding
	_padding_0 [2]uint8

	// cumulative
	FeeAPerLiquidity [32]uint8

	// cumulative
	FeeBPerLiquidity       [32]uint8
	PermanentLockLiquidity ag_binary.Uint128

	// metrics
	Metrics PoolMetrics

	// pool creator
	Creator ag_solanago.PublicKey

	// Padding for further use
	_padding_1 [6]uint64

	// Farming reward information
	RewardInfos [2]RewardInfo
}

func (obj Pool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `TokenAVault` param:
	err = encoder.Encode(obj.TokenAVault)
	if err != nil {
		return err
	}
	// Serialize `TokenBVault` param:
	err = encoder.Encode(obj.TokenBVault)
	if err != nil {
		return err
	}
	// Serialize `WhitelistedVault` param:
	err = encoder.Encode(obj.WhitelistedVault)
	if err != nil {
		return err
	}
	// Serialize `Partner` param:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	// Serialize `ProtocolAFee` param:
	err = encoder.Encode(obj.ProtocolAFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolBFee` param:
	err = encoder.Encode(obj.ProtocolBFee)
	if err != nil {
		return err
	}
	// Serialize `PartnerAFee` param:
	err = encoder.Encode(obj.PartnerAFee)
	if err != nil {
		return err
	}
	// Serialize `PartnerBFee` param:
	err = encoder.Encode(obj.PartnerBFee)
	if err != nil {
		return err
	}
	// Serialize `SqrtMinPrice` param:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtMaxPrice` param:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `PoolStatus` param:
	err = encoder.Encode(obj.PoolStatus)
	if err != nil {
		return err
	}
	// Serialize `TokenAFlag` param:
	err = encoder.Encode(obj.TokenAFlag)
	if err != nil {
		return err
	}
	// Serialize `TokenBFlag` param:
	err = encoder.Encode(obj.TokenBFlag)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	// Serialize `_padding_0` param:
	err = encoder.Encode(obj._padding_0)
	if err != nil {
		return err
	}
	// Serialize `FeeAPerLiquidity` param:
	err = encoder.Encode(obj.FeeAPerLiquidity)
	if err != nil {
		return err
	}
	// Serialize `FeeBPerLiquidity` param:
	err = encoder.Encode(obj.FeeBPerLiquidity)
	if err != nil {
		return err
	}
	// Serialize `PermanentLockLiquidity` param:
	err = encoder.Encode(obj.PermanentLockLiquidity)
	if err != nil {
		return err
	}
	// Serialize `Metrics` param:
	err = encoder.Encode(obj.Metrics)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `_padding_1` param:
	err = encoder.Encode(obj._padding_1)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Pool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAVault`:
	err = decoder.Decode(&obj.TokenAVault)
	if err != nil {
		return err
	}
	// Deserialize `TokenBVault`:
	err = decoder.Decode(&obj.TokenBVault)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistedVault`:
	err = decoder.Decode(&obj.WhitelistedVault)
	if err != nil {
		return err
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolAFee`:
	err = decoder.Decode(&obj.ProtocolAFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolBFee`:
	err = decoder.Decode(&obj.ProtocolBFee)
	if err != nil {
		return err
	}
	// Deserialize `PartnerAFee`:
	err = decoder.Decode(&obj.PartnerAFee)
	if err != nil {
		return err
	}
	// Deserialize `PartnerBFee`:
	err = decoder.Decode(&obj.PartnerBFee)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `PoolStatus`:
	err = decoder.Decode(&obj.PoolStatus)
	if err != nil {
		return err
	}
	// Deserialize `TokenAFlag`:
	err = decoder.Decode(&obj.TokenAFlag)
	if err != nil {
		return err
	}
	// Deserialize `TokenBFlag`:
	err = decoder.Decode(&obj.TokenBFlag)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	// Deserialize `_padding_0`:
	err = decoder.Decode(&obj._padding_0)
	if err != nil {
		return err
	}
	// Deserialize `FeeAPerLiquidity`:
	err = decoder.Decode(&obj.FeeAPerLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `FeeBPerLiquidity`:
	err = decoder.Decode(&obj.FeeBPerLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `PermanentLockLiquidity`:
	err = decoder.Decode(&obj.PermanentLockLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `Metrics`:
	err = decoder.Decode(&obj.Metrics)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `_padding_1`:
	err = decoder.Decode(&obj._padding_1)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	return nil
}

type PoolFeeParameters struct {
	// Base fee
	BaseFee BaseFeeParameters

	// padding
	padding [3]uint8

	// dynamic fee
	DynamicFee *DynamicFeeParameters `bin:"optional"`
}

func (obj PoolFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseFee` param:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `DynamicFee` param (optional):
	{
		if obj.DynamicFee == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.DynamicFee)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *PoolFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `DynamicFee` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.DynamicFee)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type PoolFeesConfig struct {
	BaseFee            BaseFeeConfig
	DynamicFee         DynamicFeeConfig
	ProtocolFeePercent uint8
	PartnerFeePercent  uint8
	ReferralFeePercent uint8
	padding_0          [5]uint8
	padding_1          [5]uint64
}

func (obj PoolFeesConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseFee` param:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return err
	}
	// Serialize `DynamicFee` param:
	err = encoder.Encode(obj.DynamicFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeePercent` param:
	err = encoder.Encode(obj.ProtocolFeePercent)
	if err != nil {
		return err
	}
	// Serialize `PartnerFeePercent` param:
	err = encoder.Encode(obj.PartnerFeePercent)
	if err != nil {
		return err
	}
	// Serialize `ReferralFeePercent` param:
	err = encoder.Encode(obj.ReferralFeePercent)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `padding_1` param:
	err = encoder.Encode(obj.padding_1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolFeesConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return err
	}
	// Deserialize `DynamicFee`:
	err = decoder.Decode(&obj.DynamicFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeePercent`:
	err = decoder.Decode(&obj.ProtocolFeePercent)
	if err != nil {
		return err
	}
	// Deserialize `PartnerFeePercent`:
	err = decoder.Decode(&obj.PartnerFeePercent)
	if err != nil {
		return err
	}
	// Deserialize `ReferralFeePercent`:
	err = decoder.Decode(&obj.ReferralFeePercent)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `padding_1`:
	err = decoder.Decode(&obj.padding_1)
	if err != nil {
		return err
	}
	return nil
}

type PoolFeesStruct struct {
	// Trade fees are extra token amounts that are held inside the token
	// accounts during a trade, making the value of liquidity tokens rise.
	// Trade fee numerator
	BaseFee BaseFeeStruct

	// Protocol trading fees are extra token amounts that are held inside the token
	// accounts during a trade, with the equivalent in pool tokens minted to
	// the protocol of the program.
	// Protocol trade fee numerator
	ProtocolFeePercent uint8

	// partner fee
	PartnerFeePercent uint8

	// referral fee
	ReferralFeePercent uint8

	// padding
	padding_0 [5]uint8

	// dynamic fee
	DynamicFee DynamicFeeStruct

	// padding
	padding_1 [2]uint64
}

func (obj PoolFeesStruct) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseFee` param:
	err = encoder.Encode(obj.BaseFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeePercent` param:
	err = encoder.Encode(obj.ProtocolFeePercent)
	if err != nil {
		return err
	}
	// Serialize `PartnerFeePercent` param:
	err = encoder.Encode(obj.PartnerFeePercent)
	if err != nil {
		return err
	}
	// Serialize `ReferralFeePercent` param:
	err = encoder.Encode(obj.ReferralFeePercent)
	if err != nil {
		return err
	}
	// Serialize `padding_0` param:
	err = encoder.Encode(obj.padding_0)
	if err != nil {
		return err
	}
	// Serialize `DynamicFee` param:
	err = encoder.Encode(obj.DynamicFee)
	if err != nil {
		return err
	}
	// Serialize `padding_1` param:
	err = encoder.Encode(obj.padding_1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolFeesStruct) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseFee`:
	err = decoder.Decode(&obj.BaseFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeePercent`:
	err = decoder.Decode(&obj.ProtocolFeePercent)
	if err != nil {
		return err
	}
	// Deserialize `PartnerFeePercent`:
	err = decoder.Decode(&obj.PartnerFeePercent)
	if err != nil {
		return err
	}
	// Deserialize `ReferralFeePercent`:
	err = decoder.Decode(&obj.ReferralFeePercent)
	if err != nil {
		return err
	}
	// Deserialize `padding_0`:
	err = decoder.Decode(&obj.padding_0)
	if err != nil {
		return err
	}
	// Deserialize `DynamicFee`:
	err = decoder.Decode(&obj.DynamicFee)
	if err != nil {
		return err
	}
	// Deserialize `padding_1`:
	err = decoder.Decode(&obj.padding_1)
	if err != nil {
		return err
	}
	return nil
}

type PoolMetrics struct {
	TotalLpAFee       ag_binary.Uint128
	TotalLpBFee       ag_binary.Uint128
	TotalProtocolAFee uint64
	TotalProtocolBFee uint64
	TotalPartnerAFee  uint64
	TotalPartnerBFee  uint64
	TotalPosition     uint64
	padding           uint64
}

func (obj PoolMetrics) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalLpAFee` param:
	err = encoder.Encode(obj.TotalLpAFee)
	if err != nil {
		return err
	}
	// Serialize `TotalLpBFee` param:
	err = encoder.Encode(obj.TotalLpBFee)
	if err != nil {
		return err
	}
	// Serialize `TotalProtocolAFee` param:
	err = encoder.Encode(obj.TotalProtocolAFee)
	if err != nil {
		return err
	}
	// Serialize `TotalProtocolBFee` param:
	err = encoder.Encode(obj.TotalProtocolBFee)
	if err != nil {
		return err
	}
	// Serialize `TotalPartnerAFee` param:
	err = encoder.Encode(obj.TotalPartnerAFee)
	if err != nil {
		return err
	}
	// Serialize `TotalPartnerBFee` param:
	err = encoder.Encode(obj.TotalPartnerBFee)
	if err != nil {
		return err
	}
	// Serialize `TotalPosition` param:
	err = encoder.Encode(obj.TotalPosition)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolMetrics) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalLpAFee`:
	err = decoder.Decode(&obj.TotalLpAFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalLpBFee`:
	err = decoder.Decode(&obj.TotalLpBFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalProtocolAFee`:
	err = decoder.Decode(&obj.TotalProtocolAFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalProtocolBFee`:
	err = decoder.Decode(&obj.TotalProtocolBFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalPartnerAFee`:
	err = decoder.Decode(&obj.TotalPartnerAFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalPartnerBFee`:
	err = decoder.Decode(&obj.TotalPartnerBFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalPosition`:
	err = decoder.Decode(&obj.TotalPosition)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	Pool ag_solanago.PublicKey

	// nft mint
	NftMint ag_solanago.PublicKey

	// fee a checkpoint
	FeeAPerTokenCheckpoint [32]uint8

	// fee b checkpoint
	FeeBPerTokenCheckpoint [32]uint8

	// fee a pending
	FeeAPending uint64

	// fee b pending
	FeeBPending uint64

	// unlock liquidity
	UnlockedLiquidity ag_binary.Uint128

	// vesting liquidity
	VestedLiquidity ag_binary.Uint128

	// permanent locked liquidity
	PermanentLockedLiquidity ag_binary.Uint128

	// metrics
	Metrics PositionMetrics

	// Farming reward information
	RewardInfos [2]UserRewardInfo

	// padding for future usage
	padding [6]ag_binary.Uint128
}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `NftMint` param:
	err = encoder.Encode(obj.NftMint)
	if err != nil {
		return err
	}
	// Serialize `FeeAPerTokenCheckpoint` param:
	err = encoder.Encode(obj.FeeAPerTokenCheckpoint)
	if err != nil {
		return err
	}
	// Serialize `FeeBPerTokenCheckpoint` param:
	err = encoder.Encode(obj.FeeBPerTokenCheckpoint)
	if err != nil {
		return err
	}
	// Serialize `FeeAPending` param:
	err = encoder.Encode(obj.FeeAPending)
	if err != nil {
		return err
	}
	// Serialize `FeeBPending` param:
	err = encoder.Encode(obj.FeeBPending)
	if err != nil {
		return err
	}
	// Serialize `UnlockedLiquidity` param:
	err = encoder.Encode(obj.UnlockedLiquidity)
	if err != nil {
		return err
	}
	// Serialize `VestedLiquidity` param:
	err = encoder.Encode(obj.VestedLiquidity)
	if err != nil {
		return err
	}
	// Serialize `PermanentLockedLiquidity` param:
	err = encoder.Encode(obj.PermanentLockedLiquidity)
	if err != nil {
		return err
	}
	// Serialize `Metrics` param:
	err = encoder.Encode(obj.Metrics)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `NftMint`:
	err = decoder.Decode(&obj.NftMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeAPerTokenCheckpoint`:
	err = decoder.Decode(&obj.FeeAPerTokenCheckpoint)
	if err != nil {
		return err
	}
	// Deserialize `FeeBPerTokenCheckpoint`:
	err = decoder.Decode(&obj.FeeBPerTokenCheckpoint)
	if err != nil {
		return err
	}
	// Deserialize `FeeAPending`:
	err = decoder.Decode(&obj.FeeAPending)
	if err != nil {
		return err
	}
	// Deserialize `FeeBPending`:
	err = decoder.Decode(&obj.FeeBPending)
	if err != nil {
		return err
	}
	// Deserialize `UnlockedLiquidity`:
	err = decoder.Decode(&obj.UnlockedLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `VestedLiquidity`:
	err = decoder.Decode(&obj.VestedLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `PermanentLockedLiquidity`:
	err = decoder.Decode(&obj.PermanentLockedLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `Metrics`:
	err = decoder.Decode(&obj.Metrics)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type PositionMetrics struct {
	TotalClaimedAFee uint64
	TotalClaimedBFee uint64
}

func (obj PositionMetrics) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalClaimedAFee` param:
	err = encoder.Encode(obj.TotalClaimedAFee)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedBFee` param:
	err = encoder.Encode(obj.TotalClaimedBFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionMetrics) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalClaimedAFee`:
	err = decoder.Decode(&obj.TotalClaimedAFee)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedBFee`:
	err = decoder.Decode(&obj.TotalClaimedBFee)
	if err != nil {
		return err
	}
	return nil
}

type RemoveLiquidityParameters struct {
	// delta liquidity
	LiquidityDelta ag_binary.Uint128

	// minimum token a amount
	TokenAAmountThreshold uint64

	// minimum token b amount
	TokenBAmountThreshold uint64
}

func (obj RemoveLiquidityParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LiquidityDelta` param:
	err = encoder.Encode(obj.LiquidityDelta)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmountThreshold` param:
	err = encoder.Encode(obj.TokenAAmountThreshold)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmountThreshold` param:
	err = encoder.Encode(obj.TokenBAmountThreshold)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoveLiquidityParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LiquidityDelta`:
	err = decoder.Decode(&obj.LiquidityDelta)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmountThreshold`:
	err = decoder.Decode(&obj.TokenAAmountThreshold)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmountThreshold`:
	err = decoder.Decode(&obj.TokenBAmountThreshold)
	if err != nil {
		return err
	}
	return nil
}

type RewardInfo struct {
	// Indicates if the reward has been initialized
	Initialized uint8

	// reward token flag
	RewardTokenFlag uint8

	// padding
	_padding_0 [6]uint8

	// Padding to ensure `reward_rate: u128` is 16-byte aligned
	_padding_1 [8]uint8

	// Reward token mint.
	Mint ag_solanago.PublicKey

	// Reward vault token account.
	Vault ag_solanago.PublicKey

	// Authority account that allows to fund rewards
	Funder ag_solanago.PublicKey

	// reward duration
	RewardDuration uint64

	// reward duration end
	RewardDurationEnd uint64

	// reward rate
	RewardRate ag_binary.Uint128

	// Reward per token stored
	RewardPerTokenStored [32]uint8

	// The last time reward states were updated.
	LastUpdateTime uint64

	// Accumulated seconds when the farm distributed rewards but the bin was empty.
	// These rewards will be carried over to the next reward time window.
	CumulativeSecondsWithEmptyLiquidityReward uint64
}

func (obj RewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Initialized` param:
	err = encoder.Encode(obj.Initialized)
	if err != nil {
		return err
	}
	// Serialize `RewardTokenFlag` param:
	err = encoder.Encode(obj.RewardTokenFlag)
	if err != nil {
		return err
	}
	// Serialize `_padding_0` param:
	err = encoder.Encode(obj._padding_0)
	if err != nil {
		return err
	}
	// Serialize `_padding_1` param:
	err = encoder.Encode(obj._padding_1)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Funder` param:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return err
	}
	// Serialize `RewardDuration` param:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return err
	}
	// Serialize `RewardDurationEnd` param:
	err = encoder.Encode(obj.RewardDurationEnd)
	if err != nil {
		return err
	}
	// Serialize `RewardRate` param:
	err = encoder.Encode(obj.RewardRate)
	if err != nil {
		return err
	}
	// Serialize `RewardPerTokenStored` param:
	err = encoder.Encode(obj.RewardPerTokenStored)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTime` param:
	err = encoder.Encode(obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Serialize `CumulativeSecondsWithEmptyLiquidityReward` param:
	err = encoder.Encode(obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Initialized`:
	err = decoder.Decode(&obj.Initialized)
	if err != nil {
		return err
	}
	// Deserialize `RewardTokenFlag`:
	err = decoder.Decode(&obj.RewardTokenFlag)
	if err != nil {
		return err
	}
	// Deserialize `_padding_0`:
	err = decoder.Decode(&obj._padding_0)
	if err != nil {
		return err
	}
	// Deserialize `_padding_1`:
	err = decoder.Decode(&obj._padding_1)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return err
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return err
	}
	// Deserialize `RewardDurationEnd`:
	err = decoder.Decode(&obj.RewardDurationEnd)
	if err != nil {
		return err
	}
	// Deserialize `RewardRate`:
	err = decoder.Decode(&obj.RewardRate)
	if err != nil {
		return err
	}
	// Deserialize `RewardPerTokenStored`:
	err = decoder.Decode(&obj.RewardPerTokenStored)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTime`:
	err = decoder.Decode(&obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeSecondsWithEmptyLiquidityReward`:
	err = decoder.Decode(&obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return err
	}
	return nil
}

type SplitAmountInfo struct {
	PermanentLockedLiquidity ag_binary.Uint128
	UnlockedLiquidity        ag_binary.Uint128
	FeeA                     uint64
	FeeB                     uint64
	Reward0                  uint64
	Reward1                  uint64
}

func (obj SplitAmountInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermanentLockedLiquidity` param:
	err = encoder.Encode(obj.PermanentLockedLiquidity)
	if err != nil {
		return err
	}
	// Serialize `UnlockedLiquidity` param:
	err = encoder.Encode(obj.UnlockedLiquidity)
	if err != nil {
		return err
	}
	// Serialize `FeeA` param:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return err
	}
	// Serialize `FeeB` param:
	err = encoder.Encode(obj.FeeB)
	if err != nil {
		return err
	}
	// Serialize `Reward0` param:
	err = encoder.Encode(obj.Reward0)
	if err != nil {
		return err
	}
	// Serialize `Reward1` param:
	err = encoder.Encode(obj.Reward1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SplitAmountInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermanentLockedLiquidity`:
	err = decoder.Decode(&obj.PermanentLockedLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `UnlockedLiquidity`:
	err = decoder.Decode(&obj.UnlockedLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return err
	}
	// Deserialize `FeeB`:
	err = decoder.Decode(&obj.FeeB)
	if err != nil {
		return err
	}
	// Deserialize `Reward0`:
	err = decoder.Decode(&obj.Reward0)
	if err != nil {
		return err
	}
	// Deserialize `Reward1`:
	err = decoder.Decode(&obj.Reward1)
	if err != nil {
		return err
	}
	return nil
}

type SplitPositionInfo struct {
	Liquidity ag_binary.Uint128
	FeeA      uint64
	FeeB      uint64
	Reward0   uint64
	Reward1   uint64
}

func (obj SplitPositionInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `FeeA` param:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return err
	}
	// Serialize `FeeB` param:
	err = encoder.Encode(obj.FeeB)
	if err != nil {
		return err
	}
	// Serialize `Reward0` param:
	err = encoder.Encode(obj.Reward0)
	if err != nil {
		return err
	}
	// Serialize `Reward1` param:
	err = encoder.Encode(obj.Reward1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SplitPositionInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return err
	}
	// Deserialize `FeeB`:
	err = decoder.Decode(&obj.FeeB)
	if err != nil {
		return err
	}
	// Deserialize `Reward0`:
	err = decoder.Decode(&obj.Reward0)
	if err != nil {
		return err
	}
	// Deserialize `Reward1`:
	err = decoder.Decode(&obj.Reward1)
	if err != nil {
		return err
	}
	return nil
}

type SplitPositionParameters struct {
	// Percentage of unlocked liquidity to split to the second position
	UnlockedLiquidityPercentage uint8

	// Percentage of permanent locked liquidity to split to the second position
	PermanentLockedLiquidityPercentage uint8

	// Percentage of fee A pending to split to the second position
	FeeAPercentage uint8

	// Percentage of fee B pending to split to the second position
	FeeBPercentage uint8

	// Percentage of reward 0 pending to split to the second position
	Reward0Percentage uint8

	// Percentage of reward 1 pending to split to the second position
	Reward1Percentage uint8

	// padding for future
	padding [16]uint8
}

func (obj SplitPositionParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UnlockedLiquidityPercentage` param:
	err = encoder.Encode(obj.UnlockedLiquidityPercentage)
	if err != nil {
		return err
	}
	// Serialize `PermanentLockedLiquidityPercentage` param:
	err = encoder.Encode(obj.PermanentLockedLiquidityPercentage)
	if err != nil {
		return err
	}
	// Serialize `FeeAPercentage` param:
	err = encoder.Encode(obj.FeeAPercentage)
	if err != nil {
		return err
	}
	// Serialize `FeeBPercentage` param:
	err = encoder.Encode(obj.FeeBPercentage)
	if err != nil {
		return err
	}
	// Serialize `Reward0Percentage` param:
	err = encoder.Encode(obj.Reward0Percentage)
	if err != nil {
		return err
	}
	// Serialize `Reward1Percentage` param:
	err = encoder.Encode(obj.Reward1Percentage)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SplitPositionParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UnlockedLiquidityPercentage`:
	err = decoder.Decode(&obj.UnlockedLiquidityPercentage)
	if err != nil {
		return err
	}
	// Deserialize `PermanentLockedLiquidityPercentage`:
	err = decoder.Decode(&obj.PermanentLockedLiquidityPercentage)
	if err != nil {
		return err
	}
	// Deserialize `FeeAPercentage`:
	err = decoder.Decode(&obj.FeeAPercentage)
	if err != nil {
		return err
	}
	// Deserialize `FeeBPercentage`:
	err = decoder.Decode(&obj.FeeBPercentage)
	if err != nil {
		return err
	}
	// Deserialize `Reward0Percentage`:
	err = decoder.Decode(&obj.Reward0Percentage)
	if err != nil {
		return err
	}
	// Deserialize `Reward1Percentage`:
	err = decoder.Decode(&obj.Reward1Percentage)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type StaticConfigParameters struct {
	PoolFees             PoolFeeParameters
	SqrtMinPrice         ag_binary.Uint128
	SqrtMaxPrice         ag_binary.Uint128
	VaultConfigKey       ag_solanago.PublicKey
	PoolCreatorAuthority ag_solanago.PublicKey
	ActivationType       uint8
	CollectFeeMode       uint8
}

func (obj StaticConfigParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `SqrtMinPrice` param:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtMaxPrice` param:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StaticConfigParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	return nil
}

type SwapParameters struct {
	AmountIn         uint64
	MinimumAmountOut uint64
}

func (obj SwapParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `MinimumAmountOut` param:
	err = encoder.Encode(obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `MinimumAmountOut`:
	err = decoder.Decode(&obj.MinimumAmountOut)
	if err != nil {
		return err
	}
	return nil
}

type SwapResult struct {
	OutputAmount  uint64
	NextSqrtPrice ag_binary.Uint128
	LpFee         uint64
	ProtocolFee   uint64
	PartnerFee    uint64
	ReferralFee   uint64
}

func (obj SwapResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OutputAmount` param:
	err = encoder.Encode(obj.OutputAmount)
	if err != nil {
		return err
	}
	// Serialize `NextSqrtPrice` param:
	err = encoder.Encode(obj.NextSqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `LpFee` param:
	err = encoder.Encode(obj.LpFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `PartnerFee` param:
	err = encoder.Encode(obj.PartnerFee)
	if err != nil {
		return err
	}
	// Serialize `ReferralFee` param:
	err = encoder.Encode(obj.ReferralFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OutputAmount`:
	err = decoder.Decode(&obj.OutputAmount)
	if err != nil {
		return err
	}
	// Deserialize `NextSqrtPrice`:
	err = decoder.Decode(&obj.NextSqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `LpFee`:
	err = decoder.Decode(&obj.LpFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `PartnerFee`:
	err = decoder.Decode(&obj.PartnerFee)
	if err != nil {
		return err
	}
	// Deserialize `ReferralFee`:
	err = decoder.Decode(&obj.ReferralFee)
	if err != nil {
		return err
	}
	return nil
}

type TokenBadge struct {
	// token mint
	TokenMint ag_solanago.PublicKey

	// Reserve
	_padding [128]uint8
}

func (obj TokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `_padding` param:
	err = encoder.Encode(obj._padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `_padding`:
	err = decoder.Decode(&obj._padding)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardInfo struct {
	// The latest update reward checkpoint
	RewardPerTokenCheckpoint [32]uint8

	// Current pending rewards
	RewardPendings uint64

	// Total claimed rewards
	TotalClaimedRewards uint64
}

func (obj UserRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardPerTokenCheckpoint` param:
	err = encoder.Encode(obj.RewardPerTokenCheckpoint)
	if err != nil {
		return err
	}
	// Serialize `RewardPendings` param:
	err = encoder.Encode(obj.RewardPendings)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedRewards` param:
	err = encoder.Encode(obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardPerTokenCheckpoint`:
	err = decoder.Decode(&obj.RewardPerTokenCheckpoint)
	if err != nil {
		return err
	}
	// Deserialize `RewardPendings`:
	err = decoder.Decode(&obj.RewardPendings)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedRewards`:
	err = decoder.Decode(&obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	return nil
}

type Vesting struct {
	Position               ag_solanago.PublicKey
	CliffPoint             uint64
	PeriodFrequency        uint64
	CliffUnlockLiquidity   ag_binary.Uint128
	LiquidityPerPeriod     ag_binary.Uint128
	TotalReleasedLiquidity ag_binary.Uint128
	NumberOfPeriod         uint16
	padding                [14]uint8
	padding2               [4]ag_binary.Uint128
}

func (obj Vesting) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `CliffPoint` param:
	err = encoder.Encode(obj.CliffPoint)
	if err != nil {
		return err
	}
	// Serialize `PeriodFrequency` param:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Serialize `CliffUnlockLiquidity` param:
	err = encoder.Encode(obj.CliffUnlockLiquidity)
	if err != nil {
		return err
	}
	// Serialize `LiquidityPerPeriod` param:
	err = encoder.Encode(obj.LiquidityPerPeriod)
	if err != nil {
		return err
	}
	// Serialize `TotalReleasedLiquidity` param:
	err = encoder.Encode(obj.TotalReleasedLiquidity)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `padding2` param:
	err = encoder.Encode(obj.padding2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Vesting) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `CliffPoint`:
	err = decoder.Decode(&obj.CliffPoint)
	if err != nil {
		return err
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Deserialize `CliffUnlockLiquidity`:
	err = decoder.Decode(&obj.CliffUnlockLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityPerPeriod`:
	err = decoder.Decode(&obj.LiquidityPerPeriod)
	if err != nil {
		return err
	}
	// Deserialize `TotalReleasedLiquidity`:
	err = decoder.Decode(&obj.TotalReleasedLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `padding2`:
	err = decoder.Decode(&obj.padding2)
	if err != nil {
		return err
	}
	return nil
}

type VestingParameters struct {
	CliffPoint           *uint64 `bin:"optional"`
	PeriodFrequency      uint64
	CliffUnlockLiquidity ag_binary.Uint128
	LiquidityPerPeriod   ag_binary.Uint128
	NumberOfPeriod       uint16
}

func (obj VestingParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CliffPoint` param (optional):
	{
		if obj.CliffPoint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CliffPoint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `PeriodFrequency` param:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Serialize `CliffUnlockLiquidity` param:
	err = encoder.Encode(obj.CliffUnlockLiquidity)
	if err != nil {
		return err
	}
	// Serialize `LiquidityPerPeriod` param:
	err = encoder.Encode(obj.LiquidityPerPeriod)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VestingParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CliffPoint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CliffPoint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Deserialize `CliffUnlockLiquidity`:
	err = decoder.Decode(&obj.CliffUnlockLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityPerPeriod`:
	err = decoder.Decode(&obj.LiquidityPerPeriod)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	return nil
}
