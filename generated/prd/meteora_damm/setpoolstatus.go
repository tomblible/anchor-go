// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetPoolStatus is the `set_pool_status` instruction.
type SetPoolStatus struct {
	Status *uint8

	// [0] = [WRITE] pool
	//
	// [1] = [SIGNER] admin
	//
	// [2] = [] event_authority
	//
	// [3] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetPoolStatusInstructionBuilder creates a new `SetPoolStatus` instruction builder.
func NewSetPoolStatusInstructionBuilder() *SetPoolStatus {
	nd := &SetPoolStatus{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetStatus sets the "status" parameter.
func (inst *SetPoolStatus) SetStatus(status uint8) *SetPoolStatus {
	inst.Status = &status
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *SetPoolStatus) SetPoolAccount(pool ag_solanago.PublicKey) *SetPoolStatus {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *SetPoolStatus) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *SetPoolStatus) SetAdminAccount(admin ag_solanago.PublicKey) *SetPoolStatus {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *SetPoolStatus) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *SetPoolStatus) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *SetPoolStatus {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *SetPoolStatus) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramAccount sets the "program" account.
func (inst *SetPoolStatus) SetProgramAccount(program ag_solanago.PublicKey) *SetPoolStatus {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SetPoolStatus) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *SetPoolStatus) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetPoolStatus) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetPoolStatus {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *SetPoolStatus) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst SetPoolStatus) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetPoolStatus,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetPoolStatus) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetPoolStatus) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Status == nil {
			return errors.New("status parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *SetPoolStatus) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetPoolStatus")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Status", *inst.Status))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetPoolStatus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetPoolStatus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

// NewSetPoolStatusInstruction declares a new SetPoolStatus instruction with the provided parameters and accounts.
func NewSetPoolStatusInstruction(
	// Parameters:
	status uint8,
	// Accounts:
	pool ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *SetPoolStatus {
	return NewSetPoolStatusInstructionBuilder().
		SetStatus(status).
		SetPoolAccount(pool).
		SetAdminAccount(admin)
}

// NewSimpleSetPoolStatusInstruction declares a new SetPoolStatus instruction with the provided parameters and accounts.
func NewSimpleSetPoolStatusInstruction(
	// Parameters:
	status uint8,
	// Accounts:
	pool ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *SetPoolStatus {
	return NewSetPoolStatusInstructionBuilder().
		SetStatus(status).
		SetPoolAccount(pool).
		SetAdminAccount(admin)
}
