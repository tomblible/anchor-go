// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseTokenBadge is the `close_token_badge` instruction.
type CloseTokenBadge struct {

	// [0] = [WRITE] token_badge
	//
	// [1] = [WRITE, SIGNER] admin
	//
	// [2] = [WRITE] rent_receiver
	//
	// [3] = [] event_authority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseTokenBadgeInstructionBuilder creates a new `CloseTokenBadge` instruction builder.
func NewCloseTokenBadgeInstructionBuilder() *CloseTokenBadge {
	nd := &CloseTokenBadge{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetTokenBadgeAccount sets the "token_badge" account.
func (inst *CloseTokenBadge) SetTokenBadgeAccount(tokenBadge ag_solanago.PublicKey) *CloseTokenBadge {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(tokenBadge).WRITE()
	return inst
}

// GetTokenBadgeAccount gets the "token_badge" account.
func (inst *CloseTokenBadge) GetTokenBadgeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *CloseTokenBadge) SetAdminAccount(admin ag_solanago.PublicKey) *CloseTokenBadge {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *CloseTokenBadge) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRentReceiverAccount sets the "rent_receiver" account.
func (inst *CloseTokenBadge) SetRentReceiverAccount(rentReceiver ag_solanago.PublicKey) *CloseTokenBadge {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rentReceiver).WRITE()
	return inst
}

// GetRentReceiverAccount gets the "rent_receiver" account.
func (inst *CloseTokenBadge) GetRentReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CloseTokenBadge) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CloseTokenBadge {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CloseTokenBadge) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *CloseTokenBadge) SetProgramAccount(program ag_solanago.PublicKey) *CloseTokenBadge {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CloseTokenBadge) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *CloseTokenBadge) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CloseTokenBadge) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CloseTokenBadge {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *CloseTokenBadge) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst CloseTokenBadge) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseTokenBadge,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseTokenBadge) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseTokenBadge) Validate() error {
	if len(inst.AccountMetaSlice) < 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TokenBadge is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RentReceiver is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CloseTokenBadge) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseTokenBadge")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    token_badge", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  rent_receiver", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CloseTokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CloseTokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseTokenBadgeInstruction declares a new CloseTokenBadge instruction with the provided parameters and accounts.
func NewCloseTokenBadgeInstruction(
	// Accounts:
	tokenBadge ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	rentReceiver ag_solanago.PublicKey) *CloseTokenBadge {
	return NewCloseTokenBadgeInstructionBuilder().
		SetTokenBadgeAccount(tokenBadge).
		SetAdminAccount(admin).
		SetRentReceiverAccount(rentReceiver)
}

// NewSimpleCloseTokenBadgeInstruction declares a new CloseTokenBadge instruction with the provided parameters and accounts.
func NewSimpleCloseTokenBadgeInstruction(
	// Accounts:
	tokenBadge ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	rentReceiver ag_solanago.PublicKey) *CloseTokenBadge {
	return NewCloseTokenBadgeInstructionBuilder().
		SetTokenBadgeAccount(tokenBadge).
		SetAdminAccount(admin).
		SetRentReceiverAccount(rentReceiver)
}
