// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_damm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SplitPosition is the `split_position` instruction.
type SplitPosition struct {
	Params *SplitPositionParameters

	// [0] = [WRITE] pool
	//
	// [1] = [WRITE] first_position
	// ··········· The first position
	//
	// [2] = [] first_position_nft_account
	// ··········· The token account for position nft
	//
	// [3] = [WRITE] second_position
	// ··········· The second position
	//
	// [4] = [] second_position_nft_account
	// ··········· The token account for position nft
	//
	// [5] = [SIGNER] first_owner
	// ··········· Owner of first position
	//
	// [6] = [SIGNER] second_owner
	// ··········· Owner of second position
	//
	// [7] = [] event_authority
	//
	// [8] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSplitPositionInstructionBuilder creates a new `SplitPosition` instruction builder.
func NewSplitPositionInstructionBuilder() *SplitPosition {
	nd := &SplitPosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	nd.AccountMetaSlice[7] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetParams sets the "params" parameter.
func (inst *SplitPosition) SetParams(params SplitPositionParameters) *SplitPosition {
	inst.Params = &params
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *SplitPosition) SetPoolAccount(pool ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *SplitPosition) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFirstPositionAccount sets the "first_position" account.
// The first position
func (inst *SplitPosition) SetFirstPositionAccount(firstPosition ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(firstPosition).WRITE()
	return inst
}

// GetFirstPositionAccount gets the "first_position" account.
// The first position
func (inst *SplitPosition) GetFirstPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFirstPositionNftAccountAccount sets the "first_position_nft_account" account.
// The token account for position nft
func (inst *SplitPosition) SetFirstPositionNftAccountAccount(firstPositionNftAccount ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(firstPositionNftAccount)
	return inst
}

// GetFirstPositionNftAccountAccount gets the "first_position_nft_account" account.
// The token account for position nft
func (inst *SplitPosition) GetFirstPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSecondPositionAccount sets the "second_position" account.
// The second position
func (inst *SplitPosition) SetSecondPositionAccount(secondPosition ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(secondPosition).WRITE()
	return inst
}

// GetSecondPositionAccount gets the "second_position" account.
// The second position
func (inst *SplitPosition) GetSecondPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSecondPositionNftAccountAccount sets the "second_position_nft_account" account.
// The token account for position nft
func (inst *SplitPosition) SetSecondPositionNftAccountAccount(secondPositionNftAccount ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(secondPositionNftAccount)
	return inst
}

// GetSecondPositionNftAccountAccount gets the "second_position_nft_account" account.
// The token account for position nft
func (inst *SplitPosition) GetSecondPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFirstOwnerAccount sets the "first_owner" account.
// Owner of first position
func (inst *SplitPosition) SetFirstOwnerAccount(firstOwner ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(firstOwner).SIGNER()
	return inst
}

// GetFirstOwnerAccount gets the "first_owner" account.
// Owner of first position
func (inst *SplitPosition) GetFirstOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSecondOwnerAccount sets the "second_owner" account.
// Owner of second position
func (inst *SplitPosition) SetSecondOwnerAccount(secondOwner ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(secondOwner).SIGNER()
	return inst
}

// GetSecondOwnerAccount gets the "second_owner" account.
// Owner of second position
func (inst *SplitPosition) GetSecondOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *SplitPosition) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *SplitPosition) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetProgramAccount sets the "program" account.
func (inst *SplitPosition) SetProgramAccount(program ag_solanago.PublicKey) *SplitPosition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SplitPosition) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst *SplitPosition) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SplitPosition) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SplitPosition {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:9], metas...)
	return inst
}

func (inst *SplitPosition) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9:]
}

func (inst SplitPosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SplitPosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SplitPosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SplitPosition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 9 {
		return errors.New("accounts slice has wrong length: expected 9 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FirstPosition is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FirstPositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SecondPosition is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SecondPositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FirstOwner is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SecondOwner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *SplitPosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SplitPosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      first_position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" first_position_nft_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     second_position", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("second_position_nft_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         first_owner", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        second_owner", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     event_authority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("             program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj SplitPosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SplitPosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewSplitPositionInstruction declares a new SplitPosition instruction with the provided parameters and accounts.
func NewSplitPositionInstruction(
	// Parameters:
	params SplitPositionParameters,
	// Accounts:
	pool ag_solanago.PublicKey,
	firstPosition ag_solanago.PublicKey,
	firstPositionNftAccount ag_solanago.PublicKey,
	secondPosition ag_solanago.PublicKey,
	secondPositionNftAccount ag_solanago.PublicKey,
	firstOwner ag_solanago.PublicKey,
	secondOwner ag_solanago.PublicKey) *SplitPosition {
	return NewSplitPositionInstructionBuilder().
		SetParams(params).
		SetPoolAccount(pool).
		SetFirstPositionAccount(firstPosition).
		SetFirstPositionNftAccountAccount(firstPositionNftAccount).
		SetSecondPositionAccount(secondPosition).
		SetSecondPositionNftAccountAccount(secondPositionNftAccount).
		SetFirstOwnerAccount(firstOwner).
		SetSecondOwnerAccount(secondOwner)
}

// NewSimpleSplitPositionInstruction declares a new SplitPosition instruction with the provided parameters and accounts.
func NewSimpleSplitPositionInstruction(
	// Parameters:
	params SplitPositionParameters,
	// Accounts:
	pool ag_solanago.PublicKey,
	firstPosition ag_solanago.PublicKey,
	firstPositionNftAccount ag_solanago.PublicKey,
	secondPosition ag_solanago.PublicKey,
	secondPositionNftAccount ag_solanago.PublicKey,
	firstOwner ag_solanago.PublicKey,
	secondOwner ag_solanago.PublicKey) *SplitPosition {
	return NewSplitPositionInstructionBuilder().
		SetParams(params).
		SetPoolAccount(pool).
		SetFirstPositionAccount(firstPosition).
		SetFirstPositionNftAccountAccount(firstPositionNftAccount).
		SetSecondPositionAccount(secondPosition).
		SetSecondPositionNftAccountAccount(secondPositionNftAccount).
		SetFirstOwnerAccount(firstOwner).
		SetSecondOwnerAccount(secondOwner)
}
