// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeBinArray is the `initialize_bin_array` instruction.
type InitializeBinArray struct {
	Index *uint32

	// [0] = [] pair
	//
	// [1] = [WRITE] bin_array
	//
	// [2] = [WRITE, SIGNER] user
	//
	// [3] = [] system_program
	//
	// [4] = [] event_authority
	//
	// [5] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeBinArrayInstructionBuilder creates a new `InitializeBinArray` instruction builder.
func NewInitializeBinArrayInstructionBuilder() *InitializeBinArray {
	nd := &InitializeBinArray{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[5] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetIndex sets the "index" parameter.
func (inst *InitializeBinArray) SetIndex(index uint32) *InitializeBinArray {
	inst.Index = &index
	return inst
}

// SetPairAccount sets the "pair" account.
func (inst *InitializeBinArray) SetPairAccount(pair ag_solanago.PublicKey) *InitializeBinArray {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pair)
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *InitializeBinArray) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBinArrayAccount sets the "bin_array" account.
func (inst *InitializeBinArray) SetBinArrayAccount(binArray ag_solanago.PublicKey) *InitializeBinArray {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(binArray).WRITE()
	return inst
}

// GetBinArrayAccount gets the "bin_array" account.
func (inst *InitializeBinArray) GetBinArrayAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserAccount sets the "user" account.
func (inst *InitializeBinArray) SetUserAccount(user ag_solanago.PublicKey) *InitializeBinArray {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *InitializeBinArray) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeBinArray) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeBinArray {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeBinArray) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *InitializeBinArray) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializeBinArray {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *InitializeBinArray) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializeBinArray) SetProgramAccount(program ag_solanago.PublicKey) *InitializeBinArray {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializeBinArray) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst *InitializeBinArray) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeBinArray) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeBinArray {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:6], metas...)
	return inst
}

func (inst *InitializeBinArray) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6:]
}

func (inst InitializeBinArray) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeBinArray,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeBinArray) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeBinArray) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Index == nil {
			return errors.New("index parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 6 {
		return errors.New("accounts slice has wrong length: expected 6 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.BinArray is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializeBinArray) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeBinArray")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Index", *inst.Index))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      bin_array", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           user", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj InitializeBinArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeBinArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeBinArrayInstruction declares a new InitializeBinArray instruction with the provided parameters and accounts.
func NewInitializeBinArrayInstruction(
	// Parameters:
	index uint32,
	// Accounts:
	pair ag_solanago.PublicKey,
	binArray ag_solanago.PublicKey,
	user ag_solanago.PublicKey) *InitializeBinArray {
	return NewInitializeBinArrayInstructionBuilder().
		SetIndex(index).
		SetPairAccount(pair).
		SetBinArrayAccount(binArray).
		SetUserAccount(user)
}

// NewSimpleInitializeBinArrayInstruction declares a new InitializeBinArray instruction with the provided parameters and accounts.
func NewSimpleInitializeBinArrayInstruction(
	// Parameters:
	index uint32,
	// Accounts:
	pair ag_solanago.PublicKey,
	user ag_solanago.PublicKey) *InitializeBinArray {
	binArray := MustFindBinArrayAddress(pair, index)
	return NewInitializeBinArrayInstructionBuilder().
		SetIndex(index).
		SetPairAccount(pair).
		SetBinArrayAccount(binArray).
		SetUserAccount(user)
}
