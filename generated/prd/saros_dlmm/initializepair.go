// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializePair is the `initialize_pair` instruction.
type InitializePair struct {
	ActiveId *uint32

	// [0] = [] liquidity_book_config
	//
	// [1] = [] token_mint_x
	//
	// [2] = [] token_mint_y
	//
	// [3] = [] bin_step_config
	//
	// [4] = [] quote_asset_badge
	//
	// [5] = [WRITE] pair
	//
	// [6] = [WRITE, SIGNER] user
	//
	// [7] = [] system_program
	//
	// [8] = [] event_authority
	//
	// [9] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePairInstructionBuilder creates a new `InitializePair` instruction builder.
func NewInitializePairInstructionBuilder() *InitializePair {
	nd := &InitializePair{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	nd.AccountMetaSlice[7] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[9] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetActiveId sets the "active_id" parameter.
func (inst *InitializePair) SetActiveId(active_id uint32) *InitializePair {
	inst.ActiveId = &active_id
	return inst
}

// SetLiquidityBookConfigAccount sets the "liquidity_book_config" account.
func (inst *InitializePair) SetLiquidityBookConfigAccount(liquidityBookConfig ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(liquidityBookConfig)
	return inst
}

// GetLiquidityBookConfigAccount gets the "liquidity_book_config" account.
func (inst *InitializePair) GetLiquidityBookConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMintXAccount sets the "token_mint_x" account.
func (inst *InitializePair) SetTokenMintXAccount(tokenMintX ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMintX)
	return inst
}

// GetTokenMintXAccount gets the "token_mint_x" account.
func (inst *InitializePair) GetTokenMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintYAccount sets the "token_mint_y" account.
func (inst *InitializePair) SetTokenMintYAccount(tokenMintY ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMintY)
	return inst
}

// GetTokenMintYAccount gets the "token_mint_y" account.
func (inst *InitializePair) GetTokenMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBinStepConfigAccount sets the "bin_step_config" account.
func (inst *InitializePair) SetBinStepConfigAccount(binStepConfig ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(binStepConfig)
	return inst
}

// GetBinStepConfigAccount gets the "bin_step_config" account.
func (inst *InitializePair) GetBinStepConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQuoteAssetBadgeAccount sets the "quote_asset_badge" account.
func (inst *InitializePair) SetQuoteAssetBadgeAccount(quoteAssetBadge ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(quoteAssetBadge)
	return inst
}

// GetQuoteAssetBadgeAccount gets the "quote_asset_badge" account.
func (inst *InitializePair) GetQuoteAssetBadgeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPairAccount sets the "pair" account.
func (inst *InitializePair) SetPairAccount(pair ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *InitializePair) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetUserAccount sets the "user" account.
func (inst *InitializePair) SetUserAccount(user ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *InitializePair) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializePair) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializePair) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *InitializePair) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *InitializePair) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializePair) SetProgramAccount(program ag_solanago.PublicKey) *InitializePair {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializePair) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *InitializePair) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializePair) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializePair {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *InitializePair) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst InitializePair) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePair,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePair) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePair) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ActiveId == nil {
			return errors.New("activeId parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LiquidityBookConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMintX is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMintY is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BinStepConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QuoteAssetBadge is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializePair) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePair")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" ActiveId", *inst.ActiveId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("liquidity_book_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         token_mint_x", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         token_mint_y", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      bin_step_config", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    quote_asset_badge", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 pair", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 user", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("       system_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      event_authority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("              program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj InitializePair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePairInstruction declares a new InitializePair instruction with the provided parameters and accounts.
func NewInitializePairInstruction(
	// Parameters:
	active_id uint32,
	// Accounts:
	liquidityBookConfig ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	binStepConfig ag_solanago.PublicKey,
	quoteAssetBadge ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	user ag_solanago.PublicKey) *InitializePair {
	return NewInitializePairInstructionBuilder().
		SetActiveId(active_id).
		SetLiquidityBookConfigAccount(liquidityBookConfig).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetBinStepConfigAccount(binStepConfig).
		SetQuoteAssetBadgeAccount(quoteAssetBadge).
		SetPairAccount(pair).
		SetUserAccount(user)
}

// NewSimpleInitializePairInstruction declares a new InitializePair instruction with the provided parameters and accounts.
func NewSimpleInitializePairInstruction(
	// Parameters:
	active_id uint32,
	// Accounts:
	liquidityBookConfig ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	binStepConfig ag_solanago.PublicKey,
	quoteAssetBadge ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	user ag_solanago.PublicKey) *InitializePair {
	return NewInitializePairInstructionBuilder().
		SetActiveId(active_id).
		SetLiquidityBookConfigAccount(liquidityBookConfig).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetBinStepConfigAccount(binStepConfig).
		SetQuoteAssetBadgeAccount(quoteAssetBadge).
		SetPairAccount(pair).
		SetUserAccount(user)
}
