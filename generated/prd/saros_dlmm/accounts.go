// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type BinArrayAccount struct {
	Pair  ag_solanago.PublicKey
	Bins  [256]Bin
	Index uint32
	Space [12]uint8
}

var BinArrayAccountDiscriminator = [8]byte{92, 142, 92, 220, 5, 148, 70, 181}

func (obj BinArrayAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BinArrayAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `Bins` param:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Space` param:
	err = encoder.Encode(obj.Space)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinArrayAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BinArrayAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[92 142 92 220 5 148 70 181]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Space`:
	err = decoder.Decode(&obj.Space)
	if err != nil {
		return err
	}
	return nil
}

type BinStepConfigAccount struct {
	Bump                uint8
	LiquidityBookConfig ag_solanago.PublicKey
	BinStep             uint8
	Status              ConfigStatus
	Availability        ConfigAvailability
	FeeParameters       StaticFeeParameters
}

var BinStepConfigAccountDiscriminator = [8]byte{44, 12, 82, 45, 127, 124, 191, 199}

func (obj BinStepConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BinStepConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `LiquidityBookConfig` param:
	err = encoder.Encode(obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Availability` param:
	err = encoder.Encode(obj.Availability)
	if err != nil {
		return err
	}
	// Serialize `FeeParameters` param:
	err = encoder.Encode(obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinStepConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BinStepConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[44 12 82 45 127 124 191 199]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityBookConfig`:
	err = decoder.Decode(&obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Availability`:
	err = decoder.Decode(&obj.Availability)
	if err != nil {
		return err
	}
	// Deserialize `FeeParameters`:
	err = decoder.Decode(&obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityBookConfigAccount struct {
	PresetAuthority        ag_solanago.PublicKey
	PendingPresetAuthority *ag_solanago.PublicKey `bin:"optional"`
}

var LiquidityBookConfigAccountDiscriminator = [8]byte{173, 36, 130, 129, 45, 178, 44, 86}

func (obj LiquidityBookConfigAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LiquidityBookConfigAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PresetAuthority` param:
	err = encoder.Encode(obj.PresetAuthority)
	if err != nil {
		return err
	}
	// Serialize `PendingPresetAuthority` param (optional):
	{
		if obj.PendingPresetAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PendingPresetAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *LiquidityBookConfigAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LiquidityBookConfigAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[173 36 130 129 45 178 44 86]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PresetAuthority`:
	err = decoder.Decode(&obj.PresetAuthority)
	if err != nil {
		return err
	}
	// Deserialize `PendingPresetAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PendingPresetAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type PairAccount struct {
	Bump                 [1]uint8
	LiquidityBookConfig  ag_solanago.PublicKey
	BinStep              uint8
	BinStepSeed          [1]uint8
	TokenMintX           ag_solanago.PublicKey
	TokenMintY           ag_solanago.PublicKey
	StaticFeeParameters  StaticFeeParameters
	ActiveId             uint32
	DynamicFeeParameters DynamicFeeParameters
	ProtocolFeesX        uint64
	ProtocolFeesY        uint64
	Hook                 *ag_solanago.PublicKey `bin:"optional"`
}

var PairAccountDiscriminator = [8]byte{85, 72, 49, 176, 182, 228, 141, 82}

func (obj PairAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PairAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `LiquidityBookConfig` param:
	err = encoder.Encode(obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BinStepSeed` param:
	err = encoder.Encode(obj.BinStepSeed)
	if err != nil {
		return err
	}
	// Serialize `TokenMintX` param:
	err = encoder.Encode(obj.TokenMintX)
	if err != nil {
		return err
	}
	// Serialize `TokenMintY` param:
	err = encoder.Encode(obj.TokenMintY)
	if err != nil {
		return err
	}
	// Serialize `StaticFeeParameters` param:
	err = encoder.Encode(obj.StaticFeeParameters)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `DynamicFeeParameters` param:
	err = encoder.Encode(obj.DynamicFeeParameters)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesX` param:
	err = encoder.Encode(obj.ProtocolFeesX)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesY` param:
	err = encoder.Encode(obj.ProtocolFeesY)
	if err != nil {
		return err
	}
	// Serialize `Hook` param (optional):
	{
		if obj.Hook == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Hook)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *PairAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PairAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[85 72 49 176 182 228 141 82]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityBookConfig`:
	err = decoder.Decode(&obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BinStepSeed`:
	err = decoder.Decode(&obj.BinStepSeed)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintX`:
	err = decoder.Decode(&obj.TokenMintX)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintY`:
	err = decoder.Decode(&obj.TokenMintY)
	if err != nil {
		return err
	}
	// Deserialize `StaticFeeParameters`:
	err = decoder.Decode(&obj.StaticFeeParameters)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `DynamicFeeParameters`:
	err = decoder.Decode(&obj.DynamicFeeParameters)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesX`:
	err = decoder.Decode(&obj.ProtocolFeesX)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesY`:
	err = decoder.Decode(&obj.ProtocolFeesY)
	if err != nil {
		return err
	}
	// Deserialize `Hook` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Hook)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type PositionAccount struct {
	Pair            ag_solanago.PublicKey
	PositionMint    ag_solanago.PublicKey
	LiquidityShares [64]ag_binary.Uint128
	LowerBinId      uint32
	UpperBinId      uint32
	Space           [8]uint8
}

var PositionAccountDiscriminator = [8]byte{170, 188, 143, 228, 122, 64, 247, 208}

func (obj PositionAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PositionAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `PositionMint` param:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return err
	}
	// Serialize `LiquidityShares` param:
	err = encoder.Encode(obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `UpperBinId` param:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return err
	}
	// Serialize `Space` param:
	err = encoder.Encode(obj.Space)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PositionAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[170 188 143 228 122 64 247 208]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityShares`:
	err = decoder.Decode(&obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return err
	}
	// Deserialize `Space`:
	err = decoder.Decode(&obj.Space)
	if err != nil {
		return err
	}
	return nil
}

type QuoteAssetBadgeAccount struct {
	Bump   uint8
	Status QuoteAssetBadgeStatus
}

var QuoteAssetBadgeAccountDiscriminator = [8]byte{183, 124, 99, 219, 110, 119, 157, 221}

func (obj QuoteAssetBadgeAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(QuoteAssetBadgeAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *QuoteAssetBadgeAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(QuoteAssetBadgeAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[183 124 99 219 110 119 157 221]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}
