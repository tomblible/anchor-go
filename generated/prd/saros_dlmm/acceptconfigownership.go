// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AcceptConfigOwnership is the `accept_config_ownership` instruction.
type AcceptConfigOwnership struct {

	// [0] = [WRITE] liquidity_book_config
	//
	// [1] = [SIGNER] pending_preset_authority
	//
	// [2] = [] event_authority
	//
	// [3] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAcceptConfigOwnershipInstructionBuilder creates a new `AcceptConfigOwnership` instruction builder.
func NewAcceptConfigOwnershipInstructionBuilder() *AcceptConfigOwnership {
	nd := &AcceptConfigOwnership{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetLiquidityBookConfigAccount sets the "liquidity_book_config" account.
func (inst *AcceptConfigOwnership) SetLiquidityBookConfigAccount(liquidityBookConfig ag_solanago.PublicKey) *AcceptConfigOwnership {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(liquidityBookConfig).WRITE()
	return inst
}

// GetLiquidityBookConfigAccount gets the "liquidity_book_config" account.
func (inst *AcceptConfigOwnership) GetLiquidityBookConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPendingPresetAuthorityAccount sets the "pending_preset_authority" account.
func (inst *AcceptConfigOwnership) SetPendingPresetAuthorityAccount(pendingPresetAuthority ag_solanago.PublicKey) *AcceptConfigOwnership {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pendingPresetAuthority).SIGNER()
	return inst
}

// GetPendingPresetAuthorityAccount gets the "pending_preset_authority" account.
func (inst *AcceptConfigOwnership) GetPendingPresetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *AcceptConfigOwnership) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AcceptConfigOwnership {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *AcceptConfigOwnership) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramAccount sets the "program" account.
func (inst *AcceptConfigOwnership) SetProgramAccount(program ag_solanago.PublicKey) *AcceptConfigOwnership {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AcceptConfigOwnership) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *AcceptConfigOwnership) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AcceptConfigOwnership) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AcceptConfigOwnership {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *AcceptConfigOwnership) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst AcceptConfigOwnership) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AcceptConfigOwnership,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AcceptConfigOwnership) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AcceptConfigOwnership) Validate() error {
	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LiquidityBookConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PendingPresetAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AcceptConfigOwnership) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AcceptConfigOwnership")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   liquidity_book_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("pending_preset_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         event_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj AcceptConfigOwnership) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AcceptConfigOwnership) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAcceptConfigOwnershipInstruction declares a new AcceptConfigOwnership instruction with the provided parameters and accounts.
func NewAcceptConfigOwnershipInstruction(
	// Accounts:
	liquidityBookConfig ag_solanago.PublicKey,
	pendingPresetAuthority ag_solanago.PublicKey) *AcceptConfigOwnership {
	return NewAcceptConfigOwnershipInstructionBuilder().
		SetLiquidityBookConfigAccount(liquidityBookConfig).
		SetPendingPresetAuthorityAccount(pendingPresetAuthority)
}

// NewSimpleAcceptConfigOwnershipInstruction declares a new AcceptConfigOwnership instruction with the provided parameters and accounts.
func NewSimpleAcceptConfigOwnershipInstruction(
	// Accounts:
	liquidityBookConfig ag_solanago.PublicKey,
	pendingPresetAuthority ag_solanago.PublicKey) *AcceptConfigOwnership {
	return NewAcceptConfigOwnershipInstructionBuilder().
		SetLiquidityBookConfigAccount(liquidityBookConfig).
		SetPendingPresetAuthorityAccount(pendingPresetAuthority)
}
