// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

const ProgramName = "SarosDlmm"

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("1qbkdrr3z4ryLA7pZykqxvxWPoeifcVKo6ZG9CfkvVE")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	AssociatedTokenProgram = ag_solanago.MustPublicKeyFromBase58("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")

	EventAuthorityPDA = ag_solanago.MustPublicKeyFromBase58("AQjz6RZK93SLjxfDGKL9nCYQNSjEbQSdETxwR63jXV8m")

	MemoProgram = ag_solanago.MustPublicKeyFromBase58("MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr")

	SystemProgram = ag_solanago.MustPublicKeyFromBase58("11111111111111111111111111111111")

	Token22Program = ag_solanago.MustPublicKeyFromBase58("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb")
)

var (
	Instruction_AcceptConfigOwnership = ag_binary.TypeID([8]byte{6, 212, 14, 48, 229, 38, 62, 241})

	Instruction_ClosePosition = ag_binary.TypeID([8]byte{123, 134, 81, 0, 49, 68, 98, 98})

	Instruction_CreatePosition = ag_binary.TypeID([8]byte{48, 215, 197, 153, 96, 203, 180, 133})

	Instruction_DecreasePosition = ag_binary.TypeID([8]byte{57, 125, 21, 59, 200, 137, 179, 108})

	Instruction_IncreasePosition = ag_binary.TypeID([8]byte{253, 234, 128, 104, 192, 188, 45, 91})

	Instruction_InitializeBinArray = ag_binary.TypeID([8]byte{35, 86, 19, 185, 78, 212, 75, 211})

	Instruction_InitializeBinStepConfig = ag_binary.TypeID([8]byte{2, 168, 136, 251, 163, 9, 132, 255})

	Instruction_InitializeConfig = ag_binary.TypeID([8]byte{208, 127, 21, 1, 194, 190, 196, 70})

	Instruction_InitializePair = ag_binary.TypeID([8]byte{177, 114, 226, 34, 186, 150, 5, 245})

	Instruction_InitializeQuoteAssetBadge = ag_binary.TypeID([8]byte{115, 174, 34, 42, 176, 5, 229, 207})

	Instruction_SetHook = ag_binary.TypeID([8]byte{175, 16, 187, 252, 19, 54, 111, 221})

	Instruction_Swap = ag_binary.TypeID([8]byte{248, 198, 158, 145, 225, 117, 135, 200})

	Instruction_TransferConfigOwnership = ag_binary.TypeID([8]byte{53, 124, 67, 226, 108, 130, 19, 12})

	Instruction_UpdateBinStepConfig = ag_binary.TypeID([8]byte{205, 204, 206, 220, 251, 239, 19, 238})

	Instruction_UpdatePairStaticFeeParameters = ag_binary.TypeID([8]byte{20, 223, 186, 73, 199, 65, 45, 80})

	Instruction_UpdateQuoteAssetBadge = ag_binary.TypeID([8]byte{42, 12, 208, 17, 29, 174, 196, 103})

	Instruction_WithdrawProtocolFees = ag_binary.TypeID([8]byte{11, 68, 165, 98, 18, 208, 134, 73})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AcceptConfigOwnership:
		return "AcceptConfigOwnership"
	case Instruction_ClosePosition:
		return "ClosePosition"
	case Instruction_CreatePosition:
		return "CreatePosition"
	case Instruction_DecreasePosition:
		return "DecreasePosition"
	case Instruction_IncreasePosition:
		return "IncreasePosition"
	case Instruction_InitializeBinArray:
		return "InitializeBinArray"
	case Instruction_InitializeBinStepConfig:
		return "InitializeBinStepConfig"
	case Instruction_InitializeConfig:
		return "InitializeConfig"
	case Instruction_InitializePair:
		return "InitializePair"
	case Instruction_InitializeQuoteAssetBadge:
		return "InitializeQuoteAssetBadge"
	case Instruction_SetHook:
		return "SetHook"
	case Instruction_Swap:
		return "Swap"
	case Instruction_TransferConfigOwnership:
		return "TransferConfigOwnership"
	case Instruction_UpdateBinStepConfig:
		return "UpdateBinStepConfig"
	case Instruction_UpdatePairStaticFeeParameters:
		return "UpdatePairStaticFeeParameters"
	case Instruction_UpdateQuoteAssetBadge:
		return "UpdateQuoteAssetBadge"
	case Instruction_WithdrawProtocolFees:
		return "WithdrawProtocolFees"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "accept_config_ownership", Type: (*AcceptConfigOwnership)(nil),
		},
		{
			Name: "close_position", Type: (*ClosePosition)(nil),
		},
		{
			Name: "create_position", Type: (*CreatePosition)(nil),
		},
		{
			Name: "decrease_position", Type: (*DecreasePosition)(nil),
		},
		{
			Name: "increase_position", Type: (*IncreasePosition)(nil),
		},
		{
			Name: "initialize_bin_array", Type: (*InitializeBinArray)(nil),
		},
		{
			Name: "initialize_bin_step_config", Type: (*InitializeBinStepConfig)(nil),
		},
		{
			Name: "initialize_config", Type: (*InitializeConfig)(nil),
		},
		{
			Name: "initialize_pair", Type: (*InitializePair)(nil),
		},
		{
			Name: "initialize_quote_asset_badge", Type: (*InitializeQuoteAssetBadge)(nil),
		},
		{
			Name: "set_hook", Type: (*SetHook)(nil),
		},
		{
			Name: "swap", Type: (*Swap)(nil),
		},
		{
			Name: "transfer_config_ownership", Type: (*TransferConfigOwnership)(nil),
		},
		{
			Name: "update_bin_step_config", Type: (*UpdateBinStepConfig)(nil),
		},
		{
			Name: "update_pair_static_fee_parameters", Type: (*UpdatePairStaticFeeParameters)(nil),
		},
		{
			Name: "update_quote_asset_badge", Type: (*UpdateQuoteAssetBadge)(nil),
		},
		{
			Name: "withdraw_protocol_fees", Type: (*WithdrawProtocolFees)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
