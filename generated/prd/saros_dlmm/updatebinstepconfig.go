// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateBinStepConfig is the `update_bin_step_config` instruction.
type UpdateBinStepConfig struct {
	Status        *ConfigStatus
	Availability  *ConfigAvailability
	FeeParameters *StaticFeeParameters

	// [0] = [] liquidity_book_config
	//
	// [1] = [WRITE] bin_step_config
	//
	// [2] = [SIGNER] preset_authority
	//
	// [3] = [] event_authority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateBinStepConfigInstructionBuilder creates a new `UpdateBinStepConfig` instruction builder.
func NewUpdateBinStepConfigInstructionBuilder() *UpdateBinStepConfig {
	nd := &UpdateBinStepConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetStatus sets the "status" parameter.
func (inst *UpdateBinStepConfig) SetStatus(status ConfigStatus) *UpdateBinStepConfig {
	inst.Status = &status
	return inst
}

// SetAvailability sets the "availability" parameter.
func (inst *UpdateBinStepConfig) SetAvailability(availability ConfigAvailability) *UpdateBinStepConfig {
	inst.Availability = &availability
	return inst
}

// SetFeeParameters sets the "fee_parameters" parameter.
func (inst *UpdateBinStepConfig) SetFeeParameters(fee_parameters StaticFeeParameters) *UpdateBinStepConfig {
	inst.FeeParameters = &fee_parameters
	return inst
}

// SetLiquidityBookConfigAccount sets the "liquidity_book_config" account.
func (inst *UpdateBinStepConfig) SetLiquidityBookConfigAccount(liquidityBookConfig ag_solanago.PublicKey) *UpdateBinStepConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(liquidityBookConfig)
	return inst
}

// GetLiquidityBookConfigAccount gets the "liquidity_book_config" account.
func (inst *UpdateBinStepConfig) GetLiquidityBookConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBinStepConfigAccount sets the "bin_step_config" account.
func (inst *UpdateBinStepConfig) SetBinStepConfigAccount(binStepConfig ag_solanago.PublicKey) *UpdateBinStepConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(binStepConfig).WRITE()
	return inst
}

// GetBinStepConfigAccount gets the "bin_step_config" account.
func (inst *UpdateBinStepConfig) GetBinStepConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPresetAuthorityAccount sets the "preset_authority" account.
func (inst *UpdateBinStepConfig) SetPresetAuthorityAccount(presetAuthority ag_solanago.PublicKey) *UpdateBinStepConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(presetAuthority).SIGNER()
	return inst
}

// GetPresetAuthorityAccount gets the "preset_authority" account.
func (inst *UpdateBinStepConfig) GetPresetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *UpdateBinStepConfig) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *UpdateBinStepConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *UpdateBinStepConfig) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *UpdateBinStepConfig) SetProgramAccount(program ag_solanago.PublicKey) *UpdateBinStepConfig {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *UpdateBinStepConfig) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *UpdateBinStepConfig) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *UpdateBinStepConfig) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *UpdateBinStepConfig {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *UpdateBinStepConfig) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst UpdateBinStepConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateBinStepConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateBinStepConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateBinStepConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Status == nil {
			return errors.New("status parameter is not set")
		}
		if inst.Availability == nil {
			return errors.New("availability parameter is not set")
		}
		if inst.FeeParameters == nil {
			return errors.New("feeParameters parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LiquidityBookConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.BinStepConfig is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PresetAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *UpdateBinStepConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateBinStepConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Status", *inst.Status))
						paramsBranch.Child(ag_format.Param("  Availability", *inst.Availability))
						paramsBranch.Child(ag_format.Param(" FeeParameters", *inst.FeeParameters))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("liquidity_book_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      bin_step_config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     preset_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      event_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj UpdateBinStepConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Availability` param:
	err = encoder.Encode(obj.Availability)
	if err != nil {
		return err
	}
	// Serialize `FeeParameters` param:
	err = encoder.Encode(obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateBinStepConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Availability`:
	err = decoder.Decode(&obj.Availability)
	if err != nil {
		return err
	}
	// Deserialize `FeeParameters`:
	err = decoder.Decode(&obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateBinStepConfigInstruction declares a new UpdateBinStepConfig instruction with the provided parameters and accounts.
func NewUpdateBinStepConfigInstruction(
	// Parameters:
	status ConfigStatus,
	availability ConfigAvailability,
	fee_parameters StaticFeeParameters,
	// Accounts:
	liquidityBookConfig ag_solanago.PublicKey,
	binStepConfig ag_solanago.PublicKey,
	presetAuthority ag_solanago.PublicKey) *UpdateBinStepConfig {
	return NewUpdateBinStepConfigInstructionBuilder().
		SetStatus(status).
		SetAvailability(availability).
		SetFeeParameters(fee_parameters).
		SetLiquidityBookConfigAccount(liquidityBookConfig).
		SetBinStepConfigAccount(binStepConfig).
		SetPresetAuthorityAccount(presetAuthority)
}

// NewSimpleUpdateBinStepConfigInstruction declares a new UpdateBinStepConfig instruction with the provided parameters and accounts.
func NewSimpleUpdateBinStepConfigInstruction(
	// Parameters:
	status ConfigStatus,
	availability ConfigAvailability,
	fee_parameters StaticFeeParameters,
	// Accounts:
	liquidityBookConfig ag_solanago.PublicKey,
	binStepConfig ag_solanago.PublicKey,
	presetAuthority ag_solanago.PublicKey) *UpdateBinStepConfig {
	return NewUpdateBinStepConfigInstructionBuilder().
		SetStatus(status).
		SetAvailability(availability).
		SetFeeParameters(fee_parameters).
		SetLiquidityBookConfigAccount(liquidityBookConfig).
		SetBinStepConfigAccount(binStepConfig).
		SetPresetAuthorityAccount(presetAuthority)
}
