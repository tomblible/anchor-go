// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Swap is the `swap` instruction.
type Swap struct {
	Amount               *uint64
	OtherAmountThreshold *uint64
	SwapForY             *bool
	SwapType             *SwapType

	// [0] = [WRITE] pair
	//
	// [1] = [] token_mint_x
	//
	// [2] = [] token_mint_y
	//
	// [3] = [WRITE] bin_array_lower
	//
	// [4] = [WRITE] bin_array_upper
	//
	// [5] = [WRITE] token_vault_x
	//
	// [6] = [WRITE] token_vault_y
	//
	// [7] = [WRITE] user_vault_x
	//
	// [8] = [WRITE] user_vault_y
	//
	// [9] = [SIGNER] user
	//
	// [10] = [] token_program_x
	//
	// [11] = [] token_program_y
	//
	// [12] = [] memo_program
	//
	// [13] = [] event_authority
	//
	// [14] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapInstructionBuilder creates a new `Swap` instruction builder.
func NewSwapInstructionBuilder() *Swap {
	nd := &Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 15),
	}
	nd.AccountMetaSlice[12] = ag_solanago.Meta(MemoProgram)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[14] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *Swap) SetAmount(amount uint64) *Swap {
	inst.Amount = &amount
	return inst
}

// SetOtherAmountThreshold sets the "other_amount_threshold" parameter.
func (inst *Swap) SetOtherAmountThreshold(other_amount_threshold uint64) *Swap {
	inst.OtherAmountThreshold = &other_amount_threshold
	return inst
}

// SetSwapForY sets the "swap_for_y" parameter.
func (inst *Swap) SetSwapForY(swap_for_y bool) *Swap {
	inst.SwapForY = &swap_for_y
	return inst
}

// SetSwapType sets the "swap_type" parameter.
func (inst *Swap) SetSwapType(swap_type SwapType) *Swap {
	inst.SwapType = &swap_type
	return inst
}

// SetPairAccount sets the "pair" account.
func (inst *Swap) SetPairAccount(pair ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *Swap) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenMintXAccount sets the "token_mint_x" account.
func (inst *Swap) SetTokenMintXAccount(tokenMintX ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenMintX)
	return inst
}

// GetTokenMintXAccount gets the "token_mint_x" account.
func (inst *Swap) GetTokenMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintYAccount sets the "token_mint_y" account.
func (inst *Swap) SetTokenMintYAccount(tokenMintY ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMintY)
	return inst
}

// GetTokenMintYAccount gets the "token_mint_y" account.
func (inst *Swap) GetTokenMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBinArrayLowerAccount sets the "bin_array_lower" account.
func (inst *Swap) SetBinArrayLowerAccount(binArrayLower ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(binArrayLower).WRITE()
	return inst
}

// GetBinArrayLowerAccount gets the "bin_array_lower" account.
func (inst *Swap) GetBinArrayLowerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBinArrayUpperAccount sets the "bin_array_upper" account.
func (inst *Swap) SetBinArrayUpperAccount(binArrayUpper ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(binArrayUpper).WRITE()
	return inst
}

// GetBinArrayUpperAccount gets the "bin_array_upper" account.
func (inst *Swap) GetBinArrayUpperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenVaultXAccount sets the "token_vault_x" account.
func (inst *Swap) SetTokenVaultXAccount(tokenVaultX ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenVaultX).WRITE()
	return inst
}

// GetTokenVaultXAccount gets the "token_vault_x" account.
func (inst *Swap) GetTokenVaultXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenVaultYAccount sets the "token_vault_y" account.
func (inst *Swap) SetTokenVaultYAccount(tokenVaultY ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenVaultY).WRITE()
	return inst
}

// GetTokenVaultYAccount gets the "token_vault_y" account.
func (inst *Swap) GetTokenVaultYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUserVaultXAccount sets the "user_vault_x" account.
func (inst *Swap) SetUserVaultXAccount(userVaultX ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userVaultX).WRITE()
	return inst
}

// GetUserVaultXAccount gets the "user_vault_x" account.
func (inst *Swap) GetUserVaultXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetUserVaultYAccount sets the "user_vault_y" account.
func (inst *Swap) SetUserVaultYAccount(userVaultY ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(userVaultY).WRITE()
	return inst
}

// GetUserVaultYAccount gets the "user_vault_y" account.
func (inst *Swap) GetUserVaultYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetUserAccount sets the "user" account.
func (inst *Swap) SetUserAccount(user ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Swap) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramXAccount sets the "token_program_x" account.
func (inst *Swap) SetTokenProgramXAccount(tokenProgramX ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgramX)
	return inst
}

// GetTokenProgramXAccount gets the "token_program_x" account.
func (inst *Swap) GetTokenProgramXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramYAccount sets the "token_program_y" account.
func (inst *Swap) SetTokenProgramYAccount(tokenProgramY ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgramY)
	return inst
}

// GetTokenProgramYAccount gets the "token_program_y" account.
func (inst *Swap) GetTokenProgramYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetMemoProgramAccount sets the "memo_program" account.
func (inst *Swap) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memo_program" account.
func (inst *Swap) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *Swap) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *Swap) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetProgramAccount sets the "program" account.
func (inst *Swap) SetProgramAccount(program ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Swap) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

func (inst *Swap) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Swap) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Swap {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:15], metas...)
	return inst
}

func (inst *Swap) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[15:]
}

func (inst Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Swap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Swap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("amount parameter is not set")
		}
		if inst.OtherAmountThreshold == nil {
			return errors.New("otherAmountThreshold parameter is not set")
		}
		if inst.SwapForY == nil {
			return errors.New("swapForY parameter is not set")
		}
		if inst.SwapType == nil {
			return errors.New("swapType parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 15 {
		return errors.New("accounts slice has wrong length: expected 15 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenMintX is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMintY is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BinArrayLower is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BinArrayUpper is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenVaultX is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenVaultY is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserVaultX is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.UserVaultY is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgramX is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgramY is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("  OtherAmountThreshold", *inst.OtherAmountThreshold))
						paramsBranch.Child(ag_format.Param("              SwapForY", *inst.SwapForY))
						paramsBranch.Child(ag_format.Param("              SwapType", *inst.SwapType))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=15]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   token_mint_x", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   token_mint_y", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("bin_array_lower", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("bin_array_upper", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  token_vault_x", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  token_vault_y", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   user_vault_x", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   user_vault_y", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           user", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("token_program_x", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("token_program_y", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   memo_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(14)))
					})
				})
		})
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `OtherAmountThreshold` param:
	err = encoder.Encode(obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Serialize `SwapForY` param:
	err = encoder.Encode(obj.SwapForY)
	if err != nil {
		return err
	}
	// Serialize `SwapType` param:
	err = encoder.Encode(obj.SwapType)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `OtherAmountThreshold`:
	err = decoder.Decode(&obj.OtherAmountThreshold)
	if err != nil {
		return err
	}
	// Deserialize `SwapForY`:
	err = decoder.Decode(&obj.SwapForY)
	if err != nil {
		return err
	}
	// Deserialize `SwapType`:
	err = decoder.Decode(&obj.SwapType)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSwapInstruction(
	// Parameters:
	amount uint64,
	other_amount_threshold uint64,
	swap_for_y bool,
	swap_type SwapType,
	// Accounts:
	pair ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	binArrayLower ag_solanago.PublicKey,
	binArrayUpper ag_solanago.PublicKey,
	tokenVaultX ag_solanago.PublicKey,
	tokenVaultY ag_solanago.PublicKey,
	userVaultX ag_solanago.PublicKey,
	userVaultY ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgramX ag_solanago.PublicKey,
	tokenProgramY ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(other_amount_threshold).
		SetSwapForY(swap_for_y).
		SetSwapType(swap_type).
		SetPairAccount(pair).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetBinArrayLowerAccount(binArrayLower).
		SetBinArrayUpperAccount(binArrayUpper).
		SetTokenVaultXAccount(tokenVaultX).
		SetTokenVaultYAccount(tokenVaultY).
		SetUserVaultXAccount(userVaultX).
		SetUserVaultYAccount(userVaultY).
		SetUserAccount(user).
		SetTokenProgramXAccount(tokenProgramX).
		SetTokenProgramYAccount(tokenProgramY)
}

// NewSimpleSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSimpleSwapInstruction(
	// Parameters:
	amount uint64,
	other_amount_threshold uint64,
	swap_for_y bool,
	swap_type SwapType,
	// Accounts:
	pair ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	binArrayLower ag_solanago.PublicKey,
	binArrayUpper ag_solanago.PublicKey,
	tokenVaultX ag_solanago.PublicKey,
	tokenVaultY ag_solanago.PublicKey,
	userVaultX ag_solanago.PublicKey,
	userVaultY ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgramX ag_solanago.PublicKey,
	tokenProgramY ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetAmount(amount).
		SetOtherAmountThreshold(other_amount_threshold).
		SetSwapForY(swap_for_y).
		SetSwapType(swap_type).
		SetPairAccount(pair).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetBinArrayLowerAccount(binArrayLower).
		SetBinArrayUpperAccount(binArrayUpper).
		SetTokenVaultXAccount(tokenVaultX).
		SetTokenVaultYAccount(tokenVaultY).
		SetUserVaultXAccount(userVaultX).
		SetUserVaultYAccount(userVaultY).
		SetUserAccount(user).
		SetTokenProgramXAccount(tokenProgramX).
		SetTokenProgramYAccount(tokenProgramY)
}
