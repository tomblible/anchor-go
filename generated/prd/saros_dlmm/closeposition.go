// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClosePosition is the `close_position` instruction.
type ClosePosition struct {

	// [0] = [WRITE] pair
	//
	// [1] = [WRITE] position
	//
	// [2] = [WRITE] position_mint
	//
	// [3] = [WRITE] position_token_account
	//
	// [4] = [WRITE] bin_array_lower
	//
	// [5] = [WRITE] bin_array_upper
	//
	// [6] = [] token_mint_x
	//
	// [7] = [] token_mint_y
	//
	// [8] = [WRITE] token_vault_x
	//
	// [9] = [WRITE] token_vault_y
	//
	// [10] = [WRITE] user_vault_x
	//
	// [11] = [WRITE] user_vault_y
	//
	// [12] = [SIGNER] user
	//
	// [13] = [] token_program_x
	//
	// [14] = [] token_program_y
	//
	// [15] = [] position_token_program
	//
	// [16] = [] system_program
	//
	// [17] = [] memo_program
	//
	// [18] = [WRITE] hook
	//
	// [19] = [] hooks_program
	//
	// [20] = [] event_authority
	//
	// [21] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClosePositionInstructionBuilder creates a new `ClosePosition` instruction builder.
func NewClosePositionInstructionBuilder() *ClosePosition {
	nd := &ClosePosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 22),
	}
	nd.AccountMetaSlice[15] = ag_solanago.Meta(Token22Program)
	nd.AccountMetaSlice[16] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[17] = ag_solanago.Meta(MemoProgram)
	nd.AccountMetaSlice[20] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[21] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetPairAccount sets the "pair" account.
func (inst *ClosePosition) SetPairAccount(pair ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *ClosePosition) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccount sets the "position" account.
func (inst *ClosePosition) SetPositionAccount(position ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *ClosePosition) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionMintAccount sets the "position_mint" account.
func (inst *ClosePosition) SetPositionMintAccount(positionMint ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(positionMint).WRITE()
	return inst
}

// GetPositionMintAccount gets the "position_mint" account.
func (inst *ClosePosition) GetPositionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionTokenAccountAccount sets the "position_token_account" account.
func (inst *ClosePosition) SetPositionTokenAccountAccount(positionTokenAccount ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionTokenAccount).WRITE()
	return inst
}

// GetPositionTokenAccountAccount gets the "position_token_account" account.
func (inst *ClosePosition) GetPositionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBinArrayLowerAccount sets the "bin_array_lower" account.
func (inst *ClosePosition) SetBinArrayLowerAccount(binArrayLower ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(binArrayLower).WRITE()
	return inst
}

// GetBinArrayLowerAccount gets the "bin_array_lower" account.
func (inst *ClosePosition) GetBinArrayLowerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBinArrayUpperAccount sets the "bin_array_upper" account.
func (inst *ClosePosition) SetBinArrayUpperAccount(binArrayUpper ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(binArrayUpper).WRITE()
	return inst
}

// GetBinArrayUpperAccount gets the "bin_array_upper" account.
func (inst *ClosePosition) GetBinArrayUpperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenMintXAccount sets the "token_mint_x" account.
func (inst *ClosePosition) SetTokenMintXAccount(tokenMintX ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenMintX)
	return inst
}

// GetTokenMintXAccount gets the "token_mint_x" account.
func (inst *ClosePosition) GetTokenMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenMintYAccount sets the "token_mint_y" account.
func (inst *ClosePosition) SetTokenMintYAccount(tokenMintY ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenMintY)
	return inst
}

// GetTokenMintYAccount gets the "token_mint_y" account.
func (inst *ClosePosition) GetTokenMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenVaultXAccount sets the "token_vault_x" account.
func (inst *ClosePosition) SetTokenVaultXAccount(tokenVaultX ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenVaultX).WRITE()
	return inst
}

// GetTokenVaultXAccount gets the "token_vault_x" account.
func (inst *ClosePosition) GetTokenVaultXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenVaultYAccount sets the "token_vault_y" account.
func (inst *ClosePosition) SetTokenVaultYAccount(tokenVaultY ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenVaultY).WRITE()
	return inst
}

// GetTokenVaultYAccount gets the "token_vault_y" account.
func (inst *ClosePosition) GetTokenVaultYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetUserVaultXAccount sets the "user_vault_x" account.
func (inst *ClosePosition) SetUserVaultXAccount(userVaultX ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(userVaultX).WRITE()
	return inst
}

// GetUserVaultXAccount gets the "user_vault_x" account.
func (inst *ClosePosition) GetUserVaultXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserVaultYAccount sets the "user_vault_y" account.
func (inst *ClosePosition) SetUserVaultYAccount(userVaultY ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userVaultY).WRITE()
	return inst
}

// GetUserVaultYAccount gets the "user_vault_y" account.
func (inst *ClosePosition) GetUserVaultYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetUserAccount sets the "user" account.
func (inst *ClosePosition) SetUserAccount(user ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *ClosePosition) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenProgramXAccount sets the "token_program_x" account.
func (inst *ClosePosition) SetTokenProgramXAccount(tokenProgramX ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenProgramX)
	return inst
}

// GetTokenProgramXAccount gets the "token_program_x" account.
func (inst *ClosePosition) GetTokenProgramXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenProgramYAccount sets the "token_program_y" account.
func (inst *ClosePosition) SetTokenProgramYAccount(tokenProgramY ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenProgramY)
	return inst
}

// GetTokenProgramYAccount gets the "token_program_y" account.
func (inst *ClosePosition) GetTokenProgramYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetPositionTokenProgramAccount sets the "position_token_program" account.
func (inst *ClosePosition) SetPositionTokenProgramAccount(positionTokenProgram ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(positionTokenProgram)
	return inst
}

// GetPositionTokenProgramAccount gets the "position_token_program" account.
func (inst *ClosePosition) GetPositionTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *ClosePosition) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *ClosePosition) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetMemoProgramAccount sets the "memo_program" account.
func (inst *ClosePosition) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memo_program" account.
func (inst *ClosePosition) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetHookAccount sets the "hook" account.
func (inst *ClosePosition) SetHookAccount(hook ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(hook).WRITE()
	return inst
}

// GetHookAccount gets the "hook" account (optional).
func (inst *ClosePosition) GetHookAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

// SetHooksProgramAccount sets the "hooks_program" account.
func (inst *ClosePosition) SetHooksProgramAccount(hooksProgram ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[19] = ag_solanago.Meta(hooksProgram)
	return inst
}

// GetHooksProgramAccount gets the "hooks_program" account (optional).
func (inst *ClosePosition) GetHooksProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(19)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *ClosePosition) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[20] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *ClosePosition) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(20)
}

// SetProgramAccount sets the "program" account.
func (inst *ClosePosition) SetProgramAccount(program ag_solanago.PublicKey) *ClosePosition {
	inst.AccountMetaSlice[21] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *ClosePosition) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(21)
}

func (inst *ClosePosition) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *ClosePosition) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *ClosePosition {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:22], metas...)
	return inst
}

func (inst *ClosePosition) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[22:]
}

func (inst ClosePosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClosePosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClosePosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClosePosition) Validate() error {
	if len(inst.AccountMetaSlice) < 22 {
		return errors.New("accounts slice has wrong length: expected 22 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PositionMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BinArrayLower is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BinArrayUpper is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenMintX is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenMintY is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenVaultX is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenVaultY is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.UserVaultX is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserVaultY is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenProgramX is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenProgramY is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.PositionTokenProgram is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}

		// [18] = Hook is optional

		// [19] = HooksProgram is optional

		if inst.AccountMetaSlice[20] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[21] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *ClosePosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClosePosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=22]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  pair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         position_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       position_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       bin_array_lower", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       bin_array_upper", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          token_mint_x", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          token_mint_y", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         token_vault_x", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("         token_vault_y", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          user_vault_x", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("          user_vault_y", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                  user", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("       token_program_x", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("       token_program_y", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("position_token_program", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("        system_program", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("          memo_program", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("                  hook", inst.AccountMetaSlice.Get(18)))
						accountsBranch.Child(ag_format.Meta("         hooks_program", inst.AccountMetaSlice.Get(19)))
						accountsBranch.Child(ag_format.Meta("       event_authority", inst.AccountMetaSlice.Get(20)))
						accountsBranch.Child(ag_format.Meta("               program", inst.AccountMetaSlice.Get(21)))
					})
				})
		})
}

func (obj ClosePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClosePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClosePositionInstruction declares a new ClosePosition instruction with the provided parameters and accounts.
func NewClosePositionInstruction(
	// Accounts:
	pair ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionMint ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	binArrayLower ag_solanago.PublicKey,
	binArrayUpper ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	tokenVaultX ag_solanago.PublicKey,
	tokenVaultY ag_solanago.PublicKey,
	userVaultX ag_solanago.PublicKey,
	userVaultY ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgramX ag_solanago.PublicKey,
	tokenProgramY ag_solanago.PublicKey,
	hook ag_solanago.PublicKey,
	hooksProgram ag_solanago.PublicKey) *ClosePosition {
	return NewClosePositionInstructionBuilder().
		SetPairAccount(pair).
		SetPositionAccount(position).
		SetPositionMintAccount(positionMint).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetBinArrayLowerAccount(binArrayLower).
		SetBinArrayUpperAccount(binArrayUpper).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetTokenVaultXAccount(tokenVaultX).
		SetTokenVaultYAccount(tokenVaultY).
		SetUserVaultXAccount(userVaultX).
		SetUserVaultYAccount(userVaultY).
		SetUserAccount(user).
		SetTokenProgramXAccount(tokenProgramX).
		SetTokenProgramYAccount(tokenProgramY).
		SetHookAccount(hook).
		SetHooksProgramAccount(hooksProgram)
}

// NewSimpleClosePositionInstruction declares a new ClosePosition instruction with the provided parameters and accounts.
func NewSimpleClosePositionInstruction(
	// Accounts:
	pair ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionMint ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	binArrayLower ag_solanago.PublicKey,
	binArrayUpper ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	tokenVaultX ag_solanago.PublicKey,
	tokenVaultY ag_solanago.PublicKey,
	userVaultX ag_solanago.PublicKey,
	userVaultY ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	tokenProgramX ag_solanago.PublicKey,
	tokenProgramY ag_solanago.PublicKey,
	hook ag_solanago.PublicKey,
	hooksProgram ag_solanago.PublicKey) *ClosePosition {
	return NewClosePositionInstructionBuilder().
		SetPairAccount(pair).
		SetPositionAccount(position).
		SetPositionMintAccount(positionMint).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetBinArrayLowerAccount(binArrayLower).
		SetBinArrayUpperAccount(binArrayUpper).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetTokenVaultXAccount(tokenVaultX).
		SetTokenVaultYAccount(tokenVaultY).
		SetUserVaultXAccount(userVaultX).
		SetUserVaultYAccount(userVaultY).
		SetUserAccount(user).
		SetTokenProgramXAccount(tokenProgramX).
		SetTokenProgramYAccount(tokenProgramY).
		SetHookAccount(hook).
		SetHooksProgramAccount(hooksProgram)
}
