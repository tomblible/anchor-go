// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Bin struct {
	TotalSupply ag_binary.Uint128
	ReserveX    uint64
	ReserveY    uint64
}

func (obj Bin) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalSupply` param:
	err = encoder.Encode(obj.TotalSupply)
	if err != nil {
		return err
	}
	// Serialize `ReserveX` param:
	err = encoder.Encode(obj.ReserveX)
	if err != nil {
		return err
	}
	// Serialize `ReserveY` param:
	err = encoder.Encode(obj.ReserveY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Bin) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalSupply`:
	err = decoder.Decode(&obj.TotalSupply)
	if err != nil {
		return err
	}
	// Deserialize `ReserveX`:
	err = decoder.Decode(&obj.ReserveX)
	if err != nil {
		return err
	}
	// Deserialize `ReserveY`:
	err = decoder.Decode(&obj.ReserveY)
	if err != nil {
		return err
	}
	return nil
}

type BinArray struct {
	Pair  ag_solanago.PublicKey
	Bins  [256]Bin
	Index uint32
	Space [12]uint8
}

func (obj BinArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `Bins` param:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Space` param:
	err = encoder.Encode(obj.Space)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Space`:
	err = decoder.Decode(&obj.Space)
	if err != nil {
		return err
	}
	return nil
}

type BinArrayInitializationEvent struct {
	Pair  ag_solanago.PublicKey
	Index uint32
}

func (obj BinArrayInitializationEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinArrayInitializationEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

type BinLiquidityDistribution struct {
	RelativeBinId int32
	DistributionX uint16
	DistributionY uint16
}

func (obj BinLiquidityDistribution) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RelativeBinId` param:
	err = encoder.Encode(obj.RelativeBinId)
	if err != nil {
		return err
	}
	// Serialize `DistributionX` param:
	err = encoder.Encode(obj.DistributionX)
	if err != nil {
		return err
	}
	// Serialize `DistributionY` param:
	err = encoder.Encode(obj.DistributionY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinLiquidityDistribution) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RelativeBinId`:
	err = decoder.Decode(&obj.RelativeBinId)
	if err != nil {
		return err
	}
	// Deserialize `DistributionX`:
	err = decoder.Decode(&obj.DistributionX)
	if err != nil {
		return err
	}
	// Deserialize `DistributionY`:
	err = decoder.Decode(&obj.DistributionY)
	if err != nil {
		return err
	}
	return nil
}

type BinStepConfig struct {
	Bump                uint8
	LiquidityBookConfig ag_solanago.PublicKey
	BinStep             uint8
	Status              ConfigStatus
	Availability        ConfigAvailability
	FeeParameters       StaticFeeParameters
}

func (obj BinStepConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `LiquidityBookConfig` param:
	err = encoder.Encode(obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Availability` param:
	err = encoder.Encode(obj.Availability)
	if err != nil {
		return err
	}
	// Serialize `FeeParameters` param:
	err = encoder.Encode(obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinStepConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityBookConfig`:
	err = decoder.Decode(&obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Availability`:
	err = decoder.Decode(&obj.Availability)
	if err != nil {
		return err
	}
	// Deserialize `FeeParameters`:
	err = decoder.Decode(&obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

type BinStepConfigInitializationEvent struct {
	LiquidityBookConfig ag_solanago.PublicKey
	BinStepConfig       ag_solanago.PublicKey
	BinStep             uint8
	FeeParameters       StaticFeeParameters
}

func (obj BinStepConfigInitializationEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LiquidityBookConfig` param:
	err = encoder.Encode(obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Serialize `BinStepConfig` param:
	err = encoder.Encode(obj.BinStepConfig)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `FeeParameters` param:
	err = encoder.Encode(obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinStepConfigInitializationEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LiquidityBookConfig`:
	err = decoder.Decode(&obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Deserialize `BinStepConfig`:
	err = decoder.Decode(&obj.BinStepConfig)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `FeeParameters`:
	err = decoder.Decode(&obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

type BinStepConfigUpdateEvent struct {
	BinStepConfig ag_solanago.PublicKey
	Status        ConfigStatus
	Availability  ConfigAvailability
	FeeParameters StaticFeeParameters
}

func (obj BinStepConfigUpdateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinStepConfig` param:
	err = encoder.Encode(obj.BinStepConfig)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Availability` param:
	err = encoder.Encode(obj.Availability)
	if err != nil {
		return err
	}
	// Serialize `FeeParameters` param:
	err = encoder.Encode(obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinStepConfigUpdateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinStepConfig`:
	err = decoder.Decode(&obj.BinStepConfig)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Availability`:
	err = decoder.Decode(&obj.Availability)
	if err != nil {
		return err
	}
	// Deserialize `FeeParameters`:
	err = decoder.Decode(&obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

type BinSwapEvent struct {
	Pair                  ag_solanago.PublicKey
	SwapForY              bool
	ProtocolFee           uint64
	BinId                 uint32
	AmountIn              uint64
	AmountOut             uint64
	VolatilityAccumulator uint32
	Fee                   uint64
}

func (obj BinSwapEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `SwapForY` param:
	err = encoder.Encode(obj.SwapForY)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `AmountOut` param:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return err
	}
	// Serialize `VolatilityAccumulator` param:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinSwapEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `SwapForY`:
	err = decoder.Decode(&obj.SwapForY)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	return nil
}

type CompositionFeesEvent struct {
	Pair             ag_solanago.PublicKey
	ActiveId         uint32
	CompositionFeesX uint64
	CompositionFeesY uint64
	ProtocolFeesX    uint64
	ProtocolFeesY    uint64
}

func (obj CompositionFeesEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `CompositionFeesX` param:
	err = encoder.Encode(obj.CompositionFeesX)
	if err != nil {
		return err
	}
	// Serialize `CompositionFeesY` param:
	err = encoder.Encode(obj.CompositionFeesY)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesX` param:
	err = encoder.Encode(obj.ProtocolFeesX)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesY` param:
	err = encoder.Encode(obj.ProtocolFeesY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CompositionFeesEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `CompositionFeesX`:
	err = decoder.Decode(&obj.CompositionFeesX)
	if err != nil {
		return err
	}
	// Deserialize `CompositionFeesY`:
	err = decoder.Decode(&obj.CompositionFeesY)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesX`:
	err = decoder.Decode(&obj.ProtocolFeesX)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesY`:
	err = decoder.Decode(&obj.ProtocolFeesY)
	if err != nil {
		return err
	}
	return nil
}

type ConfigAvailability ag_binary.BorshEnum

const (
	ConfigAvailabilityClosed ConfigAvailability = iota
	ConfigAvailabilityOpen
)

func (value ConfigAvailability) String() string {
	switch value {
	case ConfigAvailabilityClosed:
		return "Closed"
	case ConfigAvailabilityOpen:
		return "Open"
	default:
		return ""
	}
}

type ConfigStatus ag_binary.BorshEnum

const (
	ConfigStatusInactive ConfigStatus = iota
	ConfigStatusActive
)

func (value ConfigStatus) String() string {
	switch value {
	case ConfigStatusInactive:
		return "Inactive"
	case ConfigStatusActive:
		return "Active"
	default:
		return ""
	}
}

type DynamicFeeParameters struct {
	TimeLastUpdated       uint64
	VolatilityAccumulator uint32
	VolatilityReference   uint32
	IdReference           uint32
	Space                 [4]uint8
}

func (obj DynamicFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TimeLastUpdated` param:
	err = encoder.Encode(obj.TimeLastUpdated)
	if err != nil {
		return err
	}
	// Serialize `VolatilityAccumulator` param:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VolatilityReference` param:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return err
	}
	// Serialize `IdReference` param:
	err = encoder.Encode(obj.IdReference)
	if err != nil {
		return err
	}
	// Serialize `Space` param:
	err = encoder.Encode(obj.Space)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TimeLastUpdated`:
	err = decoder.Decode(&obj.TimeLastUpdated)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return err
	}
	// Deserialize `IdReference`:
	err = decoder.Decode(&obj.IdReference)
	if err != nil {
		return err
	}
	// Deserialize `Space`:
	err = decoder.Decode(&obj.Space)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityBookConfig struct {
	PresetAuthority        ag_solanago.PublicKey
	PendingPresetAuthority *ag_solanago.PublicKey `bin:"optional"`
}

func (obj LiquidityBookConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PresetAuthority` param:
	err = encoder.Encode(obj.PresetAuthority)
	if err != nil {
		return err
	}
	// Serialize `PendingPresetAuthority` param (optional):
	{
		if obj.PendingPresetAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.PendingPresetAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *LiquidityBookConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PresetAuthority`:
	err = decoder.Decode(&obj.PresetAuthority)
	if err != nil {
		return err
	}
	// Deserialize `PendingPresetAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.PendingPresetAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type LiquidityBookConfigInitializationEvent struct {
	Config          ag_solanago.PublicKey
	PresetAuthority ag_solanago.PublicKey
}

func (obj LiquidityBookConfigInitializationEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `PresetAuthority` param:
	err = encoder.Encode(obj.PresetAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityBookConfigInitializationEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `PresetAuthority`:
	err = decoder.Decode(&obj.PresetAuthority)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityBookConfigTransferOwnershipEvent struct {
	NewAuthority ag_solanago.PublicKey
}

func (obj LiquidityBookConfigTransferOwnershipEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewAuthority` param:
	err = encoder.Encode(obj.NewAuthority)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityBookConfigTransferOwnershipEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewAuthority`:
	err = decoder.Decode(&obj.NewAuthority)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityBookConfigTransferOwnershipInitEvent struct {
	NewPendingAuthority *ag_solanago.PublicKey `bin:"optional"`
}

func (obj LiquidityBookConfigTransferOwnershipInitEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewPendingAuthority` param (optional):
	{
		if obj.NewPendingAuthority == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.NewPendingAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *LiquidityBookConfigTransferOwnershipInitEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewPendingAuthority` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.NewPendingAuthority)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Pair struct {
	Bump                 [1]uint8
	LiquidityBookConfig  ag_solanago.PublicKey
	BinStep              uint8
	BinStepSeed          [1]uint8
	TokenMintX           ag_solanago.PublicKey
	TokenMintY           ag_solanago.PublicKey
	StaticFeeParameters  StaticFeeParameters
	ActiveId             uint32
	DynamicFeeParameters DynamicFeeParameters
	ProtocolFeesX        uint64
	ProtocolFeesY        uint64
	Hook                 *ag_solanago.PublicKey `bin:"optional"`
}

func (obj Pair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `LiquidityBookConfig` param:
	err = encoder.Encode(obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BinStepSeed` param:
	err = encoder.Encode(obj.BinStepSeed)
	if err != nil {
		return err
	}
	// Serialize `TokenMintX` param:
	err = encoder.Encode(obj.TokenMintX)
	if err != nil {
		return err
	}
	// Serialize `TokenMintY` param:
	err = encoder.Encode(obj.TokenMintY)
	if err != nil {
		return err
	}
	// Serialize `StaticFeeParameters` param:
	err = encoder.Encode(obj.StaticFeeParameters)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `DynamicFeeParameters` param:
	err = encoder.Encode(obj.DynamicFeeParameters)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesX` param:
	err = encoder.Encode(obj.ProtocolFeesX)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesY` param:
	err = encoder.Encode(obj.ProtocolFeesY)
	if err != nil {
		return err
	}
	// Serialize `Hook` param (optional):
	{
		if obj.Hook == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Hook)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Pair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityBookConfig`:
	err = decoder.Decode(&obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BinStepSeed`:
	err = decoder.Decode(&obj.BinStepSeed)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintX`:
	err = decoder.Decode(&obj.TokenMintX)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintY`:
	err = decoder.Decode(&obj.TokenMintY)
	if err != nil {
		return err
	}
	// Deserialize `StaticFeeParameters`:
	err = decoder.Decode(&obj.StaticFeeParameters)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `DynamicFeeParameters`:
	err = decoder.Decode(&obj.DynamicFeeParameters)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesX`:
	err = decoder.Decode(&obj.ProtocolFeesX)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesY`:
	err = decoder.Decode(&obj.ProtocolFeesY)
	if err != nil {
		return err
	}
	// Deserialize `Hook` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Hook)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type PairInitializationEvent struct {
	Pair          ag_solanago.PublicKey
	TokenMintX    ag_solanago.PublicKey
	TokenMintY    ag_solanago.PublicKey
	BinStepConfig ag_solanago.PublicKey
	ActiveId      uint32
}

func (obj PairInitializationEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `TokenMintX` param:
	err = encoder.Encode(obj.TokenMintX)
	if err != nil {
		return err
	}
	// Serialize `TokenMintY` param:
	err = encoder.Encode(obj.TokenMintY)
	if err != nil {
		return err
	}
	// Serialize `BinStepConfig` param:
	err = encoder.Encode(obj.BinStepConfig)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PairInitializationEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintX`:
	err = decoder.Decode(&obj.TokenMintX)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintY`:
	err = decoder.Decode(&obj.TokenMintY)
	if err != nil {
		return err
	}
	// Deserialize `BinStepConfig`:
	err = decoder.Decode(&obj.BinStepConfig)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	return nil
}

type PairStaticFeeParametersUpdateEvent struct {
	Pair          ag_solanago.PublicKey
	FeeParameters StaticFeeParameters
}

func (obj PairStaticFeeParametersUpdateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `FeeParameters` param:
	err = encoder.Encode(obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PairStaticFeeParametersUpdateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `FeeParameters`:
	err = decoder.Decode(&obj.FeeParameters)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	Pair            ag_solanago.PublicKey
	PositionMint    ag_solanago.PublicKey
	LiquidityShares [64]ag_binary.Uint128
	LowerBinId      uint32
	UpperBinId      uint32
	Space           [8]uint8
}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `PositionMint` param:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return err
	}
	// Serialize `LiquidityShares` param:
	err = encoder.Encode(obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `UpperBinId` param:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return err
	}
	// Serialize `Space` param:
	err = encoder.Encode(obj.Space)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityShares`:
	err = decoder.Decode(&obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return err
	}
	// Deserialize `Space`:
	err = decoder.Decode(&obj.Space)
	if err != nil {
		return err
	}
	return nil
}

type PositionCreationEvent struct {
	Pair         ag_solanago.PublicKey
	Position     ag_solanago.PublicKey
	PositionMint ag_solanago.PublicKey
	LowerBinId   uint32
	UpperBinId   uint32
}

func (obj PositionCreationEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `PositionMint` param:
	err = encoder.Encode(obj.PositionMint)
	if err != nil {
		return err
	}
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `UpperBinId` param:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionCreationEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `PositionMint`:
	err = decoder.Decode(&obj.PositionMint)
	if err != nil {
		return err
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return err
	}
	return nil
}

type PositionDecreaseEvent struct {
	Pair            ag_solanago.PublicKey
	Position        ag_solanago.PublicKey
	BinIds          []uint32
	AmountsX        []uint64
	AmountsY        []uint64
	LiquidityBurned []ag_binary.Uint128
}

func (obj PositionDecreaseEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `BinIds` param:
	err = encoder.Encode(obj.BinIds)
	if err != nil {
		return err
	}
	// Serialize `AmountsX` param:
	err = encoder.Encode(obj.AmountsX)
	if err != nil {
		return err
	}
	// Serialize `AmountsY` param:
	err = encoder.Encode(obj.AmountsY)
	if err != nil {
		return err
	}
	// Serialize `LiquidityBurned` param:
	err = encoder.Encode(obj.LiquidityBurned)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionDecreaseEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `BinIds`:
	err = decoder.Decode(&obj.BinIds)
	if err != nil {
		return err
	}
	// Deserialize `AmountsX`:
	err = decoder.Decode(&obj.AmountsX)
	if err != nil {
		return err
	}
	// Deserialize `AmountsY`:
	err = decoder.Decode(&obj.AmountsY)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityBurned`:
	err = decoder.Decode(&obj.LiquidityBurned)
	if err != nil {
		return err
	}
	return nil
}

type PositionIncreaseEvent struct {
	Pair            ag_solanago.PublicKey
	Position        ag_solanago.PublicKey
	BinIds          []uint32
	AmountsX        []uint64
	AmountsY        []uint64
	LiquidityMinted []ag_binary.Uint128
}

func (obj PositionIncreaseEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `BinIds` param:
	err = encoder.Encode(obj.BinIds)
	if err != nil {
		return err
	}
	// Serialize `AmountsX` param:
	err = encoder.Encode(obj.AmountsX)
	if err != nil {
		return err
	}
	// Serialize `AmountsY` param:
	err = encoder.Encode(obj.AmountsY)
	if err != nil {
		return err
	}
	// Serialize `LiquidityMinted` param:
	err = encoder.Encode(obj.LiquidityMinted)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionIncreaseEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `BinIds`:
	err = decoder.Decode(&obj.BinIds)
	if err != nil {
		return err
	}
	// Deserialize `AmountsX`:
	err = decoder.Decode(&obj.AmountsX)
	if err != nil {
		return err
	}
	// Deserialize `AmountsY`:
	err = decoder.Decode(&obj.AmountsY)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityMinted`:
	err = decoder.Decode(&obj.LiquidityMinted)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolFeesCollectionEvent struct {
	Pair          ag_solanago.PublicKey
	ProtocolFeesX uint64
	ProtocolFeesY uint64
}

func (obj ProtocolFeesCollectionEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pair` param:
	err = encoder.Encode(obj.Pair)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesX` param:
	err = encoder.Encode(obj.ProtocolFeesX)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFeesY` param:
	err = encoder.Encode(obj.ProtocolFeesY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolFeesCollectionEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pair`:
	err = decoder.Decode(&obj.Pair)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesX`:
	err = decoder.Decode(&obj.ProtocolFeesX)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFeesY`:
	err = decoder.Decode(&obj.ProtocolFeesY)
	if err != nil {
		return err
	}
	return nil
}

type QuoteAssetBadge struct {
	Bump   uint8
	Status QuoteAssetBadgeStatus
}

func (obj QuoteAssetBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *QuoteAssetBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

type QuoteAssetBadgeInitializationEvent struct {
	LiquidityBookConfig ag_solanago.PublicKey
	QuoteAssetBadge     ag_solanago.PublicKey
	TokenMint           ag_solanago.PublicKey
}

func (obj QuoteAssetBadgeInitializationEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LiquidityBookConfig` param:
	err = encoder.Encode(obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Serialize `QuoteAssetBadge` param:
	err = encoder.Encode(obj.QuoteAssetBadge)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *QuoteAssetBadgeInitializationEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LiquidityBookConfig`:
	err = decoder.Decode(&obj.LiquidityBookConfig)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAssetBadge`:
	err = decoder.Decode(&obj.QuoteAssetBadge)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

type QuoteAssetBadgeStatus ag_binary.BorshEnum

const (
	QuoteAssetBadgeStatusDisabled QuoteAssetBadgeStatus = iota
	QuoteAssetBadgeStatusEnabled
)

func (value QuoteAssetBadgeStatus) String() string {
	switch value {
	case QuoteAssetBadgeStatusDisabled:
		return "Disabled"
	case QuoteAssetBadgeStatusEnabled:
		return "Enabled"
	default:
		return ""
	}
}

type QuoteAssetBadgeUpdateEvent struct {
	QuoteAssetBadge ag_solanago.PublicKey
	Status          QuoteAssetBadgeStatus
}

func (obj QuoteAssetBadgeUpdateEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `QuoteAssetBadge` param:
	err = encoder.Encode(obj.QuoteAssetBadge)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *QuoteAssetBadgeUpdateEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `QuoteAssetBadge`:
	err = decoder.Decode(&obj.QuoteAssetBadge)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

type StaticFeeParameters struct {
	BaseFactor               uint16
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	VariableFeeControl       uint32
	MaxVolatilityAccumulator uint32
	ProtocolShare            uint16
	Space                    [2]uint8
}

func (obj StaticFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Serialize `Space` param:
	err = encoder.Encode(obj.Space)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StaticFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Deserialize `Space`:
	err = decoder.Decode(&obj.Space)
	if err != nil {
		return err
	}
	return nil
}

type SwapType ag_binary.BorshEnum

const (
	SwapTypeExactInput SwapType = iota
	SwapTypeExactOutput
)

func (value SwapType) String() string {
	switch value {
	case SwapTypeExactInput:
		return "ExactInput"
	case SwapTypeExactOutput:
		return "ExactOutput"
	default:
		return ""
	}
}
