// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawProtocolFees is the `withdraw_protocol_fees` instruction.
type WithdrawProtocolFees struct {

	// [0] = [] liquidity_book_config
	//
	// [1] = [WRITE] pair
	//
	// [2] = [] token_mint_x
	//
	// [3] = [] token_mint_y
	//
	// [4] = [WRITE] token_vault_x
	//
	// [5] = [WRITE] token_vault_y
	//
	// [6] = [WRITE] protocol_vault_x
	//
	// [7] = [WRITE] protocol_vault_y
	//
	// [8] = [] token_program_x
	//
	// [9] = [] token_program_y
	//
	// [10] = [SIGNER] preset_authority
	//
	// [11] = [] memo_program
	//
	// [12] = [] event_authority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawProtocolFeesInstructionBuilder creates a new `WithdrawProtocolFees` instruction builder.
func NewWithdrawProtocolFeesInstructionBuilder() *WithdrawProtocolFees {
	nd := &WithdrawProtocolFees{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	nd.AccountMetaSlice[11] = ag_solanago.Meta(MemoProgram)
	nd.AccountMetaSlice[12] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[13] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetLiquidityBookConfigAccount sets the "liquidity_book_config" account.
func (inst *WithdrawProtocolFees) SetLiquidityBookConfigAccount(liquidityBookConfig ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(liquidityBookConfig)
	return inst
}

// GetLiquidityBookConfigAccount gets the "liquidity_book_config" account.
func (inst *WithdrawProtocolFees) GetLiquidityBookConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPairAccount sets the "pair" account.
func (inst *WithdrawProtocolFees) SetPairAccount(pair ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pair).WRITE()
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *WithdrawProtocolFees) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintXAccount sets the "token_mint_x" account.
func (inst *WithdrawProtocolFees) SetTokenMintXAccount(tokenMintX ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMintX)
	return inst
}

// GetTokenMintXAccount gets the "token_mint_x" account.
func (inst *WithdrawProtocolFees) GetTokenMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenMintYAccount sets the "token_mint_y" account.
func (inst *WithdrawProtocolFees) SetTokenMintYAccount(tokenMintY ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenMintY)
	return inst
}

// GetTokenMintYAccount gets the "token_mint_y" account.
func (inst *WithdrawProtocolFees) GetTokenMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenVaultXAccount sets the "token_vault_x" account.
func (inst *WithdrawProtocolFees) SetTokenVaultXAccount(tokenVaultX ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenVaultX).WRITE()
	return inst
}

// GetTokenVaultXAccount gets the "token_vault_x" account.
func (inst *WithdrawProtocolFees) GetTokenVaultXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenVaultYAccount sets the "token_vault_y" account.
func (inst *WithdrawProtocolFees) SetTokenVaultYAccount(tokenVaultY ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenVaultY).WRITE()
	return inst
}

// GetTokenVaultYAccount gets the "token_vault_y" account.
func (inst *WithdrawProtocolFees) GetTokenVaultYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetProtocolVaultXAccount sets the "protocol_vault_x" account.
func (inst *WithdrawProtocolFees) SetProtocolVaultXAccount(protocolVaultX ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(protocolVaultX).WRITE()
	return inst
}

// GetProtocolVaultXAccount gets the "protocol_vault_x" account.
func (inst *WithdrawProtocolFees) GetProtocolVaultXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetProtocolVaultYAccount sets the "protocol_vault_y" account.
func (inst *WithdrawProtocolFees) SetProtocolVaultYAccount(protocolVaultY ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(protocolVaultY).WRITE()
	return inst
}

// GetProtocolVaultYAccount gets the "protocol_vault_y" account.
func (inst *WithdrawProtocolFees) GetProtocolVaultYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramXAccount sets the "token_program_x" account.
func (inst *WithdrawProtocolFees) SetTokenProgramXAccount(tokenProgramX ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgramX)
	return inst
}

// GetTokenProgramXAccount gets the "token_program_x" account.
func (inst *WithdrawProtocolFees) GetTokenProgramXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramYAccount sets the "token_program_y" account.
func (inst *WithdrawProtocolFees) SetTokenProgramYAccount(tokenProgramY ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgramY)
	return inst
}

// GetTokenProgramYAccount gets the "token_program_y" account.
func (inst *WithdrawProtocolFees) GetTokenProgramYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPresetAuthorityAccount sets the "preset_authority" account.
func (inst *WithdrawProtocolFees) SetPresetAuthorityAccount(presetAuthority ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(presetAuthority).SIGNER()
	return inst
}

// GetPresetAuthorityAccount gets the "preset_authority" account.
func (inst *WithdrawProtocolFees) GetPresetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMemoProgramAccount sets the "memo_program" account.
func (inst *WithdrawProtocolFees) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memo_program" account.
func (inst *WithdrawProtocolFees) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *WithdrawProtocolFees) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *WithdrawProtocolFees) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *WithdrawProtocolFees) SetProgramAccount(program ag_solanago.PublicKey) *WithdrawProtocolFees {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *WithdrawProtocolFees) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *WithdrawProtocolFees) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WithdrawProtocolFees) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WithdrawProtocolFees {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *WithdrawProtocolFees) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst WithdrawProtocolFees) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawProtocolFees,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawProtocolFees) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawProtocolFees) Validate() error {
	if len(inst.AccountMetaSlice) < 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LiquidityBookConfig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMintX is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenMintY is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenVaultX is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenVaultY is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ProtocolVaultX is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ProtocolVaultY is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgramX is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgramY is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.PresetAuthority is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *WithdrawProtocolFees) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawProtocolFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("liquidity_book_config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                 pair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         token_mint_x", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         token_mint_y", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        token_vault_x", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        token_vault_y", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     protocol_vault_x", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     protocol_vault_y", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      token_program_x", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("      token_program_y", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     preset_authority", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("         memo_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("      event_authority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("              program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj WithdrawProtocolFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawProtocolFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawProtocolFeesInstruction declares a new WithdrawProtocolFees instruction with the provided parameters and accounts.
func NewWithdrawProtocolFeesInstruction(
	// Accounts:
	liquidityBookConfig ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	tokenVaultX ag_solanago.PublicKey,
	tokenVaultY ag_solanago.PublicKey,
	protocolVaultX ag_solanago.PublicKey,
	protocolVaultY ag_solanago.PublicKey,
	tokenProgramX ag_solanago.PublicKey,
	tokenProgramY ag_solanago.PublicKey,
	presetAuthority ag_solanago.PublicKey) *WithdrawProtocolFees {
	return NewWithdrawProtocolFeesInstructionBuilder().
		SetLiquidityBookConfigAccount(liquidityBookConfig).
		SetPairAccount(pair).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetTokenVaultXAccount(tokenVaultX).
		SetTokenVaultYAccount(tokenVaultY).
		SetProtocolVaultXAccount(protocolVaultX).
		SetProtocolVaultYAccount(protocolVaultY).
		SetTokenProgramXAccount(tokenProgramX).
		SetTokenProgramYAccount(tokenProgramY).
		SetPresetAuthorityAccount(presetAuthority)
}

// NewSimpleWithdrawProtocolFeesInstruction declares a new WithdrawProtocolFees instruction with the provided parameters and accounts.
func NewSimpleWithdrawProtocolFeesInstruction(
	// Accounts:
	liquidityBookConfig ag_solanago.PublicKey,
	pair ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	tokenVaultX ag_solanago.PublicKey,
	tokenVaultY ag_solanago.PublicKey,
	protocolVaultX ag_solanago.PublicKey,
	protocolVaultY ag_solanago.PublicKey,
	tokenProgramX ag_solanago.PublicKey,
	tokenProgramY ag_solanago.PublicKey,
	presetAuthority ag_solanago.PublicKey) *WithdrawProtocolFees {
	return NewWithdrawProtocolFeesInstructionBuilder().
		SetLiquidityBookConfigAccount(liquidityBookConfig).
		SetPairAccount(pair).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetTokenVaultXAccount(tokenVaultX).
		SetTokenVaultYAccount(tokenVaultY).
		SetProtocolVaultXAccount(protocolVaultX).
		SetProtocolVaultYAccount(protocolVaultY).
		SetTokenProgramXAccount(tokenProgramX).
		SetTokenProgramYAccount(tokenProgramY).
		SetPresetAuthorityAccount(presetAuthority)
}
