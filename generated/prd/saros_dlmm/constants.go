// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"encoding/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

func FindQuoteAssetBadgeAddress(liquidityBookConfig ag_solanago.PublicKey, tokenMintY ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x71756f74655f61737365745f6261646765
	seeds = append(seeds, []byte{byte(0x71), byte(0x75), byte(0x6f), byte(0x74), byte(0x65), byte(0x5f), byte(0x61), byte(0x73), byte(0x73), byte(0x65), byte(0x74), byte(0x5f), byte(0x62), byte(0x61), byte(0x64), byte(0x67), byte(0x65)})
	// path: liquidityBookConfig
	seeds = append(seeds, liquidityBookConfig.Bytes())
	// path: tokenMintY
	seeds = append(seeds, tokenMintY.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindQuoteAssetBadgeAddress(liquidityBookConfig ag_solanago.PublicKey, tokenMintY ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindQuoteAssetBadgeAddress(liquidityBookConfig, tokenMintY)
	return
}

func FindPairAddress(liquidityBookConfig ag_solanago.PublicKey, tokenMintX ag_solanago.PublicKey, tokenMintY ag_solanago.PublicKey, binStepConfigBinStep uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x70616972
	seeds = append(seeds, []byte{byte(0x70), byte(0x61), byte(0x69), byte(0x72)})
	// path: liquidityBookConfig
	seeds = append(seeds, liquidityBookConfig.Bytes())
	// path: tokenMintX
	seeds = append(seeds, tokenMintX.Bytes())
	// path: tokenMintY
	seeds = append(seeds, tokenMintY.Bytes())
	// path: binStepConfigBinStep
	argBytes4 := []byte{byte(binStepConfigBinStep)}
	seeds = append(seeds, argBytes4)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPairAddress(liquidityBookConfig ag_solanago.PublicKey, tokenMintX ag_solanago.PublicKey, tokenMintY ag_solanago.PublicKey, binStepConfigBinStep uint8) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindPairAddress(liquidityBookConfig, tokenMintX, tokenMintY, binStepConfigBinStep)
	return
}

func FindPositionAddress(positionMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x706f736974696f6e
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x73), byte(0x69), byte(0x74), byte(0x69), byte(0x6f), byte(0x6e)})
	// path: positionMint
	seeds = append(seeds, positionMint.Bytes())

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindPositionAddress(positionMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindPositionAddress(positionMint)
	return
}

func FindBinArrayAddress(pair ag_solanago.PublicKey, index uint32) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x62696e5f6172726179
	seeds = append(seeds, []byte{byte(0x62), byte(0x69), byte(0x6e), byte(0x5f), byte(0x61), byte(0x72), byte(0x72), byte(0x61), byte(0x79)})
	// path: pair
	seeds = append(seeds, pair.Bytes())
	// path: index
	argBytes2 := make([]byte, 4)
	binary.LittleEndian.PutUint32(argBytes2, uint32(index))
	seeds = append(seeds, argBytes2)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBinArrayAddress(pair ag_solanago.PublicKey, index uint32) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindBinArrayAddress(pair, index)
	return
}

func FindBinStepConfigAddress(liquidityBookConfig ag_solanago.PublicKey, binStep uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: 0x62696e5f737465705f636f6e666967
	seeds = append(seeds, []byte{byte(0x62), byte(0x69), byte(0x6e), byte(0x5f), byte(0x73), byte(0x74), byte(0x65), byte(0x70), byte(0x5f), byte(0x63), byte(0x6f), byte(0x6e), byte(0x66), byte(0x69), byte(0x67)})
	// path: liquidityBookConfig
	seeds = append(seeds, liquidityBookConfig.Bytes())
	// path: binStep
	argBytes2 := []byte{byte(binStep)}
	seeds = append(seeds, argBytes2)

	pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	return
}

func MustFindBinStepConfigAddress(liquidityBookConfig ag_solanago.PublicKey, binStep uint8) (pda ag_solanago.PublicKey) {
	pda, _, _ = FindBinStepConfigAddress(liquidityBookConfig, binStep)
	return
}
