// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package saros_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreatePosition is the `create_position` instruction.
type CreatePosition struct {
	RelativeBinIdLeft  *int32
	RelativeBinInRight *int32

	// [0] = [] pair
	//
	// [1] = [WRITE] position
	//
	// [2] = [WRITE, SIGNER] position_mint
	//
	// [3] = [WRITE] position_token_account
	//
	// [4] = [WRITE, SIGNER] user
	//
	// [5] = [] system_program
	//
	// [6] = [] token_program
	//
	// [7] = [] associated_token_program
	//
	// [8] = [] event_authority
	//
	// [9] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreatePositionInstructionBuilder creates a new `CreatePosition` instruction builder.
func NewCreatePositionInstructionBuilder() *CreatePosition {
	nd := &CreatePosition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	nd.AccountMetaSlice[5] = ag_solanago.Meta(SystemProgram)
	nd.AccountMetaSlice[6] = ag_solanago.Meta(Token22Program)
	nd.AccountMetaSlice[7] = ag_solanago.Meta(AssociatedTokenProgram)
	nd.AccountMetaSlice[8] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[9] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetRelativeBinIdLeft sets the "relative_bin_id_left" parameter.
func (inst *CreatePosition) SetRelativeBinIdLeft(relative_bin_id_left int32) *CreatePosition {
	inst.RelativeBinIdLeft = &relative_bin_id_left
	return inst
}

// SetRelativeBinInRight sets the "relative_bin_in_right" parameter.
func (inst *CreatePosition) SetRelativeBinInRight(relative_bin_in_right int32) *CreatePosition {
	inst.RelativeBinInRight = &relative_bin_in_right
	return inst
}

// SetPairAccount sets the "pair" account.
func (inst *CreatePosition) SetPairAccount(pair ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pair)
	return inst
}

// GetPairAccount gets the "pair" account.
func (inst *CreatePosition) GetPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccount sets the "position" account.
func (inst *CreatePosition) SetPositionAccount(position ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *CreatePosition) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionMintAccount sets the "position_mint" account.
func (inst *CreatePosition) SetPositionMintAccount(positionMint ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(positionMint).WRITE().SIGNER()
	return inst
}

// GetPositionMintAccount gets the "position_mint" account.
func (inst *CreatePosition) GetPositionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPositionTokenAccountAccount sets the "position_token_account" account.
func (inst *CreatePosition) SetPositionTokenAccountAccount(positionTokenAccount ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(positionTokenAccount).WRITE()
	return inst
}

// GetPositionTokenAccountAccount gets the "position_token_account" account.
func (inst *CreatePosition) GetPositionTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserAccount sets the "user" account.
func (inst *CreatePosition) SetUserAccount(user ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *CreatePosition) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreatePosition) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreatePosition) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *CreatePosition) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *CreatePosition) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *CreatePosition) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *CreatePosition) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CreatePosition) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CreatePosition) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProgramAccount sets the "program" account.
func (inst *CreatePosition) SetProgramAccount(program ag_solanago.PublicKey) *CreatePosition {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CreatePosition) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst *CreatePosition) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreatePosition) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreatePosition {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:10], metas...)
	return inst
}

func (inst *CreatePosition) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10:]
}

func (inst CreatePosition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreatePosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreatePosition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreatePosition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RelativeBinIdLeft == nil {
			return errors.New("relativeBinIdLeft parameter is not set")
		}
		if inst.RelativeBinInRight == nil {
			return errors.New("relativeBinInRight parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 10 {
		return errors.New("accounts slice has wrong length: expected 10 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PositionMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.PositionTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CreatePosition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreatePosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    RelativeBinIdLeft", *inst.RelativeBinIdLeft))
						paramsBranch.Child(ag_format.Param("   RelativeBinInRight", *inst.RelativeBinInRight))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    pair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           position_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         position_token_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    user", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("         event_authority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                 program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj CreatePosition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RelativeBinIdLeft` param:
	err = encoder.Encode(obj.RelativeBinIdLeft)
	if err != nil {
		return err
	}
	// Serialize `RelativeBinInRight` param:
	err = encoder.Encode(obj.RelativeBinInRight)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreatePosition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RelativeBinIdLeft`:
	err = decoder.Decode(&obj.RelativeBinIdLeft)
	if err != nil {
		return err
	}
	// Deserialize `RelativeBinInRight`:
	err = decoder.Decode(&obj.RelativeBinInRight)
	if err != nil {
		return err
	}
	return nil
}

// NewCreatePositionInstruction declares a new CreatePosition instruction with the provided parameters and accounts.
func NewCreatePositionInstruction(
	// Parameters:
	relative_bin_id_left int32,
	relative_bin_in_right int32,
	// Accounts:
	pair ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionMint ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	user ag_solanago.PublicKey) *CreatePosition {
	return NewCreatePositionInstructionBuilder().
		SetRelativeBinIdLeft(relative_bin_id_left).
		SetRelativeBinInRight(relative_bin_in_right).
		SetPairAccount(pair).
		SetPositionAccount(position).
		SetPositionMintAccount(positionMint).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetUserAccount(user)
}

// NewSimpleCreatePositionInstruction declares a new CreatePosition instruction with the provided parameters and accounts.
func NewSimpleCreatePositionInstruction(
	// Parameters:
	relative_bin_id_left int32,
	relative_bin_in_right int32,
	// Accounts:
	pair ag_solanago.PublicKey,
	positionMint ag_solanago.PublicKey,
	positionTokenAccount ag_solanago.PublicKey,
	user ag_solanago.PublicKey) *CreatePosition {
	position := MustFindPositionAddress(positionMint)
	return NewCreatePositionInstructionBuilder().
		SetRelativeBinIdLeft(relative_bin_id_left).
		SetRelativeBinInRight(relative_bin_in_right).
		SetPairAccount(pair).
		SetPositionAccount(position).
		SetPositionMintAccount(positionMint).
		SetPositionTokenAccountAccount(positionTokenAccount).
		SetUserAccount(user)
}
