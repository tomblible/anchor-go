// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package pump_curve

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SyncUserVolumeAccumulator is the `sync_user_volume_accumulator` instruction.
type SyncUserVolumeAccumulator struct {

	// [0] = [] user
	//
	// [1] = [] global_volume_accumulator
	//
	// [2] = [WRITE] user_volume_accumulator
	//
	// [3] = [] event_authority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSyncUserVolumeAccumulatorInstructionBuilder creates a new `SyncUserVolumeAccumulator` instruction builder.
func NewSyncUserVolumeAccumulatorInstructionBuilder() *SyncUserVolumeAccumulator {
	nd := &SyncUserVolumeAccumulator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(GlobalVolumeAccumulatorPDA)
	nd.AccountMetaSlice[3] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetUserAccount sets the "user" account.
func (inst *SyncUserVolumeAccumulator) SetUserAccount(user ag_solanago.PublicKey) *SyncUserVolumeAccumulator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user)
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *SyncUserVolumeAccumulator) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalVolumeAccumulatorAccount sets the "global_volume_accumulator" account.
func (inst *SyncUserVolumeAccumulator) SetGlobalVolumeAccumulatorAccount(globalVolumeAccumulator ag_solanago.PublicKey) *SyncUserVolumeAccumulator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(globalVolumeAccumulator)
	return inst
}

// GetGlobalVolumeAccumulatorAccount gets the "global_volume_accumulator" account.
func (inst *SyncUserVolumeAccumulator) GetGlobalVolumeAccumulatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserVolumeAccumulatorAccount sets the "user_volume_accumulator" account.
func (inst *SyncUserVolumeAccumulator) SetUserVolumeAccumulatorAccount(userVolumeAccumulator ag_solanago.PublicKey) *SyncUserVolumeAccumulator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userVolumeAccumulator).WRITE()
	return inst
}

// GetUserVolumeAccumulatorAccount gets the "user_volume_accumulator" account.
func (inst *SyncUserVolumeAccumulator) GetUserVolumeAccumulatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *SyncUserVolumeAccumulator) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *SyncUserVolumeAccumulator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *SyncUserVolumeAccumulator) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *SyncUserVolumeAccumulator) SetProgramAccount(program ag_solanago.PublicKey) *SyncUserVolumeAccumulator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SyncUserVolumeAccumulator) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *SyncUserVolumeAccumulator) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SyncUserVolumeAccumulator) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SyncUserVolumeAccumulator {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *SyncUserVolumeAccumulator) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst SyncUserVolumeAccumulator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SyncUserVolumeAccumulator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SyncUserVolumeAccumulator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SyncUserVolumeAccumulator) Validate() error {
	if len(inst.AccountMetaSlice) < 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.GlobalVolumeAccumulator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserVolumeAccumulator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *SyncUserVolumeAccumulator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SyncUserVolumeAccumulator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                     user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("global_volume_accumulator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  user_volume_accumulator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          event_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                  program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj SyncUserVolumeAccumulator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SyncUserVolumeAccumulator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSyncUserVolumeAccumulatorInstruction declares a new SyncUserVolumeAccumulator instruction with the provided parameters and accounts.
func NewSyncUserVolumeAccumulatorInstruction(
	// Accounts:
	user ag_solanago.PublicKey,
	userVolumeAccumulator ag_solanago.PublicKey) *SyncUserVolumeAccumulator {
	return NewSyncUserVolumeAccumulatorInstructionBuilder().
		SetUserAccount(user).
		SetUserVolumeAccumulatorAccount(userVolumeAccumulator)
}

// NewSimpleSyncUserVolumeAccumulatorInstruction declares a new SyncUserVolumeAccumulator instruction with the provided parameters and accounts.
func NewSimpleSyncUserVolumeAccumulatorInstruction(
	// Accounts:
	user ag_solanago.PublicKey) *SyncUserVolumeAccumulator {
	userVolumeAccumulator := MustFindUserVolumeAccumulatorAddress(user)
	return NewSyncUserVolumeAccumulatorInstructionBuilder().
		SetUserAccount(user).
		SetUserVolumeAccumulatorAccount(userVolumeAccumulator)
}
