// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hrx

import ag_binary "github.com/gagliardetto/binary"

type CreateBondingCurveParams struct {
	Name      string
	Symbol    string
	Uri       string
	StartTime *int64 `bin:"optional"`
}

func (obj CreateBondingCurveParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Symbol` param:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return err
	}
	// Serialize `Uri` param:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param (optional):
	{
		if obj.StartTime == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.StartTime)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *CreateBondingCurveParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return err
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return err
	}
	// Deserialize `StartTime` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.StartTime)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type SwapParams struct {
	BaseIn        string
	ExactInAmount string
	MinOutAmount  string
}

func (obj SwapParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseIn` param:
	err = encoder.Encode(obj.BaseIn)
	if err != nil {
		return err
	}
	// Serialize `ExactInAmount` param:
	err = encoder.Encode(obj.ExactInAmount)
	if err != nil {
		return err
	}
	// Serialize `MinOutAmount` param:
	err = encoder.Encode(obj.MinOutAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseIn`:
	err = decoder.Decode(&obj.BaseIn)
	if err != nil {
		return err
	}
	// Deserialize `ExactInAmount`:
	err = decoder.Decode(&obj.ExactInAmount)
	if err != nil {
		return err
	}
	// Deserialize `MinOutAmount`:
	err = decoder.Decode(&obj.MinOutAmount)
	if err != nil {
		return err
	}
	return nil
}
