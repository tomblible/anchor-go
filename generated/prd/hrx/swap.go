// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hrx

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Swap is the `swap` instruction.
type Swap struct {
	Params *SwapParams

	// [0] = [WRITE, SIGNER] user
	//
	// [1] = [] global
	//
	// [2] = [WRITE] fee_receiver
	//
	// [3] = [] mint
	//
	// [4] = [WRITE] bonding_curve
	//
	// [5] = [WRITE] bonding_curve_token_account
	//
	// [6] = [WRITE] bonding_curve_sol_escrow
	//
	// [7] = [] user_token_account
	//
	// [8] = [] system_program
	//
	// [9] = [] token_program
	//
	// [10] = [] associated_token_program
	//
	// [11] = [] clock
	//
	// [12] = [] event_authority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSwapInstructionBuilder creates a new `Swap` instruction builder.
func NewSwapInstructionBuilder() *Swap {
	nd := &Swap{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	nd.AccountMetaSlice[13] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetParams sets the "params" parameter.
func (inst *Swap) SetParams(params SwapParams) *Swap {
	inst.Params = &params
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *Swap) SetUserAccount(user ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Swap) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGlobalAccount sets the "global" account.
func (inst *Swap) SetGlobalAccount(global ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(global)
	return inst
}

// GetGlobalAccount gets the "global" account.
func (inst *Swap) GetGlobalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFeeReceiverAccount sets the "fee_receiver" account.
func (inst *Swap) SetFeeReceiverAccount(feeReceiver ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(feeReceiver).WRITE()
	return inst
}

// GetFeeReceiverAccount gets the "fee_receiver" account.
func (inst *Swap) GetFeeReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *Swap) SetMintAccount(mint ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *Swap) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBondingCurveAccount sets the "bonding_curve" account.
func (inst *Swap) SetBondingCurveAccount(bondingCurve ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(bondingCurve).WRITE()
	return inst
}

// GetBondingCurveAccount gets the "bonding_curve" account.
func (inst *Swap) GetBondingCurveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBondingCurveTokenAccountAccount sets the "bonding_curve_token_account" account.
func (inst *Swap) SetBondingCurveTokenAccountAccount(bondingCurveTokenAccount ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bondingCurveTokenAccount).WRITE()
	return inst
}

// GetBondingCurveTokenAccountAccount gets the "bonding_curve_token_account" account.
func (inst *Swap) GetBondingCurveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBondingCurveSolEscrowAccount sets the "bonding_curve_sol_escrow" account.
func (inst *Swap) SetBondingCurveSolEscrowAccount(bondingCurveSolEscrow ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(bondingCurveSolEscrow).WRITE()
	return inst
}

// GetBondingCurveSolEscrowAccount gets the "bonding_curve_sol_escrow" account.
func (inst *Swap) GetBondingCurveSolEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUserTokenAccountAccount sets the "user_token_account" account.
func (inst *Swap) SetUserTokenAccountAccount(userTokenAccount ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userTokenAccount)
	return inst
}

// GetUserTokenAccountAccount gets the "user_token_account" account.
func (inst *Swap) GetUserTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *Swap) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *Swap) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *Swap) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *Swap) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *Swap) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *Swap) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetClockAccount sets the "clock" account.
func (inst *Swap) SetClockAccount(clock ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *Swap) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *Swap) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *Swap) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *Swap) SetProgramAccount(program ag_solanago.PublicKey) *Swap {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *Swap) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *Swap) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *Swap) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *Swap {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *Swap) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst Swap) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Swap,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Swap) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Swap) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Global is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FeeReceiver is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BondingCurve is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BondingCurveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BondingCurveSolEscrow is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *Swap) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Swap")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                    user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                  global", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            fee_receiver", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                    mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           bonding_curve", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    bonding_curve_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("bonding_curve_sol_escrow", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             user_token_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                   clock", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("         event_authority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                 program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSwapInstruction(
	// Parameters:
	params SwapParams,
	// Accounts:
	user ag_solanago.PublicKey,
	global ag_solanago.PublicKey,
	feeReceiver ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	bondingCurve ag_solanago.PublicKey,
	bondingCurveTokenAccount ag_solanago.PublicKey,
	bondingCurveSolEscrow ag_solanago.PublicKey,
	userTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetParams(params).
		SetUserAccount(user).
		SetGlobalAccount(global).
		SetFeeReceiverAccount(feeReceiver).
		SetMintAccount(mint).
		SetBondingCurveAccount(bondingCurve).
		SetBondingCurveTokenAccountAccount(bondingCurveTokenAccount).
		SetBondingCurveSolEscrowAccount(bondingCurveSolEscrow).
		SetUserTokenAccountAccount(userTokenAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetClockAccount(clock).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleSwapInstruction declares a new Swap instruction with the provided parameters and accounts.
func NewSimpleSwapInstruction(
	// Parameters:
	params SwapParams,
	// Accounts:
	user ag_solanago.PublicKey,
	global ag_solanago.PublicKey,
	feeReceiver ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	bondingCurve ag_solanago.PublicKey,
	bondingCurveTokenAccount ag_solanago.PublicKey,
	bondingCurveSolEscrow ag_solanago.PublicKey,
	userTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *Swap {
	return NewSwapInstructionBuilder().
		SetParams(params).
		SetUserAccount(user).
		SetGlobalAccount(global).
		SetFeeReceiverAccount(feeReceiver).
		SetMintAccount(mint).
		SetBondingCurveAccount(bondingCurve).
		SetBondingCurveTokenAccountAccount(bondingCurveTokenAccount).
		SetBondingCurveSolEscrowAccount(bondingCurveSolEscrow).
		SetUserTokenAccountAccount(userTokenAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetClockAccount(clock).
		SetEventAuthorityAccount(eventAuthority)
}
