// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package hrx

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddWl is the `add_wl` instruction.
type AddWl struct {
	Creator *ag_solanago.PublicKey

	// [0] = [WRITE] global
	//
	// [1] = [WRITE] whitelist
	//
	// [2] = [WRITE, SIGNER] admin
	//
	// [3] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddWlInstructionBuilder creates a new `AddWl` instruction builder.
func NewAddWlInstructionBuilder() *AddWl {
	nd := &AddWl{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetCreator sets the "creator" parameter.
func (inst *AddWl) SetCreator(creator ag_solanago.PublicKey) *AddWl {
	inst.Creator = &creator
	return inst
}

// SetGlobalAccount sets the "global" account.
func (inst *AddWl) SetGlobalAccount(global ag_solanago.PublicKey) *AddWl {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(global).WRITE()
	return inst
}

// GetGlobalAccount gets the "global" account.
func (inst *AddWl) GetGlobalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhitelistAccount sets the "whitelist" account.
func (inst *AddWl) SetWhitelistAccount(whitelist ag_solanago.PublicKey) *AddWl {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whitelist).WRITE()
	return inst
}

// GetWhitelistAccount gets the "whitelist" account.
func (inst *AddWl) GetWhitelistAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *AddWl) SetAdminAccount(admin ag_solanago.PublicKey) *AddWl {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AddWl) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AddWl) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddWl {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AddWl) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *AddWl) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AddWl) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AddWl {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *AddWl) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst AddWl) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddWl,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddWl) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddWl) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Creator == nil {
			return errors.New("creator parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Global is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Whitelist is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddWl) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddWl")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Creator", *inst.Creator))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        global", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     whitelist", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj AddWl) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddWl) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	return nil
}

// NewAddWlInstruction declares a new AddWl instruction with the provided parameters and accounts.
func NewAddWlInstruction(
	// Parameters:
	creator ag_solanago.PublicKey,
	// Accounts:
	global ag_solanago.PublicKey,
	whitelist ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddWl {
	return NewAddWlInstructionBuilder().
		SetCreator(creator).
		SetGlobalAccount(global).
		SetWhitelistAccount(whitelist).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleAddWlInstruction declares a new AddWl instruction with the provided parameters and accounts.
func NewSimpleAddWlInstruction(
	// Parameters:
	creator ag_solanago.PublicKey,
	// Accounts:
	global ag_solanago.PublicKey,
	whitelist ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddWl {
	return NewAddWlInstructionBuilder().
		SetCreator(creator).
		SetGlobalAccount(global).
		SetWhitelistAccount(whitelist).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram)
}
