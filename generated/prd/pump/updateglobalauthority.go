// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package pump

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateGlobalAuthority is the `update_global_authority` instruction.
type UpdateGlobalAuthority struct {

	// [0] = [WRITE] global
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [] new_authority
	//
	// [3] = [] event_authority
	//
	// [4] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateGlobalAuthorityInstructionBuilder creates a new `UpdateGlobalAuthority` instruction builder.
func NewUpdateGlobalAuthorityInstructionBuilder() *UpdateGlobalAuthority {
	nd := &UpdateGlobalAuthority{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(GlobalPDA).WRITE()
	nd.AccountMetaSlice[3] = ag_solanago.Meta(EventAuthorityPDA)
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetGlobalAccount sets the "global" account.
func (inst *UpdateGlobalAuthority) SetGlobalAccount(global ag_solanago.PublicKey) *UpdateGlobalAuthority {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(global).WRITE()
	return inst
}

// GetGlobalAccount gets the "global" account.
func (inst *UpdateGlobalAuthority) GetGlobalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateGlobalAuthority) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateGlobalAuthority {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateGlobalAuthority) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetNewAuthorityAccount sets the "new_authority" account.
func (inst *UpdateGlobalAuthority) SetNewAuthorityAccount(newAuthority ag_solanago.PublicKey) *UpdateGlobalAuthority {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(newAuthority)
	return inst
}

// GetNewAuthorityAccount gets the "new_authority" account.
func (inst *UpdateGlobalAuthority) GetNewAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *UpdateGlobalAuthority) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *UpdateGlobalAuthority {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *UpdateGlobalAuthority) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramAccount sets the "program" account.
func (inst *UpdateGlobalAuthority) SetProgramAccount(program ag_solanago.PublicKey) *UpdateGlobalAuthority {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *UpdateGlobalAuthority) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst *UpdateGlobalAuthority) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *UpdateGlobalAuthority) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *UpdateGlobalAuthority {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:5], metas...)
	return inst
}

func (inst *UpdateGlobalAuthority) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5:]
}

func (inst UpdateGlobalAuthority) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateGlobalAuthority,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateGlobalAuthority) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateGlobalAuthority) Validate() error {
	if len(inst.AccountMetaSlice) != 5 {
		return errors.New("accounts slice has wrong length: expected 5 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Global is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.NewAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *UpdateGlobalAuthority) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateGlobalAuthority")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         global", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  new_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj UpdateGlobalAuthority) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *UpdateGlobalAuthority) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewUpdateGlobalAuthorityInstruction declares a new UpdateGlobalAuthority instruction with the provided parameters and accounts.
func NewUpdateGlobalAuthorityInstruction(
	// Accounts:
	global ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	newAuthority ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *UpdateGlobalAuthority {
	return NewUpdateGlobalAuthorityInstructionBuilder().
		SetGlobalAccount(global).
		SetAuthorityAccount(authority).
		SetNewAuthorityAccount(newAuthority).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleUpdateGlobalAuthorityInstruction declares a new UpdateGlobalAuthority instruction with the provided parameters and accounts.
func NewSimpleUpdateGlobalAuthorityInstruction(
	authority ag_solanago.PublicKey,
	newAuthority ag_solanago.PublicKey) *UpdateGlobalAuthority {
	return NewUpdateGlobalAuthorityInstructionBuilder().
		SetAuthorityAccount(authority).
		SetNewAuthorityAccount(newAuthority)
}
