// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawProtocolFee is the `withdraw_protocol_fee` instruction.
type WithdrawProtocolFee struct {
	AmountX               *uint64
	AmountY               *uint64
	RemainingAccountsInfo *RemainingAccountsInfo

	// [0] = [WRITE] lb_pair
	//
	// [1] = [WRITE] reserve_x
	//
	// [2] = [WRITE] reserve_y
	//
	// [3] = [] token_x_mint
	//
	// [4] = [] token_y_mint
	//
	// [5] = [WRITE] receiver_token_x
	//
	// [6] = [WRITE] receiver_token_y
	//
	// [7] = [] claim_fee_operator
	//
	// [8] = [SIGNER] operator
	// ··········· operator
	//
	// [9] = [] token_x_program
	//
	// [10] = [] token_y_program
	//
	// [11] = [] memo_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawProtocolFeeInstructionBuilder creates a new `WithdrawProtocolFee` instruction builder.
func NewWithdrawProtocolFeeInstructionBuilder() *WithdrawProtocolFee {
	nd := &WithdrawProtocolFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetAmountX sets the "amount_x" parameter.
func (inst *WithdrawProtocolFee) SetAmountX(amount_x uint64) *WithdrawProtocolFee {
	inst.AmountX = &amount_x
	return inst
}

// SetAmountY sets the "amount_y" parameter.
func (inst *WithdrawProtocolFee) SetAmountY(amount_y uint64) *WithdrawProtocolFee {
	inst.AmountY = &amount_y
	return inst
}

// SetRemainingAccountsInfo sets the "remaining_accounts_info" parameter.
func (inst *WithdrawProtocolFee) SetRemainingAccountsInfo(remaining_accounts_info RemainingAccountsInfo) *WithdrawProtocolFee {
	inst.RemainingAccountsInfo = &remaining_accounts_info
	return inst
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *WithdrawProtocolFee) SetLbPairAccount(lbPair ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *WithdrawProtocolFee) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetReserveXAccount sets the "reserve_x" account.
func (inst *WithdrawProtocolFee) SetReserveXAccount(reserveX ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(reserveX).WRITE()
	return inst
}

// GetReserveXAccount gets the "reserve_x" account.
func (inst *WithdrawProtocolFee) GetReserveXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetReserveYAccount sets the "reserve_y" account.
func (inst *WithdrawProtocolFee) SetReserveYAccount(reserveY ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(reserveY).WRITE()
	return inst
}

// GetReserveYAccount gets the "reserve_y" account.
func (inst *WithdrawProtocolFee) GetReserveYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenXMintAccount sets the "token_x_mint" account.
func (inst *WithdrawProtocolFee) SetTokenXMintAccount(tokenXMint ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenXMint)
	return inst
}

// GetTokenXMintAccount gets the "token_x_mint" account.
func (inst *WithdrawProtocolFee) GetTokenXMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenYMintAccount sets the "token_y_mint" account.
func (inst *WithdrawProtocolFee) SetTokenYMintAccount(tokenYMint ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenYMint)
	return inst
}

// GetTokenYMintAccount gets the "token_y_mint" account.
func (inst *WithdrawProtocolFee) GetTokenYMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiverTokenXAccount sets the "receiver_token_x" account.
func (inst *WithdrawProtocolFee) SetReceiverTokenXAccount(receiverTokenX ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiverTokenX).WRITE()
	return inst
}

// GetReceiverTokenXAccount gets the "receiver_token_x" account.
func (inst *WithdrawProtocolFee) GetReceiverTokenXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetReceiverTokenYAccount sets the "receiver_token_y" account.
func (inst *WithdrawProtocolFee) SetReceiverTokenYAccount(receiverTokenY ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(receiverTokenY).WRITE()
	return inst
}

// GetReceiverTokenYAccount gets the "receiver_token_y" account.
func (inst *WithdrawProtocolFee) GetReceiverTokenYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetClaimFeeOperatorAccount sets the "claim_fee_operator" account.
func (inst *WithdrawProtocolFee) SetClaimFeeOperatorAccount(claimFeeOperator ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(claimFeeOperator)
	return inst
}

// GetClaimFeeOperatorAccount gets the "claim_fee_operator" account.
func (inst *WithdrawProtocolFee) GetClaimFeeOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetOperatorAccount sets the "operator" account.
// operator
func (inst *WithdrawProtocolFee) SetOperatorAccount(operator ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(operator).SIGNER()
	return inst
}

// GetOperatorAccount gets the "operator" account.
// operator
func (inst *WithdrawProtocolFee) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenXProgramAccount sets the "token_x_program" account.
func (inst *WithdrawProtocolFee) SetTokenXProgramAccount(tokenXProgram ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenXProgram)
	return inst
}

// GetTokenXProgramAccount gets the "token_x_program" account.
func (inst *WithdrawProtocolFee) GetTokenXProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenYProgramAccount sets the "token_y_program" account.
func (inst *WithdrawProtocolFee) SetTokenYProgramAccount(tokenYProgram ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenYProgram)
	return inst
}

// GetTokenYProgramAccount gets the "token_y_program" account.
func (inst *WithdrawProtocolFee) GetTokenYProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetMemoProgramAccount sets the "memo_program" account.
func (inst *WithdrawProtocolFee) SetMemoProgramAccount(memoProgram ag_solanago.PublicKey) *WithdrawProtocolFee {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(memoProgram)
	return inst
}

// GetMemoProgramAccount gets the "memo_program" account.
func (inst *WithdrawProtocolFee) GetMemoProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst *WithdrawProtocolFee) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *WithdrawProtocolFee) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *WithdrawProtocolFee {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:12], metas...)
	return inst
}

func (inst *WithdrawProtocolFee) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12:]
}

func (inst WithdrawProtocolFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawProtocolFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawProtocolFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawProtocolFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.AmountX == nil {
			return errors.New("amountX parameter is not set")
		}
		if inst.AmountY == nil {
			return errors.New("amountY parameter is not set")
		}
		if inst.RemainingAccountsInfo == nil {
			return errors.New("remainingAccountsInfo parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 12 {
		return errors.New("accounts slice has wrong length: expected 12 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ReserveX is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ReserveY is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenXMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenYMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReceiverTokenX is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ReceiverTokenY is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.ClaimFeeOperator is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Operator is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenXProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenYProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.MemoProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawProtocolFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawProtocolFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                AmountX", *inst.AmountX))
						paramsBranch.Child(ag_format.Param("                AmountY", *inst.AmountY))
						paramsBranch.Child(ag_format.Param("  RemainingAccountsInfo", *inst.RemainingAccountsInfo))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           lb_pair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         reserve_x", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         reserve_y", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      token_x_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      token_y_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  receiver_token_x", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("  receiver_token_y", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("claim_fee_operator", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          operator", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   token_x_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("   token_y_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("      memo_program", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj WithdrawProtocolFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `RemainingAccountsInfo` param:
	err = encoder.Encode(obj.RemainingAccountsInfo)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawProtocolFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `RemainingAccountsInfo`:
	err = decoder.Decode(&obj.RemainingAccountsInfo)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawProtocolFeeInstruction declares a new WithdrawProtocolFee instruction with the provided parameters and accounts.
func NewWithdrawProtocolFeeInstruction(
	// Parameters:
	amount_x uint64,
	amount_y uint64,
	remaining_accounts_info RemainingAccountsInfo,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	tokenXMint ag_solanago.PublicKey,
	tokenYMint ag_solanago.PublicKey,
	receiverTokenX ag_solanago.PublicKey,
	receiverTokenY ag_solanago.PublicKey,
	claimFeeOperator ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	tokenXProgram ag_solanago.PublicKey,
	tokenYProgram ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey) *WithdrawProtocolFee {
	return NewWithdrawProtocolFeeInstructionBuilder().
		SetAmountX(amount_x).
		SetAmountY(amount_y).
		SetRemainingAccountsInfo(remaining_accounts_info).
		SetLbPairAccount(lbPair).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetTokenXMintAccount(tokenXMint).
		SetTokenYMintAccount(tokenYMint).
		SetReceiverTokenXAccount(receiverTokenX).
		SetReceiverTokenYAccount(receiverTokenY).
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetOperatorAccount(operator).
		SetTokenXProgramAccount(tokenXProgram).
		SetTokenYProgramAccount(tokenYProgram).
		SetMemoProgramAccount(memoProgram)
}

// NewSimpleWithdrawProtocolFeeInstruction declares a new WithdrawProtocolFee instruction with the provided parameters and accounts.
func NewSimpleWithdrawProtocolFeeInstruction(
	// Parameters:
	amount_x uint64,
	amount_y uint64,
	remaining_accounts_info RemainingAccountsInfo,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	tokenXMint ag_solanago.PublicKey,
	tokenYMint ag_solanago.PublicKey,
	receiverTokenX ag_solanago.PublicKey,
	receiverTokenY ag_solanago.PublicKey,
	claimFeeOperator ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	tokenXProgram ag_solanago.PublicKey,
	tokenYProgram ag_solanago.PublicKey,
	memoProgram ag_solanago.PublicKey) *WithdrawProtocolFee {
	return NewWithdrawProtocolFeeInstructionBuilder().
		SetAmountX(amount_x).
		SetAmountY(amount_y).
		SetRemainingAccountsInfo(remaining_accounts_info).
		SetLbPairAccount(lbPair).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetTokenXMintAccount(tokenXMint).
		SetTokenYMintAccount(tokenYMint).
		SetReceiverTokenXAccount(receiverTokenX).
		SetReceiverTokenYAccount(receiverTokenY).
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetOperatorAccount(operator).
		SetTokenXProgramAccount(tokenXProgram).
		SetTokenYProgramAccount(tokenYProgram).
		SetMemoProgramAccount(memoProgram)
}
