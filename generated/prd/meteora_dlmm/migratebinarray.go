// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MigrateBinArray is the `migrate_bin_array` instruction.
type MigrateBinArray struct {

	// [0] = [] lb_pair
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrateBinArrayInstructionBuilder creates a new `MigrateBinArray` instruction builder.
func NewMigrateBinArrayInstructionBuilder() *MigrateBinArray {
	nd := &MigrateBinArray{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *MigrateBinArray) SetLbPairAccount(lbPair ag_solanago.PublicKey) *MigrateBinArray {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lbPair)
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *MigrateBinArray) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst *MigrateBinArray) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *MigrateBinArray) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *MigrateBinArray {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:1], metas...)
	return inst
}

func (inst *MigrateBinArray) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1:]
}

func (inst MigrateBinArray) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MigrateBinArray,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MigrateBinArray) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MigrateBinArray) Validate() error {
	if len(inst.AccountMetaSlice) != 1 {
		return errors.New("accounts slice has wrong length: expected 1 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LbPair is not set")
		}
	}
	return nil
}

func (inst *MigrateBinArray) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MigrateBinArray")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("lb_pair", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj MigrateBinArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MigrateBinArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMigrateBinArrayInstruction declares a new MigrateBinArray instruction with the provided parameters and accounts.
func NewMigrateBinArrayInstruction(
	// Accounts:
	lbPair ag_solanago.PublicKey) *MigrateBinArray {
	return NewMigrateBinArrayInstructionBuilder().
		SetLbPairAccount(lbPair)
}

// NewSimpleMigrateBinArrayInstruction declares a new MigrateBinArray instruction with the provided parameters and accounts.
func NewSimpleMigrateBinArrayInstruction(
	// Accounts:
	lbPair ag_solanago.PublicKey) *MigrateBinArray {
	return NewMigrateBinArrayInstructionBuilder().
		SetLbPairAccount(lbPair)
}
