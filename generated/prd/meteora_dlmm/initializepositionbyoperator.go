// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializePositionByOperator is the `initialize_position_by_operator` instruction.
type InitializePositionByOperator struct {
	LowerBinId       *int32
	Width            *int32
	FeeOwner         *ag_solanago.PublicKey
	LockReleasePoint *uint64

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] base
	//
	// [2] = [WRITE] position
	//
	// [3] = [] lb_pair
	//
	// [4] = [] owner
	//
	// [5] = [SIGNER] operator
	// ··········· operator
	//
	// [6] = [] operator_token_x
	//
	// [7] = [] owner_token_x
	//
	// [8] = [] system_program
	//
	// [9] = [] event_authority
	//
	// [10] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializePositionByOperatorInstructionBuilder creates a new `InitializePositionByOperator` instruction builder.
func NewInitializePositionByOperatorInstructionBuilder() *InitializePositionByOperator {
	nd := &InitializePositionByOperator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	nd.AccountMetaSlice[10] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetLowerBinId sets the "lower_bin_id" parameter.
func (inst *InitializePositionByOperator) SetLowerBinId(lower_bin_id int32) *InitializePositionByOperator {
	inst.LowerBinId = &lower_bin_id
	return inst
}

// SetWidth sets the "width" parameter.
func (inst *InitializePositionByOperator) SetWidth(width int32) *InitializePositionByOperator {
	inst.Width = &width
	return inst
}

// SetFeeOwner sets the "fee_owner" parameter.
func (inst *InitializePositionByOperator) SetFeeOwner(fee_owner ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.FeeOwner = &fee_owner
	return inst
}

// SetLockReleasePoint sets the "lock_release_point" parameter.
func (inst *InitializePositionByOperator) SetLockReleasePoint(lock_release_point uint64) *InitializePositionByOperator {
	inst.LockReleasePoint = &lock_release_point
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *InitializePositionByOperator) SetPayerAccount(payer ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *InitializePositionByOperator) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBaseAccount sets the "base" account.
func (inst *InitializePositionByOperator) SetBaseAccount(base ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(base).SIGNER()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *InitializePositionByOperator) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionAccount sets the "position" account.
func (inst *InitializePositionByOperator) SetPositionAccount(position ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *InitializePositionByOperator) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *InitializePositionByOperator) SetLbPairAccount(lbPair ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(lbPair)
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *InitializePositionByOperator) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOwnerAccount sets the "owner" account.
func (inst *InitializePositionByOperator) SetOwnerAccount(owner ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *InitializePositionByOperator) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOperatorAccount sets the "operator" account.
// operator
func (inst *InitializePositionByOperator) SetOperatorAccount(operator ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(operator).SIGNER()
	return inst
}

// GetOperatorAccount gets the "operator" account.
// operator
func (inst *InitializePositionByOperator) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOperatorTokenXAccount sets the "operator_token_x" account.
func (inst *InitializePositionByOperator) SetOperatorTokenXAccount(operatorTokenX ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(operatorTokenX)
	return inst
}

// GetOperatorTokenXAccount gets the "operator_token_x" account.
func (inst *InitializePositionByOperator) GetOperatorTokenXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetOwnerTokenXAccount sets the "owner_token_x" account.
func (inst *InitializePositionByOperator) SetOwnerTokenXAccount(ownerTokenX ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(ownerTokenX)
	return inst
}

// GetOwnerTokenXAccount gets the "owner_token_x" account.
func (inst *InitializePositionByOperator) GetOwnerTokenXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializePositionByOperator) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializePositionByOperator) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *InitializePositionByOperator) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *InitializePositionByOperator) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializePositionByOperator) SetProgramAccount(program ag_solanago.PublicKey) *InitializePositionByOperator {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializePositionByOperator) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst *InitializePositionByOperator) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializePositionByOperator) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializePositionByOperator {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:11], metas...)
	return inst
}

func (inst *InitializePositionByOperator) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11:]
}

func (inst InitializePositionByOperator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializePositionByOperator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializePositionByOperator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializePositionByOperator) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LowerBinId == nil {
			return errors.New("lowerBinId parameter is not set")
		}
		if inst.Width == nil {
			return errors.New("width parameter is not set")
		}
		if inst.FeeOwner == nil {
			return errors.New("feeOwner parameter is not set")
		}
		if inst.LockReleasePoint == nil {
			return errors.New("lockReleasePoint parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 11 {
		return errors.New("accounts slice has wrong length: expected 11 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Operator is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.OperatorTokenX is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.OwnerTokenX is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializePositionByOperator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializePositionByOperator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        LowerBinId", *inst.LowerBinId))
						paramsBranch.Child(ag_format.Param("             Width", *inst.Width))
						paramsBranch.Child(ag_format.Param("          FeeOwner", *inst.FeeOwner))
						paramsBranch.Child(ag_format.Param("  LockReleasePoint", *inst.LockReleasePoint))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            base", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        position", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         lb_pair", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           owner", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        operator", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("operator_token_x", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   owner_token_x", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("  system_program", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta(" event_authority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         program", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj InitializePositionByOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `Width` param:
	err = encoder.Encode(obj.Width)
	if err != nil {
		return err
	}
	// Serialize `FeeOwner` param:
	err = encoder.Encode(obj.FeeOwner)
	if err != nil {
		return err
	}
	// Serialize `LockReleasePoint` param:
	err = encoder.Encode(obj.LockReleasePoint)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializePositionByOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `Width`:
	err = decoder.Decode(&obj.Width)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwner`:
	err = decoder.Decode(&obj.FeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `LockReleasePoint`:
	err = decoder.Decode(&obj.LockReleasePoint)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializePositionByOperatorInstruction declares a new InitializePositionByOperator instruction with the provided parameters and accounts.
func NewInitializePositionByOperatorInstruction(
	// Parameters:
	lower_bin_id int32,
	width int32,
	fee_owner ag_solanago.PublicKey,
	lock_release_point uint64,
	// Accounts:
	payer ag_solanago.PublicKey,
	base ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	operatorTokenX ag_solanago.PublicKey,
	ownerTokenX ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *InitializePositionByOperator {
	return NewInitializePositionByOperatorInstructionBuilder().
		SetLowerBinId(lower_bin_id).
		SetWidth(width).
		SetFeeOwner(fee_owner).
		SetLockReleasePoint(lock_release_point).
		SetPayerAccount(payer).
		SetBaseAccount(base).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetOwnerAccount(owner).
		SetOperatorAccount(operator).
		SetOperatorTokenXAccount(operatorTokenX).
		SetOwnerTokenXAccount(ownerTokenX).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleInitializePositionByOperatorInstruction declares a new InitializePositionByOperator instruction with the provided parameters and accounts.
func NewSimpleInitializePositionByOperatorInstruction(
	// Parameters:
	lower_bin_id int32,
	width int32,
	fee_owner ag_solanago.PublicKey,
	lock_release_point uint64,
	// Accounts:
	payer ag_solanago.PublicKey,
	base ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	operatorTokenX ag_solanago.PublicKey,
	ownerTokenX ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *InitializePositionByOperator {
	return NewInitializePositionByOperatorInstructionBuilder().
		SetLowerBinId(lower_bin_id).
		SetWidth(width).
		SetFeeOwner(fee_owner).
		SetLockReleasePoint(lock_release_point).
		SetPayerAccount(payer).
		SetBaseAccount(base).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetOwnerAccount(owner).
		SetOperatorAccount(operator).
		SetOperatorTokenXAccount(operatorTokenX).
		SetOwnerTokenXAccount(ownerTokenX).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority)
}
