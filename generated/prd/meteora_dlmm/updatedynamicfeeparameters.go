// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateDynamicFeeParameters is the `update_dynamic_fee_parameters` instruction.
type UpdateDynamicFeeParameters struct {
	FeeParameter *DynamicFeeParameter

	// [0] = [WRITE] lb_pair
	//
	// [1] = [SIGNER] admin
	//
	// [2] = [] event_authority
	//
	// [3] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateDynamicFeeParametersInstructionBuilder creates a new `UpdateDynamicFeeParameters` instruction builder.
func NewUpdateDynamicFeeParametersInstructionBuilder() *UpdateDynamicFeeParameters {
	nd := &UpdateDynamicFeeParameters{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetFeeParameter sets the "fee_parameter" parameter.
func (inst *UpdateDynamicFeeParameters) SetFeeParameter(fee_parameter DynamicFeeParameter) *UpdateDynamicFeeParameters {
	inst.FeeParameter = &fee_parameter
	return inst
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *UpdateDynamicFeeParameters) SetLbPairAccount(lbPair ag_solanago.PublicKey) *UpdateDynamicFeeParameters {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *UpdateDynamicFeeParameters) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateDynamicFeeParameters) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateDynamicFeeParameters {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateDynamicFeeParameters) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *UpdateDynamicFeeParameters) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *UpdateDynamicFeeParameters {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *UpdateDynamicFeeParameters) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramAccount sets the "program" account.
func (inst *UpdateDynamicFeeParameters) SetProgramAccount(program ag_solanago.PublicKey) *UpdateDynamicFeeParameters {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *UpdateDynamicFeeParameters) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *UpdateDynamicFeeParameters) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *UpdateDynamicFeeParameters) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *UpdateDynamicFeeParameters {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *UpdateDynamicFeeParameters) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst UpdateDynamicFeeParameters) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateDynamicFeeParameters,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateDynamicFeeParameters) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateDynamicFeeParameters) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.FeeParameter == nil {
			return errors.New("feeParameter parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *UpdateDynamicFeeParameters) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateDynamicFeeParameters")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" FeeParameter", *inst.FeeParameter))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        lb_pair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateDynamicFeeParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeParameter` param:
	err = encoder.Encode(obj.FeeParameter)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateDynamicFeeParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeParameter`:
	err = decoder.Decode(&obj.FeeParameter)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateDynamicFeeParametersInstruction declares a new UpdateDynamicFeeParameters instruction with the provided parameters and accounts.
func NewUpdateDynamicFeeParametersInstruction(
	// Parameters:
	fee_parameter DynamicFeeParameter,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *UpdateDynamicFeeParameters {
	return NewUpdateDynamicFeeParametersInstructionBuilder().
		SetFeeParameter(fee_parameter).
		SetLbPairAccount(lbPair).
		SetAdminAccount(admin).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleUpdateDynamicFeeParametersInstruction declares a new UpdateDynamicFeeParameters instruction with the provided parameters and accounts.
func NewSimpleUpdateDynamicFeeParametersInstruction(
	// Parameters:
	fee_parameter DynamicFeeParameter,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *UpdateDynamicFeeParameters {
	return NewUpdateDynamicFeeParametersInstructionBuilder().
		SetFeeParameter(fee_parameter).
		SetLbPairAccount(lbPair).
		SetAdminAccount(admin).
		SetEventAuthorityAccount(eventAuthority)
}
