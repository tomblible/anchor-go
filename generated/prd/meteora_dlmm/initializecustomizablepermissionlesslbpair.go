// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeCustomizablePermissionlessLbPair is the `initialize_customizable_permissionless_lb_pair` instruction.
type InitializeCustomizablePermissionlessLbPair struct {
	Params *CustomizableParams

	// [0] = [WRITE] lb_pair
	//
	// [1] = [WRITE] bin_array_bitmap_extension
	//
	// [2] = [] token_mint_x
	//
	// [3] = [] token_mint_y
	//
	// [4] = [WRITE] reserve_x
	//
	// [5] = [WRITE] reserve_y
	//
	// [6] = [WRITE] oracle
	//
	// [7] = [] user_token_x
	//
	// [8] = [WRITE, SIGNER] funder
	//
	// [9] = [] token_program
	//
	// [10] = [] system_program
	//
	// [11] = [] user_token_y
	//
	// [12] = [] event_authority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeCustomizablePermissionlessLbPairInstructionBuilder creates a new `InitializeCustomizablePermissionlessLbPair` instruction builder.
func NewInitializeCustomizablePermissionlessLbPairInstructionBuilder() *InitializeCustomizablePermissionlessLbPair {
	nd := &InitializeCustomizablePermissionlessLbPair{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	nd.AccountMetaSlice[13] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetParams sets the "params" parameter.
func (inst *InitializeCustomizablePermissionlessLbPair) SetParams(params CustomizableParams) *InitializeCustomizablePermissionlessLbPair {
	inst.Params = &params
	return inst
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetLbPairAccount(lbPair ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBinArrayBitmapExtensionAccount sets the "bin_array_bitmap_extension" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(binArrayBitmapExtension).WRITE()
	return inst
}

// GetBinArrayBitmapExtensionAccount gets the "bin_array_bitmap_extension" account (optional).
func (inst *InitializeCustomizablePermissionlessLbPair) GetBinArrayBitmapExtensionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintXAccount sets the "token_mint_x" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetTokenMintXAccount(tokenMintX ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMintX)
	return inst
}

// GetTokenMintXAccount gets the "token_mint_x" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetTokenMintXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenMintYAccount sets the "token_mint_y" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetTokenMintYAccount(tokenMintY ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenMintY)
	return inst
}

// GetTokenMintYAccount gets the "token_mint_y" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetTokenMintYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReserveXAccount sets the "reserve_x" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetReserveXAccount(reserveX ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(reserveX).WRITE()
	return inst
}

// GetReserveXAccount gets the "reserve_x" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetReserveXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReserveYAccount sets the "reserve_y" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetReserveYAccount(reserveY ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(reserveY).WRITE()
	return inst
}

// GetReserveYAccount gets the "reserve_y" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetReserveYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOracleAccount sets the "oracle" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetOracleAccount(oracle ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUserTokenXAccount sets the "user_token_x" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetUserTokenXAccount(userTokenX ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userTokenX)
	return inst
}

// GetUserTokenXAccount gets the "user_token_x" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetUserTokenXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetFunderAccount sets the "funder" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetFunderAccount(funder ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(funder).WRITE().SIGNER()
	return inst
}

// GetFunderAccount gets the "funder" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetFunderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserTokenYAccount sets the "user_token_y" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetUserTokenYAccount(userTokenY ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userTokenY)
	return inst
}

// GetUserTokenYAccount gets the "user_token_y" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetUserTokenYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializeCustomizablePermissionlessLbPair) SetProgramAccount(program ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializeCustomizablePermissionlessLbPair) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *InitializeCustomizablePermissionlessLbPair) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *InitializeCustomizablePermissionlessLbPair) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *InitializeCustomizablePermissionlessLbPair {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *InitializeCustomizablePermissionlessLbPair) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst InitializeCustomizablePermissionlessLbPair) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeCustomizablePermissionlessLbPair,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeCustomizablePermissionlessLbPair) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeCustomizablePermissionlessLbPair) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("params parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LbPair is not set")
		}

		// [1] = BinArrayBitmapExtension is optional

		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMintX is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenMintY is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ReserveX is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReserveY is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserTokenX is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Funder is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserTokenY is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializeCustomizablePermissionlessLbPair) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeCustomizablePermissionlessLbPair")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   lb_pair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("bin_array_bitmap_extension", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              token_mint_x", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              token_mint_y", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 reserve_x", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 reserve_y", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                    oracle", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("              user_token_x", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                    funder", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("             token_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            system_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("              user_token_y", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("           event_authority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                   program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj InitializeCustomizablePermissionlessLbPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeCustomizablePermissionlessLbPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeCustomizablePermissionlessLbPairInstruction declares a new InitializeCustomizablePermissionlessLbPair instruction with the provided parameters and accounts.
func NewInitializeCustomizablePermissionlessLbPairInstruction(
	// Parameters:
	params CustomizableParams,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	binArrayBitmapExtension ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	userTokenX ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	userTokenY ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	return NewInitializeCustomizablePermissionlessLbPairInstructionBuilder().
		SetParams(params).
		SetLbPairAccount(lbPair).
		SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetOracleAccount(oracle).
		SetUserTokenXAccount(userTokenX).
		SetFunderAccount(funder).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetUserTokenYAccount(userTokenY).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleInitializeCustomizablePermissionlessLbPairInstruction declares a new InitializeCustomizablePermissionlessLbPair instruction with the provided parameters and accounts.
func NewSimpleInitializeCustomizablePermissionlessLbPairInstruction(
	// Parameters:
	params CustomizableParams,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	binArrayBitmapExtension ag_solanago.PublicKey,
	tokenMintX ag_solanago.PublicKey,
	tokenMintY ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	userTokenX ag_solanago.PublicKey,
	funder ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	userTokenY ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *InitializeCustomizablePermissionlessLbPair {
	return NewInitializeCustomizablePermissionlessLbPairInstructionBuilder().
		SetParams(params).
		SetLbPairAccount(lbPair).
		SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension).
		SetTokenMintXAccount(tokenMintX).
		SetTokenMintYAccount(tokenMintY).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetOracleAccount(oracle).
		SetUserTokenXAccount(userTokenX).
		SetFunderAccount(funder).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetUserTokenYAccount(userTokenY).
		SetEventAuthorityAccount(eventAuthority)
}
