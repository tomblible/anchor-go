// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddLiquidityOneSide is the `add_liquidity_one_side` instruction.
type AddLiquidityOneSide struct {
	LiquidityParameter *LiquidityOneSideParameter

	// [0] = [WRITE] position
	//
	// [1] = [WRITE] lb_pair
	//
	// [2] = [WRITE] bin_array_bitmap_extension
	//
	// [3] = [WRITE] user_token
	//
	// [4] = [WRITE] reserve
	//
	// [5] = [] token_mint
	//
	// [6] = [WRITE] bin_array_lower
	//
	// [7] = [WRITE] bin_array_upper
	//
	// [8] = [SIGNER] sender
	//
	// [9] = [] token_program
	//
	// [10] = [] event_authority
	//
	// [11] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddLiquidityOneSideInstructionBuilder creates a new `AddLiquidityOneSide` instruction builder.
func NewAddLiquidityOneSideInstructionBuilder() *AddLiquidityOneSide {
	nd := &AddLiquidityOneSide{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	nd.AccountMetaSlice[11] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetLiquidityParameter sets the "liquidity_parameter" parameter.
func (inst *AddLiquidityOneSide) SetLiquidityParameter(liquidity_parameter LiquidityOneSideParameter) *AddLiquidityOneSide {
	inst.LiquidityParameter = &liquidity_parameter
	return inst
}

// SetPositionAccount sets the "position" account.
func (inst *AddLiquidityOneSide) SetPositionAccount(position ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *AddLiquidityOneSide) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *AddLiquidityOneSide) SetLbPairAccount(lbPair ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *AddLiquidityOneSide) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBinArrayBitmapExtensionAccount sets the "bin_array_bitmap_extension" account.
func (inst *AddLiquidityOneSide) SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(binArrayBitmapExtension).WRITE()
	return inst
}

// GetBinArrayBitmapExtensionAccount gets the "bin_array_bitmap_extension" account (optional).
func (inst *AddLiquidityOneSide) GetBinArrayBitmapExtensionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserTokenAccount sets the "user_token" account.
func (inst *AddLiquidityOneSide) SetUserTokenAccount(userToken ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userToken).WRITE()
	return inst
}

// GetUserTokenAccount gets the "user_token" account.
func (inst *AddLiquidityOneSide) GetUserTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReserveAccount sets the "reserve" account.
func (inst *AddLiquidityOneSide) SetReserveAccount(reserve ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(reserve).WRITE()
	return inst
}

// GetReserveAccount gets the "reserve" account.
func (inst *AddLiquidityOneSide) GetReserveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenMintAccount sets the "token_mint" account.
func (inst *AddLiquidityOneSide) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "token_mint" account.
func (inst *AddLiquidityOneSide) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBinArrayLowerAccount sets the "bin_array_lower" account.
func (inst *AddLiquidityOneSide) SetBinArrayLowerAccount(binArrayLower ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(binArrayLower).WRITE()
	return inst
}

// GetBinArrayLowerAccount gets the "bin_array_lower" account.
func (inst *AddLiquidityOneSide) GetBinArrayLowerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetBinArrayUpperAccount sets the "bin_array_upper" account.
func (inst *AddLiquidityOneSide) SetBinArrayUpperAccount(binArrayUpper ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(binArrayUpper).WRITE()
	return inst
}

// GetBinArrayUpperAccount gets the "bin_array_upper" account.
func (inst *AddLiquidityOneSide) GetBinArrayUpperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSenderAccount sets the "sender" account.
func (inst *AddLiquidityOneSide) SetSenderAccount(sender ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(sender).SIGNER()
	return inst
}

// GetSenderAccount gets the "sender" account.
func (inst *AddLiquidityOneSide) GetSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *AddLiquidityOneSide) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *AddLiquidityOneSide) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *AddLiquidityOneSide) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *AddLiquidityOneSide) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetProgramAccount sets the "program" account.
func (inst *AddLiquidityOneSide) SetProgramAccount(program ag_solanago.PublicKey) *AddLiquidityOneSide {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AddLiquidityOneSide) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst *AddLiquidityOneSide) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AddLiquidityOneSide) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AddLiquidityOneSide {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:12], metas...)
	return inst
}

func (inst *AddLiquidityOneSide) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12:]
}

func (inst AddLiquidityOneSide) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddLiquidityOneSide,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddLiquidityOneSide) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddLiquidityOneSide) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LiquidityParameter == nil {
			return errors.New("liquidityParameter parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 12 {
		return errors.New("accounts slice has wrong length: expected 12 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LbPair is not set")
		}

		// [2] = BinArrayBitmapExtension is optional

		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserToken is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Reserve is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BinArrayLower is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.BinArrayUpper is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Sender is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AddLiquidityOneSide) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddLiquidityOneSide")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" LiquidityParameter", *inst.LiquidityParameter))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  position", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   lb_pair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("bin_array_bitmap_extension", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                user_token", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                   reserve", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                token_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           bin_array_lower", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           bin_array_upper", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                    sender", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("             token_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           event_authority", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                   program", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj AddLiquidityOneSide) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LiquidityParameter` param:
	err = encoder.Encode(obj.LiquidityParameter)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddLiquidityOneSide) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LiquidityParameter`:
	err = decoder.Decode(&obj.LiquidityParameter)
	if err != nil {
		return err
	}
	return nil
}

// NewAddLiquidityOneSideInstruction declares a new AddLiquidityOneSide instruction with the provided parameters and accounts.
func NewAddLiquidityOneSideInstruction(
	// Parameters:
	liquidity_parameter LiquidityOneSideParameter,
	// Accounts:
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	binArrayBitmapExtension ag_solanago.PublicKey,
	userToken ag_solanago.PublicKey,
	reserve ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	binArrayLower ag_solanago.PublicKey,
	binArrayUpper ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *AddLiquidityOneSide {
	return NewAddLiquidityOneSideInstructionBuilder().
		SetLiquidityParameter(liquidity_parameter).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension).
		SetUserTokenAccount(userToken).
		SetReserveAccount(reserve).
		SetTokenMintAccount(tokenMint).
		SetBinArrayLowerAccount(binArrayLower).
		SetBinArrayUpperAccount(binArrayUpper).
		SetSenderAccount(sender).
		SetTokenProgramAccount(tokenProgram).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleAddLiquidityOneSideInstruction declares a new AddLiquidityOneSide instruction with the provided parameters and accounts.
func NewSimpleAddLiquidityOneSideInstruction(
	// Parameters:
	liquidity_parameter LiquidityOneSideParameter,
	// Accounts:
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	binArrayBitmapExtension ag_solanago.PublicKey,
	userToken ag_solanago.PublicKey,
	reserve ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	binArrayLower ag_solanago.PublicKey,
	binArrayUpper ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *AddLiquidityOneSide {
	return NewAddLiquidityOneSideInstructionBuilder().
		SetLiquidityParameter(liquidity_parameter).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension).
		SetUserTokenAccount(userToken).
		SetReserveAccount(reserve).
		SetTokenMintAccount(tokenMint).
		SetBinArrayLowerAccount(binArrayLower).
		SetBinArrayUpperAccount(binArrayUpper).
		SetSenderAccount(sender).
		SetTokenProgramAccount(tokenProgram).
		SetEventAuthorityAccount(eventAuthority)
}
