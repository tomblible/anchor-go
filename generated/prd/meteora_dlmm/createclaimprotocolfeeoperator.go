// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateClaimProtocolFeeOperator is the `create_claim_protocol_fee_operator` instruction.
type CreateClaimProtocolFeeOperator struct {

	// [0] = [WRITE] claim_fee_operator
	//
	// [1] = [] operator
	//
	// [2] = [WRITE, SIGNER] admin
	//
	// [3] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateClaimProtocolFeeOperatorInstructionBuilder creates a new `CreateClaimProtocolFeeOperator` instruction builder.
func NewCreateClaimProtocolFeeOperatorInstructionBuilder() *CreateClaimProtocolFeeOperator {
	nd := &CreateClaimProtocolFeeOperator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetClaimFeeOperatorAccount sets the "claim_fee_operator" account.
func (inst *CreateClaimProtocolFeeOperator) SetClaimFeeOperatorAccount(claimFeeOperator ag_solanago.PublicKey) *CreateClaimProtocolFeeOperator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(claimFeeOperator).WRITE()
	return inst
}

// GetClaimFeeOperatorAccount gets the "claim_fee_operator" account.
func (inst *CreateClaimProtocolFeeOperator) GetClaimFeeOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOperatorAccount sets the "operator" account.
func (inst *CreateClaimProtocolFeeOperator) SetOperatorAccount(operator ag_solanago.PublicKey) *CreateClaimProtocolFeeOperator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(operator)
	return inst
}

// GetOperatorAccount gets the "operator" account.
func (inst *CreateClaimProtocolFeeOperator) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *CreateClaimProtocolFeeOperator) SetAdminAccount(admin ag_solanago.PublicKey) *CreateClaimProtocolFeeOperator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *CreateClaimProtocolFeeOperator) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateClaimProtocolFeeOperator) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateClaimProtocolFeeOperator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateClaimProtocolFeeOperator) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst *CreateClaimProtocolFeeOperator) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *CreateClaimProtocolFeeOperator) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *CreateClaimProtocolFeeOperator {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:4], metas...)
	return inst
}

func (inst *CreateClaimProtocolFeeOperator) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4:]
}

func (inst CreateClaimProtocolFeeOperator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateClaimProtocolFeeOperator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateClaimProtocolFeeOperator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateClaimProtocolFeeOperator) Validate() error {
	if len(inst.AccountMetaSlice) != 4 {
		return errors.New("accounts slice has wrong length: expected 4 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ClaimFeeOperator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Operator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateClaimProtocolFeeOperator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateClaimProtocolFeeOperator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("claim_fee_operator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          operator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    system_program", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CreateClaimProtocolFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateClaimProtocolFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateClaimProtocolFeeOperatorInstruction declares a new CreateClaimProtocolFeeOperator instruction with the provided parameters and accounts.
func NewCreateClaimProtocolFeeOperatorInstruction(
	// Accounts:
	claimFeeOperator ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateClaimProtocolFeeOperator {
	return NewCreateClaimProtocolFeeOperatorInstructionBuilder().
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetOperatorAccount(operator).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram)
}

// NewSimpleCreateClaimProtocolFeeOperatorInstruction declares a new CreateClaimProtocolFeeOperator instruction with the provided parameters and accounts.
func NewSimpleCreateClaimProtocolFeeOperatorInstruction(
	// Accounts:
	claimFeeOperator ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateClaimProtocolFeeOperator {
	return NewCreateClaimProtocolFeeOperatorInstructionBuilder().
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetOperatorAccount(operator).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram)
}
