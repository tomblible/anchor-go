// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type InitPresetParameters2Ix struct {
	Index uint16

	// Bin step. Represent the price increment / decrement.
	BinStep uint16

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16

	// Base fee power factor
	BaseFeePowerFactor uint8
}

func (obj InitPresetParameters2Ix) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Serialize `BaseFeePowerFactor` param:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitPresetParameters2Ix) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	return nil
}

type InitPresetParametersIx struct {
	// Bin step. Represent the price increment / decrement.
	BinStep uint16

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16
}

func (obj InitPresetParametersIx) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitPresetParametersIx) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

type BaseFeeParameter struct {
	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16

	// Base factor for base fee rate
	BaseFactor uint16

	// Base fee power factor
	BaseFeePowerFactor uint8
}

func (obj BaseFeeParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `BaseFeePowerFactor` param:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BaseFeeParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	return nil
}

type DynamicFeeParameter struct {
	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32
}

func (obj DynamicFeeParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicFeeParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityParameterByStrategyOneSide struct {
	// Amount of X token or Y token to deposit
	Amount uint64

	// Active bin that integrator observe off-chain
	ActiveId int32

	// max active bin slippage allowed
	MaxActiveBinSlippage int32

	// strategy parameters
	StrategyParameters StrategyParameters
}

func (obj LiquidityParameterByStrategyOneSide) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `MaxActiveBinSlippage` param:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Serialize `StrategyParameters` param:
	err = encoder.Encode(obj.StrategyParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityParameterByStrategyOneSide) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Deserialize `StrategyParameters`:
	err = decoder.Decode(&obj.StrategyParameters)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityParameterByStrategy struct {
	// Amount of X token to deposit
	AmountX uint64

	// Amount of Y token to deposit
	AmountY uint64

	// Active bin that integrator observe off-chain
	ActiveId int32

	// max active bin slippage allowed
	MaxActiveBinSlippage int32

	// strategy parameters
	StrategyParameters StrategyParameters
}

func (obj LiquidityParameterByStrategy) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `MaxActiveBinSlippage` param:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Serialize `StrategyParameters` param:
	err = encoder.Encode(obj.StrategyParameters)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityParameterByStrategy) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Deserialize `StrategyParameters`:
	err = decoder.Decode(&obj.StrategyParameters)
	if err != nil {
		return err
	}
	return nil
}

type StrategyParameters struct {
	// min bin id
	MinBinId int32

	// max bin id
	MaxBinId int32

	// strategy type
	StrategyType StrategyType

	// parameters
	Parameteres [64]uint8
}

func (obj StrategyParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	// Serialize `StrategyType` param:
	err = encoder.Encode(obj.StrategyType)
	if err != nil {
		return err
	}
	// Serialize `Parameteres` param:
	err = encoder.Encode(obj.Parameteres)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StrategyParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	// Deserialize `StrategyType`:
	err = decoder.Decode(&obj.StrategyType)
	if err != nil {
		return err
	}
	// Deserialize `Parameteres`:
	err = decoder.Decode(&obj.Parameteres)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityOneSideParameter struct {
	// Amount of X token or Y token to deposit
	Amount uint64

	// Active bin that integrator observe off-chain
	ActiveId int32

	// max active bin slippage allowed
	MaxActiveBinSlippage int32

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistributionByWeight
}

func (obj LiquidityOneSideParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `MaxActiveBinSlippage` param:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Serialize `BinLiquidityDist` param:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityOneSideParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

type BinLiquidityDistributionByWeight struct {
	// Define the bin ID wish to deposit to.
	BinId int32

	// weight of liquidity distributed for this bin id
	Weight uint16
}

func (obj BinLiquidityDistributionByWeight) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `Weight` param:
	err = encoder.Encode(obj.Weight)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinLiquidityDistributionByWeight) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `Weight`:
	err = decoder.Decode(&obj.Weight)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityParameterByWeight struct {
	// Amount of X token to deposit
	AmountX uint64

	// Amount of Y token to deposit
	AmountY uint64

	// Active bin that integrator observe off-chain
	ActiveId int32

	// max active bin slippage allowed
	MaxActiveBinSlippage int32

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistributionByWeight
}

func (obj LiquidityParameterByWeight) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `MaxActiveBinSlippage` param:
	err = encoder.Encode(obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Serialize `BinLiquidityDist` param:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityParameterByWeight) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `MaxActiveBinSlippage`:
	err = decoder.Decode(&obj.MaxActiveBinSlippage)
	if err != nil {
		return err
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

type AddLiquiditySingleSidePreciseParameter struct {
	Bins                 []CompressedBinDepositAmount
	DecompressMultiplier uint64
}

func (obj AddLiquiditySingleSidePreciseParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bins` param:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return err
	}
	// Serialize `DecompressMultiplier` param:
	err = encoder.Encode(obj.DecompressMultiplier)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AddLiquiditySingleSidePreciseParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return err
	}
	// Deserialize `DecompressMultiplier`:
	err = decoder.Decode(&obj.DecompressMultiplier)
	if err != nil {
		return err
	}
	return nil
}

type CompressedBinDepositAmount struct {
	BinId  int32
	Amount uint32
}

func (obj CompressedBinDepositAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CompressedBinDepositAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type BinLiquidityDistribution struct {
	// Define the bin ID wish to deposit to.
	BinId int32

	// DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin.
	DistributionX uint16

	// DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin.
	DistributionY uint16
}

func (obj BinLiquidityDistribution) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `DistributionX` param:
	err = encoder.Encode(obj.DistributionX)
	if err != nil {
		return err
	}
	// Serialize `DistributionY` param:
	err = encoder.Encode(obj.DistributionY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinLiquidityDistribution) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `DistributionX`:
	err = decoder.Decode(&obj.DistributionX)
	if err != nil {
		return err
	}
	// Deserialize `DistributionY`:
	err = decoder.Decode(&obj.DistributionY)
	if err != nil {
		return err
	}
	return nil
}

type LiquidityParameter struct {
	// Amount of X token to deposit
	AmountX uint64

	// Amount of Y token to deposit
	AmountY uint64

	// Liquidity distribution to each bins
	BinLiquidityDist []BinLiquidityDistribution
}

func (obj LiquidityParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `BinLiquidityDist` param:
	err = encoder.Encode(obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LiquidityParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `BinLiquidityDist`:
	err = decoder.Decode(&obj.BinLiquidityDist)
	if err != nil {
		return err
	}
	return nil
}

type CustomizableParams struct {
	// Pool price
	ActiveId int32

	// Bin step
	BinStep uint16

	// Base factor
	BaseFactor uint16

	// Activation type. 0 = Slot, 1 = Time. Check ActivationType enum
	ActivationType uint8

	// Whether the pool has an alpha vault
	HasAlphaVault bool

	// Decide when does the pool start trade. None = Now
	ActivationPoint *uint64 `bin:"optional"`

	// Pool creator have permission to enable/disable pool with restricted program validation. Only applicable for customizable permissionless pool.
	CreatorPoolOnOffControl bool

	// Base fee power factor
	BaseFeePowerFactor uint8

	// Padding, for future use
	padding [62]uint8
}

func (obj CustomizableParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `HasAlphaVault` param:
	err = encoder.Encode(obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CreatorPoolOnOffControl` param:
	err = encoder.Encode(obj.CreatorPoolOnOffControl)
	if err != nil {
		return err
	}
	// Serialize `BaseFeePowerFactor` param:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CustomizableParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `HasAlphaVault`:
	err = decoder.Decode(&obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CreatorPoolOnOffControl`:
	err = decoder.Decode(&obj.CreatorPoolOnOffControl)
	if err != nil {
		return err
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type InitPermissionPairIx struct {
	ActiveId           int32
	BinStep            uint16
	BaseFactor         uint16
	BaseFeePowerFactor uint8
	ActivationType     uint8
	ProtocolShare      uint16
}

func (obj InitPermissionPairIx) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `BaseFeePowerFactor` param:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitPermissionPairIx) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

type AddLiquiditySingleSidePreciseParameter2 struct {
	Bins                 []CompressedBinDepositAmount
	DecompressMultiplier uint64
	MaxAmount            uint64
}

func (obj AddLiquiditySingleSidePreciseParameter2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bins` param:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return err
	}
	// Serialize `DecompressMultiplier` param:
	err = encoder.Encode(obj.DecompressMultiplier)
	if err != nil {
		return err
	}
	// Serialize `MaxAmount` param:
	err = encoder.Encode(obj.MaxAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AddLiquiditySingleSidePreciseParameter2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return err
	}
	// Deserialize `DecompressMultiplier`:
	err = decoder.Decode(&obj.DecompressMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `MaxAmount`:
	err = decoder.Decode(&obj.MaxAmount)
	if err != nil {
		return err
	}
	return nil
}

type CompressedBinDepositAmount2 struct {
	BinId  int32
	Amount uint32
}

func (obj CompressedBinDepositAmount2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CompressedBinDepositAmount2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type InitializeLbPair2Params struct {
	// Pool price
	ActiveId int32

	// Padding, for future use
	padding [96]uint8
}

func (obj InitializeLbPair2Params) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeLbPair2Params) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type BinLiquidityReduction struct {
	BinId       int32
	BpsToRemove uint16
}

func (obj BinLiquidityReduction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `BpsToRemove` param:
	err = encoder.Encode(obj.BpsToRemove)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinLiquidityReduction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `BpsToRemove`:
	err = decoder.Decode(&obj.BpsToRemove)
	if err != nil {
		return err
	}
	return nil
}

type Bin struct {
	// Amount of token X in the bin. This already excluded protocol fees.
	AmountX uint64

	// Amount of token Y in the bin. This already excluded protocol fees.
	AmountY uint64

	// Bin price
	Price ag_binary.Uint128

	// Liquidities of the bin. This is the same as LP mint supply. q-number
	LiquiditySupply ag_binary.Uint128

	// reward_a_per_token_stored
	RewardPerTokenStored [2]ag_binary.Uint128

	// Swap fee amount of token X per liquidity deposited.
	FeeAmountXPerTokenStored ag_binary.Uint128

	// Swap fee amount of token Y per liquidity deposited.
	FeeAmountYPerTokenStored ag_binary.Uint128

	// Total token X swap into the bin. Only used for tracking purpose.
	AmountXIn ag_binary.Uint128

	// Total token Y swap into he bin. Only used for tracking purpose.
	AmountYIn ag_binary.Uint128
}

func (obj Bin) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `LiquiditySupply` param:
	err = encoder.Encode(obj.LiquiditySupply)
	if err != nil {
		return err
	}
	// Serialize `RewardPerTokenStored` param:
	err = encoder.Encode(obj.RewardPerTokenStored)
	if err != nil {
		return err
	}
	// Serialize `FeeAmountXPerTokenStored` param:
	err = encoder.Encode(obj.FeeAmountXPerTokenStored)
	if err != nil {
		return err
	}
	// Serialize `FeeAmountYPerTokenStored` param:
	err = encoder.Encode(obj.FeeAmountYPerTokenStored)
	if err != nil {
		return err
	}
	// Serialize `AmountXIn` param:
	err = encoder.Encode(obj.AmountXIn)
	if err != nil {
		return err
	}
	// Serialize `AmountYIn` param:
	err = encoder.Encode(obj.AmountYIn)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Bin) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `LiquiditySupply`:
	err = decoder.Decode(&obj.LiquiditySupply)
	if err != nil {
		return err
	}
	// Deserialize `RewardPerTokenStored`:
	err = decoder.Decode(&obj.RewardPerTokenStored)
	if err != nil {
		return err
	}
	// Deserialize `FeeAmountXPerTokenStored`:
	err = decoder.Decode(&obj.FeeAmountXPerTokenStored)
	if err != nil {
		return err
	}
	// Deserialize `FeeAmountYPerTokenStored`:
	err = decoder.Decode(&obj.FeeAmountYPerTokenStored)
	if err != nil {
		return err
	}
	// Deserialize `AmountXIn`:
	err = decoder.Decode(&obj.AmountXIn)
	if err != nil {
		return err
	}
	// Deserialize `AmountYIn`:
	err = decoder.Decode(&obj.AmountYIn)
	if err != nil {
		return err
	}
	return nil
}

type ProtocolFee struct {
	AmountX uint64
	AmountY uint64
}

func (obj ProtocolFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AmountX` param:
	err = encoder.Encode(obj.AmountX)
	if err != nil {
		return err
	}
	// Serialize `AmountY` param:
	err = encoder.Encode(obj.AmountY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProtocolFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AmountX`:
	err = decoder.Decode(&obj.AmountX)
	if err != nil {
		return err
	}
	// Deserialize `AmountY`:
	err = decoder.Decode(&obj.AmountY)
	if err != nil {
		return err
	}
	return nil
}

type RewardInfo struct {
	// Reward token mint.
	Mint ag_solanago.PublicKey

	// Reward vault token account.
	Vault ag_solanago.PublicKey

	// Authority account that allows to fund rewards
	Funder ag_solanago.PublicKey

	// TODO check whether we need to store it in pool
	RewardDuration uint64

	// TODO check whether we need to store it in pool
	RewardDurationEnd uint64

	// TODO check whether we need to store it in pool
	RewardRate ag_binary.Uint128

	// The last time reward states were updated.
	LastUpdateTime uint64

	// Accumulated seconds where when farm distribute rewards, but the bin is empty. The reward will be accumulated for next reward time window.
	CumulativeSecondsWithEmptyLiquidityReward uint64
}

func (obj RewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Funder` param:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return err
	}
	// Serialize `RewardDuration` param:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return err
	}
	// Serialize `RewardDurationEnd` param:
	err = encoder.Encode(obj.RewardDurationEnd)
	if err != nil {
		return err
	}
	// Serialize `RewardRate` param:
	err = encoder.Encode(obj.RewardRate)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTime` param:
	err = encoder.Encode(obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Serialize `CumulativeSecondsWithEmptyLiquidityReward` param:
	err = encoder.Encode(obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return err
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return err
	}
	// Deserialize `RewardDurationEnd`:
	err = decoder.Decode(&obj.RewardDurationEnd)
	if err != nil {
		return err
	}
	// Deserialize `RewardRate`:
	err = decoder.Decode(&obj.RewardRate)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTime`:
	err = decoder.Decode(&obj.LastUpdateTime)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeSecondsWithEmptyLiquidityReward`:
	err = decoder.Decode(&obj.CumulativeSecondsWithEmptyLiquidityReward)
	if err != nil {
		return err
	}
	return nil
}

type Observation struct {
	// Cumulative active bin ID
	CumulativeActiveBinId ag_binary.Int128

	// Observation sample created timestamp
	CreatedAt int64

	// Observation sample last updated timestamp
	LastUpdatedAt int64
}

func (obj Observation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CumulativeActiveBinId` param:
	err = encoder.Encode(obj.CumulativeActiveBinId)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedAt` param:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Observation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CumulativeActiveBinId`:
	err = decoder.Decode(&obj.CumulativeActiveBinId)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	return nil
}

type StaticParameters struct {
	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32

	// Min bin id supported by the pool based on the configured bin step.
	MinBinId int32

	// Max bin id supported by the pool based on the configured bin step.
	MaxBinId int32

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16

	// Base fee power factor
	BaseFeePowerFactor uint8

	// Padding for bytemuck safe alignment
	padding [5]uint8
}

func (obj StaticParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Serialize `BaseFeePowerFactor` param:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StaticParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type VariableParameters struct {
	// Volatility accumulator measure the number of bin crossed since reference bin ID. Normally (without filter period taken into consideration), reference bin ID is the active bin of last swap.
	// It affects the variable fee rate
	VolatilityAccumulator uint32

	// Volatility reference is decayed volatility accumulator. It is always <= volatility_accumulator
	VolatilityReference uint32

	// Active bin id of last swap.
	IndexReference int32

	// Padding for bytemuck safe alignment
	padding [4]uint8

	// Last timestamp the variable parameters was updated
	LastUpdateTimestamp int64

	// Padding for bytemuck safe alignment
	padding1 [8]uint8
}

func (obj VariableParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VolatilityAccumulator` param:
	err = encoder.Encode(obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `VolatilityReference` param:
	err = encoder.Encode(obj.VolatilityReference)
	if err != nil {
		return err
	}
	// Serialize `IndexReference` param:
	err = encoder.Encode(obj.IndexReference)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTimestamp` param:
	err = encoder.Encode(obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Serialize `padding1` param:
	err = encoder.Encode(obj.padding1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VariableParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VolatilityAccumulator`:
	err = decoder.Decode(&obj.VolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `VolatilityReference`:
	err = decoder.Decode(&obj.VolatilityReference)
	if err != nil {
		return err
	}
	// Deserialize `IndexReference`:
	err = decoder.Decode(&obj.IndexReference)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTimestamp`:
	err = decoder.Decode(&obj.LastUpdateTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `padding1`:
	err = decoder.Decode(&obj.padding1)
	if err != nil {
		return err
	}
	return nil
}

type FeeInfo struct {
	FeeXPerTokenComplete ag_binary.Uint128
	FeeYPerTokenComplete ag_binary.Uint128
	FeeXPending          uint64
	FeeYPending          uint64
}

func (obj FeeInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeXPerTokenComplete` param:
	err = encoder.Encode(obj.FeeXPerTokenComplete)
	if err != nil {
		return err
	}
	// Serialize `FeeYPerTokenComplete` param:
	err = encoder.Encode(obj.FeeYPerTokenComplete)
	if err != nil {
		return err
	}
	// Serialize `FeeXPending` param:
	err = encoder.Encode(obj.FeeXPending)
	if err != nil {
		return err
	}
	// Serialize `FeeYPending` param:
	err = encoder.Encode(obj.FeeYPending)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeXPerTokenComplete`:
	err = decoder.Decode(&obj.FeeXPerTokenComplete)
	if err != nil {
		return err
	}
	// Deserialize `FeeYPerTokenComplete`:
	err = decoder.Decode(&obj.FeeYPerTokenComplete)
	if err != nil {
		return err
	}
	// Deserialize `FeeXPending`:
	err = decoder.Decode(&obj.FeeXPending)
	if err != nil {
		return err
	}
	// Deserialize `FeeYPending`:
	err = decoder.Decode(&obj.FeeYPending)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardInfo struct {
	RewardPerTokenCompletes [2]ag_binary.Uint128
	RewardPendings          [2]uint64
}

func (obj UserRewardInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardPerTokenCompletes` param:
	err = encoder.Encode(obj.RewardPerTokenCompletes)
	if err != nil {
		return err
	}
	// Serialize `RewardPendings` param:
	err = encoder.Encode(obj.RewardPendings)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardPerTokenCompletes`:
	err = decoder.Decode(&obj.RewardPerTokenCompletes)
	if err != nil {
		return err
	}
	// Deserialize `RewardPendings`:
	err = decoder.Decode(&obj.RewardPendings)
	if err != nil {
		return err
	}
	return nil
}

type RemainingAccountsSlice struct {
	AccountsType AccountsType
	Length       uint8
}

func (obj RemainingAccountsSlice) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountsType` param:
	err = encoder.Encode(obj.AccountsType)
	if err != nil {
		return err
	}
	// Serialize `Length` param:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemainingAccountsSlice) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountsType`:
	err = decoder.Decode(&obj.AccountsType)
	if err != nil {
		return err
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return err
	}
	return nil
}

type RemainingAccountsInfo struct {
	Slices []RemainingAccountsSlice
}

func (obj RemainingAccountsInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Slices` param:
	err = encoder.Encode(obj.Slices)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemainingAccountsInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Slices`:
	err = decoder.Decode(&obj.Slices)
	if err != nil {
		return err
	}
	return nil
}

type StrategyType ag_binary.BorshEnum

const (
	StrategyTypeSpotOneSide StrategyType = iota
	StrategyTypeCurveOneSide
	StrategyTypeBidAskOneSide
	StrategyTypeSpotBalanced
	StrategyTypeCurveBalanced
	StrategyTypeBidAskBalanced
	StrategyTypeSpotImBalanced
	StrategyTypeCurveImBalanced
	StrategyTypeBidAskImBalanced
)

func (value StrategyType) String() string {
	switch value {
	case StrategyTypeSpotOneSide:
		return "SpotOneSide"
	case StrategyTypeCurveOneSide:
		return "CurveOneSide"
	case StrategyTypeBidAskOneSide:
		return "BidAskOneSide"
	case StrategyTypeSpotBalanced:
		return "SpotBalanced"
	case StrategyTypeCurveBalanced:
		return "CurveBalanced"
	case StrategyTypeBidAskBalanced:
		return "BidAskBalanced"
	case StrategyTypeSpotImBalanced:
		return "SpotImBalanced"
	case StrategyTypeCurveImBalanced:
		return "CurveImBalanced"
	case StrategyTypeBidAskImBalanced:
		return "BidAskImBalanced"
	default:
		return ""
	}
}

type Rounding ag_binary.BorshEnum

const (
	RoundingUp Rounding = iota
	RoundingDown
)

func (value Rounding) String() string {
	switch value {
	case RoundingUp:
		return "Up"
	case RoundingDown:
		return "Down"
	default:
		return ""
	}
}

type ActivationType ag_binary.BorshEnum

const (
	ActivationTypeSlot ActivationType = iota
	ActivationTypeTimestamp
)

func (value ActivationType) String() string {
	switch value {
	case ActivationTypeSlot:
		return "Slot"
	case ActivationTypeTimestamp:
		return "Timestamp"
	default:
		return ""
	}
}

type LayoutVersion ag_binary.BorshEnum

const (
	LayoutVersionV0 LayoutVersion = iota
	LayoutVersionV1
)

func (value LayoutVersion) String() string {
	switch value {
	case LayoutVersionV0:
		return "V0"
	case LayoutVersionV1:
		return "V1"
	default:
		return ""
	}
}

type PairType ag_binary.BorshEnum

const (
	PairTypePermissionless PairType = iota
	PairTypePermission
	PairTypeCustomizablePermissionless
	PairTypePermissionlessV2
)

func (value PairType) String() string {
	switch value {
	case PairTypePermissionless:
		return "Permissionless"
	case PairTypePermission:
		return "Permission"
	case PairTypeCustomizablePermissionless:
		return "CustomizablePermissionless"
	case PairTypePermissionlessV2:
		return "PermissionlessV2"
	default:
		return ""
	}
}

type PairStatus ag_binary.BorshEnum

const (
	PairStatusEnabled PairStatus = iota
	PairStatusDisabled
)

func (value PairStatus) String() string {
	switch value {
	case PairStatusEnabled:
		return "Enabled"
	case PairStatusDisabled:
		return "Disabled"
	default:
		return ""
	}
}

type TokenProgramFlags ag_binary.BorshEnum

const (
	TokenProgramFlagsTokenProgram TokenProgramFlags = iota
	TokenProgramFlagsTokenProgram2022
)

func (value TokenProgramFlags) String() string {
	switch value {
	case TokenProgramFlagsTokenProgram:
		return "TokenProgram"
	case TokenProgramFlagsTokenProgram2022:
		return "TokenProgram2022"
	default:
		return ""
	}
}

type AccountsType ag_binary.BorshEnum

const (
	AccountsTypeTransferHookX AccountsType = iota
	AccountsTypeTransferHookY
	AccountsTypeTransferHookReward
)

func (value AccountsType) String() string {
	switch value {
	case AccountsTypeTransferHookX:
		return "TransferHookX"
	case AccountsTypeTransferHookY:
		return "TransferHookY"
	case AccountsTypeTransferHookReward:
		return "TransferHookReward"
	default:
		return ""
	}
}

type BinArrayBitmapExtension struct {
	LbPair ag_solanago.PublicKey

	// Packed initialized bin array state for start_bin_index is positive
	PositiveBinArrayBitmap [12][8]uint64

	// Packed initialized bin array state for start_bin_index is negative
	NegativeBinArrayBitmap [12][8]uint64
}

func (obj BinArrayBitmapExtension) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `PositiveBinArrayBitmap` param:
	err = encoder.Encode(obj.PositiveBinArrayBitmap)
	if err != nil {
		return err
	}
	// Serialize `NegativeBinArrayBitmap` param:
	err = encoder.Encode(obj.NegativeBinArrayBitmap)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinArrayBitmapExtension) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `PositiveBinArrayBitmap`:
	err = decoder.Decode(&obj.PositiveBinArrayBitmap)
	if err != nil {
		return err
	}
	// Deserialize `NegativeBinArrayBitmap`:
	err = decoder.Decode(&obj.NegativeBinArrayBitmap)
	if err != nil {
		return err
	}
	return nil
}

type BinArray struct {
	Index int64

	// Version of binArray
	Version uint8
	padding [7]uint8
	LbPair  ag_solanago.PublicKey
	Bins    [70]Bin
}

func (obj BinArray) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Bins` param:
	err = encoder.Encode(obj.Bins)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BinArray) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Bins`:
	err = decoder.Decode(&obj.Bins)
	if err != nil {
		return err
	}
	return nil
}

type ClaimFeeOperator struct {
	// operator
	Operator ag_solanago.PublicKey

	// Reserve
	padding [128]uint8
}

func (obj ClaimFeeOperator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimFeeOperator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type LbPair struct {
	Parameters  StaticParameters
	VParameters VariableParameters
	BumpSeed    [1]uint8

	// Bin step signer seed
	BinStepSeed [2]uint8

	// Type of the pair
	PairType uint8

	// Active bin id
	ActiveId int32

	// Bin step. Represent the price increment / decrement.
	BinStep uint16

	// Status of the pair. Check PairStatus enum.
	Status uint8

	// Require base factor seed
	RequireBaseFactorSeed uint8

	// Base factor seed
	BaseFactorSeed [2]uint8

	// Activation type
	ActivationType uint8

	// Allow pool creator to enable/disable pool with restricted validation. Only applicable for customizable permissionless pair type.
	CreatorPoolOnOffControl uint8

	// Token X mint
	TokenXMint ag_solanago.PublicKey

	// Token Y mint
	TokenYMint ag_solanago.PublicKey

	// LB token X vault
	ReserveX ag_solanago.PublicKey

	// LB token Y vault
	ReserveY ag_solanago.PublicKey

	// Uncollected protocol fee
	ProtocolFee ProtocolFee

	// _padding_1, previous Fee owner, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	padding1 [32]uint8

	// Farming reward information
	RewardInfos [2]RewardInfo

	// Oracle pubkey
	Oracle ag_solanago.PublicKey

	// Packed initialized bin array state
	BinArrayBitmap [16]uint64

	// Last time the pool fee parameter was updated
	LastUpdatedAt int64

	// _padding_2, previous whitelisted_wallet, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	padding2 [32]uint8

	// Address allowed to swap when the current point is greater than or equal to the pre-activation point. The pre-activation point is calculated as `activation_point - pre_activation_duration`.
	PreActivationSwapAddress ag_solanago.PublicKey

	// Base keypair. Only required for permission pair
	BaseKey ag_solanago.PublicKey

	// Time point to enable the pair. Only applicable for permission pair.
	ActivationPoint uint64

	// Duration before activation activation_point. Used to calculate pre-activation time point for pre_activation_swap_address
	PreActivationDuration uint64

	// _padding 3 is reclaimed free space from swap_cap_deactivate_point and swap_cap_amount before, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	padding3 [8]uint8

	// _padding_4, previous lock_duration, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	padding4 uint64

	// Pool creator
	Creator ag_solanago.PublicKey

	// token_mint_x_program_flag
	TokenMintXProgramFlag uint8

	// token_mint_y_program_flag
	TokenMintYProgramFlag uint8

	// Reserved space for future use
	Reserved [22]uint8
}

func (obj LbPair) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Parameters` param:
	err = encoder.Encode(obj.Parameters)
	if err != nil {
		return err
	}
	// Serialize `VParameters` param:
	err = encoder.Encode(obj.VParameters)
	if err != nil {
		return err
	}
	// Serialize `BumpSeed` param:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return err
	}
	// Serialize `BinStepSeed` param:
	err = encoder.Encode(obj.BinStepSeed)
	if err != nil {
		return err
	}
	// Serialize `PairType` param:
	err = encoder.Encode(obj.PairType)
	if err != nil {
		return err
	}
	// Serialize `ActiveId` param:
	err = encoder.Encode(obj.ActiveId)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `RequireBaseFactorSeed` param:
	err = encoder.Encode(obj.RequireBaseFactorSeed)
	if err != nil {
		return err
	}
	// Serialize `BaseFactorSeed` param:
	err = encoder.Encode(obj.BaseFactorSeed)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `CreatorPoolOnOffControl` param:
	err = encoder.Encode(obj.CreatorPoolOnOffControl)
	if err != nil {
		return err
	}
	// Serialize `TokenXMint` param:
	err = encoder.Encode(obj.TokenXMint)
	if err != nil {
		return err
	}
	// Serialize `TokenYMint` param:
	err = encoder.Encode(obj.TokenYMint)
	if err != nil {
		return err
	}
	// Serialize `ReserveX` param:
	err = encoder.Encode(obj.ReserveX)
	if err != nil {
		return err
	}
	// Serialize `ReserveY` param:
	err = encoder.Encode(obj.ReserveY)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `padding1` param:
	err = encoder.Encode(obj.padding1)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `BinArrayBitmap` param:
	err = encoder.Encode(obj.BinArrayBitmap)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedAt` param:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `padding2` param:
	err = encoder.Encode(obj.padding2)
	if err != nil {
		return err
	}
	// Serialize `PreActivationSwapAddress` param:
	err = encoder.Encode(obj.PreActivationSwapAddress)
	if err != nil {
		return err
	}
	// Serialize `BaseKey` param:
	err = encoder.Encode(obj.BaseKey)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `PreActivationDuration` param:
	err = encoder.Encode(obj.PreActivationDuration)
	if err != nil {
		return err
	}
	// Serialize `padding3` param:
	err = encoder.Encode(obj.padding3)
	if err != nil {
		return err
	}
	// Serialize `padding4` param:
	err = encoder.Encode(obj.padding4)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `TokenMintXProgramFlag` param:
	err = encoder.Encode(obj.TokenMintXProgramFlag)
	if err != nil {
		return err
	}
	// Serialize `TokenMintYProgramFlag` param:
	err = encoder.Encode(obj.TokenMintYProgramFlag)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LbPair) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Parameters`:
	err = decoder.Decode(&obj.Parameters)
	if err != nil {
		return err
	}
	// Deserialize `VParameters`:
	err = decoder.Decode(&obj.VParameters)
	if err != nil {
		return err
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return err
	}
	// Deserialize `BinStepSeed`:
	err = decoder.Decode(&obj.BinStepSeed)
	if err != nil {
		return err
	}
	// Deserialize `PairType`:
	err = decoder.Decode(&obj.PairType)
	if err != nil {
		return err
	}
	// Deserialize `ActiveId`:
	err = decoder.Decode(&obj.ActiveId)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `RequireBaseFactorSeed`:
	err = decoder.Decode(&obj.RequireBaseFactorSeed)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactorSeed`:
	err = decoder.Decode(&obj.BaseFactorSeed)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `CreatorPoolOnOffControl`:
	err = decoder.Decode(&obj.CreatorPoolOnOffControl)
	if err != nil {
		return err
	}
	// Deserialize `TokenXMint`:
	err = decoder.Decode(&obj.TokenXMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenYMint`:
	err = decoder.Decode(&obj.TokenYMint)
	if err != nil {
		return err
	}
	// Deserialize `ReserveX`:
	err = decoder.Decode(&obj.ReserveX)
	if err != nil {
		return err
	}
	// Deserialize `ReserveY`:
	err = decoder.Decode(&obj.ReserveY)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `padding1`:
	err = decoder.Decode(&obj.padding1)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `BinArrayBitmap`:
	err = decoder.Decode(&obj.BinArrayBitmap)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `padding2`:
	err = decoder.Decode(&obj.padding2)
	if err != nil {
		return err
	}
	// Deserialize `PreActivationSwapAddress`:
	err = decoder.Decode(&obj.PreActivationSwapAddress)
	if err != nil {
		return err
	}
	// Deserialize `BaseKey`:
	err = decoder.Decode(&obj.BaseKey)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `PreActivationDuration`:
	err = decoder.Decode(&obj.PreActivationDuration)
	if err != nil {
		return err
	}
	// Deserialize `padding3`:
	err = decoder.Decode(&obj.padding3)
	if err != nil {
		return err
	}
	// Deserialize `padding4`:
	err = decoder.Decode(&obj.padding4)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintXProgramFlag`:
	err = decoder.Decode(&obj.TokenMintXProgramFlag)
	if err != nil {
		return err
	}
	// Deserialize `TokenMintYProgramFlag`:
	err = decoder.Decode(&obj.TokenMintYProgramFlag)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type Oracle struct {
	// Index of latest observation
	Idx uint64

	// Size of active sample. Active sample is initialized observation.
	ActiveSize uint64

	// Number of observations
	Length uint64
}

func (obj Oracle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Idx` param:
	err = encoder.Encode(obj.Idx)
	if err != nil {
		return err
	}
	// Serialize `ActiveSize` param:
	err = encoder.Encode(obj.ActiveSize)
	if err != nil {
		return err
	}
	// Serialize `Length` param:
	err = encoder.Encode(obj.Length)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Oracle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Idx`:
	err = decoder.Decode(&obj.Idx)
	if err != nil {
		return err
	}
	// Deserialize `ActiveSize`:
	err = decoder.Decode(&obj.ActiveSize)
	if err != nil {
		return err
	}
	// Deserialize `Length`:
	err = decoder.Decode(&obj.Length)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	// The LB pair of this position
	LbPair ag_solanago.PublicKey

	// Owner of the position. Client rely on this to to fetch their positions.
	Owner ag_solanago.PublicKey

	// Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept.
	LiquidityShares [70]uint64

	// Farming reward information
	RewardInfos [70]UserRewardInfo

	// Swap fee to claim information
	FeeInfos [70]FeeInfo

	// Lower bin ID
	LowerBinId int32

	// Upper bin ID
	UpperBinId int32

	// Last updated timestamp
	LastUpdatedAt int64

	// Total claimed token fee X
	TotalClaimedFeeXAmount uint64

	// Total claimed token fee Y
	TotalClaimedFeeYAmount uint64

	// Total claimed rewards
	TotalClaimedRewards [2]uint64

	// Reserved space for future use
	Reserved [160]uint8
}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `LiquidityShares` param:
	err = encoder.Encode(obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `FeeInfos` param:
	err = encoder.Encode(obj.FeeInfos)
	if err != nil {
		return err
	}
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `UpperBinId` param:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedAt` param:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedFeeXAmount` param:
	err = encoder.Encode(obj.TotalClaimedFeeXAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedFeeYAmount` param:
	err = encoder.Encode(obj.TotalClaimedFeeYAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedRewards` param:
	err = encoder.Encode(obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityShares`:
	err = decoder.Decode(&obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `FeeInfos`:
	err = decoder.Decode(&obj.FeeInfos)
	if err != nil {
		return err
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedFeeXAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeXAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedFeeYAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeYAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedRewards`:
	err = decoder.Decode(&obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type PositionV2 struct {
	// The LB pair of this position
	LbPair ag_solanago.PublicKey

	// Owner of the position. Client rely on this to to fetch their positions.
	Owner ag_solanago.PublicKey

	// Liquidity shares of this position in bins (lower_bin_id <-> upper_bin_id). This is the same as LP concept.
	LiquidityShares [70]ag_binary.Uint128

	// Farming reward information
	RewardInfos [70]UserRewardInfo

	// Swap fee to claim information
	FeeInfos [70]FeeInfo

	// Lower bin ID
	LowerBinId int32

	// Upper bin ID
	UpperBinId int32

	// Last updated timestamp
	LastUpdatedAt int64

	// Total claimed token fee X
	TotalClaimedFeeXAmount uint64

	// Total claimed token fee Y
	TotalClaimedFeeYAmount uint64

	// Total claimed rewards
	TotalClaimedRewards [2]uint64

	// Operator of position
	Operator ag_solanago.PublicKey

	// Time point which the locked liquidity can be withdraw
	LockReleasePoint uint64

	// _padding_0, previous subjected_to_bootstrap_liquidity_locking, BE CAREFUL FOR TOMBSTONE WHEN REUSE !!
	padding0 uint8

	// Address is able to claim fee in this position, only valid for bootstrap_liquidity_position
	FeeOwner ag_solanago.PublicKey

	// Reserved space for future use
	Reserved [87]uint8
}

func (obj PositionV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `LiquidityShares` param:
	err = encoder.Encode(obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Serialize `RewardInfos` param:
	err = encoder.Encode(obj.RewardInfos)
	if err != nil {
		return err
	}
	// Serialize `FeeInfos` param:
	err = encoder.Encode(obj.FeeInfos)
	if err != nil {
		return err
	}
	// Serialize `LowerBinId` param:
	err = encoder.Encode(obj.LowerBinId)
	if err != nil {
		return err
	}
	// Serialize `UpperBinId` param:
	err = encoder.Encode(obj.UpperBinId)
	if err != nil {
		return err
	}
	// Serialize `LastUpdatedAt` param:
	err = encoder.Encode(obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedFeeXAmount` param:
	err = encoder.Encode(obj.TotalClaimedFeeXAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedFeeYAmount` param:
	err = encoder.Encode(obj.TotalClaimedFeeYAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalClaimedRewards` param:
	err = encoder.Encode(obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `LockReleasePoint` param:
	err = encoder.Encode(obj.LockReleasePoint)
	if err != nil {
		return err
	}
	// Serialize `padding0` param:
	err = encoder.Encode(obj.padding0)
	if err != nil {
		return err
	}
	// Serialize `FeeOwner` param:
	err = encoder.Encode(obj.FeeOwner)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityShares`:
	err = decoder.Decode(&obj.LiquidityShares)
	if err != nil {
		return err
	}
	// Deserialize `RewardInfos`:
	err = decoder.Decode(&obj.RewardInfos)
	if err != nil {
		return err
	}
	// Deserialize `FeeInfos`:
	err = decoder.Decode(&obj.FeeInfos)
	if err != nil {
		return err
	}
	// Deserialize `LowerBinId`:
	err = decoder.Decode(&obj.LowerBinId)
	if err != nil {
		return err
	}
	// Deserialize `UpperBinId`:
	err = decoder.Decode(&obj.UpperBinId)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdatedAt`:
	err = decoder.Decode(&obj.LastUpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedFeeXAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeXAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedFeeYAmount`:
	err = decoder.Decode(&obj.TotalClaimedFeeYAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalClaimedRewards`:
	err = decoder.Decode(&obj.TotalClaimedRewards)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `LockReleasePoint`:
	err = decoder.Decode(&obj.LockReleasePoint)
	if err != nil {
		return err
	}
	// Deserialize `padding0`:
	err = decoder.Decode(&obj.padding0)
	if err != nil {
		return err
	}
	// Deserialize `FeeOwner`:
	err = decoder.Decode(&obj.FeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type PresetParameter2 struct {
	// Bin step. Represent the price increment / decrement.
	BinStep uint16

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16

	// index
	Index uint16

	// Base fee power factor
	BaseFeePowerFactor uint8

	// Padding 0 for future use
	padding0 uint8

	// Padding 1 for future use
	padding1 [20]uint64
}

func (obj PresetParameter2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `BaseFeePowerFactor` param:
	err = encoder.Encode(obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	// Serialize `padding0` param:
	err = encoder.Encode(obj.padding0)
	if err != nil {
		return err
	}
	// Serialize `padding1` param:
	err = encoder.Encode(obj.padding1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PresetParameter2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `BaseFeePowerFactor`:
	err = decoder.Decode(&obj.BaseFeePowerFactor)
	if err != nil {
		return err
	}
	// Deserialize `padding0`:
	err = decoder.Decode(&obj.padding0)
	if err != nil {
		return err
	}
	// Deserialize `padding1`:
	err = decoder.Decode(&obj.padding1)
	if err != nil {
		return err
	}
	return nil
}

type PresetParameter struct {
	// Bin step. Represent the price increment / decrement.
	BinStep uint16

	// Used for base fee calculation. base_fee_rate = base_factor * bin_step * 10 * 10^base_fee_power_factor
	BaseFactor uint16

	// Filter period determine high frequency trading time window.
	FilterPeriod uint16

	// Decay period determine when the volatile fee start decay / decrease.
	DecayPeriod uint16

	// Reduction factor controls the volatile fee rate decrement rate.
	ReductionFactor uint16

	// Used to scale the variable fee component depending on the dynamic of the market
	VariableFeeControl uint32

	// Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate.
	MaxVolatilityAccumulator uint32

	// Min bin id supported by the pool based on the configured bin step.
	MinBinId int32

	// Max bin id supported by the pool based on the configured bin step.
	MaxBinId int32

	// Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee
	ProtocolShare uint16
}

func (obj PresetParameter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PresetParameter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	return nil
}

type TokenBadge struct {
	// token mint
	TokenMint ag_solanago.PublicKey

	// Reserve
	padding [128]uint8
}

func (obj TokenBadge) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `padding` param:
	err = encoder.Encode(obj.padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenBadge) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `padding`:
	err = decoder.Decode(&obj.padding)
	if err != nil {
		return err
	}
	return nil
}

type CompositionFee struct {
	From                    ag_solanago.PublicKey
	BinId                   int16
	TokenXFeeAmount         uint64
	TokenYFeeAmount         uint64
	ProtocolTokenXFeeAmount uint64
	ProtocolTokenYFeeAmount uint64
}

func (obj CompositionFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `From` param:
	err = encoder.Encode(obj.From)
	if err != nil {
		return err
	}
	// Serialize `BinId` param:
	err = encoder.Encode(obj.BinId)
	if err != nil {
		return err
	}
	// Serialize `TokenXFeeAmount` param:
	err = encoder.Encode(obj.TokenXFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenYFeeAmount` param:
	err = encoder.Encode(obj.TokenYFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTokenXFeeAmount` param:
	err = encoder.Encode(obj.ProtocolTokenXFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTokenYFeeAmount` param:
	err = encoder.Encode(obj.ProtocolTokenYFeeAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CompositionFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `From`:
	err = decoder.Decode(&obj.From)
	if err != nil {
		return err
	}
	// Deserialize `BinId`:
	err = decoder.Decode(&obj.BinId)
	if err != nil {
		return err
	}
	// Deserialize `TokenXFeeAmount`:
	err = decoder.Decode(&obj.TokenXFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenYFeeAmount`:
	err = decoder.Decode(&obj.TokenYFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTokenXFeeAmount`:
	err = decoder.Decode(&obj.ProtocolTokenXFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTokenYFeeAmount`:
	err = decoder.Decode(&obj.ProtocolTokenYFeeAmount)
	if err != nil {
		return err
	}
	return nil
}

type PositionClose struct {
	Position ag_solanago.PublicKey
	Owner    ag_solanago.PublicKey
}

func (obj PositionClose) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionClose) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

type LbPairCreate struct {
	LbPair  ag_solanago.PublicKey
	BinStep uint16
	TokenX  ag_solanago.PublicKey
	TokenY  ag_solanago.PublicKey
}

func (obj LbPairCreate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `BinStep` param:
	err = encoder.Encode(obj.BinStep)
	if err != nil {
		return err
	}
	// Serialize `TokenX` param:
	err = encoder.Encode(obj.TokenX)
	if err != nil {
		return err
	}
	// Serialize `TokenY` param:
	err = encoder.Encode(obj.TokenY)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LbPairCreate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `BinStep`:
	err = decoder.Decode(&obj.BinStep)
	if err != nil {
		return err
	}
	// Deserialize `TokenX`:
	err = decoder.Decode(&obj.TokenX)
	if err != nil {
		return err
	}
	// Deserialize `TokenY`:
	err = decoder.Decode(&obj.TokenY)
	if err != nil {
		return err
	}
	return nil
}

type PositionCreate struct {
	LbPair   ag_solanago.PublicKey
	Position ag_solanago.PublicKey
	Owner    ag_solanago.PublicKey
}

func (obj PositionCreate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PositionCreate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

type IncreasePositionLength struct {
	LbPair      ag_solanago.PublicKey
	Position    ag_solanago.PublicKey
	Owner       ag_solanago.PublicKey
	LengthToAdd uint16
	Side        uint8
}

func (obj IncreasePositionLength) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `LengthToAdd` param:
	err = encoder.Encode(obj.LengthToAdd)
	if err != nil {
		return err
	}
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *IncreasePositionLength) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `LengthToAdd`:
	err = decoder.Decode(&obj.LengthToAdd)
	if err != nil {
		return err
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

type DecreasePositionLength struct {
	LbPair         ag_solanago.PublicKey
	Position       ag_solanago.PublicKey
	Owner          ag_solanago.PublicKey
	LengthToRemove uint16
	Side           uint8
}

func (obj DecreasePositionLength) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `LengthToRemove` param:
	err = encoder.Encode(obj.LengthToRemove)
	if err != nil {
		return err
	}
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DecreasePositionLength) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `LengthToRemove`:
	err = decoder.Decode(&obj.LengthToRemove)
	if err != nil {
		return err
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

type FeeParameterUpdate struct {
	LbPair        ag_solanago.PublicKey
	ProtocolShare uint16
	BaseFactor    uint16
}

func (obj FeeParameterUpdate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `ProtocolShare` param:
	err = encoder.Encode(obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Serialize `BaseFactor` param:
	err = encoder.Encode(obj.BaseFactor)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FeeParameterUpdate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolShare`:
	err = decoder.Decode(&obj.ProtocolShare)
	if err != nil {
		return err
	}
	// Deserialize `BaseFactor`:
	err = decoder.Decode(&obj.BaseFactor)
	if err != nil {
		return err
	}
	return nil
}

type DynamicFeeParameterUpdate struct {
	LbPair                   ag_solanago.PublicKey
	FilterPeriod             uint16
	DecayPeriod              uint16
	ReductionFactor          uint16
	VariableFeeControl       uint32
	MaxVolatilityAccumulator uint32
}

func (obj DynamicFeeParameterUpdate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LbPair` param:
	err = encoder.Encode(obj.LbPair)
	if err != nil {
		return err
	}
	// Serialize `FilterPeriod` param:
	err = encoder.Encode(obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Serialize `DecayPeriod` param:
	err = encoder.Encode(obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Serialize `ReductionFactor` param:
	err = encoder.Encode(obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Serialize `VariableFeeControl` param:
	err = encoder.Encode(obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Serialize `MaxVolatilityAccumulator` param:
	err = encoder.Encode(obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DynamicFeeParameterUpdate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LbPair`:
	err = decoder.Decode(&obj.LbPair)
	if err != nil {
		return err
	}
	// Deserialize `FilterPeriod`:
	err = decoder.Decode(&obj.FilterPeriod)
	if err != nil {
		return err
	}
	// Deserialize `DecayPeriod`:
	err = decoder.Decode(&obj.DecayPeriod)
	if err != nil {
		return err
	}
	// Deserialize `ReductionFactor`:
	err = decoder.Decode(&obj.ReductionFactor)
	if err != nil {
		return err
	}
	// Deserialize `VariableFeeControl`:
	err = decoder.Decode(&obj.VariableFeeControl)
	if err != nil {
		return err
	}
	// Deserialize `MaxVolatilityAccumulator`:
	err = decoder.Decode(&obj.MaxVolatilityAccumulator)
	if err != nil {
		return err
	}
	return nil
}

type IncreaseObservation struct {
	Oracle               ag_solanago.PublicKey
	NewObservationLength uint64
}

func (obj IncreaseObservation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `NewObservationLength` param:
	err = encoder.Encode(obj.NewObservationLength)
	if err != nil {
		return err
	}
	return nil
}

func (obj *IncreaseObservation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `NewObservationLength`:
	err = decoder.Decode(&obj.NewObservationLength)
	if err != nil {
		return err
	}
	return nil
}

type UpdatePositionLockReleasePoint struct {
	Position            ag_solanago.PublicKey
	CurrentPoint        uint64
	NewLockReleasePoint uint64
	OldLockReleasePoint uint64
	Sender              ag_solanago.PublicKey
}

func (obj UpdatePositionLockReleasePoint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `CurrentPoint` param:
	err = encoder.Encode(obj.CurrentPoint)
	if err != nil {
		return err
	}
	// Serialize `NewLockReleasePoint` param:
	err = encoder.Encode(obj.NewLockReleasePoint)
	if err != nil {
		return err
	}
	// Serialize `OldLockReleasePoint` param:
	err = encoder.Encode(obj.OldLockReleasePoint)
	if err != nil {
		return err
	}
	// Serialize `Sender` param:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UpdatePositionLockReleasePoint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `CurrentPoint`:
	err = decoder.Decode(&obj.CurrentPoint)
	if err != nil {
		return err
	}
	// Deserialize `NewLockReleasePoint`:
	err = decoder.Decode(&obj.NewLockReleasePoint)
	if err != nil {
		return err
	}
	// Deserialize `OldLockReleasePoint`:
	err = decoder.Decode(&obj.OldLockReleasePoint)
	if err != nil {
		return err
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return err
	}
	return nil
}
