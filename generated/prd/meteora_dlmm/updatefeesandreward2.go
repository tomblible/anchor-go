// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateFeesAndReward2 is the `update_fees_and_reward2` instruction.
type UpdateFeesAndReward2 struct {
	MinBinId *int32
	MaxBinId *int32

	// [0] = [WRITE] position
	//
	// [1] = [WRITE] lb_pair
	//
	// [2] = [SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateFeesAndReward2InstructionBuilder creates a new `UpdateFeesAndReward2` instruction builder.
func NewUpdateFeesAndReward2InstructionBuilder() *UpdateFeesAndReward2 {
	nd := &UpdateFeesAndReward2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetMinBinId sets the "min_bin_id" parameter.
func (inst *UpdateFeesAndReward2) SetMinBinId(min_bin_id int32) *UpdateFeesAndReward2 {
	inst.MinBinId = &min_bin_id
	return inst
}

// SetMaxBinId sets the "max_bin_id" parameter.
func (inst *UpdateFeesAndReward2) SetMaxBinId(max_bin_id int32) *UpdateFeesAndReward2 {
	inst.MaxBinId = &max_bin_id
	return inst
}

// SetPositionAccount sets the "position" account.
func (inst *UpdateFeesAndReward2) SetPositionAccount(position ag_solanago.PublicKey) *UpdateFeesAndReward2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *UpdateFeesAndReward2) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *UpdateFeesAndReward2) SetLbPairAccount(lbPair ag_solanago.PublicKey) *UpdateFeesAndReward2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *UpdateFeesAndReward2) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOwnerAccount sets the "owner" account.
func (inst *UpdateFeesAndReward2) SetOwnerAccount(owner ag_solanago.PublicKey) *UpdateFeesAndReward2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *UpdateFeesAndReward2) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst *UpdateFeesAndReward2) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *UpdateFeesAndReward2) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *UpdateFeesAndReward2 {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:3], metas...)
	return inst
}

func (inst *UpdateFeesAndReward2) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3:]
}

func (inst UpdateFeesAndReward2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateFeesAndReward2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateFeesAndReward2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateFeesAndReward2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MinBinId == nil {
			return errors.New("minBinId parameter is not set")
		}
		if inst.MaxBinId == nil {
			return errors.New("maxBinId parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 3 {
		return errors.New("accounts slice has wrong length: expected 3 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *UpdateFeesAndReward2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateFeesAndReward2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  MinBinId", *inst.MinBinId))
						paramsBranch.Child(ag_format.Param("  MaxBinId", *inst.MaxBinId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("position", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" lb_pair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   owner", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateFeesAndReward2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MinBinId` param:
	err = encoder.Encode(obj.MinBinId)
	if err != nil {
		return err
	}
	// Serialize `MaxBinId` param:
	err = encoder.Encode(obj.MaxBinId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateFeesAndReward2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MinBinId`:
	err = decoder.Decode(&obj.MinBinId)
	if err != nil {
		return err
	}
	// Deserialize `MaxBinId`:
	err = decoder.Decode(&obj.MaxBinId)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateFeesAndReward2Instruction declares a new UpdateFeesAndReward2 instruction with the provided parameters and accounts.
func NewUpdateFeesAndReward2Instruction(
	// Parameters:
	min_bin_id int32,
	max_bin_id int32,
	// Accounts:
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *UpdateFeesAndReward2 {
	return NewUpdateFeesAndReward2InstructionBuilder().
		SetMinBinId(min_bin_id).
		SetMaxBinId(max_bin_id).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetOwnerAccount(owner)
}

// NewSimpleUpdateFeesAndReward2Instruction declares a new UpdateFeesAndReward2 instruction with the provided parameters and accounts.
func NewSimpleUpdateFeesAndReward2Instruction(
	// Parameters:
	min_bin_id int32,
	max_bin_id int32,
	// Accounts:
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *UpdateFeesAndReward2 {
	return NewUpdateFeesAndReward2InstructionBuilder().
		SetMinBinId(min_bin_id).
		SetMaxBinId(max_bin_id).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetOwnerAccount(owner)
}
