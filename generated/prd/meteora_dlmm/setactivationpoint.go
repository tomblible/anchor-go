// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetActivationPoint is the `set_activation_point` instruction.
type SetActivationPoint struct {
	ActivationPoint *uint64

	// [0] = [WRITE] lb_pair
	//
	// [1] = [WRITE, SIGNER] admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetActivationPointInstructionBuilder creates a new `SetActivationPoint` instruction builder.
func NewSetActivationPointInstructionBuilder() *SetActivationPoint {
	nd := &SetActivationPoint{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetActivationPoint sets the "activation_point" parameter.
func (inst *SetActivationPoint) SetActivationPoint(activation_point uint64) *SetActivationPoint {
	inst.ActivationPoint = &activation_point
	return inst
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *SetActivationPoint) SetLbPairAccount(lbPair ag_solanago.PublicKey) *SetActivationPoint {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *SetActivationPoint) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *SetActivationPoint) SetAdminAccount(admin ag_solanago.PublicKey) *SetActivationPoint {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *SetActivationPoint) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst *SetActivationPoint) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *SetActivationPoint) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *SetActivationPoint {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:2], metas...)
	return inst
}

func (inst *SetActivationPoint) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2:]
}

func (inst SetActivationPoint) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetActivationPoint,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetActivationPoint) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetActivationPoint) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ActivationPoint == nil {
			return errors.New("activationPoint parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) != 2 {
		return errors.New("accounts slice has wrong length: expected 2 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.LbPair is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *SetActivationPoint) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetActivationPoint")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" ActivationPoint", *inst.ActivationPoint))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("lb_pair", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  admin", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetActivationPoint) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetActivationPoint) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	return nil
}

// NewSetActivationPointInstruction declares a new SetActivationPoint instruction with the provided parameters and accounts.
func NewSetActivationPointInstruction(
	// Parameters:
	activation_point uint64,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *SetActivationPoint {
	return NewSetActivationPointInstructionBuilder().
		SetActivationPoint(activation_point).
		SetLbPairAccount(lbPair).
		SetAdminAccount(admin)
}

// NewSimpleSetActivationPointInstruction declares a new SetActivationPoint instruction with the provided parameters and accounts.
func NewSimpleSetActivationPointInstruction(
	// Parameters:
	activation_point uint64,
	// Accounts:
	lbPair ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *SetActivationPoint {
	return NewSetActivationPointInstructionBuilder().
		SetActivationPoint(activation_point).
		SetLbPairAccount(lbPair).
		SetAdminAccount(admin)
}
