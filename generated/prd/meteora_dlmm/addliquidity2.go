// Code generated by https://github.com/zheng-lan/anchor-go. DO NOT EDIT.

package meteora_dlmm

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddLiquidity2 is the `add_liquidity2` instruction.
type AddLiquidity2 struct {
	LiquidityParameter    *LiquidityParameter
	RemainingAccountsInfo *RemainingAccountsInfo

	// [0] = [WRITE] position
	//
	// [1] = [WRITE] lb_pair
	//
	// [2] = [WRITE] bin_array_bitmap_extension
	//
	// [3] = [WRITE] user_token_x
	//
	// [4] = [WRITE] user_token_y
	//
	// [5] = [WRITE] reserve_x
	//
	// [6] = [WRITE] reserve_y
	//
	// [7] = [] token_x_mint
	//
	// [8] = [] token_y_mint
	//
	// [9] = [SIGNER] sender
	//
	// [10] = [] token_x_program
	//
	// [11] = [] token_y_program
	//
	// [12] = [] event_authority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddLiquidity2InstructionBuilder creates a new `AddLiquidity2` instruction builder.
func NewAddLiquidity2InstructionBuilder() *AddLiquidity2 {
	nd := &AddLiquidity2{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	nd.AccountMetaSlice[13] = ag_solanago.Meta(ProgramID)
	return nd
}

// SetLiquidityParameter sets the "liquidity_parameter" parameter.
func (inst *AddLiquidity2) SetLiquidityParameter(liquidity_parameter LiquidityParameter) *AddLiquidity2 {
	inst.LiquidityParameter = &liquidity_parameter
	return inst
}

// SetRemainingAccountsInfo sets the "remaining_accounts_info" parameter.
func (inst *AddLiquidity2) SetRemainingAccountsInfo(remaining_accounts_info RemainingAccountsInfo) *AddLiquidity2 {
	inst.RemainingAccountsInfo = &remaining_accounts_info
	return inst
}

// SetPositionAccount sets the "position" account.
func (inst *AddLiquidity2) SetPositionAccount(position ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *AddLiquidity2) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLbPairAccount sets the "lb_pair" account.
func (inst *AddLiquidity2) SetLbPairAccount(lbPair ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(lbPair).WRITE()
	return inst
}

// GetLbPairAccount gets the "lb_pair" account.
func (inst *AddLiquidity2) GetLbPairAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBinArrayBitmapExtensionAccount sets the "bin_array_bitmap_extension" account.
func (inst *AddLiquidity2) SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(binArrayBitmapExtension).WRITE()
	return inst
}

// GetBinArrayBitmapExtensionAccount gets the "bin_array_bitmap_extension" account (optional).
func (inst *AddLiquidity2) GetBinArrayBitmapExtensionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserTokenXAccount sets the "user_token_x" account.
func (inst *AddLiquidity2) SetUserTokenXAccount(userTokenX ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userTokenX).WRITE()
	return inst
}

// GetUserTokenXAccount gets the "user_token_x" account.
func (inst *AddLiquidity2) GetUserTokenXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUserTokenYAccount sets the "user_token_y" account.
func (inst *AddLiquidity2) SetUserTokenYAccount(userTokenY ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(userTokenY).WRITE()
	return inst
}

// GetUserTokenYAccount gets the "user_token_y" account.
func (inst *AddLiquidity2) GetUserTokenYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReserveXAccount sets the "reserve_x" account.
func (inst *AddLiquidity2) SetReserveXAccount(reserveX ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(reserveX).WRITE()
	return inst
}

// GetReserveXAccount gets the "reserve_x" account.
func (inst *AddLiquidity2) GetReserveXAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetReserveYAccount sets the "reserve_y" account.
func (inst *AddLiquidity2) SetReserveYAccount(reserveY ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(reserveY).WRITE()
	return inst
}

// GetReserveYAccount gets the "reserve_y" account.
func (inst *AddLiquidity2) GetReserveYAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenXMintAccount sets the "token_x_mint" account.
func (inst *AddLiquidity2) SetTokenXMintAccount(tokenXMint ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenXMint)
	return inst
}

// GetTokenXMintAccount gets the "token_x_mint" account.
func (inst *AddLiquidity2) GetTokenXMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenYMintAccount sets the "token_y_mint" account.
func (inst *AddLiquidity2) SetTokenYMintAccount(tokenYMint ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenYMint)
	return inst
}

// GetTokenYMintAccount gets the "token_y_mint" account.
func (inst *AddLiquidity2) GetTokenYMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSenderAccount sets the "sender" account.
func (inst *AddLiquidity2) SetSenderAccount(sender ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(sender).SIGNER()
	return inst
}

// GetSenderAccount gets the "sender" account.
func (inst *AddLiquidity2) GetSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenXProgramAccount sets the "token_x_program" account.
func (inst *AddLiquidity2) SetTokenXProgramAccount(tokenXProgram ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenXProgram)
	return inst
}

// GetTokenXProgramAccount gets the "token_x_program" account.
func (inst *AddLiquidity2) GetTokenXProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenYProgramAccount sets the "token_y_program" account.
func (inst *AddLiquidity2) SetTokenYProgramAccount(tokenYProgram ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenYProgram)
	return inst
}

// GetTokenYProgramAccount gets the "token_y_program" account.
func (inst *AddLiquidity2) GetTokenYProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *AddLiquidity2) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *AddLiquidity2) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *AddLiquidity2) SetProgramAccount(program ag_solanago.PublicKey) *AddLiquidity2 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AddLiquidity2) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst *AddLiquidity2) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	inst.AccountMetaSlice = accounts
	return inst.Validate()
}

func (inst *AddLiquidity2) SetRemainingAccounts(metas []*ag_solanago.AccountMeta) *AddLiquidity2 {
	inst.AccountMetaSlice = append(inst.AccountMetaSlice[0:14], metas...)
	return inst
}

func (inst *AddLiquidity2) GetRemainingAccounts() []*ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[14:]
}

func (inst AddLiquidity2) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddLiquidity2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddLiquidity2) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddLiquidity2) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.LiquidityParameter == nil {
			return errors.New("liquidityParameter parameter is not set")
		}
		if inst.RemainingAccountsInfo == nil {
			return errors.New("remainingAccountsInfo parameter is not set")
		}
	}

	if len(inst.AccountMetaSlice) < 14 {
		return errors.New("accounts slice has wrong length: expected 14 accounts")
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LbPair is not set")
		}

		// [2] = BinArrayBitmapExtension is optional

		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserTokenX is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UserTokenY is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReserveX is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ReserveY is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenXMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenYMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Sender is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenXProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenYProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AddLiquidity2) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddLiquidity2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     LiquidityParameter", *inst.LiquidityParameter))
						paramsBranch.Child(ag_format.Param("  RemainingAccountsInfo", *inst.RemainingAccountsInfo))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  position", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   lb_pair", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("bin_array_bitmap_extension", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("              user_token_x", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              user_token_y", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 reserve_x", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                 reserve_y", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("              token_x_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              token_y_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                    sender", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("           token_x_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("           token_y_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("           event_authority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                   program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj AddLiquidity2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LiquidityParameter` param:
	err = encoder.Encode(obj.LiquidityParameter)
	if err != nil {
		return err
	}
	// Serialize `RemainingAccountsInfo` param:
	err = encoder.Encode(obj.RemainingAccountsInfo)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddLiquidity2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LiquidityParameter`:
	err = decoder.Decode(&obj.LiquidityParameter)
	if err != nil {
		return err
	}
	// Deserialize `RemainingAccountsInfo`:
	err = decoder.Decode(&obj.RemainingAccountsInfo)
	if err != nil {
		return err
	}
	return nil
}

// NewAddLiquidity2Instruction declares a new AddLiquidity2 instruction with the provided parameters and accounts.
func NewAddLiquidity2Instruction(
	// Parameters:
	liquidity_parameter LiquidityParameter,
	remaining_accounts_info RemainingAccountsInfo,
	// Accounts:
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	binArrayBitmapExtension ag_solanago.PublicKey,
	userTokenX ag_solanago.PublicKey,
	userTokenY ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	tokenXMint ag_solanago.PublicKey,
	tokenYMint ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	tokenXProgram ag_solanago.PublicKey,
	tokenYProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *AddLiquidity2 {
	return NewAddLiquidity2InstructionBuilder().
		SetLiquidityParameter(liquidity_parameter).
		SetRemainingAccountsInfo(remaining_accounts_info).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension).
		SetUserTokenXAccount(userTokenX).
		SetUserTokenYAccount(userTokenY).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetTokenXMintAccount(tokenXMint).
		SetTokenYMintAccount(tokenYMint).
		SetSenderAccount(sender).
		SetTokenXProgramAccount(tokenXProgram).
		SetTokenYProgramAccount(tokenYProgram).
		SetEventAuthorityAccount(eventAuthority)
}

// NewSimpleAddLiquidity2Instruction declares a new AddLiquidity2 instruction with the provided parameters and accounts.
func NewSimpleAddLiquidity2Instruction(
	// Parameters:
	liquidity_parameter LiquidityParameter,
	remaining_accounts_info RemainingAccountsInfo,
	// Accounts:
	position ag_solanago.PublicKey,
	lbPair ag_solanago.PublicKey,
	binArrayBitmapExtension ag_solanago.PublicKey,
	userTokenX ag_solanago.PublicKey,
	userTokenY ag_solanago.PublicKey,
	reserveX ag_solanago.PublicKey,
	reserveY ag_solanago.PublicKey,
	tokenXMint ag_solanago.PublicKey,
	tokenYMint ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	tokenXProgram ag_solanago.PublicKey,
	tokenYProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey) *AddLiquidity2 {
	return NewAddLiquidity2InstructionBuilder().
		SetLiquidityParameter(liquidity_parameter).
		SetRemainingAccountsInfo(remaining_accounts_info).
		SetPositionAccount(position).
		SetLbPairAccount(lbPair).
		SetBinArrayBitmapExtensionAccount(binArrayBitmapExtension).
		SetUserTokenXAccount(userTokenX).
		SetUserTokenYAccount(userTokenY).
		SetReserveXAccount(reserveX).
		SetReserveYAccount(reserveY).
		SetTokenXMintAccount(tokenXMint).
		SetTokenYMintAccount(tokenYMint).
		SetSenderAccount(sender).
		SetTokenXProgramAccount(tokenXProgram).
		SetTokenYProgramAccount(tokenYProgram).
		SetEventAuthorityAccount(eventAuthority)
}
